calc_pme_in_all_subs <- function(
  
){
  bigsubs = 'shp/big_scale_subs/'
  hsrid = as.data.frame(fread('main_plot_data/fig2/HSRid.csv'))
  hsrid = as.numeric(hsrid$HSRid)
  
  bigsubs = paste0(bigsubs,
                   'region',1:15,'.shp')
  bigsubs = lapply(bigsubs,shapefile)
  
  bigsubs1 = bigsubs[1:6]
  bigsubs2 = bigsubs[7:12]
  bigsubs3 = bigsubs[13:15]
  
  bigsubs1 = do.call('bind',bigsubs1)
  bigsubs2 = do.call('bind',bigsubs2)
  bigsubs3 = do.call('bind',bigsubs3)
  
  # input global_pme
  global_pr = data_management('era5_pr_include_ocean')
  global_eva = data_management('era5_e_include_ocean')
  
  global_pme = global_pr - global_eva
  world = shp_management('world')
  global_pme = mask(global_pme,'world')
  
  shps = list(bigsubs1,bigsubs2,
              bigsubs3)
  i = 1:3
  sub_calc<-function(i){
    tmp1  =crop(global_pme,shps[[i]])
    tmp1 = as.list(tmp1)
    tmp1 = lapply(tmp1,cellStats,mean,na.rm = T)
    
    tmp1 = do.call('c',tmp1)
    
    tmp1 = tmp1[1:174]
    tmp1 = ts(tmp1,start = c(2003,1),
              frequency = 12)
    tmp1 = decompose(tmp1)$trend
    
    tmp1 = tmp1[-which(is.na(tmp1))]
    
    tmp1 = (tmp1-mean(tmp1))/sd(tmp1)
    
    return(tmp1)
  }
  
  pme_subs = lapply(i,sub_calc)
  pme_subs = do.call('cbind',pme_subs)
  
  output = 'output/pme_subs_combine/pmesubs.csv'
  dir.create('output/pme_subs_combine')
  fwrite(pme_subs,output)
  
  
  
  
  
  
  
  
  
  
  
}
figs_covar_pmeato_pme_across_eruasia <- function(
  
){
  # import pmeato 
  input_pmeato = '/media/sdb5/Vapor_projcts/Vapor_tibet/Data/era5_pme_mean/ato/era5_pme_mean.csv'
  input_pmeio = '/media/sdb5/Vapor_projcts/Vapor_tibet/Data/era5_pme_mean/io/era5_pme_mean.csv'
  
  pmeato = as.data.frame(fread(input_pmeato))
  pmeio = as.data.frame(fread(input_pmeio))
  st_fun<-function(x){
    x = x[1:174]
    x = ts(x,start = c(2003,1),frequency = 12)
    x = decompose(x)$trend
    x = x[-which(is.na(x))]
    x = (x - mean(x))/sd(x)
    return(x)
  }
  pmeato = apply(pmeato,2,st_fun)
  pmeio = apply(pmeio,2,st_fun)
  
  # import pme subs
  input_pmesubs = 'output/pme_subs_combine/pmesubs.csv'
  input_twssubs = 'output/tws_subs_combine/twssubs.csv'
  
  pmesubs = as.data.frame(fread(input_pmesubs))
  twssubs = as.data.frame(fread(input_twssubs))
  
  # cor analysis 
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/figs_covar_pmesubs_twssubs.R")
  figs_covar_pmesubs_twssubs(pmesubs,twssubs)
  # pme-ato pme subs
  figs4_covar_cor_pmeato_pmesubs(pmeato,pmesubs)
  
  # pme-io pme subs
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/figs4_covar_cor_pmeio_pmesubs.R")
  figs4_covar_cor_pmeio_pmesubs(pmeio,pmesubs)
  
  # pme-ato tws subs
  figs4_covar_cor_pmeato_twssubs(pmeato,twssubs)

  # pme-io tws subs
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/figs4_covar_cor_pmeio_twssubs.R")
  figs4_covar_cor_pmeio_twssubs(pmeio,twssubs)
  
  
  # pme subs and tws subs 
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/figs_covar_pmesubs_twssubs.R")
  figs_covar_pmesubs_twssubs(pmesubs,twssubs)
  
  
  
  
}
project_tws_in_south_tp12_by_trainonhist_random<-function(
  
){
  dir.create('output_proj_tws')
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/import_index_insource_tibet.R")
  trend_fun_index_cmip6<-function(x){
    x = as.numeric(x)
    loc2020 = length(2003:2020)*12-11
    loc2050 = length(2003:2099)*12
    x = x[loc2020:loc2050]
    xt = ts(x,start = c(2020,1),frequency = 12)
    xt = decompose(xt)$trend
    naid = which(is.na(xt))
    xt = xt[-naid]
    
    xt = (xt - mean(xt))/sd(xt)
    return(xt)
  }
  trend_fun_index_cmip6_2003<-function(x){
    x = as.numeric(x)
    #x = x[loc2020:loc2050]
    xt = ts(x,start = c(2003,1),frequency = 12)
    xt = decompose(xt)$trend
    
    naid = which(is.na(xt))
    xt = xt[-naid]
    
    return(xt)
  }
  stand_fun_index_cmip6_2003<-function(x){
    #xt = (x - mean(x))/sd(x)
    xt = (x - mean_pmeato3)/sd_pmeato3
    return(xt)
  }
  trend_fun_index_era5<-function(x){
    x = as.numeric(x)
    xt = ts(x,start = c(2003,1),frequency = 12)
    xt = decompose(xt)$trend
    
    naid = which(is.na(xt))
    xt = xt[-naid]
    return(xt)
  }
  standard_fun_index_era5 <-function(x){
    xs = (x - mean(x))/sd(x)
    return(xs)
  }
  standard_fun_index_tws <-function(x){
    xs = (x)/sd(x)
    return(xs)
  }
  # import data section
  
  # input index tws trend items in tibet based on era5 
  twsdf = import_index_insource_tibet(var = 'tws_tibet')  
  meatws = apply(twsdf,2,mean)
  sdtws = apply(twsdf,2,sd)
  
  twsdf = apply(twsdf,2,standard_fun_index_tws)
  twsdf = twsdf[,1:2]
  
  # input and choose pmes based on the relationships
  pmeato1 = import_index_insource_tibet(var = 'pme_mean',region = 'ato')
  pmeio1 = import_index_insource_tibet(var = 'pme_mean',region = 'io')
  
  pmeato = pmeato1[1:174,]
  pmeio = pmeio1[1:174,]
  
  pmeato = apply(pmeato,2,trend_fun_index_era5)
  mean_pmeato3 = mean(pmeato[,3])
  sd_pmeato3 = sd(pmeato[,3])
  
  pmeio = apply(pmeio,2,trend_fun_index_era5)
  pmeato = apply(pmeato,2,standard_fun_index_era5)
  pmeio = apply(pmeio,2,standard_fun_index_era5)
  
  pmeato = pmeato[,2:3]
  pmeio = pmeio[,4]
  
  # import cmip6 data
  #############
  pmeato_ori3 = pmeato[,2]
  
  pmeato_cmip6 = import_index_insource_tibet(var = 'pme_cmip6',
                                             region = 'ato')
  # import cmip6 index
  pmeato256 = pmeato_cmip6[[1]]
  pmeato3_256 = pmeato256[[2]]
  
  pmeato585 = pmeato_cmip6[[2]]
  pmeato3_585 = pmeato585[[2]]
  
  models = colnames(pmeato3_256)
  
  #colnames(pmeato_ori3) = models
  models = c(models,'Ensemble')
  models <<- models
  #############
  pmeato3_256_ense = apply(pmeato3_256,1,mean)
  pmeato3_585_ense = apply(pmeato3_585,1,mean)
  
  pmeato3_256 = as.data.frame(pmeato3_256)
  pmeato3_585 = as.data.frame(pmeato3_585)
  
  pmeato3_256$Ensemble = pmeato3_256_ense
  pmeato3_585$Ensemble = pmeato3_585_ense
  
  pmeato3_256 = apply(pmeato3_256,2,trend_fun_index_cmip6_2003)
  pmeato3_585 = apply(pmeato3_585,2,trend_fun_index_cmip6_2003)
  pmeato3_256 = apply(pmeato3_256,2,stand_fun_index_cmip6_2003)
  pmeato3_585 = apply(pmeato3_585,2,stand_fun_index_cmip6_2003)
  
  i = 1:9
  #pmeato_ori3 = pmeato[,2]
  
  pmeato_ori3 <<- pmeato_ori3
  
  
  sub_trains_rfmodel_subs1_256 <-function(i){
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/cnn_model_predict_tws.R")
    df = data.frame(
      tws = twsdf[,1],
      pmeato3 = pmeato_ori3
    )
    df_project = data.frame(
      #pmeato2 = pmeato2_256[,i],
      #pmeato3 = as.numeric(pmeato3_256[175:1152,i])
      pmeato3 = as.numeric(pmeato3_256[175:1152,i])
      #pmeato3neg = -1*as.numeric(pmeato3_256[175:1152,i])
    )
    
    ret = cnn_model_predict_tws(df,df_project,
                                models[i],
                                mode = 'ssp245',
                                region = 'region1')
    return(ret)
  }
  
  
}

















annual_contour_line_twsneg_intibet<-function(
  
){
  source('/home/share/R_project/xinjiang_vapor/data_management.R')
  source('/home/share/R_project/xinjiang_vapor/shp_management.R')
  # import shp 
  tibet = shp_management('tibet')
  world = shp_management('world')
  # import grace TWS
  tws = data_management('grace')
  
  
  
  ex_tibet = extent(tibet)
  minlat = ex_tibet[3]
  maxlat = ex_tibet[4]
  minlong = ex_tibet[1]
  maxlong = ex_tibet[2]
  
  input_shps = paste0('shp/big_scale_subs/','region',1:15)
  clusters = lapply(input_shps,shapefile)
  cluster_combine = do.call('bind',clusters)
  
  ex_box = extent(-20,maxlong+50,minlat-20,maxlat+20)
  tws = crop(tws,ex_box)
  tws = raster::mask(tws,world)
  
  twsdf = as.data.frame(tws,xy = T)
  naid = which(is.na(twsdf[,3]))
  twsdf = twsdf[-naid,]
  
  loc = twsdf[,1:2]
  colnames(loc) = c('long','lat')
  twsdf = twsdf[,-c(1,2)]
  
  calc_month_mean <-function(x){
    x = c(x,rep(NA,6))
    xm= matrix(x,nrow = 12)
    xmean = apply(xm,1,mean,na.rm = T)
    return(xmean)
  }
  
  twsdf_mon_mean = apply(twsdf,1,calc_month_mean)
  twsdf_mon_mean = t(twsdf_mon_mean)
  colnames(twsdf_mon_mean) = month.abb
  twsdf_annual_sum = apply(twsdf_mon_mean,1,sum)
  
  
  ann_sum_twsdf = data.frame(loc,tws_anoma_sum = twsdf_annual_sum)
  dfm = reshape2::melt(ann_sum_twsdf,c('long','lat'))
  
  negid = which(dfm$value<=0)
  dfm_neg = dfm[negid,]
  
  world_crop = crop(world,ex_box)
  
  dfm_neg$levels = cut(dfm_neg$value,
                       breaks = c(-223,-100,seq(-50,0,10)))
  
  library(data.table)
  traj_df = '/media/sdb5/Vapor_projcts/Vapor_tibet/whole_time_traj/whole_time_traj.csv'
  traj_df = fread(traj_df)
  traj_df = as.data.frame(traj_df)
  
  calc_sum_by_annu <-function(x){
    x = c(x,rep(NA,6))
    xm= matrix(x,nrow = 12)
    xm = xm[,-ncol(xm)]
    xmean = apply(xm,2,sum,na.rm = T)
    return(xmean)
  }
  
  twsdf2 = raster::mask(crop(tws,tibet),tibet)
  twsdf2 = as.data.frame(twsdf2,xy  =T)
  naid = which(is.na(twsdf2[,3]))
  twsdf2 = twsdf2[-naid,]
  
  loc2 = twsdf2[,1:2]
  twsdf2 = twsdf2[,-c(1,2)]
  
  colnames(loc2) = c('long','lat')
  sum_by_annu = apply(twsdf2,1,calc_sum_by_annu)
  sum_by_annu = t(sum_by_annu)
  colnames(sum_by_annu) = paste0('year',2003:2016)
  df_sum_annu = data.frame(loc2,sum_by_annu)
  dfm2 = reshape2::melt(df_sum_annu,c('long','lat'))
  dfm2_neg = dfm2[which(dfm2$value<=0 ),]
  
  dfm2_neg$levels = cut(dfm2_neg$value,
                        breaks = c(-670,-200,seq(-100,0,20)))
  
  
  dfm2_neg$type = dfm2_neg$variable
  
  fontsize = 14
  text_theme = theme(
    axis.text = element_text(size = fontsize),
    strip.text = element_text(size = fontsize),
    legend.text = element_text(size = fontsize),
    axis.title = element_text(size = fontsize,face = 'bold'),
    #strip.title = element_text(size = fontsize,face = 'bold'),
    legend.title = element_text(size = fontsize,face = 'bold'),
    legend.position = 'bottom'
  )
  
  
  type = paste0('year',2003:2016)
  contourdf = list()
  for(i in 1:14){
    i = 10
    tmpid = which(dfm2_neg$type == type[i])
    tmpdf = dfm2_neg[tmpid,]
    tmpdf = tmpdf[,c(1,2,4)]
    coordinates(tmpdf) = ~long + lat
    gridded(tmpdf) = T
    tmpras = raster(tmpdf)
    plot(tmpras)
    tmpras = rasterToPolygons(tmpras)
    output_shp = dir.create('shp/twsneg_border')
    output_shp = paste0('shp/twsneg_border/twsneg_border.shp')
    tmpras = shapefile(tmpras,output_shp,overwrite = T)
    
    tmpras = st_read(output_shp)
    tmpras = tmpras %>% group_by()  %>% st_union()
    st_write(tmpras,output_shp,append = T,overwrite = T)
    #shapefile(tmpras,output_shp,overwrite = T)
    tmpras = shapefile(output_shp)
    contourdf[[i]] = tmpras
    
  }
  
  
  library(RColorBrewer)
  library(ggplot2)
  lincolor = colorRampPalette(brewer.pal(9,'Spectral'))(20)
  idfil = which(traj_df[,4]>minlong)
  traj_df_fil = traj_df[idfil,]
  world_crop = crop(world,ex_box)
  p_ann_sum_neg = ggplot()+
    geom_tile(data = dfm_neg,aes(x = long,y = lat,fill = levels))+
    geom_polygon(data = world_crop,aes(x = long,y = lat,group = group ),
                 size = 1,color = 'black',fill = 'transparent')+
    geom_polygon(data = tibet,aes(x = long,y = lat,group = group ),
                 size = 1,color = 'black',fill = 'transparent')+
    geom_contour(data = contourdf[[7]],
                 aes(x = long,y = lat,z=value),
                 color = 'blue',size = 1,bins = 4)+
    #geom_path(data = traj_df,aes(x = long,y = lat,
    #                             group = routeid,
    #                             color = factor(routeid)),
    #          size = 1,
    #          arrow=arrow(angle=30,length=unit(0.11,"inches"),
    #                      type="closed"))+
    #scale_fill_gradientn(colors = mycolor)+
    #scale_fill_manual(values = fillcolor)+
    scale_color_manual(values = lincolor)+
    scale_fill_brewer(palette = 'Spectral')+
    theme_bw()
  
  p_ann_sum_neg
  d = ggplot()+
    geom_polygon(data = tibet,aes(x = long,y = lat,group = group ),
                 size = 1,color = 'black',fill = 'transparent')+
    
    geom_tile(data = contourdf[[7]],
                 aes(x = long,y = lat,fill=value))
  
  
}
as_shp_multiple <- function(
  
){
  setwd("/media/sdb5/Vapor_projcts/Vapor_tibet")
  library(raster)
  library(ncdf4)
  mounts = 'Data/GlobalMountainsK3Classes/k3classes.tif'
  mounts = stack(mounts)
  
  source("/home/share/R_project/xinjiang_vapor/shp_management.R")
  asia = shp_management('land','as')
  ex = extent(asia)
  ex = extent(20,ex[2],ex[3],ex[4])
  asia = crop(asia,ex)
  
  mounts = crop(mounts,asia)
  filt = mounts %in% 31:32
  high_mouns = mask(mounts,filt,maskvalue = 0)
  
  tibet = shp_management('tibet')
  #20,115,0,56
  ex1 = seq(20,115,10)
  ex1s = ex1[1:9]
  ex1e = ex1[2:10]
  ex2 = seq(0,60,10)
  ex2s = ex2[1:6]
  ex2e = ex2[2:7]
  
  tmpli2 = list()
  for(i in 1:9){
    tmp1 = ex1s[i]
    tmp2 = ex1e[i]
    tmpli = list()
    for(j in 1:6){
      tmp3 = ex2s[j]
      tmp4 = ex2e[j]
      
      tmpex = extent(tmp1,tmp2,tmp3,tmp4)
      tmpli = c(tmpli,tmpex)
    }
    #tmpli = tmpli[[-1]]
    tmpli2 = c(tmpli2,tmpli)
  }
  #tmpli2 = tmpli2[[-1]]
  
  for(i in 1:length(tmpli2)){
    tmpex = tmpli2[[i]]
    tmpmou = crop(high_mouns,tmpex)
    
    system.time(tmpshp <- rasterToPolygons(tmpmou,
                                           fun = function(x){x>30}))
    
    tmpshp = st_as_sf(tmpshp)
    tmpshp = tmpshp %>% group_by() %>% st_union()
    
    
  }
  
  
}
bias_correct_tws_projtws<-function(
  twsdf,projdf
){
  
  twsdf = as.data.frame(twsdf)
  i = 1:ncol(projdf)
  
  sub_cor <-function(i){
    tmp = projdf[,i]
    tmphis = tmp[1:162]
    tmptws = twsdf[,1]
    
    tmphis = c(rep(NA,6),tmphis)
    tmptws = c(rep(NA,6),tmptws)
    
    tmphism = matrix(tmphis,nrow = 12)
    tmptwsm = matrix(tmptws,nrow = 12)
    
    tmphism = apply(tmphism,1,mean,na.rm = T)
    tmptwsm = apply(tmptwsm,1,mean,na.rm = T)
    
    diff = tmptwsm - tmphism
    
    
    diffs = rep(diff,97)
    diffs = diffs[-c(1:6,1159:1164)]
    
    tmp = tmp + diffs
    return(tmp)
  }
    
  
  proj_cor = do.call(cbind,lapply(i,sub_cor))
  
}
bias_correction_cmip6_index_withlinear<- function(
  pmeato,pmeato_cmip6
){
  # import era5 index
  pmeato3 = pmeato[,3]
  # import cmip6 index
  pmeato256 = pmeato_cmip6[[1]]
  pmeato3_256 = pmeato256[[2]]
  
  pmeato585 = pmeato_cmip6[[2]]
  pmeato3_585 = pmeato585[[2]]
  
  output = 'output/ori_pmeato3_cmip6'
  dir.create(output)
  output1 = paste0(output,'/','pmeato3_245.csv')
  output2 = paste0(output,'/','pmeato3_585.csv')
  fwrite(pmeato3_256,output1)
  fwrite(pmeato3_585,output2)
  
  
  
  i = 1:ncol(pmeato3_256)
  
  
  
  
  sub_bias_correction_fun245<-function(i){
    ori_mat = matrix(pmeato3,nrow = 12)
    ori_mon = apply(ori_mat,1,mean)
    
    sub_linear_regression245<-function(i){
      tmpori = pmeato3
      trainid = 1:153
      testid = 153:180
      
      train_ori = tmpori[trainid]
      test_ori = tmpori[testid]
      
      tmpcmip6 = pmeato3_256[,i]
      train_cmip6 = tmpcmip6[trainid]
      test_cmip6 = tmpcmip6[testid]
      
      tmpdf = data.frame(pmeori = train_ori,
                         pmecmip6 = train_cmip6)
      lm1 = lm(pmeori~.,data = tmpdf)
      
      return(lm1)
    }
    
    model = sub_linear_regression245(i)
    
    tmpcmip6 = pmeato3_256[1:180,i]
    tmpcmip6_fut = pmeato3_256[1:1164,i]
    
    tmpcmip6 = data.frame(pmecmip6 = tmpcmip6)
    tmpcmip6_fut = data.frame(pmecmip6 = tmpcmip6_fut)
    
    tmpcmip6 = predict(model,tmpcmip6)
    tmpcmip6_fut = predict(model,tmpcmip6_fut)
    
    cmip6_mat = matrix(tmpcmip6,nrow = 12)
    cmip6_mon = apply(cmip6_mat,1,mean)
    
    diff = ori_mon - cmip6_mon
    
    time_hist = length(tmpcmip6)/12
    time_fut = length(tmpcmip6_fut)/12
    
    diff_hist = rep(diff,time_hist)
    diff_fut = rep(diff,time_fut)
    
    tmpcmip6_cor = tmpcmip6 + diff_hist
    tmpcmip6_fut_cor = tmpcmip6_fut + diff_fut
    
    #loc_2020 = length(2018:2020)*12-11
    #loc_2099 = length(2018:2099)*12
    
    #return(tmpcmip6_fut_cor[loc_2020:loc_2099])
    return(tmpcmip6_fut_cor)
  }
  sub_bias_correction_fun585<-function(i){
    ori_mat = matrix(pmeato3,nrow = 12)
    ori_mon = apply(ori_mat,1,mean)
    
    tmpcmip6 = pmeato3_585[1:180,i]
    tmpcmip6_fut = pmeato3_585[1:1164,i]
    
    sub_linear_regression585<-function(i){
      tmpori = pmeato3
      trainid = 1:153
      testid = 153:180
      
      train_ori = tmpori[trainid]
      test_ori = tmpori[testid]
      
      tmpcmip6 = pmeato3_585[,i]
      train_cmip6 = tmpcmip6[trainid]
      test_cmip6 = tmpcmip6[testid]
      
      tmpdf = data.frame(pmeori = train_ori,
                         pmecmip6 = train_cmip6)
      lm1 = lm(pmeori~.,data = tmpdf)
      
      return(lm1)
    }
    
    
    model = sub_linear_regression585(i)
    
    tmpcmip6 = data.frame(pmecmip6 = tmpcmip6)
    tmpcmip6_fut = data.frame(pmecmip6 = tmpcmip6_fut)
    
    tmpcmip6 = predict(model,tmpcmip6)
    tmpcmip6_fut = predict(model,tmpcmip6_fut)
    
    cmip6_mat = matrix(tmpcmip6,nrow = 12)
    cmip6_mon = apply(cmip6_mat,1,mean)
    
    diff = ori_mon - cmip6_mon
    
    time_hist = length(tmpcmip6)/12
    time_fut = length(tmpcmip6_fut)/12
    
    diff_hist = rep(diff,time_hist)
    diff_fut = rep(diff,time_fut)
    
    tmpcmip6_cor = tmpcmip6 + diff_hist
    tmpcmip6_fut_cor = tmpcmip6_fut + diff_fut
    
    #loc_2020 = length(2018:2020)*12-11
    #loc_2099 = length(2018:2099)*12
    return(tmpcmip6_fut_cor)
    #return(tmpcmip6_fut_cor[loc_2020:loc_2099])
  }
  
  pmeato3_256_correction = lapply(i,sub_bias_correction_fun245)
  pmeato3_585_correction = lapply(i,sub_bias_correction_fun585)
  
  pmeato3_256_correction = do.call('cbind',pmeato3_256_correction)
  pmeato3_585_correction = do.call('cbind',
                                   pmeato3_585_correction)
  
  colnames(pmeato3_256_correction) = colnames(pmeato3_256)
  colnames(pmeato3_585_correction) = colnames(pmeato3_585)
  
  return(list(pmeato3_256_correction,
              pmeato3_585_correction))
  
  
  
  
  
  
  
  
  
}
bias_correction_cmip6_index<- function(
  pmeato,pmeato_cmip6
){
  # import era5 index
  pmeato3 = pmeato[,3]
  # import cmip6 index
  pmeato256 = pmeato_cmip6[[1]]
  pmeato3_256 = pmeato256[[2]]
  
  pmeato585 = pmeato_cmip6[[2]]
  pmeato3_585 = pmeato585[[2]]
  
  output = 'output/ori_pmeato3_cmip6'
  dir.create(output)
  output1 = paste0(output,'/','pmeato3_245.csv')
  output2 = paste0(output,'/','pmeato3_585.csv')
  fwrite(pmeato3_256,output1)
  fwrite(pmeato3_585,output2)
  
  
  
  i = 1:ncol(pmeato3_256)
  
  sub_bias_correction_fun245<-function(i){
    ori_mat = matrix(pmeato3,nrow = 12)
    ori_mon = apply(ori_mat,1,mean)
    
    tmpcmip6 = pmeato3_256[1:180,i]
    tmpcmip6_fut = pmeato3_256[1:1164,i]
    cmip6_mat = matrix(tmpcmip6,nrow = 12)
    cmip6_mon = apply(cmip6_mat,1,mean)
    
    diff = ori_mon - cmip6_mon
    
    time_hist = length(tmpcmip6)/12
    time_fut = length(tmpcmip6_fut)/12
    
    diff_hist = rep(diff,time_hist)
    diff_fut = rep(diff,time_fut)
    
    tmpcmip6_cor = tmpcmip6 + diff_hist
    tmpcmip6_fut_cor = tmpcmip6_fut + diff_fut
    
    #loc_2020 = length(2018:2020)*12-11
    #loc_2099 = length(2018:2099)*12
    
    #return(tmpcmip6_fut_cor[loc_2020:loc_2099])
    return(tmpcmip6_fut_cor)
  }
  sub_bias_correction_fun585<-function(i){
    ori_mat = matrix(pmeato3,nrow = 12)
    ori_mon = apply(ori_mat,1,mean)
    
    tmpcmip6 = pmeato3_585[1:180,i]
    tmpcmip6_fut = pmeato3_585[1:1164,i]
    cmip6_mat = matrix(tmpcmip6,nrow = 12)
    cmip6_mon = apply(cmip6_mat,1,mean)
    
    diff = ori_mon - cmip6_mon
    
    time_hist = length(tmpcmip6)/12
    time_fut = length(tmpcmip6_fut)/12
    
    diff_hist = rep(diff,time_hist)
    diff_fut = rep(diff,time_fut)
    
    tmpcmip6_cor = tmpcmip6 + diff_hist
    tmpcmip6_fut_cor = tmpcmip6_fut + diff_fut
    
    #loc_2020 = length(2018:2020)*12-11
    #loc_2099 = length(2018:2099)*12
    return(tmpcmip6_fut_cor)
    #return(tmpcmip6_fut_cor[loc_2020:loc_2099])
  }
  
  pmeato3_256_correction = lapply(i,sub_bias_correction_fun245)
  pmeato3_585_correction = lapply(i,sub_bias_correction_fun585)
  
  pmeato3_256_correction = do.call('cbind',pmeato3_256_correction)
  pmeato3_585_correction = do.call('cbind',
                                   pmeato3_585_correction)
  
  colnames(pmeato3_256_correction) = colnames(pmeato3_256)
  colnames(pmeato3_585_correction) = colnames(pmeato3_585)
  
  return(list(pmeato3_256_correction,
              pmeato3_585_correction))
    
  
  

  
  
  

  
}
bias_correction_cmip6_index2<- function(
  pmeato_ori3,
  pmeato_cmip6
){
  # import era5 index
  
  i = 1:ncol(pmeato_cmip6)
  
  sub_bias_correction_fun<-function(i){
    ori = c(rep(NA,6),pmeato_ori3)
    ori_mat = matrix(ori,nrow = 12)
    ori_mon = apply(ori_mat,1,mean,na.rm = T)
    
    tmpcmip6 = pmeato_cmip6[1:162,i]
    tmpcmip6 = c(rep(NA,6),tmpcmip6)
    
    tmpcmip6_fut = pmeato_cmip6[1:1152,i]
    cmip6_mat = matrix(tmpcmip6,nrow = 12)
    cmip6_mon = apply(cmip6_mat,1,mean,na.rm= T)
    
    diff = ori_mon - cmip6_mon
    
    time_hist = length(tmpcmip6)/12
    time_fut = length(tmpcmip6_fut)/12
    
    diff_hist = rep(diff,time_hist)
    diff_fut = rep(diff,time_fut)
    
    tmpcmip6_cor = tmpcmip6 + diff_hist
    tmpcmip6_fut_cor = tmpcmip6_fut + diff_fut
    
    #loc_2020 = length(2018:2020)*12-11
    #loc_2099 = length(2018:2099)*12
    
    #return(tmpcmip6_fut_cor[loc_2020:loc_2099])
    return(tmpcmip6_fut_cor)
  }
  
  pmeato3_correction = lapply(i,sub_bias_correction_fun)
  
  pmeato3_correction = do.call('cbind',pmeato3_correction)
  
  colnames(pmeato3_correction) = colnames(pmeato_cmip6)
  
  return(pmeato3_correction)
  
  
  
  
  
  
  
  
  
}
cal_decraing_area_sanjiangyuan<-function(
  d1,
  d2,
  borderdf,
  tibet,
  northdis,
  sanjiangyuan
){
  
  d2_p = d2
  coordinates(d2_p) = ~long+lat
  d2l = as(d2_p,"SpatialLines")
  
  
  i = 2:nrow(d1)
  for( i in i){
    d1_p = d1[1:i,]
    
    coordinates(d1_p) = ~long+lat
    d1l = as(d1_p,"SpatialLines")
    
    cond = gIntersects(d1l,d2l)
    if(cond){
      joint_p = gIntersection(d1l,d2l)
      break
    }
  }
  
  if(cond == T){
    joint_p = as.data.frame(joint_p,xy = T)
    joint_p = joint_p[1,]
    li1 = d1[1:(i-1),]
    
    
    jp1 = SpatialPoints(joint_p)
    for(i in 2:nrow(d2)){
      d2_p = d2[1:i,]
      
      coordinates(d2_p) = ~long+lat
      d2l = as(d2_p,"SpatialLines")
      
      cond = distance(jp1,d2l,lonlat = T)
      if(cond < 0.1){
        break
      }
    }
    
    li2 = d2[i:nrow(d2),]
    
    colnames(joint_p) = c('long','lat')
    li1li2_outter = rbind(li1[,1:2],joint_p,li2[,1:2])
  }else{
    li1li2_outter = rbind(d1,d2)
  }
  
  lin = li1li2_outter
  lin1 = lin[which(lin$long <= 100),]
  lin2 = lin[which(lin$long >= 100),]
  lin1 = lin1[order(lin1$long,decreasing = T),]
  lin2 = lin2[order(lin2$lat,decreasing = F),]
  
  lin = rbind(lin2,lin1)
  lin1 = lin[1,1:2]
  lin2 = lin[nrow(lin),1:2]
  
  tibetdf = fortify(tibet)
  
  tibetdf = tibetdf[,1:2]
  tibetdf$long = rev(tibetdf$long)
  tibetdf$lat = rev(tibetdf$lat)
  
  dis2 = pointDistance(lin2,tibetdf,lonlat = T)
  dis1 = pointDistance(lin1,tibetdf,longlat = T)
  
  id2 = which(dis2 == min(dis2))
  id1 = which(dis1 == min(dis1))
  
  partid1 = 1:(id1)
  partid2 = id2:nrow(tibetdf)
  tibetdf1 = tibetdf[partid1,1:2]
 
  
  tibetdf3 = lin[,1:2]
  
  tibetdf = rbind(tibetdf1,tibetdf3)
  
  plot(tibetdf)
  
  coordinates(tibetdf) = ~long+lat
  
  
  poly = Polygon(tibetdf)
  polys = Polygons(list(poly),1)
  spolys = SpatialPolygons(list(polys))
  
  crs(spolys) = crs(sanjiangyuan)
  cond2 = gIntersects(spolys,sanjiangyuan)
  
  
  
  if(cond2 == T){
    
    ret1 <-  try(overarea <-rgeos::gIntersection(spgeom1 =spolys,
                                   spgeom2 = sanjiangyuan),
                 silent = T)
    if(class(ret1) == 'try-error'){
      tmpshp = sanjiangyuan - spolys
      plot(tmpshp)
      overarea = area(tmpshp)
      overarea = overarea /10^10
      overarea = area(sanjiangyuan)/10^10 -overarea
    }else {
      overarea = area(overarea)/10^10
    }
    
    
  }else{
    overarea = 0
  }
  
  
  ret_area = overarea
  return(ret_area)
}











cal_increasing_area<-function(
  d1,
  d2,
  borderdf,
  tibet,
  northdis
){
  
  d2_p = d2
  coordinates(d2_p) = ~long+lat
  d2l = as(d2_p,"SpatialLines")
  

  i = 2:nrow(d1)
  for( i in i){
    d1_p = d1[1:i,]
    
    coordinates(d1_p) = ~long+lat
    d1l = as(d1_p,"SpatialLines")
    
    cond = gIntersects(d1l,d2l)
    if(cond){
      joint_p = gIntersection(d1l,d2l)
      break
    }
  }
  
  if(cond == T){
    joint_p = as.data.frame(joint_p,xy = T)
    joint_p = joint_p[1,]
    li1 = d1[1:(i-1),]
    
    
    jp1 = SpatialPoints(joint_p)
    for(i in 2:nrow(d2)){
      d2_p = d2[1:i,]
      
      coordinates(d2_p) = ~long+lat
      d2l = as(d2_p,"SpatialLines")
      
      cond = distance(jp1,d2l,lonlat = T)
      if(cond < 0.1){
        break
      }
    }
    
    li2 = d2[i:nrow(d2),]
    
    colnames(joint_p) = c('long','lat')
    li1li2_outter = rbind(li1[,1:2],joint_p,li2[,1:2])
  }else{
    li1li2_outter = rbind(d1,d2)
  }
  
  
  #find anchor full tibet
  
  b2 = borderdf[,1:2]
  sid = order(b2$long)
  b2 = b2[sid,]
  
  b22 = b2[133:nrow(b2),]
  b22id = order(b22$lat,decreasing = T)
  b22 = b22[b22id,]
  
  b2 = b2[-c(133:nrow(b2)),]
  
  b2 = rbind(b2,b22)
  
  minli1li2 = min(li1li2_outter$long)
  minlongb = min(b2$long)
  if(minlongb>minli1li2){
    largeid = which(li1li2_outter > minlongb)
    li1li2_outter = li1li2_outter[largeid,]
  }
  
  lp1 = li1li2_outter[1,1:2]
  lp2 = li1li2_outter[2,1:2]
  lp3 = data.frame(long = (lp1[,1]+lp2[,1])/2,
                   lat = (lp1[,2]+lp2[,2])/2)
  
  outtell = mask_points_by_shp(lp3,tibet)
  if(nrow(outtell)==0){
    li1li2_outter = li1li2_outter[-1,]
  }
  
  
  
  tibetbor = fortify(tibet)[,1:2]
  colnames(tibetbor) = c('long','lat')
  
  if(northdis<=1){
    anc1 = b2[1,]
    anc2 = b2[nrow(b2),]
    anc3 = li1li2_outter[nrow(li1li2_outter),]
    anc4 = li1li2_outter[1,]
    
    eastb = which(tibetbor$long >= anc1$long &
                    tibetbor$long <= anc4$long &
                    tibetbor$lat >= anc4$lat &
                    tibetbor$lat <= anc1$lat)
    eastb = tibetbor[eastb,]
    
   
  }else if(northdis <=2 &northdis>1){
    anc1 = b2[1,]
    anc2 = b2[nrow(b2),]
    anc3 = li1li2_outter[nrow(li1li2_outter),]
    anc4 = li1li2_outter[6,]
    
    eastb = which(tibetbor$long >= anc1$long &
                    tibetbor$long <= anc4$long &
                    tibetbor$lat >= anc4$lat &
                    tibetbor$lat <= anc1$lat)
    eastb = tibetbor[eastb,]
    
    westb = which(tibetbor$long >= anc2$long &
                    tibetbor$long <= anc3$long &
                    tibetbor$lat >= anc2$lat &
                    tibetbor$lat <= anc3$lat)
    westb = tibetbor[westb,]
    
  }else if(northdis >2 & northdis <=7){
    anc1 = b2[1,]
    anc2 = b2[nrow(b2),]
    anc3 = li1li2_outter[nrow(li1li2_outter),]
    anc4 = li1li2_outter[1,]
    
    eastb = which(tibetbor$long >= anc1$long &
                    tibetbor$long <= anc4$long &
                    tibetbor$lat >= 36 &
                    tibetbor$lat <= anc1$lat)
    eastb = tibetbor[eastb,]
    
    westb = which(tibetbor$long >= anc2$long &
                    #tibetbor$long <= anc3$long &
                    tibetbor$lat >= anc2$lat &
                    tibetbor$lat <= anc3$lat)
    westb = tibetbor[westb,]
  }
  
  eastid = order(eastb$long,decreasing = T)
  eastb = eastb[eastid,]
  
  if(northdis>1){
    westid = order(westb$lat,decreasing = F)
    westb = westb[westid,]
  }
  
  
  
  
  #return(li1li2_outter)
  
  b1 = borderdf[,1:2]
  sid = order(b1$long)
  b1 = b1[sid,]
  
  
  
  if(northdis <=1){
    minlat = min(li1li2_outter$lat)
    minlatid = which(b1$lat >= minlat)
    b1 = b1[minlatid,]
  }

  b12 = b1[133:nrow(b1),]
  b12id = order(b12$lat,decreasing = T)
  b12 = b12[b12id,]
  
  b1 = b1[-c(133:nrow(b1)),]
  
  b1 = rbind(b1,b12)
  
  lirev = li1li2_outter
  lirev$long = rev(lirev$long)
  lirev$lat = rev(lirev$lat)
  
  if(nrow(lirev)>30){
    lirev2 = lirev[1:30,]
    lirev = lirev[-c(1:30),]
    lirev2 = lirev2[order(lirev2$lat,decreasing = F),]
    
    lirev = rbind(lirev2,lirev)
  }
 
  
  if(northdis>1){
    lirev = lirev[order(lirev$long,decreasing = T),]
  }
  
  
  if(northdis <=1){
    if(min(lirev$lat)<30.28){
      id1 = which(lirev$lat >=30.28)
      id2 = which(lirev$lat < 30.28)
      lirev1 = lirev[id1,]
      lirev2 = lirev[id2,]
      
      lirev1 = lirev1[order(lirev1$long,decreasing = T),]
      lirev2 = lirev2[order(lirev2$lat,decreasing = F),]
      
      lirev = rbind(lirev2,lirev1)
    }else{
      lirev = lirev[order(lirev$long,decreasing = T),]
    }
    
    polypoints = rbind(b1[,1:2],lirev[,1:2],eastb)
  }else{
    if(min(lirev$lat) < 30.28){
      id1 = which(lirev$lat >=30.28)
      id2 = which(lirev$lat < 30.28)
      lirev1 = lirev[id1,]
      lirev2 = lirev[id2,]
      
      lirev1 = lirev1[order(lirev1$long,decreasing = T),]
      lirev2 = lirev2[order(lirev2$lat,decreasing = F),]
      
      lirev = rbind(lirev2,lirev1)
    }else{
      lirev = lirev[order(lirev$long,decreasing = T),]
    }
    polypoints = rbind(b1[,1:2],westb,lirev[,1:2],eastb)
  }
  
  
  poly = Polygon(polypoints)
  polys = Polygons(list(poly),1)
  spolys = SpatialPolygons(list(polys))

  #plot(spolys)
  ret_area = area(spolys)/10^10
  return(ret_area)
}











cal_overarea_proj_real2020_2021 <- function(
  
){
  
  input_histtws = 'output/evalute_proj_north_border_2020_2021/rast_tws.csv'
  tws = as.data.frame(fread(input_histtws))
  
  tws1 = tws[which(tws$variable == 'y2020'),]
  coordinates(tws1) = ~long+lat
  gridded(tws1) = T
  tws1 = raster(tws1)
  tws1_shp = rasterToPolygons(tws1)
  
  dir.create('output/tmp_shp_tws_2020_2021')
  shapefile(tws1_shp,'output/tmp_shp_tws_2020_2021/tmp1.shp',
            overwrite = T)
  tws1_shp = st_read('output/tmp_shp_tws_2020_2021/tmp1.shp')
  tws1_shp = tws1_shp %>% group_by() %>% st_union()
  
  dir.create('output/neg_shps_tws_2020_2021')
  st_write(tws1_shp,'output/neg_shps_tws_2020_2021/year2020.shp',
           append = F)
  
  tws1 = tws[which(tws$variable == 'y2021'),]
  coordinates(tws1) = ~long+lat
  gridded(tws1) = T
  tws1 = raster(tws1)
  tws1_shp = rasterToPolygons(tws1)
  
  dir.create('output/tmp_shp_tws_2020_2021')
  shapefile(tws1_shp,'output/tmp_shp_tws_2020_2021/tmp1.shp',
            overwrite = T)
  tws1_shp = st_read('output/tmp_shp_tws_2020_2021/tmp1.shp')
  tws1_shp = tws1_shp %>% group_by() %>% st_union()
  
  dir.create('output/neg_shps_tws_2020_2021')
  st_write(tws1_shp,'output/neg_shps_tws_2020_2021/year2021.shp',
           append = F)
  
  negshps_by_year = lapply(list.files('output/neg_shps_tws_2020_2021',
                                      full.names = T,
                                      pattern = '*.shp$'),
                           shapefile)
  
  negshps_fut = negshps_by_year[1:2]
  
  years = 2020:2021
  input_projborder = 'output/evalute_proj_north_border_2020_2021/'
  input_proj245 = paste0(input_projborder,'/proj_border_ssp245_',years)
  input_proj585 = paste0(input_projborder,'/proj_border_ssp585_',years)
  
  input = c(input_proj245,input_proj585)
  
  tibet = shp_management('tibet')
  
  tibet_points = fortify(tibet)[,1:2]
  colnames(tibet_points) = c('long','lat')
  
  ratio_box = 1
  overarea_box = 1
  output_spojs = 'output/evalute_proj_north_border_shp_2020_2021/'
  dir.create(output_spojs)
  proj_name = c('year2020_ssp245.shp',
                'year2021_ssp245.shp',
                'year2020_ssp585.shp',
                'year2021_ssp585.shp')
  output_spojs = paste0(output_spojs,'/',proj_name)
  
  for(i in 1:4){
    tmpborder = as.data.frame(fread(input[i]))
    firtp = as.matrix(tmpborder[1,])
    lastp = as.matrix(tmpborder[nrow(tmpborder),])
    
    tppoints = as.matrix(tibet_points)
    firstdis = pointDistance(firtp,tppoints,
                             lonlat = T)
    lastdis = pointDistance(lastp,tppoints,lonlat = T)
    firstdisid = which.min(firstdis)
    lastdisid = which.min(lastdis)
    
    
    tppoints1 = tppoints[1:2,]
    tppoints2 = tppoints[lastdisid:nrow(tppoints),]
    
    tmpshppoints = rbind(tppoints1,tmpborder,tppoints2)
    tmpshppoints = as.data.frame(tmpshppoints)
    
    coordinates(tmpshppoints) = ~long+lat
    
    poly = Polygon(tmpshppoints)
    polys = Polygons(list(poly),1)
    spolys = SpatialPolygons(list(polys))
    shapefile(spolys,output_spojs[i])
    plot(spolys) 
    crs(spolys) = crs('+proj=longlat +datum=WGS84 +no_defs')
    if(i == 1 | i == 3){
      tmpreal_border = negshps_fut[[1]]
      crs(tmpreal_border) = crs(spolys)
    }else{
      tmpreal_border = negshps_fut[[2]]
      crs(tmpreal_border) = crs(spolys)
    }
    
    cond = gIntersects(spolys,tmpreal_border)
    
    if(cond){
      cond2 = try(over_area <-rgeos::gIntersection(spgeom1 =spolys,
                                       spgeom2 = tmpreal_border),
          silent = T)
      if(class(cond2) == 'try-error'){
        a1 = tmpreal_border - spolys
        ar2 = area(tmpreal_border) - area(a1)
        over_area = ar2 /10^10
        overratio = over_area/(area(tmpreal_border)/10^10)
        overratio = overratio *100
      }else{
        over_area = area(over_area)/10^10
        overratio = over_area / (area(tmpreal_border)/10^10)
        overratio = overratio *100
      }
     
    }
    
    ratio_box = c(ratio_box,overratio)
    overarea_box = c(overarea_box,over_area)
    print(overratio)
    print(i)
  }
  ratio_box = ratio_box[-1]
  overarea_box = overarea_box[-1]
  
  retdf = data.frame(
    overarea = overarea_box,
    overarea_ratio = ratio_box
  )  
  
  output = 'output/verifiy_northmove_model_2020_2021_overratio'
  dir.create(output)
  output = paste0(output,'/overarea.csv')
  
  fwrite(retdf,output)
  
}
calc_biggest_border_negarea <- function(
  
){
  mode = 'ssp585'
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/import_tws_raster.R")
  library(data.table)
  twsdf = import_tws_raster()
  twsdf1 = twsdf[[1]]
  twsdf2 = twsdf[[2]]
  
  loc1 = twsdf1[,1:2]
  loc2 = twsdf2[,1:2]
  
  input = 'output_random_hisbase/proj_rasttws_tibet_withhist_final/'
  input1 = list.files(input,full.names = T)[1]
  input2 = list.files(input,full.names = T)[2]
  
  # ssp 245
  if(mode == 'ssp245'){
    input1_245 = paste0(input1,'/ssp245/proj_tws_subs1_tibet_ensemble.csv')
    input2_245 = paste0(input2,'/ssp245/proj_tws_subs2_tibet_ensemble.csv')
    
  }else{
    input1_245 = paste0(input1,'/ssp585/proj_tws_subs1_tibet_ensemble.csv')
    input2_245 = paste0(input2,'/ssp585/proj_tws_subs2_tibet_ensemble.csv')
  }
  
  tws1_245 = as.data.frame(fread(input1_245))
  tws2_245 = as.data.frame(fread(input2_245))
  
  loc2020_2099= 199:1152
  tws1_245 = tws1_245[loc2020_2099,]
  tws2_245 = tws2_245[loc2020_2099,]
  
  
  tws1_245 = t(tws1_245)
  tws2_245 = t(tws2_245)
  
  tws1sum = apply(tws1_245,1,sum)
  tws2sum = apply(tws2_245,1,sum)
  
  na1 = which(is.na(tws1sum))
  na2 = which(is.na(tws2sum))
  if(length(na1)>0){
    loc1 = loc1[-na1,]
    tws1_245 = tws1_245[-na1,]
  }
  if(length(na2)>0){
    loc2 = loc2[-na2,]
    tws2_245 = tws2_245[-na2,]  
  }
  
  
  cal_fun_monmean_annsum_all <-function(x){
    x = as.numeric(x)
    x = x[-c(949:954)]
    
    xm = matrix(x,nrow = 12)
    xm = apply(xm,1,mean,na.rm = T)
    xa = sum(xm,na.rm = T)
    return(xa)
  }
  tws1_245_by_year = apply(tws1_245,1,cal_fun_monmean_annsum_all)
  tws2_245_by_year = apply(tws2_245,1,cal_fun_monmean_annsum_all)
  tws245 = c(tws1_245_by_year,
             tws2_245_by_year)
  
  df = data.frame(
    long = c(loc1[,1],loc2[,1]),
    lat = c(loc1[,2],loc2[,2]),
    tws245 = tws245
  )
  
  naid = which(is.na(df$tws245))
  if(length(naid)>0){
    df = df[-naid,]
  }
  df = df[which(df$tws245<=0),]
  
  rastdf = df[,1:3]
  rast = to_rast(rastdf)
  
  rastshps = rasterToPolygons(rast)
  neg_rast = sum(area(rastshps))/10^10
  
  write.table(neg_rast,'main_plot_data/fig4/borderinarea.txt')
}
calc_centroid_outter_distance<-function(
  centroid,outter
){
  
  y = centroid[1,2]
  id = which(outter[,2]>y)
  
  outter2 = outter[id,]
  diff = outter2[,3] -centroid[1,3] 
  
  distance = pointDistance(centroid[,1:2],
                           outter2[,1:2],lonlat = T) / 1000
  distance = distance / 111
  
  step = diff / distance
  s
  
  
}
calc_cmip6_pme_by_source_tibet <- function(
  region = 'ato',model)
{
  library(raster)
  if(region == 'ato'){
    shp  = shp_management('ocean',region)  
    cluster_shp = '/home/share/R_project/xinjiang_vapor/cluster_shp/ato'
    cluster_shp = list.files(cluster_shp,full.names = T,pattern = '*.shp$')[1:4]
    cluster_shp = c(cluster_shp,
                    'shp/adding_ato/adding_ato.shp')
    cluster_shp = lapply(cluster_shp,shapefile)
  }else{
    shp = shp_management('ocean',region)
    cluster_shp = 'shp/cluster_io/'
    cluster_shp = list.files(cluster_shp,full.names = T,pattern = '*.shp$')
    cluster_shp = lapply(cluster_shp,shapefile)
  }
  
  input_pme = 'Data/cmip6_pme_global_2099'
  input_pme245 = paste0(input_pme,'/hist_ssp245')
  input_pme585 = paste0(input_pme,'/hist_ssp585')
  
  input_pme245 = list.files(input_pme245,full.names = T)
  input_pme585 = list.files(input_pme585,full.names = T)
  
  i = 1:8
  i <<- i 
  
  sub_calc_fun245 <-function(i){
    library(raster)
    tmppme = stack(input_pme245[i])
    tmppme = raster::mask(crop(tmppme,shp),shp)
    
    j = 1:4
    
    sub_calc_sum <-function(j){
      maskpme = crop(tmppme,cluster_shp[[j]])
      maskpme = as.list(maskpme)
      maskpme = lapply(maskpme,cellStats,stat = 'sum',na.rm = T)
      maskpme = do.call('c',maskpme)
      return(maskpme)
      
    }
    tmp_pme_cl = lapply(j,sub_calc_sum)
    tmp_pme_cl = do.call('cbind',tmp_pme_cl)
    
    
    
    return(tmp_pme_cl)
  }
  sub_calc_fun585 <-function(i){
    library(raster)
    tmppme = stack(input_pme585[i])
    tmppme = raster::mask(crop(tmppme,shp),shp)
    
    j = 1:4
    
    sub_calc_sum <-function(j){
      maskpme = crop(tmppme,cluster_shp[[j]])
      maskpme = as.list(maskpme)
      maskpme = lapply(maskpme,cellStats,stat = 'sum',na.rm = T)
      maskpme = do.call('c',maskpme)
      return(maskpme)
      
    }
    tmp_pme_cl = lapply(j,sub_calc_sum)
    tmp_pme_cl = do.call('cbind',tmp_pme_cl)
    return(tmp_pme_cl)
  }
  
  input_pme245 <<- input_pme245
  input_pme585 <<- input_pme585
  shp <<- shp
  cluster_shp <<- cluster_shp
  
  output = 'output/cmip6_pmesum_in_source'
  dir.create(output)
  output = paste0(output,'/',region)
  dir.create(output)
  output = paste0(output,'/','region',1:4)
  lapply(output,dir.create)
  
  output245 = paste0(output,'/cmip6_pme_ssp245.csv')
  output585= paste0(output,'/cmip6_pme_ssp585.csv')
  
  
  
  library(doParallel)
  cl = makeCluster(9)
  clusterExport(cl,c('i','input_pme245','cluster_shp','shp'))
  ret245 = parLapply(cl,i,sub_calc_fun245)
  stopCluster(cl)
  
  cl = makeCluster(9)
  clusterExport(cl,c('i','input_pme585','cluster_shp','shp'))
  ret585 = parLapply(cl,i,sub_calc_fun585)
  stopCluster(cl)
  
  
  ret245 = do.call('cbind',ret245)
  ret585 = do.call('cbind',ret585)
  
  reg1_id= seq(1,32,4)
  reg2_id = seq(2,32,4)
  reg3_id = seq(3,32,4)
  reg4_id = seq(4,32,4)
  
  reg245_region1 = ret245[,reg1_id]
  reg245_region2 = ret245[,reg2_id]
  reg245_region3 = ret245[,reg3_id]
  reg245_region4 = ret245[,reg4_id]
  
  reg585_region1 = ret585[,reg1_id]
  reg585_region2 = ret585[,reg2_id]
  reg585_region3 = ret585[,reg3_id]
  reg585_region4 = ret585[,reg4_id]
  
  colnames(reg245_region1) = model
  colnames(reg245_region2) = model
  colnames(reg245_region3) = model
  colnames(reg245_region4) = model
  
  colnames(reg585_region1) = model
  colnames(reg585_region2) = model
  colnames(reg585_region3) = model
  colnames(reg585_region4) = model
  
  library(data.table)
  fwrite(reg245_region1,output245[1])
  fwrite(reg245_region2,output245[2])
  fwrite(reg245_region3,output245[3])
  fwrite(reg245_region4,output245[4])
  
  fwrite(reg585_region1,output585[1])
  fwrite(reg585_region2,output585[2])
  fwrite(reg585_region3,output585[3])
  fwrite(reg585_region4,output585[4])
  
  
  print(paste0('pass ',region))
  
}
calc_cmip6_pmemean_by_source_tibet <- function(
  region = 'ato',model)
{
  library(raster)
  if(region == 'ato'){
    shp  = shp_management('ocean',region)  
    cluster_shp = '/home/share/R_project/xinjiang_vapor/cluster_shp/ato'
    cluster_shp = list.files(cluster_shp,full.names = T,pattern = '*.shp$')[1:4]
    cluster_shp = c(cluster_shp,
                    'shp/adding_ato/adding_ato.shp')
    cluster_shp = lapply(cluster_shp,shapefile)
  }else{
    shp = shp_management('ocean',region)
    cluster_shp = 'shp/cluster_io/'
    cluster_shp = list.files(cluster_shp,full.names = T,pattern = '*.shp$')
    cluster_shp = lapply(cluster_shp,shapefile)
  }
  
  input_pme = 'Data/cmip6_pme_global_2099'
  input_pme245 = paste0(input_pme,'/hist_ssp245')
  input_pme585 = paste0(input_pme,'/hist_ssp585')
  
  input_pme245 = list.files(input_pme245,full.names = T)
  input_pme585 = list.files(input_pme585,full.names = T)
  
  i = 1:8
  i <<- i 
  
  sub_calc_fun245 <-function(i){
    library(raster)
    tmppme = stack(input_pme245[i])
    tmppme = raster::mask(crop(tmppme,shp),shp)
    
    j = 1:4
    
    sub_calc_mean <-function(j){
      maskpme = crop(tmppme,cluster_shp[[j]])
      maskpme = as.list(maskpme)
      maskpme = lapply(maskpme,cellStats,stat = 'mean',na.rm = T)
      maskpme = do.call('c',maskpme)
      return(maskpme)
      
    }
    tmp_pme_cl = lapply(j,sub_calc_mean)
    tmp_pme_cl = do.call('cbind',tmp_pme_cl)
    
    
    
    return(tmp_pme_cl)
  }
  sub_calc_fun585 <-function(i){
    library(raster)
    tmppme = stack(input_pme585[i])
    tmppme = raster::mask(crop(tmppme,shp),shp)
    
    j = 1:4
    
    sub_calc_mean <-function(j){
      maskpme = crop(tmppme,cluster_shp[[j]])
      maskpme = as.list(maskpme)
      maskpme = lapply(maskpme,cellStats,stat = 'mean',na.rm = T)
      maskpme = do.call('c',maskpme)
      return(maskpme)
      
    }
    tmp_pme_cl = lapply(j,sub_calc_mean)
    tmp_pme_cl = do.call('cbind',tmp_pme_cl)
    return(tmp_pme_cl)
  }
  
  input_pme245 <<- input_pme245
  input_pme585 <<- input_pme585
  shp <<- shp
  cluster_shp <<- cluster_shp
  
  output = 'output/cmip6_pmemean_in_source'
  dir.create(output)
  output = paste0(output,'/',region)
  dir.create(output)
  output = paste0(output,'/','region',1:4)
  lapply(output,dir.create)
  
  output245 = paste0(output,'/cmip6_pme_ssp245.csv')
  output585= paste0(output,'/cmip6_pme_ssp585.csv')
  
  
  
  library(doParallel)
  cl = makeCluster(9)
  clusterExport(cl,c('i','input_pme245','cluster_shp','shp'))
  ret245 = parLapply(cl,i,sub_calc_fun245)
  stopCluster(cl)
  
  cl = makeCluster(9)
  clusterExport(cl,c('i','input_pme585','cluster_shp','shp'))
  ret585 = parLapply(cl,i,sub_calc_fun585)
  stopCluster(cl)
  
  
  ret245 = do.call('cbind',ret245)
  ret585 = do.call('cbind',ret585)
  
  reg1_id= seq(1,32,4)
  reg2_id = seq(2,32,4)
  reg3_id = seq(3,32,4)
  reg4_id = seq(4,32,4)
  
  reg245_region1 = ret245[,reg1_id]
  reg245_region2 = ret245[,reg2_id]
  reg245_region3 = ret245[,reg3_id]
  reg245_region4 = ret245[,reg4_id]
  
  reg585_region1 = ret585[,reg1_id]
  reg585_region2 = ret585[,reg2_id]
  reg585_region3 = ret585[,reg3_id]
  reg585_region4 = ret585[,reg4_id]
  
  colnames(reg245_region1) = model
  colnames(reg245_region2) = model
  colnames(reg245_region3) = model
  colnames(reg245_region4) = model
  
  colnames(reg585_region1) = model
  colnames(reg585_region2) = model
  colnames(reg585_region3) = model
  colnames(reg585_region4) = model
  
  library(data.table)
  fwrite(reg245_region1,output245[1])
  fwrite(reg245_region2,output245[2])
  fwrite(reg245_region3,output245[3])
  fwrite(reg245_region4,output245[4])
  
  fwrite(reg585_region1,output585[1])
  fwrite(reg585_region2,output585[2])
  fwrite(reg585_region3,output585[3])
  fwrite(reg585_region4,output585[4])
  
  
  print(paste0('pass ',region))
  
}
calc_cmip6_t_by_source_tibet <- function(
  region = 'ato',model)
{
  library(raster)
  if(region == 'ato'){
    shp  = shp_management('ocean',region)  
    cluster_shp = '/home/share/R_project/xinjiang_vapor/cluster_shp/ato'
    cluster_shp = list.files(cluster_shp,full.names = T,pattern = '*.shp$')[1:4]
    cluster_shp = c(cluster_shp,
                    'shp/adding_ato/adding_ato.shp')
    cluster_shp = lapply(cluster_shp,shapefile)
  }else if(region == 'tibet'){
    shp = shp_management('tibet')
    
    neg_shps = list.files('shp/cluster_tws_neg_shp_deter',
                          full.names = T,pattern = '*.shp$')
    neg_shps = neg_shps[1:2]
    neg_shps = lapply(neg_shps, shapefile)
    cluster_shp = neg_shps
    
  }else{
    shp = shp_management('ocean',region)
    cluster_shp = 'shp/cluster_io/'
    cluster_shp = list.files(cluster_shp,full.names = T,pattern = '*.shp$')
    cluster_shp = lapply(cluster_shp,shapefile)
  }
  
  input_t = 'Data/cmip6_t_global_2099'
  input_t245 = paste0(input_t,'/hist_ssp245')
  input_t585 = paste0(input_t,'/hist_ssp585')
  
  input_t245 = list.files(input_t245,full.names = T)
  input_t585 = list.files(input_t585,full.names = T)
  
  i = 1:8
  i <<- i 
  
  sub_calc_fun245 <-function(i){
    print(i)
    library(raster)
    tmpt = stack(input_t245[i])
    tmpt = raster::mask(crop(tmpt,shp),shp)
    
    if(region == 'tibet'){
      j = 1:2
    }else{
      j = 1:4
    }
    
    
    sub_calc_sum <-function(j){
      maskt = crop(tmpt,cluster_shp[[j]])
      maskt = as.list(maskt)
      maskt = lapply(maskt,cellStats,stat = 'mean',na.rm = T)
      maskt = do.call('c',maskt)
      return(maskt)
      
    }
    tmp_t_cl = lapply(j,sub_calc_sum)
    tmp_t_cl = do.call('cbind',tmp_t_cl)
    
    return(tmp_t_cl)
  }
  sub_calc_fun585 <-function(i){
    library(raster)
    tmpt = stack(input_t585[i])
    tmpt = raster::mask(crop(tmpt,shp),shp)
    
    if(region == 'tibet'){
      j = 1:2
    }else{
      j = 1:4
    }
    
    
    sub_calc_sum <-function(j){
      maskt = crop(tmpt,cluster_shp[[j]])
      maskt = as.list(maskt)
      maskt = lapply(maskt,cellStats,stat = 'mean',na.rm = T)
      maskt = do.call('c',maskt)
      return(maskt)
      
    }
    tmp_t_cl = lapply(j,sub_calc_sum)
    tmp_t_cl = do.call('cbind',tmp_t_cl)
    return(tmp_t_cl)
  }
  
  input_t245 <<- input_t245
  input_t585 <<- input_t585
  shp <<- shp
  cluster_shp <<- cluster_shp
  
  output = 'output/cmip6_tmean_in_source'
  dir.create(output)
  output = paste0(output,'/',region)
  dir.create(output)
  if(region == 'tibet'){
    output = paste0(output,'/','region',1:2)
  }else{
    output = paste0(output,'/','region',1:4)
  }
  
  lapply(output,dir.create)
  
  output245 = paste0(output,'/cmip6_t_ssp245.csv')
  output585= paste0(output,'/cmip6_t_ssp585.csv')
  
  region <<- region
  
  library(doParallel)
  cl = makeCluster(9)
  clusterExport(cl,c('i','input_t245','cluster_shp','shp','region'))
  ret245 = parLapply(cl,i,sub_calc_fun245)
  stopCluster(cl)
  
  cl = makeCluster(9)
  clusterExport(cl,c('i','input_t585','cluster_shp','shp','region'))
  ret585 = parLapply(cl,i,sub_calc_fun585)
  stopCluster(cl)
  
  
  ret245 = do.call('cbind',ret245)
  ret585 = do.call('cbind',ret585)
  
  if(region == 'tibet'){
    reg1_id= seq(1,16,2)
    reg2_id = seq(2,16,2)
    
    
    reg245_region1 = ret245[,reg1_id]
    reg245_region2 = ret245[,reg2_id]
    
    reg585_region1 = ret585[,reg1_id]
    reg585_region2 = ret585[,reg2_id]
    
    colnames(reg245_region1) = model
    colnames(reg245_region2) = model
    
    colnames(reg585_region1) = model
    colnames(reg585_region2) = model
    
    library(data.table)
    fwrite(reg245_region1,output245[1])
    fwrite(reg245_region2,output245[2])
    
    fwrite(reg585_region1,output585[1])
    fwrite(reg585_region2,output585[2])
    
    
    print(paste0('pass ',region))
    
  }else{
    reg1_id= seq(1,32,4)
    reg2_id = seq(2,32,4)
    reg3_id = seq(3,32,4)
    reg4_id = seq(4,32,4)
    
    reg245_region1 = ret245[,reg1_id]
    reg245_region2 = ret245[,reg2_id]
    reg245_region3 = ret245[,reg3_id]
    reg245_region4 = ret245[,reg4_id]
    
    reg585_region1 = ret585[,reg1_id]
    reg585_region2 = ret585[,reg2_id]
    reg585_region3 = ret585[,reg3_id]
    reg585_region4 = ret585[,reg4_id]
    
    colnames(reg245_region1) = model
    colnames(reg245_region2) = model
    colnames(reg245_region3) = model
    colnames(reg245_region4) = model
    
    colnames(reg585_region1) = model
    colnames(reg585_region2) = model
    colnames(reg585_region3) = model
    colnames(reg585_region4) = model
    
    library(data.table)
    fwrite(reg245_region1,output245[1])
    fwrite(reg245_region2,output245[2])
    fwrite(reg245_region3,output245[3])
    fwrite(reg245_region4,output245[4])
    
    fwrite(reg585_region1,output585[1])
    fwrite(reg585_region2,output585[2])
    fwrite(reg585_region3,output585[3])
    fwrite(reg585_region4,output585[4])
    
    
    print(paste0('pass ',region))
    
  }
  
}
calc_month_mean_contr <- function(
  i,
  contr = contr
){
  monid = seq(i,180,12)
  
  tmpdf = contr[,monid]
  tmpdf = apply(tmpdf,1,mean,
                na.rm = T)
  
  return(tmpdf)
  
  
  
  
}
calc_multi_algors_calc <- function(
  
){
  
  input1 = 'output/future_pos_tws_area/pos_tws_area_ensemble_noproj_temper_pme.csv'
  input2 = 'output/future_pos_tws_area/pos_tws_area_ensemble.csv'
  input3 = 'output/future_pos_tws_area/pos_tws_area_ensemble_proj_temper_proj_pme.csv'
  input4 = 'output/future_pos_tws_area/pos_tws_area_proj_pmeato.csv'
  
  pos_ori_pme_t = as.data.frame(fread(input1))
  pos_area_ori = as.data.frame(fread(input2))
  pos_proj_pme_t = as.data.frame(fread(input3))
  pos_area_proj_pme = as.data.frame(fread(input4))
  
  alls = pos_ori_pme_t + pos_area_ori+ pos_proj_pme_t+pos_area_proj_pme
  all_mean = alls/4
  
  calc_min <-function(i){
    tmp1 = pos_ori_pme_t[,i]
    tmp2 = pos_area_ori[,i]
    tmp3 = pos_proj_pme_t[,i]
    tmp4 = pos_area_proj_pme[,i]
    
    d = cbind(tmp1,tmp2,tmp3,tmp4)
    d = apply(d,1,min)
    return(d)
  }
  calc_max <-function(i){
    tmp1 = pos_ori_pme_t[,i]
    tmp2 = pos_area_ori[,i]
    tmp3 = pos_proj_pme_t[,i]
    tmp4 = pos_area_proj_pme[,i]
    
    d = cbind(tmp1,tmp2,tmp3,tmp4)
    d = apply(d,1,max)
    return(d)
  }
  
  all_min = do.call(cbind,lapply(1:2,calc_min))
  all_max = do.call(cbind,lapply(1:2,calc_max))
  
  output1  = 'output/future_pos_tws_area/pos_area_allcalc_mean.csv'
  output2  = 'output/future_pos_tws_area/pos_area_allcalc_min.csv'
  output3  = 'output/future_pos_tws_area/pos_area_allcalc_max.csv'
  
  
  fwrite(all_mean,output1)
  fwrite(all_min,output2)
  fwrite(all_max,output3)
  
  
  
}
calc_multi_weight_temepr_intpm_basedonlocal <- function(
  
){
  era5_t = import_index_insource_tibet('era5_t_tibet')
  t = import_index_insource_tibet('t_cmip6',region = 'tibet')
  ssp245_tpm1 = t[[1]][[1]]
  ssp245_tpm2 = t[[1]][[2]]
  
  ssp585_tpm1 = t[[2]][[1]]
  ssp585_tpm2 = t[[2]][[2]]
  
  trend_fun_index_cmip6_2003<-function(x){
    x = as.numeric(x)
    #x = x[loc2020:loc2050]
    x = x[1:174]
    xt = ts(x,start = c(2003,1),frequency = 12)
    xt = decompose(xt)$trend
    
    naid = which(is.na(xt))
    xt = xt[-naid]
    xt = (xt-mean(xt))/sd(xt)
    
    return(xt)
  }
  ssp245_tpm1 = apply(ssp245_tpm1,2,trend_fun_index_cmip6_2003)
  ssp245_tpm2 = apply(ssp245_tpm2,2,trend_fun_index_cmip6_2003)
  ssp585_tpm1 = apply(ssp585_tpm1,2,trend_fun_index_cmip6_2003)
  ssp585_tpm2 = apply(ssp585_tpm2,2,trend_fun_index_cmip6_2003)
  
  model1= lm(era5_t[,1]~ssp245_tpm1)
  model2 = lm(era5_t[,1]~ssp585_tpm1)
  
  model3 = lm(era5_t[,2]~ssp245_tpm2)
  model4 = lm(era5_t[,2]~ssp585_tpm2)
  
  simu245_tpm1 = model1$fitted.values
  simu585_tpm1 = model2$fitted.values
  simu245_tpm2 = model3$fitted.values
  simu585_tpm2 = model4$fitted.values
  
  cor1 = cor(simu245_tpm1,era5_t[,1])
  cor2 = cor(simu585_tpm1,era5_t[,1])
  cor3 = cor(simu245_tpm2,era5_t[,2])
  cor4 = cor(simu585_tpm2,era5_t[,2])
  
  
  pvs1 = cor.test(simu245_tpm1,era5_t[,1])$p.value
  pvs2 = cor.test(simu585_tpm1,era5_t[,1])$p.value
  pvs3 = cor.test(simu245_tpm2,era5_t[,2])$p.value
  pvs4 = cor.test(simu585_tpm2,era5_t[,2])$p.value
  
 
  
  date = seq(as.Date('2003-07-01'),
             as.Date('2016-12-01'),'1 month')
  
  dfcor1 = data.frame(
    x = date[5],
    y = c(-2.6,-3.5),
    label = c(paste0('Simu_SSP245 cor: ',
                     round(cor1,2),
                     '(',scientific(pvs1,2),')'),
              paste0('Simu_SSP585 cor: ',
                     round(cor2,2),
                     '(',scientific(pvs2,2),')')),
    variable = c('Simu_SSP245',
                 'Simu_SSP585'),
    type = 'Projected T in TPM1 based on local CMIP6 T'
  )
  
  dfcor2 = data.frame(
    x = date[5],
    y = c(-2.6,-3.5),
    label = c(paste0('Simu_SSP245 cor: ',
                     round(cor3,2),
                     '(',scientific(pvs3,2),')'),
              paste0('Simu_SSP585 cor: ',
                     round(cor4,2),
                     '(',scientific(pvs4,2),')')),
    variable = c('Simu_SSP245',
                 'Simu_SSP585'),
    type = 'Projected T in TPM2 based on local CMIP6 T'
  )
  
  dfcor = rbind(dfcor1,dfcor2)
  
  
  df1 = data.frame(
    date = date,
    ERA5 = era5_t[,1],
    Simu_SSP245 = simu245_tpm1,
    Simu_SSP585 = simu585_tpm1
  )
  df2 = data.frame(
    date = date,
    ERA5 = era5_t[,2],
    Simu_SSP245 = simu245_tpm2,
    Simu_SSP585 = simu585_tpm2
  )
  
  df1 = reshape2::melt(df1,'date')
  df2 = reshape2::melt(df2,'date')
  
  df1$type = "Projected T in TPM1 based on local CMIP6 T"
  df2$type = 'Projected T in TPM2 based on local CMIP6 T'
  
  df = rbind(df1,df2)
  
  figlabel = data.frame(
    x = date[5],
    y = 3,
    label = c('(a)','(b)'),
    type = c("Projected T in TPM1 based on local CMIP6 T","Projected T in TPM2 based on local CMIP6 T")
  )
  
  p = ggplot()+
    geom_line(data = df,
              aes(x = date,y = value,
                  color = variable),
              size = 1.3)+
    geom_text(data = figlabel,
              aes(x = x,y =y,label=label),
              size = 5,
              color = 'black',
              hjust = 0)+
    geom_text(data = dfcor,
              aes(x = x,y =y,label=label,
                  color = variable),
              size = 4,show.legend = T,
              hjust = 0)+
    scale_color_manual(values = cols)+
    guides(color = guide_legend(title = ''))+
    facet_wrap(~type,nrow = 1)+
    theme_bw()+
    xlab('Time')+
    ylab('Indices')
  
  fontsize = 14
  text_theme = theme(
    axis.text = element_text(size = fontsize,color = 'black'),
    axis.title = element_text(size = fontsize,color = 'black'),
    legend.text = element_text(size = fontsize,color = 'black'),
    legend.title = element_text(size = fontsize,color = 'black'),
    strip.text = element_text(size = fontsize,color = 'black')
  )
  p = p+
    text_theme+
    theme(legend.position = 'none')+xlab('')
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/figs_multi_weight_temepr_intpm_basedon_ocean_link.R")
  p2 = figs_multi_weight_temepr_intpm_basedon_ocean_link()
  library(ggpubr)
  leg = as_ggplot(get_legend(p2))
  
  p2 = p2 + 
    text_theme+
    theme(legend.position = 'none')
  
  library(cowplot)
  p12 = plot_grid(p,p2,ncol = 1,
                  rel_widths = c(1,1),
                  rel_heights = c(1,1))

  p12 = plot_grid(p12,leg,ncol = 1,
                  rel_widths = c(1,1),
                  rel_heights = c(10,1))
  
  
  
  output = 'main_plot/SI/figs_covar_simu_t_baselocal'
  dir.create(output)
  output = paste0(output,'/figs_covar_simu_t_baselocal.png')
  
  png(output,
      height = 15,
      width = 25,
      units = 'cm',
      res = 800)
  print(p12)
  dev.off()
  
}
calc_multi_year_proj_pos_neg_area <- function(
  
){
  mode = 'ssp245'
  sub_calc_neg_fun<-function(year){
    input_pos_area = 'output/future_pos_tws_area_based_snow_tws/pos_area_allcalc_mean.csv'
    tibet = shp_management('tibet')
    pos_area = as.data.frame(fread(input_pos_area))
    pos_area = pos_area[3:81,]
    full_area = area(tibet)/10^6 /10000
    neg_area = full_area - pos_area
    
    
    loc_year1 = length(2020:year[1])
    loc_year2 = length(2020:year[length(year)])
    loc_year = loc_year1:loc_year2
    if(mode == 'ssp245'){
      modeid = 1
    }else{
      modeid = 2
    }
    proj_negarea = neg_area[loc_year,1]
    proj_mean = mean(proj_negarea)
    
    proj_negarea = neg_area[loc_year,2]
    proj_mean1 = mean(proj_negarea)
    
    ret = data.frame(
      SSP245 = proj_mean,
      SSP585 = proj_mean1
    )
    
    return(ret)
      
  }
  sub_calc_pos_fun<-function(year){
    input_pos_area = 'output/future_pos_tws_area_based_snow_tws/pos_area_allcalc_mean.csv'
    tibet = shp_management('tibet')
    pos_area = as.data.frame(fread(input_pos_area))
    pos_area = pos_area[3:81,]
    full_area = area(tibet)/10^6 /10000
    neg_area = full_area - pos_area
    
    
    loc_year1 = length(2020:year[1])
    loc_year2 = length(2020:year[length(year)])
    loc_year = loc_year1:loc_year2
    if(mode == 'ssp245'){
      modeid = 1
    }else{
      modeid = 2
    }
    proj_negarea = pos_area[loc_year,1]
    proj_mean = mean(proj_negarea)
    
    proj_negarea = pos_area[loc_year,2]
    proj_mean1 = mean(proj_negarea)
    
    ret = data.frame(
      SSP245 = proj_mean,
      SSP585 = proj_mean1
    )
    
    return(ret)
    
  }
  
  sub_calc_neg_fun_max<-function(year){
    input_pos_area = 'output/future_pos_tws_area_based_snow_tws/pos_area_allcalc_mean.csv'
    tibet = shp_management('tibet')
    pos_area = as.data.frame(fread(input_pos_area))
    pos_area = pos_area[3:81,]
    full_area = area(tibet)/10^6 /10000
    neg_area = full_area - pos_area
    
    
    loc_year1 = length(2020:year[1])
    loc_year2 = length(2020:year[length(year)])
    loc_year = loc_year1:loc_year2
    if(mode == 'ssp245'){
      modeid = 1
    }else{
      modeid = 2
    }
    proj_negarea = neg_area[loc_year,1]
    proj_mean = max(proj_negarea)
    
    proj_negarea = neg_area[loc_year,2]
    proj_mean1 = max(proj_negarea)
    
    ret = data.frame(
      SSP245 = proj_mean,
      SSP585 = proj_mean1
    )
    
    return(ret)
    
  }
  sub_calc_pos_fun_max<-function(year){
    input_pos_area = 'output/future_pos_tws_area_based_snow_tws/pos_area_allcalc_mean.csv'
    tibet = shp_management('tibet')
    pos_area = as.data.frame(fread(input_pos_area))
    pos_area = pos_area[3:81,]
    full_area = area(tibet)/10^6 /10000
    neg_area = full_area - pos_area
    
    
    loc_year1 = length(2020:year[1])
    loc_year2 = length(2020:year[length(year)])
    loc_year = loc_year1:loc_year2
    if(mode == 'ssp245'){
      modeid = 1
    }else{
      modeid = 2
    }
    proj_negarea = pos_area[loc_year,1]
    proj_mean = max(proj_negarea)
    
    proj_negarea = pos_area[loc_year,2]
    proj_mean1 = max(proj_negarea)
    
    ret = data.frame(
      SSP245 = proj_mean,
      SSP585 = proj_mean1
    )
    
    return(ret)
    
  }
  
  sub_calc_neg_fun_min<-function(year){
    input_pos_area = 'output/future_pos_tws_area_based_snow_tws/pos_area_allcalc_mean.csv'
    tibet = shp_management('tibet')
    pos_area = as.data.frame(fread(input_pos_area))
    pos_area = pos_area[3:81,]
    full_area = area(tibet)/10^6 /10000
    neg_area = full_area - pos_area
    
    
    loc_year1 = length(2020:year[1])
    loc_year2 = length(2020:year[length(year)])
    loc_year = loc_year1:loc_year2
    if(mode == 'ssp245'){
      modeid = 1
    }else{
      modeid = 2
    }
    proj_negarea = neg_area[loc_year,1]
    proj_mean = min(proj_negarea)
    
    proj_negarea = neg_area[loc_year,2]
    proj_mean1 = min(proj_negarea)
    
    ret = data.frame(
      SSP245 = proj_mean,
      SSP585 = proj_mean1
    )
    
    return(ret)
    
  }
  sub_calc_pos_fun_min<-function(year){
    input_pos_area = 'output/future_pos_tws_area_based_snow_tws/pos_area_allcalc_mean.csv'
    tibet = shp_management('tibet')
    pos_area = as.data.frame(fread(input_pos_area))
    pos_area = pos_area[3:81,]
    full_area = area(tibet)/10^6 /10000
    neg_area = full_area - pos_area
    
    
    loc_year1 = length(2020:year[1])
    loc_year2 = length(2020:year[length(year)])
    loc_year = loc_year1:loc_year2
    if(mode == 'ssp245'){
      modeid = 1
    }else{
      modeid = 2
    }
    proj_negarea = pos_area[loc_year,1]
    proj_mean = min(proj_negarea)
    
    proj_negarea = pos_area[loc_year,2]
    proj_mean1 = min(proj_negarea)
    
    ret = data.frame(
      SSP245 = proj_mean,
      SSP585 = proj_mean1
    )
    
    return(ret)
    
  }
  
  year1 = 2020:2051
  year2 = 2051:2082
  year3 = 2082:2098
  
  neg1 = sub_calc_neg_fun(year1)
  neg2 = sub_calc_neg_fun(year2)
  neg3 = sub_calc_neg_fun(year3)

  pos1 = sub_calc_pos_fun(year1)
  pos2 = sub_calc_pos_fun(year2)
  pos3 = sub_calc_pos_fun(year3)
  
  neg1_max = sub_calc_neg_fun_max(year1)
  neg2_max = sub_calc_neg_fun_max(year2)
  neg3_max = sub_calc_neg_fun_max(year3)
  
  pos1_max = sub_calc_pos_fun_max(year1)
  pos2_max = sub_calc_pos_fun_max(year2)
  pos3_max = sub_calc_pos_fun_max(year3)
  
  neg1_min = sub_calc_neg_fun_min(year1)
  neg2_min = sub_calc_neg_fun_min(year2)
  neg3_min = sub_calc_neg_fun_min(year3)
  
  pos1_min = sub_calc_pos_fun_min(year1)
  pos2_min = sub_calc_pos_fun_min(year2)
  pos3_min = sub_calc_pos_fun_min(year3)

  neg = rbind(neg1,neg2,neg3)
  pos = rbind(pos1,pos2,pos3)
  
  neg_max = rbind(neg1_max,neg2_max,neg3_max)
  pos_max = rbind(pos1_max,pos2_max,pos3_max)
  
  neg_min = rbind(neg1_min,neg2_min,neg3_min)
  pos_min = rbind(pos1_min,pos2_min,pos3_min)
  
  
  neg$x = c('2020-2051','2051-2082','2082-2098')
  pos$x = c('2020-2051','2051-2082','2082-2098')
  neg_min$x = c('2020-2051','2051-2082','2082-2098')
  pos_min$x = c('2020-2051','2051-2082','2082-2098')
  neg_max$x = c('2020-2051','2051-2082','2082-2098')
  pos_max$x = c('2020-2051','2051-2082','2082-2098')
  
  
  neg = reshape2::melt(neg,'x')
  pos = reshape2::melt(pos,'x')
  
  
  neg_min = reshape2::melt(neg_min,'x')
  pos_min = reshape2::melt(pos_min,'x')
  neg_max = reshape2::melt(neg_max,'x')
  pos_max= reshape2::melt(pos_max,'x')
  
  neg$value = neg$value * -1
  neg_min$value = neg_min$value * -1
  neg_max$value = neg_max$value * -1
  
  neg_max$label = paste0('Max:',-1*round(neg_max$value,1))
  neg_min$label = paste0('Min:',-1*round(neg_min$value,1))
  
  neg_max$type = paste0(paste0('(',letters[2:7],') '), neg_max$variable,' ',neg_max$x)
  neg_min$type = paste0(paste0('(',letters[2:7],') '), neg_min$variable,' ',neg_min$x)
  
  neg_max$x1 = 68
  neg_min$x1 = 68
  neg_min$y = 28
  neg_max$y = 30
  
  fill = pal_lancet()(9)
  fill = colorRampPalette(fill)(30)
  
  fill = c(
  "TWS deficit area under SSP245"=fill[21],
  'TWS non-deficit area under SSP245'= fill[13],
  "TWS deficit area under SSP585"=fill[23],
  'TWS non-deficit area under SSP585'= fill[1])
  
  neg$fill = rep(c('TWS deficit area under SSP245',
                   'TWS deficit area under SSP585'),each = 3)
  pos$fill = rep(c('TWS non-deficit area under SSP245',
                   'TWS non-deficit area under SSP585'),each = 3)
  fontsize = 14
  text_theme = theme(
    axis.text = element_text(size = fontsize,color = 'black'),
    axis.title =  element_text(size = fontsize,color = 'black'),
    legend.title =  element_text(size = fontsize,color = 'black'),
    legend.text =  element_text(size = fontsize,color = 'black'),
    legend.position = 'bottom'
  )
  
  
  
  p1 = ggplot()+
    geom_hline(yintercept = 0,size = 0.25,colour = 'black')+
    geom_bar(data= neg,aes(x = x,y=value,fill = fill),
             position = position_dodge2(0.5),
             width = 0.5,stat = 'identity')+
    
    geom_bar(data= pos,aes(x = x,y=value,fill = fill),
             position = position_dodge2(0.5),
             width = 0.5,stat = 'identity')+
    geom_text_repel(data= neg,aes(x = x,y=value-10,label = paste0(round(abs(value),1),'\n(',
                                                             round(round(abs(value),1)/308.1*100,1),')%')),
              position = position_dodge2(0.5),
              size = 4,
              color = 'black',
              #position = position_dodge2(0.5),
              bg.color = 'white',
              force = F,
              bg.r = 0.15)+
    geom_text_repel(data= pos,aes(x = x,y=value+10,label =paste0(round(abs(value),1),'\n(',
                                                            round(round(abs(value),1)/308.1*100,1),')%')),
              position = position_dodge2(0.5),
              size = 4,
              color = 'black',
              #position = position_dodge2(0.5),
              bg.color = 'white',
              force = F,
              bg.r = 0.15)+
    
    scale_fill_manual(values = fill)+
    scale_y_continuous(breaks= c(-200,-100,0,100),
                       labels = c(200,100,0,100))+
    theme_bw()+
    text_theme+
    theme(panel.grid = element_blank(),
          panel.background = element_blank())+
    xlab('Time period')+
    ylab('Area (10 km )')+
    ggtitle(label = '(a) Average TWS non-deficit and deficit area')
  
  return(list(p1,neg_max,neg_min))
  
  
  
  
  
  
  
  
  
  
}
calc_pme_in_io_mean <-function(
  input_shps = '/media/sdb5/Vapor_projcts/Vapor_tibet/shp/cluster_io/',
  shp_mode,
  mode = 'io'#
){
  base = '/media/sdb5/Vapor_projcts/Vapor_tibet'
  setwd(base)
  
  shp_mode = shp_mode
  
  if(mode == 'io'){
    #source('/media/sdb5/Vapor_projcts/Vapor_tibet/R/generate_subs_in_io.R')
    #generate_subs_in_io()
  }
  
  
  input_shps = list.files(input_shps,full.names = T,
                          pattern = '*.shp$')
  if(mode == 'ato'){
    input_shps = input_shps[1:4]
    input_shp_add = 'shp/adding_ato/adding_ato.shp'
    input_shps = c(input_shps,input_shp_add)
  }
  source('/home/share/R_project/xinjiang_vapor/data_management.R')
  
  global_pr = data_management('era5_pr_include_ocean')
  global_eva = data_management('era5_e_include_ocean')
  
  global_pr = raster::mask(global_pr,shp_mode)
  global_eva = raster::mask(global_eva,shp_mode)
  
  # outputs
  #######
  output_pr = 'Data/era5_pr_mean'
  dir.create(output_pr)
  output_pr = paste0(output_pr,'/',mode)
  dir.create(output_pr)
  output_pr = paste0(output_pr,'/era5_pr_mean.csv')
  
  output_eva = 'Data/era5_eva_mean'
  dir.create(output_eva)
  output_eva = paste0(output_eva,'/',mode)
  dir.create(output_eva)
  output_eva = paste0(output_eva,'/era5_eva_mean.csv')
  
  output_pme = 'Data/era5_pme_mean'
  dir.create(output_pme)
  output_pme = paste0(output_pme,'/',mode)
  dir.create(output_pme)
  output_pme = paste0(output_pme,'/era5_pme_mean.csv')
  
  #######
  
  global_pr <<- global_pr
  global_eva <<- global_eva
  input_shps <<- input_shps
  shp_mode <<- shp_mode
  
  sub_mask_extract_mean_pr <-function(i){
    library(raster)
    tmpshp = shapefile(input_shps[i])
    
    tmppr = raster::mask(crop(global_pr,extent(shp_mode)),
                         shp_mode)
    
    tmppr = crop(tmppr,tmpshp)
    tmppr = as.list(tmppr)
    tmppr_mean = lapply(tmppr,cellStats,stat = mean,na.rm = T)
    tmppr_mean = do.call(c,tmppr_mean)
    
    return(tmppr_mean)
  }
  
  sub_mask_extract_mean_eva <-function(i){
    library(raster)
    tmpshp = shapefile(input_shps[i])
    
    tmppr = raster::mask(crop(global_eva,extent(shp_mode)),
                         shp_mode)
    
    tmppr = crop(tmppr,tmpshp)
    tmppr = as.list(tmppr)
    tmppr_mean = lapply(tmppr,cellStats,stat = mean,na.rm = T)
    tmppr_mean = do.call(c,tmppr_mean)
    
    return(tmppr_mean)
  }
  
  if(mode =='ato'){
    i= 1:5  
  }else{
    i = 1:4
  }
  
  i <<-i
  library(doParallel)
  cl = makeCluster(max(i))
  clusterExport(cl,c('global_pr','input_shps','shp_mode'))
  ret_pr = parLapply(cl,i,sub_mask_extract_mean_pr)
  stopCluster(cl)
  
  ret_pr = do.call('cbind',ret_pr)
  len = ncol(ret_pr)
  colnames(ret_pr) = paste0(mode,1:len)
  
  library(doParallel)
  cl = makeCluster(max(i))
  clusterExport(cl,c('global_pr','input_shps','shp_mode'))
  ret_eva = parLapply(cl,i,sub_mask_extract_mean_eva)
  stopCluster(cl)
  
  ret_eva = do.call('cbind',ret_eva)
  len = ncol(ret_eva)
  colnames(ret_eva) = paste0(mode,1:len)
  
  ret_pme = ret_pr - ret_eva
  
  library(data.table)
  fwrite(ret_pme,output_pme)
  fwrite(ret_pr,output_pr)
  fwrite(ret_eva,output_eva)
  
}
calc_pme_in_io <-function(
  input_shps = '/media/sdb5/Vapor_projcts/Vapor_tibet/shp/cluster_io/',
  shp_mode,
  mode = 'io'#
){
  base = '/media/sdb5/Vapor_projcts/Vapor_tibet'
  setwd(base)
  
  shp_mode = shp_mode
  
  if(mode == 'io'){
    #source('/media/sdb5/Vapor_projcts/Vapor_tibet/R/generate_subs_in_io.R')
    #generate_subs_in_io()
  }
  
  
  input_shps = list.files(input_shps,full.names = T,
                          pattern = '*.shp$')
  if(mode == 'ato'){
    input_shps = input_shps[1:4]
    input_shp_add = 'shp/adding_ato/adding_ato.shp'
    input_shps = c(input_shps,input_shp_add)
  }
  source('/home/share/R_project/xinjiang_vapor/data_management.R')
  
  global_pr = data_management('era5_pr_include_ocean')
  global_eva = data_management('era5_e_include_ocean')
  
  global_pr = raster::mask(global_pr,shp_mode)
  global_eva = raster::mask(global_eva,shp_mode)
  
  # outputs
  #######
  output_pr = 'Data/era5_pr_sum'
  dir.create(output_pr)
  output_pr = paste0(output_pr,'/',mode)
  dir.create(output_pr)
  output_pr = paste0(output_pr,'/era5_pr_sum.csv')
  
  output_eva = 'Data/era5_eva_sum'
  dir.create(output_eva)
  output_eva = paste0(output_eva,'/',mode)
  dir.create(output_eva)
  output_eva = paste0(output_eva,'/era5_eva_sum.csv')
  
  output_pme = 'Data/era5_pme_sum'
  dir.create(output_pme)
  output_pme = paste0(output_pme,'/',mode)
  dir.create(output_pme)
  output_pme = paste0(output_pme,'/era5_pme_sum.csv')
  
  #######
  
  global_pr <<- global_pr
  global_eva <<- global_eva
  input_shps <<- input_shps
  shp_mode <<- shp_mode
  
  sub_mask_extract_sum_pr <-function(i){
    library(raster)
    tmpshp = shapefile(input_shps[i])
    
    tmppr = raster::mask(crop(global_pr,extent(shp_mode)),
                 shp_mode)
    
    tmppr = crop(tmppr,tmpshp)
    tmppr = as.list(tmppr)
    tmppr_sum = lapply(tmppr,cellStats,stat = sum,na.rm = T)
    tmppr_sum = do.call(c,tmppr_sum)
    
    return(tmppr_sum)
  }
  
  sub_mask_extract_sum_eva <-function(i){
    library(raster)
    tmpshp = shapefile(input_shps[i])
    
    tmppr = raster::mask(crop(global_eva,extent(shp_mode)),
                 shp_mode)
    
    tmppr = crop(tmppr,tmpshp)
    tmppr = as.list(tmppr)
    tmppr_sum = lapply(tmppr,cellStats,stat = sum,na.rm = T)
    tmppr_sum = do.call(c,tmppr_sum)
    
    return(tmppr_sum)
  }
  
  if(mode =='ato'){
    i= 1:5  
  }else{
    i = 1:4
  }
  
  i <<-i
  library(doParallel)
  cl = makeCluster(max(i))
  clusterExport(cl,c('global_pr','input_shps','shp_mode'))
  ret_pr = parLapply(cl,i,sub_mask_extract_sum_pr)
  stopCluster(cl)
  
  ret_pr = do.call('cbind',ret_pr)
  len = ncol(ret_pr)
  colnames(ret_pr) = paste0(mode,1:len)
  
  library(doParallel)
  cl = makeCluster(max(i))
  clusterExport(cl,c('global_pr','input_shps','shp_mode'))
  ret_eva = parLapply(cl,i,sub_mask_extract_sum_eva)
  stopCluster(cl)
  
  ret_eva = do.call('cbind',ret_eva)
  len = ncol(ret_eva)
  colnames(ret_eva) = paste0(mode,1:len)
  
  ret_pme = ret_pr - ret_eva
  
  library(data.table)
  fwrite(ret_pme,output_pme)
  fwrite(ret_pr,output_pr)
  fwrite(ret_eva,output_eva)
  
}
calc_pme_in_po_mean <-function(
  input_shps = '/media/sdb5/Vapor_projcts/Vapor_yellow_river/shp/po_box/',
  shp_mode,
  mode = 'po'#
){
  base = '/media/sdb5/Vapor_projcts/Vapor_yellow_river'
  setwd(base)
  
  if(mode == 'po'){
    #source('/media/sdb5/Vapor_projcts/Vapor_yellow_river/R/generate_subs_in_po.R')
    #generate_subs_in_po()
  }
  
  
  input_shps = list.files(input_shps,full.names = T,
                          pattern = '*.shp$')
  if(mode == 'ato'){
    input_shps = input_shps[1:4]
  }
  source('/home/share/R_project/xinjiang_vapor/data_management.R')
  
  global_pr = data_management('era5_pr_include_ocean')
  global_eva = data_management('era5_e_include_ocean')
  
  global_pr = mask(global_pr,shp_mode)
  global_eva = mask(global_eva,shp_mode)
  
  # outputs
  #######
  output_pr = 'Data/era5_pr_mean'
  dir.create(output_pr)
  output_pr = paste0(output_pr,'/',mode)
  dir.create(output_pr)
  output_pr = paste0(output_pr,'/era5_pr_mean.csv')
  
  output_eva = 'Data/era5_eva_mean'
  dir.create(output_eva)
  output_eva = paste0(output_eva,'/',mode)
  dir.create(output_eva)
  output_eva = paste0(output_eva,'/era5_eva_mean.csv')
  
  output_pme = 'Data/era5_pme_mean'
  dir.create(output_pme)
  output_pme = paste0(output_pme,'/',mode)
  dir.create(output_pme)
  output_pme = paste0(output_pme,'/era5_pme_mean.csv')
  
  #######
  
  global_pr <<- global_pr
  global_eva <<- global_eva
  input_shps <<- input_shps
  shp_mode <<- shp_mode
  
  sub_mask_extract_mean_pr <-function(i){
    library(raster)
    tmpshp = shapefile(input_shps[i])
    
    tmppr = mask(crop(global_pr,extent(shp_mode)),
                 shp_mode)
    
    tmppr = crop(tmppr,tmpshp)
    tmppr = as.list(tmppr)
    tmppr_mean = lapply(tmppr,cellStats,stat = mean,na.rm = T)
    tmppr_mean = do.call(c,tmppr_mean)
    
    return(tmppr_mean)
  }
  
  sub_mask_extract_mean_eva <-function(i){
    library(raster)
    tmpshp = shapefile(input_shps[i])
    
    tmppr = mask(crop(global_eva,extent(shp_mode)),
                 shp_mode)
    
    tmppr = crop(tmppr,tmpshp)
    tmppr = as.list(tmppr)
    tmppr_mean = lapply(tmppr,cellStats,stat = mean,na.rm = T)
    tmppr_mean = do.call(c,tmppr_mean)
    
    return(tmppr_mean)
  }
  
  i= 1:4
  i <<-i
  library(doParallel)
  cl = makeCluster(4)
  clusterExport(cl,c('global_pr','input_shps','shp_mode'))
  ret_pr = parLapply(cl,i,sub_mask_extract_mean_pr)
  stopCluster(cl)
  
  ret_pr = do.call('cbind',ret_pr)
  len = ncol(ret_pr)
  colnames(ret_pr) = paste0(mode,1:len)
  
  library(doParallel)
  cl = makeCluster(4)
  clusterExport(cl,c('global_pr','input_shps','shp_mode'))
  ret_eva = parLapply(cl,i,sub_mask_extract_mean_eva)
  stopCluster(cl)
  
  ret_eva = do.call('cbind',ret_eva)
  len = ncol(ret_eva)
  colnames(ret_eva) = paste0(mode,1:len)
  
  ret_pme = ret_pr - ret_eva
  
  library(data.table)
  fwrite(ret_pme,output_pme)
  fwrite(ret_pr,output_pr)
  fwrite(ret_eva,output_eva)
  
}
calc_pme_in_tibet <- function(
  
){
  gpcc = data_management('gpcc_full')
  tibet = shp_management('tibet')
  #negshps = list.files('shp/cluster_tws_neg_shp_deter',
  #                     full.names = T,
  #                    pattern = '*.shp$')
  #negshps = lapply(negshps[1:2],shapefile)
  #negshps = do.call(bind,negshps)
  gpcc = crop(gpcc,extent(tibet))
  gpcc = mask(gpcc,tibet)
  gpcc = as.list(gpcc)
  
  era5 = data_management('era5_pr_include_ocean')
  era5 = mask(crop(era5,extent(tibet)),tibet)
  era5 = as.list(era5)
  
  
  prsum = lapply(gpcc,cellStats,stat = sum,na.rm = T)
  prsum = do.call('c',prsum)
  
  prera5 = lapply(era5,cellStats,stat = sum,na.rm = T)
  prera5 = do.call('c',prera5)
  
  
  eva = data_management('era5_e_include_ocean')
  eva = mask(crop(eva,extent(tibet)),tibet)
  eva = as.list(eva)
  
  evasum = lapply(eva,cellStats,stat = sum,na.rm = T)
  evasum = do.call('c',evasum)
  
  
  
  pmegpcc = prsum - evasum
  pmeera5 = prera5 - evasum
  stand_fun<-function(x){
    x = ts(x,start = c(2003,1),frequency = 12)
    x = decompose(x)$trend
    
    x = x[-which(is.na(x))]

    x = (x-mean(x))/sd(x)
    return(x)
  }
  
  
  
  stand_prgpcc = stand_fun(prsum)
  stand_contr = stand_fun(full_contr_sum)
  stand_pmeera5 = stand_fun(pmeera5)
  
  
  
}
calc_pme_in_tibet2 <- function(
  
){
  
  tibetshp = list.files('shp/cluster_tws_neg_shp_deter/',
                        pattern = '*.shp$',
                        full.names = T)
  
  tibetshp = lapply(tibetshp,shapefile)
  tibetcom = do.call('bind',tibetshp)
  
  tibet = shp_management('tibet')
  tps = tibet - tibetcom
  tibetshp = tibetshp[1:2]
  # input global_pme
  global_pr = data_management('era5_pr_include_ocean')
  global_eva = data_management('era5_e_include_ocean')
  
  global_pme = global_pr - global_eva
  world = shp_management('world')
  global_pme = mask(global_pme,world)
  
  shps = list(tibetshp[[1]],tibetshp[[2]],
              tps)
  i = 1:3
  sub_calc<-function(i){
    tmp1  =crop(global_pme,shps[[i]])
    tmp1 = as.list(tmp1)
    tmp1 = lapply(tmp1,cellStats,mean,na.rm = T)
    
    tmp1 = do.call('c',tmp1)
    
    tmp1 = tmp1[1:174]
    tmp1 = ts(tmp1,start = c(2003,1),
              frequency = 12)
    tmp1 = decompose(tmp1)$trend
    
    tmp1 = tmp1[-which(is.na(tmp1))]
    
    tmp1 = (tmp1-mean(tmp1))/sd(tmp1)
    
    return(tmp1)
  }
  
  pme_subs = lapply(i,sub_calc)
  pme_subs = do.call('cbind',pme_subs)
  
  output = 'output/pme_tibet_region/pmetp.csv'
  dir.create('output/pme_tibet_region')
  fwrite(pme_subs,output)
  
  
  
  
  
  
  
  
  
  
  
}
calc_pme_trend_in_ato <- function(
  
){
  
  ato = shp_management('ocean','ato')
  
  
  pr = data_management('era5_pr_include_ocean')
  ev = data_management('era5_e_include_ocean')
  
  pme = pr - ev
  pme = pme[[1:174]]
  #pmeli = as.list(pme)
  
  #pmeli <<- pmeli
  pme = crop(pme,extent(-180,180,0,90))
  pme = mask(pme,ato)
 
  
  dfpme = as.data.frame(pme,xy = T)
  naid = which(is.na(dfpme[,3]))
  dfpme = dfpme[-naid,]
  
  loc = dfpme[,1:2]
  dfpme = dfpme[,-c(1,2)]
  dfpme = t(dfpme)
  
  i = 1:ncol(dfpme)
  i <<- i
  dfpme <<- dfpme
  
  sub_calc_pme_mmk <- function(i){
    source('/home/share/R_project/xinjiang_vapor/mmkTrend.R')
    
    tmp = as.numeric(dfpme[,i])
    tmpmmk = mmkTrend(tmp)$Zc
    return(tmpmmk)
  }
  
  cl = makeCluster(12)
  clusterExport(cl,c('i','dfpme'))
  system.time(retpme_mmk <- parLapply(cl,i,sub_calc_pme_mmk))
  stopCluster(cl)
  
  retpme_mmk = do.call('c',retpme_mmk)
  
  dftrend = data.frame(
    loc,
    pmemmk = retpme_mmk
  )
  
  output = 'output/pme_trend_in_natoio'
  dir.create(output)
  output = paste0(output,'/dfpmeato_mmktrend.csv')
  fwrite(dftrend,output)
  
  
  
}
calc_pme_trend_in_atoio <- function(
  
){
  
  ato = shp_management('ocean','ato')
  io = shp_management('ocean','io')
  
  atoio = bind(ato,io)
  
  pr = data_management('era5_pr_include_ocean')
  ev = data_management('era5_e_include_ocean')
  
  pme = pr - ev
  pme = pme[[1:174]]
  #pmeli = as.list(pme)
  
  #pmeli <<- pmeli
  atoio <<- atoio
  pme = mask(pme,atoio)
  pme = crop(pme,extent(-180,180,0,90))
  
  dfpme = as.data.frame(pme,xy = T)
  naid = which(is.na(dfpme[,3]))
  dfpme = dfpme[-naid,]
  
  loc = dfpme[,1:2]
  dfpme = dfpme[,-c(1,2)]
  dfpme = t(dfpme)
  
  i = 1:ncol(dfpme)
  i <<- i
  dfpme <<- dfpme
  
  sub_calc_pme_mmk <- function(i){
    source('/home/share/R_project/xinjiang_vapor/mmkTrend.R')
    
    tmp = as.numeric(dfpme[,i])
    tmpmmk = mmkTrend(tmp)$Zc
    return(tmpmmk)
  }
  
  cl = makeCluster(12)
  clusterExport(cl,c('i','dfpme'))
  system.time(retpme_mmk <- parLapply(cl,i,sub_calc_pme_mmk))
  stopCluster(cl)
  
  retpme_mmk = do.call('c',retpme_mmk)
  
  dftrend = data.frame(
    loc,
    pmemmk = retpme_mmk
  )
  nanid = which(is.nan(dftrend$pmemmk))
  
  dftrend = dftrend[-nanid,]
  
  output = 'output/pme_trend_in_natoio'
  dir.create(output)
  output = paste0(output,'/dfpme_mmktrend.csv')
  fwrite(dftrend,output)
  
  
  
}
calc_pme_trend_in_io<- function(
  
){
  
  io = shp_management('ocean','io')
  
  pr = data_management('era5_pr_include_ocean')
  ev = data_management('era5_e_include_ocean')
  
  pme = pr - ev
  pme = pme[[1:174]]
  #pmeli = as.list(pme)
  
  #pmeli <<- pmeli
  pme = crop(pme,extent(-180,180,0,90))
  pme = mask(pme,io)
  
  
  dfpme = as.data.frame(pme,xy = T)
  naid = which(is.na(dfpme[,3]))
  dfpme = dfpme[-naid,]
  
  loc = dfpme[,1:2]
  dfpme = dfpme[,-c(1,2)]
  dfpme = t(dfpme)
  
  i = 1:ncol(dfpme)
  i <<- i
  dfpme <<- dfpme
  
  sub_calc_pme_mmk <- function(i){
    source('/home/share/R_project/xinjiang_vapor/mmkTrend.R')
    
    tmp = as.numeric(dfpme[,i])
    tmpmmk = mmkTrend(tmp)$Zc
    return(tmpmmk)
  }
  
  cl = makeCluster(12)
  clusterExport(cl,c('i','dfpme'))
  system.time(retpme_mmk <- parLapply(cl,i,sub_calc_pme_mmk))
  stopCluster(cl)
  
  retpme_mmk = do.call('c',retpme_mmk)
  
  dftrend = data.frame(
    loc,
    pmemmk = retpme_mmk
  )
  
  output = 'output/pme_trend_in_natoio'
  dir.create(output)
  output = paste0(output,'/dfpmeio_mmktrend.csv')
  fwrite(dftrend,output)
  
  
  
}
calc_pme_trends_across_ato <-function(
  
){
  #global_era5_poten_evap
  source('/home/share/R_project/xinjiang_vapor/data_management.R')
  global_pr = data_management('era5_pr_include_ocean')
  global_eva = data_management('era5_e_include_ocean')
  #global_eva = data_management('global_era5_poten_evap')
  
  
  
  ato = shapefile('/media/sdb1/shp/ocean_shp/shp_combind/ato_diso.shp')
  
  global_pme = global_pr - global_eva
  
  global_pme_mask = raster::mask(crop(global_pme,
                                 extent(ato)),
                            ato)
  
  mask_pmedf = as.data.frame(global_pme_mask,
                             xy = T)
  
  naid = which(is.na(mask_pmedf[,3]))
  if(length(naid)>0){
    mask_pmedf = mask_pmedf[-naid,]
  }
  
  long = mask_pmedf[,1]
  lat = mask_pmedf[,2]
  mask_pmedf = mask_pmedf[,-c(1,2)]
  
  
  
  sub_calc_mon_ann_mean_pme <-function(i){
    source('/home/share/R_project/xinjiang_vapor/mmkTrend.R')
    x = as.numeric(mask_pmedf[i,])
    xm = matrix(x,nrow = 12)
    xm = apply(xm,1,mean,na.rm = T)
    xm = sum(xm,na.rm = T)
    return(xm)
    
  }
  library(doParallel)
  i = 1:nrow(mask_pmedf)
  i <<- i
  mask_pmedf<<-mask_pmedf
  cl = makeCluster(10)
  clusterExport(cl,c('i','mask_pmedf'))
  pmemonann = parLapply(cl,i,sub_calc_mon_ann_mean_pme)
  stopCluster(cl)
  
  pmemonann = do.call(c,pmemonann)
  
  pmedf = data.frame(
    long = long,
    lat = lat,
    pmeato = pmemonann
  )
  
  pmedfneg = pmedf[which(pmedf$pmeato <0),]
  
  dir.create('main_plot_data/fig3')
  library(data.table)
  fwrite(pmedf,'main_plot_data/fig3/pmeato.csv')
  
  #preview data 
  
  pmedfneg$levels = cut(pmedfneg$pmeato,
                        breaks = c(seq(-1752,0,200),0))
  
  nclass = length(unique(pmedfneg$levels))
  
  library(RColorBrewer)  
  fils = colorRampPalette(brewer.pal(9,'Spectral'))(nclass*3)
  fils = fils[seq(1,nclass*2,2)]
  
  world = shp_management('world')
  world_crop = crop(world,extent(-180,180,0,90))
  p = ggplot()+
    geom_polygon(data = world_crop,
                 aes(x = long,y = lat,
                     group = group),
                 fill = 'transparent',
                 color = 'black',
                 size = 0.5)+
    geom_tile(data = pmedfneg,
              aes(x = long,y = lat,
                  fill = levels))+
    scale_fill_manual(values = fils)+
    theme_bw()
    
  
  
  
  
  
  
}
calc_pmemmk_io <- function(
  
){
  pr = data_management('era5_pr_include_ocean')
  e = data_management('era5_e_include_ocean')
  
  pme = pr - e
  
  io= shp_management('ocean','io')
  
  pme = mask(crop(pme,io),io)
  
  pmedf = as.data.frame(pme,xy = T)
  naid = which(is.na(pmedf[,3]))
  pmedf = pmedf[-naid,]
  
  loc = pmedf[,c(1,2)]
  pmedf = pmedf[,-c(1,2)]
  
  sub_calc_mmk<-function(i){
    source("/home/share/R_project/xinjiang_vapor/mmkTrend.R")
    x = pmedf[i,]
    x = as.numeric(x)
    x = mmkTrend(x)$Zc
    
    return(x)
  }
  
  pmedf <<- pmedf
  i = 1:nrow(pmedf)
  i <<- i
  
  library(doParallel)
  cl= makeCluster(10)
  clusterExport(cl,c('pmedf','i'))
  system.time(ret <- parLapply(cl,i,sub_calc_mmk))
  stopCluster(cl)
  
  mmkio = do.call(c,ret)
  
  dfmmkio = data.frame(
    long = loc[,1],
    lat = loc[,2],
    mmkio = mmkio
  )
  
  output = 'output/pme_mmkio'
  dir.create(output)
  output = paste0(output,'/pmemmkio.csv')
  fwrite(dfmmkio,output)

  
}
calc_population_density_tibet <- function(
  
){
  tibet = shp_management('tibet')
  global_pop = 'Data/global_population2020/gpw_v4/gpw_v4_pop2020.tif'
  gpop = raster(global_pop)
  gpop = mask(crop(gpop,tibet),tibet)
  output = 'output/pop_tibet/'
  dir.create(output)
  output = paste0(output,'/pop_tibet2020.tif')
  writeRaster(gpop,ouptut,overwrite = T)
  
  library(raster)
  setwd('/media/sdb5/Vapor_projcts/Vapor_tibet')
  neg_shps = list.files('/media/sdb5/Vapor_projcts/Vapor_tibet/shp/cluster_tws_neg_shp_deter',
                        full.names = T,pattern = '*.shp$')
  neg_shps = neg_shps[1:3]
  neg_shps = lapply(neg_shps,shapefile)
  neg_com = do.call('bind',neg_shps)
  
  tibet = shp_management('tibet')
  tps = tibet - neg_com
  
  tpm1 = neg_shps[[1]]
  tpm2 = neg_shps[[2]]
  
  shps = list(tpm1,tpm2,tps)

  pop_stat = 1
  for(i in 1:3){
    tmp = shps[[i]]
    tmp = mask(crop(gpop,tmp),tmp)
    tmp_stat = cellStats(tmp,sum)
    pop_stat =c(pop_stat,tmp_stat)
  }  
  pop_stat = pop_stat[-1]
  
  
  
  
}
calc_pr_in_tibet2 <- function(
  
){
  library(raster)
  tibetshp = list.files('shp/cluster_tws_neg_shp_deter/',
                        pattern = '*.shp$',
                        full.names = T)
  
  tibetshp = lapply(tibetshp,shapefile)
  tibetcom = do.call('bind',tibetshp)
  
  tibet = shp_management('tibet')
  tps = tibet - tibetcom
  tibetshp = tibetshp[1:2]
  # input global_pme
  global_pr = data_management('era5_pr_include_ocean')
  #global_eva = data_management('era5_e_include_ocean')
  
  global_pme = global_pr 
  world = shp_management('world')
  global_pme = raster::mask(global_pme,world)
  
  shps = list(tibetshp[[1]],tibetshp[[2]],
              tps)
  i = 1:3
  sub_calc<-function(i){
    tmp1  =crop(global_pme,shps[[i]])
    tmp1 = as.list(tmp1)
    tmp1 = lapply(tmp1,cellStats,mean,na.rm = T)
    
    tmp1 = do.call('c',tmp1)
    
    tmp1 = tmp1[1:174]
    tmp1 = ts(tmp1,start = c(2003,1),
              frequency = 12)
    tmp1 = decompose(tmp1)$trend
    
    tmp1 = tmp1[-which(is.na(tmp1))]
    
    tmp1 = (tmp1-mean(tmp1))/sd(tmp1)
    
    return(tmp1)
  }
  
  pme_subs = lapply(i,sub_calc)
  pme_subs = do.call('cbind',pme_subs)
  
  output = 'output/pr_tibet_region/prtp.csv'
  dir.create('output/pr_tibet_region')
  fwrite(pme_subs,output)
  
  
  
  
  
  
  
  
  
  
  
}
calc_project_multi_weighted_cmip6_pme_in_ato3 <- function(
  
){
  library(scales)
  standard_fun_index_era5 <-function(x){
    x = x[1:174]
    xs = (x - mean(x))/sd(x)
    return(xs)
  }
  trend_fun_index_cmip6_2003<-function(x){
    x = as.numeric(x)
    #x = x[loc2020:loc2050]
    x = x[1:174]
    xt = ts(x,start = c(2003,1),frequency = 12)
    xt = decompose(xt)$trend
    
    naid = which(is.na(xt))
    xt = xt[-naid]
    xt = (xt-mean(xt))/sd(xt)
    
    return(xt)
  }
  trend_fun_index_cmip6_fut<-function(x){
    x = as.numeric(x)
    #x = x[loc2020:loc2050]
    #x = x[1:174]
    xt = ts(x,start = c(2003,1),frequency = 12)
    xt = decompose(xt)$trend
    
    naid = which(is.na(xt))
    xt = xt[-naid]
    xt = (xt-mean(xt))/sd(xt)
    
    return(xt)
  }
  fullstand_pmeato3_by_model256 <-function(i){
    tmp256 = pmeato3_245[,i]
    tmp585 = pmeato3_585[,i]
    
    tmp256 = trend_fun_index_cmip6_fut(tmp256)
    tmp585 = trend_fun_index_cmip6_fut(tmp585)
    
    means = mean(c(tmp256,tmp585))
    sds = sd(c(tmp256,tmp585))
    
    tmp256 = (tmp256 - means)/sds
    tmp585 = (tmp585 - means)/sds
    
    return(tmp256)
  }
  fullstand_pmeato3_by_model585 <-function(i){
    tmp256 = pmeato3_245[,i]
    tmp585 = pmeato3_585[,i]
    
    tmp256 = trend_fun_index_cmip6_fut(tmp256)
    tmp585 = trend_fun_index_cmip6_fut(tmp585)
    
    means = mean(c(tmp256,tmp585))
    sds = sd(c(tmp256,tmp585))
    
    tmp256 = (tmp256 - means)/sds
    tmp585 = (tmp585 - means)/sds
    
    return(tmp585)
  }
  stand_fun<-function(x){
    x = (x-mean(x))/sd(x)
  }
  
  era5_ato = import_index_insource_tibet('pme_mean','ato')
  era5_ato = apply(era5_ato,2,trend_fun_index_cmip6_2003)
  
  pmeato_cmip6 = import_index_insource_tibet(var = 'pme_cmip6',
                                             region = 'ato')
  pmeato245 = pmeato_cmip6[[1]]
  pmeato585 = pmeato_cmip6[[2]]
  
  pmeato3_245 = pmeato245[[2]]
  pmeato3_585 = pmeato585[[2]]
  
  #i = 1:8
  histpmeato3_245 = apply(pmeato3_245,2,
                                         trend_fun_index_cmip6_2003)
  histpmeato3_585 = apply(pmeato3_585,2,
                                         trend_fun_index_cmip6_2003)
  pmeato3_245 = apply(pmeato3_245,2,trend_fun_index_cmip6_fut)
  pmeato3_585 = apply(pmeato3_585,2,trend_fun_index_cmip6_fut)
  
  #pmeato3_245 = do.call(cbind,lapply(i,
  #                                   fullstand_pmeato3_by_model256))
  #pmeato3_585 = do.call(cbind,lapply(i,
  #                                   fullstand_pmeato3_by_model585))
  
  
  set.seed(1234)
  full_id = 1:162
  train_id = unique(round(runif(1380,1,162)))[1:138]
  test_id = full_id[-train_id]
  
  aim = era5_ato[,3]
  trainaim = aim[train_id]
  testaim = aim[test_id]
  
  train_pmeato3_245 = histpmeato3_245[train_id,]
  train_pmeato3_585 = histpmeato3_585[train_id,]
  test_pmeato3_245 = histpmeato3_245[test_id,]
  test_pmeato3_585 = histpmeato3_585[test_id,]
  
  
  model1 = lm(trainaim~train_pmeato3_245)
  model2 = lm(trainaim~train_pmeato3_585)
  
  id1 = c(1,2,4,5,6,8)
  id2 = c(1,2,4,6,8)
  
  #id1 = 1:8
  #id2 = 1:8
  
  train_pmeato3_245 = train_pmeato3_245[,id1]
  train_pmeato3_585 = train_pmeato3_585[,id2]
  
  model1 = lm(trainaim~train_pmeato3_245)
  model2 = lm(trainaim~train_pmeato3_585)
  
  coeff1 = model1$coefficients
  coeff2 = model2$coefficients
  
  coeff1 = as.numeric(coeff1)
  coeff2 = as.numeric(coeff2)
  
  train_pmeato3_245 = cbind(inte = 1,train_pmeato3_245)
  train_pmeato3_585 = cbind(inte = 1,train_pmeato3_585)
  test_pmeato3_245 = cbind(inte = 1,test_pmeato3_245[,id1])
  test_pmeato3_585 = cbind(inte = 1,test_pmeato3_585[,id2])
  histpmeato3_245 = cbind(inte= 1,histpmeato3_245[,id1])
  histpmeato3_585 = cbind(inte = 1,histpmeato3_585[,id2])
  pmeato3_245 = cbind(inte = 1,pmeato3_245[,id1])
  pmeato3_585 = cbind(inte = 1,pmeato3_585[,id2])
  
  proj_train_pmeato3_245 = as.numeric(coeff1 %*% t(train_pmeato3_245))
  proj_train_pmeato3_585 = as.numeric(coeff2 %*% t(train_pmeato3_585))
  proj_test_pmeato3_245 = as.numeric(coeff1 %*% t(test_pmeato3_245))
  proj_test_pmeato3_585 = as.numeric(coeff2 %*% t(test_pmeato3_585))
  proj_hist_pmeato3_245 = as.numeric(coeff1 %*% t(histpmeato3_245))
  proj_hist_pmeato3_585 = as.numeric(coeff2 %*% t(histpmeato3_585))
  proj_fut_pmeato3_245 = as.numeric(coeff1 %*% t(pmeato3_245))
  proj_fut_pmeato3_585 = as.numeric(coeff2 %*% t(pmeato3_585))
  
  proj_train_pmeato3_245 = stand_fun(proj_train_pmeato3_245)
  proj_train_pmeato3_585 = stand_fun(proj_train_pmeato3_585)
  proj_test_pmeato3_245 = stand_fun(proj_test_pmeato3_245)
  proj_test_pmeato3_585 = stand_fun(proj_test_pmeato3_585)
  proj_hist_pmeato3_245 = stand_fun(proj_hist_pmeato3_245)
  proj_hist_pmeato3_585 = stand_fun(proj_hist_pmeato3_585)
  proj_fut_pmeato3_245 = stand_fun(proj_fut_pmeato3_245)
  proj_fut_pmeato3_585 = stand_fun(proj_fut_pmeato3_585)
  
  output = 'output/proj_fut_pmeato3_mutli_weight'
  dir.create(output)
  output1 = paste0(output,'/proj_fut_pmeato3.csv')
  
  ret = data.frame(
    ssp245 = proj_fut_pmeato3_245,
    ssp585 = proj_fut_pmeato3_585
  )
  
  #fwrite(ret,output1)
  
  
  cor1 = cor(proj_train_pmeato3_245,trainaim)
  pvs1 = cor.test(proj_train_pmeato3_245,trainaim)$p.value
  
  cor2 = cor(proj_train_pmeato3_585,trainaim)
  pvs2 = cor.test(proj_train_pmeato3_585,trainaim)$p.value
  
  cor3 = cor(proj_test_pmeato3_245,testaim)
  pvs3 = cor.test(proj_test_pmeato3_245,testaim)$p.value
  
  cor4 = cor(proj_test_pmeato3_585,testaim)
  pvs4 = cor.test(proj_test_pmeato3_585,testaim)$p.value
  
  cor5 = cor(proj_hist_pmeato3_245,era5_ato[,3])
  pvs5 = cor.test(proj_hist_pmeato3_245,era5_ato[,3])$p.value
  
  cor6 = cor(proj_hist_pmeato3_585,era5_ato[,3])
  pvs6 = cor.test(proj_hist_pmeato3_585,era5_ato[,3])$p.value
  
  dfcor1 = data.frame(
    x = 0,
    y = c(-1.75,-2.3),
    label = c(paste0(c('SSP245','SSP585'),' cor:',round(c(cor1,cor2),2),'(',
                     scientific(c(pvs1,pvs2),2),')')),
    variable= c("SSP245",'SSP585')
  )
  
  dfcor2 = data.frame(
    x = 0,
    y = c(-1.75,-2.3),
    label = c(paste0(c('SSP245','SSP585'),' cor:',round(c(cor3,cor4),2),'(',
                     scientific(c(pvs3,pvs4),2),')')),
    variable= c("SSP245",'SSP585')
  )
  
  dfcor3 = data.frame(
    x = date[5],
    y = c(-2.3,-2.8),
    label = c(paste0(c('SSP245','SSP585'),' cor:',round(c(cor5,cor6),2),'(',
                     scientific(c(pvs5,pvs6),2),')')),
    variable= c("SSP245",'SSP585')
  )
  
  
  df1 = data.frame(
    ERA5 = trainaim,
    SSP245 = proj_train_pmeato3_245,
    SSP585 = proj_train_pmeato3_585
  )
  df1 = reshape2::melt(df1,'ERA5')
  df1$type = '(a) Projected PME in NATO3 by 85% train sample'
  
  df2 = data.frame(
    ERA5 = testaim,
    SSP245 = proj_test_pmeato3_245,
    SSP585 = proj_test_pmeato3_585
  )
  df2 = reshape2::melt(df2,'ERA5')
  df2$type = '(b) Projected PME in NATO3 by 15% test sample'
  
  
  date = seq(as.Date('2003-07-01'),as.Date('2016-12-01'),
             '1 month')
  df3 = data.frame(
    date = date,
    ERA5 = era5_ato[,3],
    SSP245 = proj_hist_pmeato3_245,
    SSP585 = proj_hist_pmeato3_585
  )
  
  df3 = reshape2::melt(df3,'date')
  df3$type = '(c) Projected PME in NATO3 by full sequential data'
  
  
  fontsize = 14
  text_theme = theme(
    axis.text = element_text(size = fontsize,color = 'black'),
    axis.title = element_text(size = fontsize,color = 'black'),
    legend.text = element_text(size = fontsize,color = 'black'),
    legend.title = element_text(size = fontsize,color = 'black'),
    strip.text = element_text(size = fontsize,color = 'black')
  )
  df = rbind(df1,df2)
  
  cols1 = ggsci::pal_lancet()(9)[c(4,7)]
  p1 = ggplot()+
    geom_abline(intercept = 0,slope = 1)+
    geom_point(data= df1,aes(x = ERA5,
                            y = value,
                            color = variable),
               size = 3,shape = 1)+
    geom_text(data = dfcor1,
              aes(x = x,y = y,label = label,
                  color = variable),
              size = 4,show.legend = F,
              hjust = 0)+
    facet_wrap(~type,ncol = 1,
               scales = 'free')+
    scale_color_manual(values = cols1)+
    theme_bw()+
    text_theme+
    xlab('ERA5')+
    ylab('Indices')
  
  cols1 = ggsci::pal_lancet()(9)[c(4,7)]
  p2 = ggplot()+
    geom_abline(intercept = 0,slope = 1)+
    geom_point(data= df2,aes(x = ERA5,
                             y = value,
                             color = variable),
               size = 3,shape = 1)+
    geom_text(data = dfcor2,
              aes(x = x,y = y,label = label,
                  color = variable),
              size = 4,show.legend = F,
              hjust = 0)+
    facet_wrap(~type,ncol = 1,
               scales = 'free')+
    scale_color_manual(values = cols1)+
    theme_bw()+
    text_theme+
    xlab('ERA5')+
    ylab('Indices')
  
  cols2 = ggsci::pal_lancet()(9)[c(1,4,7)]
  p3 = ggplot()+
    
    geom_line(data= df3,aes(x = date,
                             y = value,
                             color = variable),
               size = 1.3)+
    geom_text(data = dfcor3,
              aes(x = x,y = y,label = label,
                  color = variable),
              size = 4,show.legend = F,
              hjust = 0)+
    facet_wrap(~type,ncol = 1,
               scales = 'free')+
    scale_color_manual(values = cols2)+
    theme_bw()+
    text_theme+
    xlab('Time')+
    ylab('Indices')
  
  pleg1 = as_ggplot(get_legend(p1))
  pleg2 = as_ggplot(get_legend(p3+theme(legend.position = 'bottom')+
                                 guides(color = guide_legend(title = ''))))
  
  p1 = p1+theme(legend.position = 'none')
  p2 = p2+theme(legend.position = 'none')
  p3 = p3+theme(legend.position = 'none')
  
  p12 = plot_grid(p1,p2,nrow = 1,
                  rel_widths = c(1,1),
                  rel_heights = c(1,1))
  
  
  p123 = plot_grid(p12,p3,
                   ncol = 1,
                   rel_widths = c(1,1),
                   rel_heights = c(1,1))
  p123 = plot_grid(p123,
                   pleg2,ncol = 1,
                   rel_widths = c(1,1),
                   rel_heights = c(10,1))
  
  
  output = 'main_plot/SI/figs_project_multi_weighted_cmip6_pme_in_ato3'
  dir.create(output)
  output_main = paste0(output,'/figs_project_multi_weighted_cmip6_pmeato3.png')
  output_leg = paste0(output,'/figs_point_leg.png')
  
  png(output_main,
      height = 25,
      width = 27,
      units = 'cm',
      res = 800)
  print(p123)
  dev.off()
  
  png(output_leg,
      height = 25,
      width = 25,
      units = 'cm',
      res = 800)
  print(pleg1)
  dev.off()
  
  
  
  
  
}
calc_regional_mean_consider_earth_ratio <- function(
  df,ras
){
  
  
  naid = which(is.na(df[,3]))
  if(length(naid)>0){
    df = df[-naid,]
  }
  
  lat = df[,2]
  
  calc_area <- function(cenlat){
    area_res = res(ras)[1]
    lat1 = cenlat + res(ras)
    lat2 = cenlat - res(ras)
    
    area = pi*6400^2 *abs(sin(lat1) - sin(lat2))*area_res
    area = area/180
    return(area)
  }
  
  areas = sapply(lat,calc_area)
  sum_area = sum(areas)
  
  ratio = areas/sum_area
  
  loc = df[,c(1,2)]
  df = df[,-c(1,2)]
  
  multi_weight_calc <- function(i){
    x = df2[i,]*ratio[i]
    return(x)
  }
  i = 1:nrow(df)
  
  
  i <<- i
  df2 <<- df
  ratio <<-ratio
  library(doParallel)
  cl = makeCluster(10)
  clusterExport(cl,c('i','df2','ratio'))
  ret = parLapply(cl,i,multi_weight_calc)
  stopCluster(cl)
  
  ret = do.call('rbind',ret)
  ret_mean = apply(ret,2,sum,na.rm = T)
  
  
  trend_fun_calc<-function(x){
    x = ts(x ,start = c(2003,1),frequency = 12)
    x = decompose(x)$trend
    
    x = x[-which(is.na(x))]
    x = (x-mean(x))/sd(x)
    return(x)
  }
  
  st_ret_mean = trend_fun_calc(ret_mean)
  
  return(st_ret_mean)
}
calc_snow_water_equivilent_tibet <- function(
  
){
  library(raster)
  setwd('/media/sdb5/Vapor_projcts/Vapor_tibet')
  neg_shps = list.files('/media/sdb5/Vapor_projcts/Vapor_tibet/shp/cluster_tws_neg_shp_deter',
                        full.names = T,pattern = '*.shp$')
  neg_shps = neg_shps[1:3]
  neg_shps = lapply(neg_shps,shapefile)
  neg_com = do.call('bind',neg_shps)
  
  tibet = shp_management('tibet')
  tps = tibet - neg_com
  
  tpm1 = neg_shps[[1]]
  tpm2 = neg_shps[[2]]
  
  swe = data_management('gldas_snow')
  
  shps = list(tpm1,tpm2,tps)
  swe_box = 1
  for(i in 1:3){
    tmp_swe = mask(crop(swe,shps[[i]]),shps[[i]])
    
    tmp_swe = as.list(tmp_swe)
    
    tmp_swe = lapply(tmp_swe,cellStats,stat = 'mean')
    
    tmp_swe = do.call(c,tmp_swe)
    tmp_swe = tmp_swe[1:174]
    tmp_swe = ts(tmp_swe,start = c(2003,1),frequency = 12)
    tmp_swe = decompose(tmp_swe)$trend
    tmp_swe = tmp_swe[-which(is.na(tmp_swe))]
    tmp_swe = (tmp_swe - mean(tmp_swe))/sd(tmp_swe)
    swe_box = cbind(swe_box,tmp_swe)
    
  }
  swe_box = swe_box[,-1]
  
  dir.create('output/mean_swe_tibet/')
  
  colnames(swe_box) = c('tpm1','tpm2','tps')
  fwrite(swe_box,'output/mean_swe_tibet/mean_swe_box.csv')
  
  
  
}
calc_temperature_ato <- function(
  
){
  library(raster)
  setwd('/media/sdb5/Vapor_projcts/Vapor_tibet')
  
  temper = data_management('global_era5_temperature')
  
  shps = shp_management('ocean','ato')
  temper = mask(crop(temper,shps),shps)
  
  shps = shp_management('cluster_ato')
  
  
  temper_box = 1
  for(i in 1:4){
    tmp_temper = crop(temper,shps[[i]])
    
    tmp_temper = as.list(tmp_temper)
    
    tmp_temper = lapply(tmp_temper,cellStats,stat = 'mean')
    
    tmp_temper = do.call(c,tmp_temper)
    tmp_temper = tmp_temper[1:174]
    tmp_temper = ts(tmp_temper,start = c(2003,1),frequency = 12)
    tmp_temper = decompose(tmp_temper)$trend
    tmp_temper = tmp_temper[-which(is.na(tmp_temper))]
    tmp_temper = (tmp_temper - mean(tmp_temper))/sd(tmp_temper)
    temper_box = cbind(temper_box,tmp_temper)
    
  }
  temper_box = temper_box[,-1]
  
  dir.create('output/mean_temperature_ato/')
  
  colnames(temper_box) = c('nato1','nato2','nato3','ntot4')
  fwrite(temper_box,'output/mean_temperature_ato/mean_temper_box.csv')
  
}
calc_temperature_io <- function(
  
){
  library(raster)
  setwd('/media/sdb5/Vapor_projcts/Vapor_tibet')
  
  temper = data_management('global_era5_temperature')
  
  shps = shp_management('ocean','io')
  temper = mask(crop(temper,shps),shps)
  
  shps = shp_management('cluster_io')
  
  
  temper_box = 1
  for(i in 1:4){
    tmp_temper = crop(temper,shps[[i]])
    
    tmp_temper = as.list(tmp_temper)
    
    tmp_temper = lapply(tmp_temper,cellStats,stat = 'mean')
    
    tmp_temper = do.call(c,tmp_temper)
    tmp_temper = tmp_temper[1:174]
    tmp_temper = ts(tmp_temper,start = c(2003,1),frequency = 12)
    tmp_temper = decompose(tmp_temper)$trend
    tmp_temper = tmp_temper[-which(is.na(tmp_temper))]
    tmp_temper = (tmp_temper - mean(tmp_temper))/sd(tmp_temper)
    temper_box = cbind(temper_box,tmp_temper)
    
  }
  temper_box = temper_box[,-1]
  
  dir.create('output/mean_temperature_io/')
  
  colnames(temper_box) = c('nio1','nio2','nio3','ntot4')
  fwrite(temper_box,'output/mean_temperature_io/mean_temper_box.csv')
  
}
calc_temperature_tibet <- function(
  
){
  library(raster)
  setwd('/media/sdb5/Vapor_projcts/Vapor_tibet')
  neg_shps = list.files('/media/sdb5/Vapor_projcts/Vapor_tibet/shp/cluster_tws_neg_shp_deter',
                        full.names = T,pattern = '*.shp$')
  neg_shps = neg_shps[1:3]
  neg_shps = lapply(neg_shps,shapefile)
  neg_com = do.call('bind',neg_shps)
  
  tibet = shp_management('tibet')
  tps = tibet - neg_com
  
  tpm1 = neg_shps[[1]]
  tpm2 = neg_shps[[2]]
  
  temper = data_management('global_era5_temperature')
  
  shps = list(tpm1,tpm2,tps)
  temper_box = 1
  for(i in 1:3){
    tmp_temper = mask(crop(temper,shps[[i]]),shps[[i]])
    
    tmp_temper = as.list(tmp_temper)
    
    tmp_temper = lapply(tmp_temper,cellStats,stat = 'mean')
    
    tmp_temper = do.call(c,tmp_temper)
    tmp_temper = tmp_temper[1:174]
    tmp_temper = ts(tmp_temper,start = c(2003,1),frequency = 12)
    tmp_temper = decompose(tmp_temper)$trend
    tmp_temper = tmp_temper[-which(is.na(tmp_temper))]
    tmp_temper = (tmp_temper - mean(tmp_temper))/sd(tmp_temper)
    temper_box = cbind(temper_box,tmp_temper)
    
  }
  temper_box = temper_box[,-1]
  
  dir.create('output/mean_temperature_tibet/')
  
  colnames(temper_box) = c('tpm1','tpm2','tps')
  fwrite(temper_box,'output/mean_temperature_tibet/mean_temper_box.csv')
  
  
  
}
calc_temperature_north_tibet <- function(
  
){
  library(raster)
  setwd('/media/sdb5/Vapor_projcts/Vapor_tibet')
  neg_shps = list.files('/media/sdb5/Vapor_projcts/Vapor_tibet/shp/cluster_tws_neg_shp_deter',
                        full.names = T,pattern = '*.shp$')
  neg_shps = neg_shps[1:3]
  neg_shps = lapply(neg_shps,shapefile)
  
  ntp = neg_shps[[3]]
  
  temper = data_management('global_era5_temperature')
  
  shps = list(ntp)
  temper_box = 1
  for(i in 1:1){
    tmp_temper = mask(crop(temper,shps[[i]]),shps[[i]])
    
    tmp_temper = as.list(tmp_temper)
    
    tmp_temper = lapply(tmp_temper,cellStats,stat = 'mean')
    
    tmp_temper = do.call(c,tmp_temper)
    tmp_temper = tmp_temper[1:174]
    tmp_temper = ts(tmp_temper,start = c(2003,1),frequency = 12)
    tmp_temper = decompose(tmp_temper)$trend
    tmp_temper = tmp_temper[-which(is.na(tmp_temper))]
    tmp_temper = (tmp_temper - mean(tmp_temper))/sd(tmp_temper)
    temper_box = cbind(temper_box,tmp_temper)
    
  }
  temper_box = temper_box[,-1]
  
  #dir.create('output/mean_temperature_tibet/')
  
  colnames(temper_box) = c('ntp')
  fwrite(temper_box,'output/mean_temperature_tibet/mean_temper_north_tp.csv')
  
  
  
}
calc_temperature_trend_tibet <- function(
  
){
  tibet = shp_management('tibet')
  
  temper = data_management('global_era5_temperature')
  temper = mask(crop(temper,tibet),tibet)
  dftemper = as.data.frame(temper,xy = T)
  naid = which(is.na(dftemper[,3]))
  dftemper = dftemper[-naid,]
  
  loc = dftemper[,1:2]
  colnames(loc) = c('long','lat')
  dftemper = dftemper[,-c(1,2)]
  
  dftemper = dftemper - 273.15
  dftemper = t(dftemper)
  
  calc_trend_fun <- function(i){
    source("/home/share/R_project/xinjiang_vapor/mmkTrend.R")
    x = dftemper[,i]
    x = as.numeric(x)
    xt= mmkTrend(x)$Zc
    return(xt)
  }
  
  i = 1:ncol(dftemper)
  i <<- i
  dftemper <<- dftemper
  library(doParallel)
  cl = makeCluster(10)
  clusterExport(cl,c('i','dftemper'))
  system.time(ret_df <- parLapply(cl,i,calc_trend_fun))
  stopCluster(cl)
  ret_df = do.call(c,ret_df)
  
  dfmmk_temper = data.frame(
    loc,
    mmk_temperature = ret_df
  )
  
  dfmmk_temperm = reshape2::melt(dfmmk_temper,c('long','lat'))
  dfmmk_temperm$levels = cut(dfmmk_temperm$value,
                             breaks = seq(-0.85,3.75,0.5))
  library(RColorBrewer)
  cols = colorRampPalette(brewer.pal(9,'Spectral'))(length(unique(dfmmk_temperm$levels)))
  
  
  p = ggplot()+
    geom_tile(data = dfmmk_temperm,
              aes(x = long,y = lat,fill = levels))+
    scale_fill_brewer(palette = 'Spectral',direction = -1)
  
  
  
  
}
calc_tws_bigsubs_tibet<-function(
  
){
  tws = data_management('grace')
  world = shp_management('world')
  tws = mask(tws,world)
  
  input_shp = paste0('shp/big_scale_subs/','region',1:15,'.shp')
  
  shp_list = lapply(input_shp,shapefile)
  shp_combine = do.call('bind',shp_list)
  shp_combine = shp_combine - tibet
  tws =mask(crop(tws,shp_combine),shp_combine)
  
  
  tws <<- tws
  i = 1:15
  i <<- i 
  shp_list <<- shp_list
  
  sub_calc_region_sum_tws_big_scale<-function(i){
    library(raster)
    tmptws = mask(crop(tws,shp_list[[i]]),shp_list[[i]])
    tmptws = as.list(tmptws)
    
    twssubs = lapply(tmptws,cellStats,stat = 'sum',na.rm = T)
    twssubs = do.call('c',twssubs)
    return(twssubs)
  }
  
  library(doParallel)
  cl = makeCluster(10)
  clusterExport(cl,c('tws','i','shp_list'))
  retdf = parLapply(cl,i,sub_calc_region_sum_tws_big_scale)
  stopCluster(cl)
  
  tws_subs = do.call('cbind',retdf)
  stand_trend_fun <-function(x){
    xm = ts(x,start =c(2003,1),frequency = 12)
    xm = decompose(xm)$trend
    naid = which(is.na(xm))
    xm = xm[-naid]
    xm = (xm - mean(xm,na.rm = T))/sd(xm,na.rm= T)
    return(xm)  
  }
  
  tws_subs = apply(tws_subs,2,stand_trend_fun)
  
  
  id= c(10,11,12,13,15)
  tws_subs1 = tws_subs[,id]
  # tws in plaeatu increasing surface
  tws = data_management('grace')
  cluster_shp = lapply(list.files('shp/cluster_tws_neg_shp_deter/',
                                  pattern = '*.shp$',
                                  full.names = T),shapefile)
  cluster_shp = do.call('bind',cluster_shp)
  tibet_increasing = tibet - cluster_shp
  tws_tibet = mask(crop(tws,tibet_increasing),tibet_increasing)
  tws_tibet = as.list(tws_tibet)
  tws_tibet = lapply(tws_tibet,cellStats,stat = 'sum',na.rm = T)
  tws_tibet = do.call('c',tws_tibet)
  tws_tibet = stand_trend_fun(tws_tibet)
  plot(tws_tibet)
  
  calc_mmk<-function(x){
    x = mmkTrend(x)$Zc
    return(x)
  }
  tws_subs_mmk = apply(tws_subs,2,calc_mmk)
}
calc_tws_in_all_subs <- function(
  
){
  bigsubs = 'shp/big_scale_subs/'
  hsrid = as.data.frame(fread('main_plot_data/fig2/HSRid.csv'))
  hsrid = as.numeric(hsrid$HSRid)
  
  bigsubs = paste0(bigsubs,
                   'region',1:15,'.shp')
  bigsubs = lapply(bigsubs,shapefile)
  
  bigsubs1 = bigsubs[1:6]
  bigsubs2 = bigsubs[7:12]
  bigsubs3 = bigsubs[13:15]
  
  bigsubs1 = do.call('bind',bigsubs1)
  bigsubs2 = do.call('bind',bigsubs2)
  bigsubs3 = do.call('bind',bigsubs3)
  
  tws = data_management('grace')
  world = shp_management('world')
  library(raster)
  tws = raster::mask(tws,world)
  
  
  shps = list(bigsubs1,bigsubs2,
              bigsubs3)
  i = 1:3
  sub_calc<-function(i){
    library(raster)
    tmp1  = raster::crop(tws,shps[[i]])
    tmp1 = as.list(tmp1)
    tmp1 = lapply(tmp1,cellStats,mean,na.rm = T)
    
    tmp1 = do.call('c',tmp1)
    
    tmp1 = tmp1[1:174]
    tmp1 = ts(tmp1,start = c(2003,1),
              frequency = 12)
    tmp1 = decompose(tmp1)$trend
    
    tmp1 = tmp1[-which(is.na(tmp1))]
    
    tmp1 = (tmp1-mean(tmp1))/sd(tmp1)
    
    return(tmp1)
  }
  
  tws_subs = lapply(i,sub_calc)
  tws_subs = do.call('cbind',tws_subs)
  
  output = 'output/tws_subs_combine/twssubs.csv'
  dir.create('output/tws_subs_combine')
  fwrite(tws_subs,output)
}
calc_tws_in_bigsubs <- function(
  
){
  tws = data_management('grace')
  world = shp_management('world')
  world = crop(world,extent(-180,180,0,90))
  tws = mask(tws, world)
  
  input_subs = 'shp/big_scale_subs'
  input_subs = paste0(input_subs,'/region',1:15,'.shp')
  bigsubs = lapply(input_subs,shapefile)
  bigcom = do.call(bind,bigsubs)
  
  tibet = shp_management('tibet')
  
  # pre cut 
  
  i= c(11,13,14)
  for(i in i){
    tmp= bigsubs[[i]]
    tmptibet = crop(tibet,extent(tmp))
    tmp = tmp - tmptibet
    plot(tmp)
    bigsubs[[i]] = tmp
  }
  
  i = c(1:12,13,15)
  bigsubs1 = bigsubs[i]
  
  i = 1:length(bigsubs1)
  bigsubs1 <<- bigsubs1
  tws <<- tws
  i <<- i 
  sub_calc_tws_insubs <- function(i){
    library(raster)
    tmpbig = bigsubs1[[i]]
    tmptws = raster::mask(crop(tws,tmpbig),
                          tmpbig)
    
    tmptws = as.list(tmptws)
    
    twssum = lapply(tmptws,cellStats,stat = 'sum',na.rm = T)
    twssum = do.call('c',twssum)
    
    stand_fun_tws <- function(x){
      x = ts(x,start = c(2003,1),frequency = 12)
      x = decompose(x)$trend
      x = x[-which(is.na(x))]
      
      x = x/sd(x)
      return(x)
    }
    
    twssum = stand_fun_tws(twssum)
    
    return(twssum)
  }
  
  library(doParallel)
  cl = makeCluster(10)
  clusterExport(cl,c('i','tws','bigsubs1'))
  ret_tws = parLapply(cl,i,sub_calc_tws_insubs)
  stopCluster(cl)
  
  ret_tws = do.call(cbind,ret_tws)
  
  colnames(ret_tws) = paste0('SR',1:14)
  
  dir.create('main_plot_data/fig2/')
  fwrite(ret_tws,'main_plot_data/fig2/tws_subs.csv')
  
  
  # calc neg_shps
  neg_shps = 'shp/cluster_tws_neg_shp_deter'
  neg_shps = list.files(neg_shps,full.names = T,pattern = '*.shp$')
  neg_shps = lapply(neg_shps,shapefile)
  
  neg_shps1 = do.call(bind,neg_shps)
  pos_shps = tibet - neg_shps1
  
  
  tibetshps = c(neg_shps[1:2],pos_shps)
  
  tibetshps <<- tibetshps
  i = 1:3
  i <<- i
  
  sub_calc_tws_intibet <- function(i){
    library(raster)
    tmpbig = tibetshps[[i]]
    tmptws = raster::mask(crop(tws,tmpbig),
                          tmpbig)
    
    tmptws = as.list(tmptws)
    
    twssum = lapply(tmptws,cellStats,stat = 'sum',na.rm = T)
    twssum = do.call('c',twssum)
    
    stand_fun_tws <- function(x){
      x = ts(x,start = c(2003,1),frequency = 12)
      x = decompose(x)$trend
      x = x[-which(is.na(x))]
      
      x = x/sd(x)
      return(x)
    }
    
    twssum = stand_fun_tws(twssum)
    
    return(twssum)
  }
  
  cl = makeCluster(10)
  clusterExport(cl,c('i','tibetshps','tws'))
  ret_tws_tp = parLapply(cl,i,sub_calc_tws_intibet)
  stopCluster(cl)
  
  ret_tws_tp = do.call(cbind,ret_tws_tp)
  colnames(ret_tws_tp) = c('TWS_Moun1','TWS_Moun2','TWS_Pos')
  
  fwrite(ret_tws_tp,'main_plot_data/fig2/twstp.csv')
  
  
  
  
  
  
  
  
}
calc_tws_tibet_peryear <- function(
  
){
  tws = data_management('grace')
  tibet = shp_management('tibet')
  
  tws = raster::mask(crop(tws,tibet),tibet)
  
  fulid = 1:168
  sid = seq(1,168,12)
  eid = seq(12,168,12)
  
  calc_fun <- function(x){
    x = matrix(x,nrow = 12)
    x = apply(x,1,mean)
    x = sum(x)
    return(x)
  }
  
  
  
  # 2003-2004
  tmptws = tws[[1:24]]
  tmptws = calc(tmptws,calc_fun)
  
  # 2005
  tmptws1 = tws[[25:36]]
  tmptws1 = calc(tmptws1,calc_fun)
  
  # 2006 - 2016
  tmptws2= tws[[37:72]]
  tmptws2 = calc(tmptws2,calc_fun)
  
  # 2009 - 2016
  tmptws3 = tws[[73:168]]
  tmptws3 =  calc(tmptws3,calc_fun)
  
  
  tws0304 = as.data.frame(tmptws,xy = T)
  tws05 = as.data.frame(tmptws1,xy = T)
  tws0608 = as.data.frame(tmptws2,xy = T)
  tws0916 = as.data.frame(tmptws3,xy = T)
  
  
  colnames(tws0304) = c('long','lat','tws')
  colnames(tws05) = c('long','lat','tws')
  colnames(tws0608) = c('long','lat','tws')
  colnames(tws0916) = c('long','lat','tws')
  
  fwrite(tws0304,'main_plot_data/fig3/tws0304.csv')
  fwrite(tws05,'main_plot_data/fig3/tws05.csv')
  fwrite(tws0608,'main_plot_data/fig3/tws0608.csv')
  fwrite(tws0916,'main_plot_data/fig3/tws0916.csv')
  
  
}
calc_tws_trends_across_eurasia <- function(
  
){
  library(doParallel)
  library(data.table)
  world = shp_management('world')
  world = crop(world,extent(-180,180,0,90))
  
  tws = data_management('grace')
  tibet = shp_management('tibet')
  world = shp_management('world')
  ex = extent(tibet)
  inputsubs = paste0('shp/big_scale_subs/','region',1:15,'.shp')
  bigsubs = lapply(inputsubs,shapefile)
  bigsubs = do.call('bind',bigsubs)
  
  tws = raster::mask(crop(tws,
                          extent(-20,180,
                                 0,90)),world)
  
  twsdf = as.data.frame(tws,xy = T)
  #colnames(twsdf) = c('long','lat','tws')
  
  naid = which(is.na(twsdf[,3]))
  if(length(naid)!=0){
    twsdf = twsdf[-naid,]
  }
  
  long = twsdf[,1]
  lat = twsdf[,2]
  twsdf = twsdf[,-c(1,2)]
  
  sub_calc_mon_ann_mean <-function(i){
    source('/home/share/R_project/xinjiang_vapor/mmkTrend.R')
    x = as.numeric(twsdf[i,])
    #x = trend_fun(x)
    x = c(x,rep(NA,6))
    xm = matrix(x,nrow = 12)
    xm = apply(xm,1,mean,na.rm = T)
    xm = sum(xm,na.rm = T)
    return(xm)
    
  }
  
  i = 1:nrow(twsdf)
  i <<- i
  twsdf<<-twsdf
  cl = makeCluster(10)
  clusterExport(cl,c('i','twsdf'))
  twsmonann = parLapply(cl,i,sub_calc_mon_ann_mean)
  stopCluster(cl)
  
  twsmonann = do.call('c',twsmonann)
  
  twsdf = data.frame(long = long,lat = lat,twsmonann = twsmonann)
  fwrite(twsdf,'main_plot_data/fig3/twsdf.csv')
  
  
  
  world = shp_management('world')
  world = crop(world,extent(-180,180,0,90))
  
  tws = data_management('grace')
  tibet = shp_management('tibet')
  world = shp_management('world')
  ex = extent(tibet)
  inputsubs = paste0('shp/big_scale_subs/','region',1:15,'.shp')
  bigsubs = lapply(inputsubs,shapefile)
  bigsubs = do.call('bind',bigsubs)
  
  tws = raster::mask(crop(tws,
                          extent(tibet)),tibet)
  
  twsdf = as.data.frame(tws,xy = T)
  #colnames(twsdf) = c('long','lat','tws')
  
  naid = which(is.na(twsdf[,3]))
  if(length(naid)!=0){
    twsdf = twsdf[-naid,]
  }
  
  long = twsdf[,1]
  lat = twsdf[,2]
  twsdf = twsdf[,-c(1,2)]
  
  sub_calc_mon_ann_mean <-function(i){
    source('/home/share/R_project/xinjiang_vapor/mmkTrend.R')
    x = as.numeric(twsdf[i,])
    #x = trend_fun(x)
    x = c(x,rep(NA,6))
    xm = matrix(x,nrow = 12)
    xm = apply(xm,1,mean,na.rm = T)
    xm = sum(xm,na.rm = T)
    return(xm)
    
  }
  
  i = 1:nrow(twsdf)
  i <<- i
  twsdf<<-twsdf
  cl = makeCluster(10)
  clusterExport(cl,c('i','twsdf'))
  twsmonann = parLapply(cl,i,sub_calc_mon_ann_mean)
  stopCluster(cl)
  
  twsmonann = do.call('c',twsmonann)
  
  twsdf = data.frame(long = long,lat = lat,twsmonann = twsmonann)
  twsdf = twsdf[which(twsdf$twsmonann >0),]
  
  fwrite(twsdf,'main_plot_data/fig3/postwsdf_tibet.csv')
  break
  
  
  
  twsdfneg = twsdf
  #twsdfneg = twsdf[which(twsdf$twsmonann <=0),]
  twsdfneg$levels = cut(twsdfneg$twsmonann,
                        breaks = c(-235,-150,-50,
                                   seq(-40,0,10),
                                   seq(10,70,20),500))
  
  nclass = length(unique(twsdfneg$levels))
  
  fils = colorRampPalette(brewer.pal(9,'Spectral'))(nclass*3)
  posfils = colorRampPalette(
    brewer.pal(9,'Spectral')[5:9]
  )(12)[seq(4,12,2)]
  cols = fils[24:30]
  fils = fils[c(seq(1,nclass*2,2)[1:7])]
  fils= c(fils,posfils)
  
  
  world_crop = crop(world,extent(-180,180,0,90))
  pt = ggplot()+
    geom_polygon(data = world_crop,
                 aes(x = long,y = lat,
                     group = group),
                 fill = 'transparent',
                 color = 'black',
                 size = 0.5)+
    geom_tile(data = twsdfneg,
              aes(x = long,y = lat,
                  fill = levels))+
    geom_polygon(data = tibet,
                 aes(x = long,y = lat,
                     group = group),
                 fill = 'transparent',
                 color = 'black',
                 size = 0.5)+
    #geom_path(data = northward_traj,
    #          aes(x = long,y = lat,
    #              color = factor(region),
    #              group = routeid),
    #          arrow = arrow(angle = 20,
    #                        length = unit(0.25,'cm'),
    #                        type = 'open'),
    #          size = 0.5)+
    scale_fill_manual(values = fils)+
    scale_color_manual(values = cols)+
    theme_bw()+
    ylim(0,50)
    
  pt
  
  return(twsdfneg)
}
calc_whole_eurasia_twsmmk_include_pos <- function(
  
){
  tws = data_management('grace')
  world = shp_management('world')
  tws = mask(tws,world)
  ex = extent(-20,180,0,90)
  tws = crop(tws,ex)
  dftws = as.data.frame(tws,xy = T)
  naid = which(is.na(dftws[,3]))
  dftws = dftws[-naid,]
  
  loc= dftws[,1:2]
  colnames(loc) = c('long','lat')
  dftws = dftws[,-c(1,2)]
    
  dftws = t(dftws)
  i = 1:ncol(dftws)
  i <<- i
  dftws <<- dftws

  
  calc_tws_mmk <- function(i){
    source('/home/share/R_project/xinjiang_vapor/mmkTrend.R')
    
    tmp = as.numeric(dftws[,i])
    tmptre = mmkTrend(tmp)$Zc
    return(tmptre)
  }
  library(doParallel)
  cl = makeCluster(12)
  clusterExport(cl,c('i','dftws'))
  system.time(ret_trend <- parLapply(cl,i,calc_tws_mmk))
  stopCluster(cl)
  ret_trend = do.call('c',ret_trend)
  
  dftrend = data.frame(
    loc,
    twsmmk = ret_trend
  )
  
  nanid = which(is.nan(dftrend$twsmmk))
  twsmmk = dftrend[-nanid,]
  
  
  output = dir.create('output/twsmmk_whole_eurasia_include_pos')
  output = 'output/twsmmk_whole_eurasia_include_pos/dftws_whole_trend.csv'
  fwrite(twsmmk,output)
  
  
  
  
}
cnn_model_predict_pme<-function(
  df,
  df_project,
  models,
  mode = 'ssp245',
  region = 'region1'
){
  library(data.table)
  library(keras)
  library(tensorflow)
  library(caret)
  set.seed(12345)
  indexes = createDataPartition(df$pme,
                                p = .85,
                                list = F)
  
  train = df[indexes,]
  test = df[-indexes,]
  
  ytrain = as.matrix(train[,1])
  xtrain = as.matrix(train[,2])
  
  xtest = as.matrix(test[,2])
  ytest = as.matrix(test[,1])
  
  xfut = as.matrix(df_project[,1])
  
  
  xtrain = array(xtrain,dim = c(nrow(xtrain),1,1))
  xtest = array(xtest,dim=c(nrow(xtest),1,1))
  xfut = array(xfut,dim=c(nrow(xfut),1,1))
  
  
  in_dim = c(dim(xtrain)[2:3])
  modifiy_fun_filters<-function(a){
    tensorflow::set_random_seed(12345)
    model = keras_model_sequential() %>%
      layer_conv_1d(filters = a,
                    kernel_size = 1,
                    input_shape = in_dim,
                    activation = 'relu') %>%
      layer_flatten() %>%
      layer_dense(units = 32,activation = 'relu') %>%
      layer_dense(units = 1,activation = 'linear')
    
    set.seed(12345)
    model %>%
      compile(loss ='mse',optimizer = 'adam')
    
    model %>% summary()
    set.seed(12345)
    model %>% fit(xtrain,ytrain,epochs = 100,
                  batch_size = 10,
                  verbose = 0)
    
    scores = model %>% evaluate(xtrain,ytrain,verbose = 0)
    ypred2 = model %>% predict(xtest)
    
    rmse = RMSE(ypred2,ytest)
    return(rmse)
  }
  filters = seq(1,100,10)
  #rmse = sapply(filters,modifiy_fun_filters)
  
  #id = which(rmse == min(rmse))
  #filters = filters[id]
  
  modifiy_fun_filters_calc<-function(a,xfut){
    tensorflow::set_random_seed(12345)
    model = keras_model_sequential() %>%
      layer_conv_1d(filters = 64,
                    kernel_size = 1,
                    input_shape = in_dim,
                    activation = 'relu') %>%
      #layer_dense(units = 16,activation = 'relu') %>%
      #layer_max_pooling_1d(1) %>%
      #layer_dense(units = 64,activation = 'relu') %>%
      #layer_max_pooling_1d(1) %>%
      layer_dense(units = 64,activation = 'relu') %>%
      layer_dense(units = 64,activation = 'linear') %>%
      layer_dense(units = 128,activation = 'relu') %>%
      layer_dense(units = 128,activation = 'linear') %>%
      layer_dense(units = 256,activation = 'relu') %>%
      layer_dense(units = 256,activation = 'linear') %>%
      #layer_flatten() %>%
      layer_dense(units = 1,activation = 'linear')
    
    
    
    
    set.seed(12345)
    model %>%
      compile(loss ='mse',
              optimizer = 'adam',
              #optimizer = optimizer_rmsprop(0.002),
              metrics = c('accuracy'))
    
    
    model %>% summary()
    set.seed(12345)
    model %>% fit(xtrain,ytrain,epochs = 700,
                  batch_size = 85,
                  verbose = 0)
    
    scores = model %>% evaluate(xtrain,ytrain,verbose = 0)
    ypred2 = model %>% predict(xtest)
    
    fut = model %>% predict(xfut)
    pred_test = model %>% predict(xtest)
    pred_train = model %>% predict(xtrain)
    #matplot(cbind(pred_test,ytest),type = 'l')
    #matplot(cbind(pred_train,ytrain),type = 'l')
    #print(RMSE(pred_test,ytest))
    #print(cor(pred_test,ytest))
    return(list(fut,pred_test,pred_train))
  }
  
  
  ret = modifiy_fun_filters_calc(60,xfut)
  fut = ret[[1]]
  pred_test = ret[[2]]
  pred_train = ret[[3]]
  
  pred_test = data.frame(ori_test = test$pme,
                         pred_test = pred_test)
  colnames(pred_test)[2] = models
  pred_train = data.frame(ori_train = train$pme,
                          pred_train = pred_train)
  colnames(pred_train)[2] = models
  
  file = paste0(region,'_',mode)
  output = 'output/validation_cnn_model_pme'
  dir.create(output)
  output = paste0(output,'/',file)
  dir.create(output)
  output1 = paste0(output,'/valid_test_pme_',models,'.csv')
  output2 = paste0(output,'/valid_train_pme_',models,'.csv')
  
  fwrite(pred_test,output1)
  fwrite(pred_train,output2)
  
  
  return(fut)
}
cnn_model_predict_pme<-function(
  df,
  df_project,
  models,
  mode = 'ssp245',
  region = 'region1'
){
  library(data.table)
  library(keras)
  library(tensorflow)
  library(caret)
  set.seed(12345)
  indexes = createDataPartition(df$pme,
                                p = .85,
                                list = F)
  
  train = df[indexes,]
  test = df[-indexes,]
  
  ytrain = as.matrix(train[,1])
  xtrain = as.matrix(train[,2])
  
  xtest = as.matrix(test[,2])
  ytest = as.matrix(test[,1])
  
  xfut = as.matrix(df_project[,1])
  
  
  xtrain = array(xtrain,dim = c(nrow(xtrain),1,1))
  xtest = array(xtest,dim=c(nrow(xtest),1,1))
  xfut = array(xfut,dim=c(nrow(xfut),1,1))
  
  
  in_dim = c(dim(xtrain)[2:3])
  modifiy_fun_filters<-function(a){
    tensorflow::set_random_seed(12345)
    model = keras_model_sequential() %>%
      layer_conv_1d(filters = a,
                    kernel_size = 1,
                    input_shape = in_dim,
                    activation = 'relu') %>%
      layer_flatten() %>%
      layer_dense(units = 32,activation = 'relu') %>%
      layer_dense(units = 1,activation = 'linear')
    
    set.seed(12345)
    model %>%
      compile(loss ='mse',optimizer = 'adam')
    
    model %>% summary()
    set.seed(12345)
    model %>% fit(xtrain,ytrain,epochs = 100,
                  batch_size = 10,
                  verbose = 0)
    
    scores = model %>% evaluate(xtrain,ytrain,verbose = 0)
    ypred2 = model %>% predict(xtest)
    
    rmse = RMSE(ypred2,ytest)
    return(rmse)
  }
  filters = seq(1,100,10)
  #rmse = sapply(filters,modifiy_fun_filters)
  
  #id = which(rmse == min(rmse))
  #filters = filters[id]
  
  modifiy_fun_filters_calc<-function(a,xfut){
    tensorflow::set_random_seed(12345)
    model = keras_model_sequential() %>%
      layer_conv_1d(filters = 64,
                    kernel_size = 1,
                    input_shape = in_dim,
                    activation = 'relu') %>%
      #layer_dense(units = 16,activation = 'relu') %>%
      #layer_max_pooling_1d(1) %>%
      #layer_dense(units = 64,activation = 'relu') %>%
      #layer_max_pooling_1d(1) %>%
      layer_dense(units = 64,activation = 'relu') %>%
      layer_dense(units = 64,activation = 'linear') %>%
      layer_dense(units = 128,activation = 'relu') %>%
      layer_dense(units = 128,activation = 'linear') %>%
      layer_dense(units = 256,activation = 'relu') %>%
      layer_dense(units = 256,activation = 'linear') %>%
      #layer_flatten() %>%
      layer_dense(units = 1,activation = 'linear')
    
    
    
    
    set.seed(12345)
    model %>%
      compile(loss ='mse',
              optimizer = 'adam',
              #optimizer = optimizer_rmsprop(0.002),
              metrics = c('accuracy'))
    
    
    model %>% summary()
    set.seed(12345)
    model %>% fit(xtrain,ytrain,epochs = 700,
                  batch_size = 85,
                  verbose = 0)
    
    scores = model %>% evaluate(xtrain,ytrain,verbose = 0)
    ypred2 = model %>% predict(xtest)
    
    fut = model %>% predict(xfut)
    pred_test = model %>% predict(xtest)
    pred_train = model %>% predict(xtrain)
    #matplot(cbind(pred_test,ytest),type = 'l')
    #matplot(cbind(pred_train,ytrain),type = 'l')
    #print(RMSE(pred_test,ytest))
    #print(cor(pred_test,ytest))
    return(list(fut,pred_test,pred_train))
  }
  
  
  ret = modifiy_fun_filters_calc(60,xfut)
  fut = ret[[1]]
  pred_test = ret[[2]]
  pred_train = ret[[3]]
  
  pred_test = data.frame(ori_test = test$pme,
                         pred_test = pred_test)
  colnames(pred_test)[2] = models
  pred_train = data.frame(ori_train = train$pme,
                          pred_train = pred_train)
  colnames(pred_train)[2] = models
  
  file = paste0(region,'_',mode)
  output = 'output/validation_cnn_model_pme'
  dir.create(output)
  output = paste0(output,'/',file)
  dir.create(output)
  output1 = paste0(output,'/valid_test_pme_',models,'.csv')
  output2 = paste0(output,'/valid_train_pme_',models,'.csv')
  
  fwrite(pred_test,output1)
  fwrite(pred_train,output2)
  
  
  return(fut)
}
cnn_model_predict_pos_area<-function(
  df,
  df_project
){
  library(keras)
  library(tensorflow)
  library(caret)
  indexes = createDataPartition(df$pos_area,
                                p = .85,
                                list = F)
  
  train = df[indexes,]
  test = df[-indexes,]
  
  ytrain = as.matrix(train[,1])
  xtrain = as.matrix(train[,2:3])
  
  xtest = as.matrix(test[,2:3])
  ytest = as.matrix(test[,1])
  
  xfut = as.matrix(df_project[,1:2])
  
  
  xtrain = array(xtrain,dim = c(nrow(xtrain),2,1))
  xtest = array(xtest,dim=c(nrow(xtest),2,1))
  xfut = array(xfut,dim=c(nrow(xfut),2,1))
  
  
  in_dim = c(dim(xtrain)[2:3])
  modifiy_fun_filters<-function(a){
    tensorflow::set_random_seed(12345)
    model = keras_model_sequential() %>%
      layer_conv_1d(filters = a,
                    kernel_size = 1,
                    input_shape = in_dim,
                    activation = 'relu') %>%
      layer_flatten() %>%
      layer_dense(units = 32,activation = 'relu') %>%
      layer_dense(units = 1,activation = 'linear')
    
    set.seed(12345)
    model %>%
      compile(loss ='mse',optimizer = 'adam')
    
    model %>% summary()
    set.seed(12345)
    model %>% fit(xtrain,ytrain,epochs = 5,
                  batch_size = 5,
                  verbose = 0)
    
    scores = model %>% evaluate(xtrain,ytrain,verbose = 0)
    ypred2 = model %>% predict(xtest)
    
    rmse = RMSE(ypred2,ytest)
    return(rmse)
  }
  filters = seq(1,100,10)
  rmse = sapply(filters,modifiy_fun_filters)
  
  id = which(rmse == min(rmse))
  filters = filters[id]
  
  modifiy_fun_filters_calc<-function(a,xfut){
    tensorflow::set_random_seed(12345)
    model = keras_model_sequential() %>%
      layer_conv_1d(filters = a,
                    kernel_size = 1,
                    input_shape = in_dim,
                    activation = 'relu') %>%
      layer_flatten() %>%
      layer_dense(units = 32,activation = 'relu') %>%
      layer_dense(units = 1,activation = 'linear')
    
    set.seed(1235)
    model %>%
      compile(loss ='mse',optimizer = 'adam')
    
    model %>% summary()
    set.seed(1235)
    model %>% fit(xtrain,ytrain,epochs = 10,
                  batch_size = 32,
                  verbose = 0)
    
    scores = model %>% evaluate(xtrain,ytrain,verbose = 0)
    ypred2 = model %>% predict(xtest)
    
    fut = model %>% predict(xfut)
    return(fut)
  }
  
  
  fut = modifiy_fun_filters_calc(filters,xfut)
  return(fut)
}
cnn_model_predict_tws<-function(
  df,
  df_project,
  models,
  mode = 'ssp245',
  region = 'region1'
){
  library(data.table)
  library(keras)
  library(tensorflow)
  library(caret)
  set.seed(12345)
  indexes = createDataPartition(df$tws,
                                p = .85,
                                list = F)
  
  train = df[indexes,]
  test = df[-indexes,]
  
  ytrain = as.matrix(train[,1])
  xtrain = as.matrix(train[,2])
  
  xtest = as.matrix(test[,2])
  ytest = as.matrix(test[,1])
  
  xfut = as.matrix(df_project[,1])
  
  
  xtrain = array(xtrain,dim = c(nrow(xtrain),1,1))
  xtest = array(xtest,dim=c(nrow(xtest),1,1))
  xfut = array(xfut,dim=c(nrow(xfut),1,1))
  
  
  in_dim = c(dim(xtrain)[2:3])
  modifiy_fun_filters<-function(a){
    tensorflow::set_random_seed(12345)
    model = keras_model_sequential() %>%
      layer_conv_1d(filters = a,
                    kernel_size = 1,
                    input_shape = in_dim,
                    activation = 'relu') %>%
      layer_flatten() %>%
      layer_dense(units = 32,activation = 'relu') %>%
      layer_dense(units = 1,activation = 'linear')
    
    set.seed(12345)
    model %>%
      compile(loss ='mse',optimizer = 'adam')
    
    model %>% summary()
    set.seed(12345)
    model %>% fit(xtrain,ytrain,epochs = 100,
                  batch_size = 10,
                  verbose = 0)
    
    scores = model %>% evaluate(xtrain,ytrain,verbose = 0)
    ypred2 = model %>% predict(xtest)
    
    rmse = RMSE(ypred2,ytest)
    return(rmse)
  }
  filters = seq(1,100,10)
  #rmse = sapply(filters,modifiy_fun_filters)
  
  #id = which(rmse == min(rmse))
  #filters = filters[id]
  
  modifiy_fun_filters_calc<-function(a,xfut){
    tensorflow::set_random_seed(12345)
    model = keras_model_sequential() %>%
      layer_conv_1d(kernel_size = 1,
                    input_shape = in_dim,
                    activation = 'relu') %>%
      
      layer_dense(units = 64,activation = 'relu') %>%
      layer_dense(units = 64,activation = 'linear') %>%
      #layer_flatten() %>%
      layer_dense(units = 1)
      
    
    opti = optimizer_rmsprop(0.001)
    
    set.seed(12345)
    model %>%
      compile(loss ='mse',
              optimizer = opti,
              #optimizer = optimizer_rmsprop(0.002),
              metrics = c('accuracy'))
    
    
    model %>% summary()
    set.seed(12345)
    model %>% fit(xtrain,ytrain,epochs = 700,
                  batch_size = 85,
                  verbose = 0)
    
    scores = model %>% evaluate(xtrain,ytrain,verbose = 0)
    ypred2 = model %>% predict(xtest)
    
    fut = model %>% predict(xfut)
    pred_test = model %>% predict(xtest)
    pred_train = model %>% predict(xtrain)
    #matplot(cbind(pred_test,ytest),type = 'l')
    #matplot(cbind(pred_train,ytrain),type = 'l')
    #print(RMSE(pred_test,ytest))
    #print(cor(pred_test,ytest))
    return(list(fut,pred_test,pred_train))
  }
  
  
  ret = modifiy_fun_filters_calc(60,xfut)
  fut = ret[[1]]
  pred_test = ret[[2]]
  pred_train = ret[[3]]
  
  pred_test = data.frame(ori_test = test$tws,
                         pred_test = pred_test)
  colnames(pred_test)[2] = models
  pred_train = data.frame(ori_train = train$tws,
                          pred_train = pred_train)
  colnames(pred_train)[2] = models
  
  file = paste0(region,'_',mode)
  output = 'output/validation_cnn_model'
  dir.create(output)
  output = paste0(output,'/',file)
  dir.create(output)
  output1 = paste0(output,'/valid_test_tws_',models,'.csv')
  output2 = paste0(output,'/valid_train_tws_',models,'.csv')
  
  fwrite(pred_test,output1)
  fwrite(pred_train,output2)
  
  
  return(fut)
}
cnn_model_validation<-function(
  
){
  input = 'output/validation_cnn_model'
  input = list.files(input,full.names = T)
  
  i = 1:4
  
  import_data_train <-function(i){
    tmp = list.files(input[i],full.names = T)
    library(data.table)
    j = 9:16
    subs_train<-function(j){
      tmpdf = fread(tmp[j])
      if(j == 1){
        tmpdf = as.data.frame(tmpdf)
      }else{
        tmpdf = as.data.frame(tmpdf)
        tmpdf = tmpdf[,-1]
      }
      return(tmpdf)
    }
    retdf = lapply(j,subs_train)
    retdf = do.call('cbind',retdf)
    return(retdf)
  }
  
  traindf = lapply(i,import_data_train)
  
  import_data_test <-function(i){
    tmp = list.files(input[i],full.names = T)
    library(data.table)
    j = 1:8
    subs_test<-function(j){
      tmpdf = fread(tmp[j])
      if(j == 1){
        tmpdf = as.data.frame(tmpdf)
      }else{
        tmpdf = as.data.frame(tmpdf)
        tmpdf = tmpdf[,-1]
      }
      return(tmpdf)
    }
    retdf = lapply(j,subs_test)
    retdf = do.call('cbind',retdf)
    return(retdf)
  }
  testdf = lapply(i,import_data_test)
  traindf = lapply(i,import_data_train)
  
}
combine_cmip6_data_his_ssp_2099 <- function(
  attrs = 'E'
){
  input_file = '/media/root/Shen_drive1/CMIP6_2003_2099'
  
  #attr = c('E','Pr','T')
  
  input_file = paste0(input_file,'/',attrs)
  
  input_his = paste0(input_file,'/hist')
  input_ssp245 = paste0(input_file,'/ssp245')
  input_ssp585 = paste0(input_file,'/ssp585')
  
  hist_files = list.files(input_his)
  hist_files_full = list.files(input_his,full.names = T)
  
  ssp245_files = list.files(input_ssp245)
  ssp245_files_full = list.files(input_ssp245,full.names = T)
  
  ssp585_files = list.files(input_ssp585)
  ssp585_files_full = list.files(input_ssp585,full.names = T)
  
  i = 1:length(hist_files)
  
  i <<- i 
  hist_files <<- hist_files
  hist_files_full <<- hist_files_full
  ssp245_files <<- ssp245_files
  ssp245_files_full <<- ssp245_files_full
  ssp585_files <<- ssp585_files
  ssp585_files_full <<- ssp585_files_full
  
  dir.create('/media/root/Shen_drive1/CMIP6_combined_2099')
  output = paste0('/media/root/Shen_drive1/CMIP6_combined_2099',
                  '/',attrs)
  dir.create(output)
  
  output_his245 = paste0(output,'/hist_ssp245') # 2003-201412 201501-2099
  output_his585 = paste0(output,'/hist_ssp585')
  
  dir.create(output_his245)
  dir.create(output_his585)
  
  output_his245 <<- output_his245
  output_his585 <<- output_his585
  
  sub_combine_his_245 <- function(i){
    library(raster)
    library(ncdf4)
    
    tmpname = strsplit(hist_files[i],'_')[[1]][2]
    pattern = 'his245_'
    
    outputname = paste0(pattern,tmpname,'_','200301_','209912.nc')
    
    tmphis = stack(hist_files_full[i])
    tmpssp = stack(ssp245_files_full[i])
    
    tmpcombine = stack(tmphis,tmpssp)
    
    output = paste0(output_his245,'/',outputname)
    
    writeRaster(tmpcombine,output,format = 'CDF',overwrite = T)
    
  }
  
  sub_combine_his_585 <- function(i){
    library(raster)
    library(ncdf4)
    
    tmpname = strsplit(hist_files[i],'_')[[1]][2]
    pattern = 'his585_'
    
    outputname = paste0(pattern,tmpname,'_','200301_','209912.nc')
    
    tmphis = stack(hist_files_full[i])
    tmpssp = stack(ssp585_files_full[i])
    
    tmpcombine = stack(tmphis,tmpssp)
    
    output = paste0(output_his585,'/',outputname)
    
    writeRaster(tmpcombine,output,format = 'CDF',overwrite = T)
    
  }
  
  library(doParallel)
  
  cl = makeCluster(8)
  clusterExport(cl,c("hist_files",'hist_files_full',"ssp245_files","ssp245_files_full",'i','output_ssp245'))
  system.time(parLapply(cl,i,sub_combine_his_245))
  stopCluster(cl)
  
  
  cl = makeCluster(8)
  clusterExport(cl,c("hist_files",'hist_files_full',"ssp585_files","ssp585_files_full",'i','output_ssp585'))
  system.time(parLapply(cl,i,sub_combine_his_585))
  stopCluster(cl)
  
  
  
}
compare_nasa_swe_gldas_swe <- function(
  
){
  source("/home/share/R_project/xinjiang_vapor/data_management.R")
  gldas_swe = data_management('gldas_snow')
  
  neg_shps = list.files('shp/cluster_tws_neg_shp_deter',
                        full.names = T,pattern = '*.shp$')
  neg_shps = neg_shps[1:2]
  neg_shps = lapply(neg_shps, shapefile)
  
  swet_box = 1
  for(i in 1:2){
    tmpshp = neg_shps[[i]]
    tmpswe = mask(crop(gldas_swe,tmpshp),tmpshp)
    
    tmpswe = as.list(tmpswe)
    swet = do.call('c',lapply(tmpswe,cellStats,stat = mean))
    
    swet = ts(swet,start = c(2003,1),frequency = 12)
    swet = decompose(swet)$trend
    
    swet = swet[-which(is.na(swet))]
    swet = (swet - mean(swet))/sd(swet)
    
    swet_box =cbind(swet_box,swet)
  }
  swet_box = swet_box[,-1]
  
}
coordinate_transfer_swe_nasa <-function(
  
){
  library(raster)
  library(ggplot2)
  
  loc_input = 'Data/swe_hdf_loc/'
  loc_input = list.files(loc_input,full.names = T)
  longs = as.data.frame(fread(loc_input[3]))
  lats = as.data.frame(fread(loc_input[1]))
  longs = as.numeric(longs[,3])
  lats = as.numeric(lats[,3])
  
  temp1 = list.files('Data/swe_hdf/',full.names = T,
                    pattern = '*sd1.tif$')
  temp1 = temp1[1:105]
  temp1 = temp1[-105]
  
  temp2 = list.files('Data/swe_hdf/',full.names = T,
                     pattern = '*sd2.tif$')
  temp2 = temp2[105:160]
  
  fuls = c(temp1,temp2)
  retbox =1
  for(i in 1:length(fuls)){
    temps = raster(fuls[i])
    tempdf = as.data.frame(temps,xy= T)
    retbox = cbind(retbox,tempdf[,3])
  }
  retbox = retbox[,-1]
  
  tibet = shp_management('tibet')
  temp_rast =1
  rast_list = list()
  for(i in 1:length(fuls)){
    tpdf = data.frame(
      long= longs,
      lat = lats,
      swe = retbox[,i]
    )
    coordinates(tpdf) = ~long+lat
    gridded(tpdf) = T
    tprast = raster(tpdf)
    tprast = mask(crop(tprast,tibet),tibet)
    rast_list[[i]] = tprast
  }
  
  rast_stack = stack(rast_list)
  
  # lack date
  # 2009-09
  
  # 2012-07
  files1 = list.files('Data/swe_hdf/',
                     pattern = '*sd1.tif$')
  files1 = files1[1:105]
  files1 = files1[-105]
  
  files2 = list.files('Data/swe_hdf/',
                     pattern = '*sd2.tif$')
  files2 = files2[105:160]
  
  fulfiles = c(files1,files2)
  
  extract_yearmon <- function(x){
    x = strsplit(x,'_')[[1]][6]
    year = substr(x,1,4)
    month = substr(x,5,6)
    retdf = data.frame(
      year  = as.numeric(year),
      month = as.numeric(month)
    )
    return(retdf)
  }
  ret_lack = do.call('rbind',lapply(fulfiles,extract_yearmon))
  
  ret_cal = aggregate(ret_lack$month,list(ret_lack$year),sum)
  yearid = which(ret_cal$x != 78)
  
  date = as.character(seq(as.Date('2003-01-01'),
                          as.Date('2017-06-01'),
                          '1 month'))
  date_to_matrix <- function(x){
    year = as.numeric(substr(x,1,4))
    month = as.numeric(substr(x,6,7))
    ret_df = data.frame(year,month)
    return(ret_df)
  }
  date = do.call('rbind',lapply(date,date_to_matrix))
  
  rast_withna = list()
  for(i in 1:nrow(date)){
    tmpyear = ret_lack$year
    tmpmon = ret_lack$month
    tmp_pat = paste0(tmpyear,'-',tmpmon)
    
    fulyear = date$year[i]
    fulmon = date$month[i]
    ful_pat = paste0(fulyear,'-',fulmon)
    
    if(!(ful_pat %in% tmp_pat)){
      rast_withna[[i]] = NA
    }else{
      tmpid = which(tmp_pat == ful_pat)
      
      rast_withna[[i]] = rast_stack[[tmpid]]
    }
  }
  
  naids = which(is.na(rast_withna))
  naids_front = naids - 12
  naids_after = naids + 12
  for(i in 1:length(naids)){
    tmpna = naids[i]
    tmpfront = naids_front[i]
    tmpafter = naids_after[i]
    
    if(tmpna < 169){
      rast_withna[[tmpna]] = (rast_withna[[tmpfront]]+
                                rast_withna[[tmpafter]])/2
    }else{
      tmpfront = tmpna - 24
      tmpafter = tmpna - 12
      rast_withna[[tmpna]] = 2*rast_withna[[tmpafter]]-
                                rast_withna[[tmpfront]]
    }
    
  }
  
  rast_stack = stack(rast_withna)
  
  neg_shps = list.files('shp/cluster_tws_neg_shp_deter',
                        full.names = T,pattern = '*.shp$')
  neg_shps = neg_shps[1:2]
  neg_shps = lapply(neg_shps, shapefile)
  
  i = 1:2
  
  sub_calc_mean <- function(i){
    tmps = neg_shps[[i]]
    tmprast = mask(crop(rast_stack,tmps),tmps)
    tmprast = as.list(tmprast)
    meanv = lapply(tmprast, cellStats,stat = 'mean')
    meanv = do.call(c,meanv)
    
    meanv = ts(meanv,start = c(2003,1),frequency = 12)
    meanv = decompose(meanv)$trend
    
    meanv = meanv[-which(is.na(meanv))]
    meanv = (meanv - mean(meanv))/sd(meanv)
    
    return(meanv)
  }
  
  ret = lapply(i,sub_calc_mean)
  ret = do.call(cbind,ret)
  
  
  
  
  
  
}
cor_analysis_pme_tws_in_tibet <-function(
  
){

  sub_calc_trend_intibet <-function(x){
    xm = ts(x,start = c(2003,1),frequency = 12)
    xm = decompose(xm)$trend
    return(xm)
  }
  stand_fun <-function(x){
    x = (x-mean(x,na.rm = T))/sd(x,na.rm = T)
    return(x)
  }
  
  
  tws_trend =as.data.frame(fread('output/tws_trend_df/tws_trend_df.csv'))
  tws_trend = apply(tws_trend,2,stand_fun)
  
  pme_io = import_index_insource_tibet('pme','io')
  pme_ato = import_index_insource_tibet('pme','ato')
  pme_io = pme_io[1:174,]
  pme_ato = pme_ato[1:174,]
  
  pme_io = apply(pme_io,2,sub_calc_trend_intibet)
  pme_ato = apply(pme_ato,2,sub_calc_trend_intibet)
  naid = which(is.na(pme_io[,1]))
  pme_io = pme_io[-naid,]
  pme_ato = pme_ato[-naid,]
  
  pme_io = apply(pme_io,2,stand_fun)
  pme_ato = apply(pme_ato,2,stand_fun)
  
  # covar pme io tws
  cor2 = 1
  for(i in 1:ncol(tws_trend)){
    tmptws = tws_trend[,i]
    
    cor1 = 1
    for(j in 1:ncol(pme_io)){
      tmpcor_io = max(ccf(pme_io[,j],tmptws)$acf)
      cor1 = c(cor1,tmpcor_io)
    }
    cor1 = cor1[-1]
    cor2 = cbind(cor2,cor1)
  }
  corio = cor2[,-1]  
  
  cor2 = 1
  for(i in 1:ncol(tws_trend)){
    tmptws = tws_trend[,i]
    
    cor1 = 1
    for(j in 1:ncol(pme_ato)){
      tmpcor_ato = max(ccf(pme_ato[,j],tmptws,lag.max = 3)$acf)
      cor1 = c(cor1,tmpcor_ato)
    }
    cor1 = cor1[-1]
    cor2 = cbind(cor2,cor1)
  }
  corato = cor2[,-1]  
  
}
cor_analysis_twssubs_pme_full <- function(
  
){
  setwd('/media/sdb5/Vapor_projcts/Vapor_tibet')
  stand_pme <- function(x){
    x = x[1:174]
    x = ts(x,start = c(2003,1),frequency = 12)
    x = decompose(x)$trend
    x = x[-which(is.na(x))]
    
    x = (x - mean(x))/sd(x)
    return(x)
  }
  stand_tws <- function(x){
    x = x/sd(x)
    return(x)
  }
  pmeato = import_index_insource_tibet('pme_mean','ato')
  pmeato = apply(pmeato,2,stand_pme)
  
  twssubs = as.data.frame(
    fread('main_plot_data/fig2/tws_subs.csv')
  )
  
  i = 1:ncol(twssubs)
  
  ccfbox = 1
  lagbox = 1
  for(i in i){
    tmptws = twssubs[,i]
    
    ccfbox1 = 1
    lagbox1 = 1
    for(j in 1:4){
      tmpccf = ccf(tmptws,pmeato[,j])$acf
      tmplags = ccf(tmptws,pmeato[,j])$lag
      
      maxid = which(tmpccf == max(tmpccf))
      tmplags = tmplags[maxid]
      tmpccf = max(tmpccf)
      
      ccfbox1 = c(ccfbox1,tmpccf)
      lagbox1 = c(lagbox1,tmplags)
      print(i)
    }
    ccfbox1 = ccfbox1[-1]
    lagbox1 = lagbox1[-1]
    
    ccfbox = cbind(ccfbox,ccfbox1)
    lagbox = cbind(lagbox,lagbox1)
    
  }
  ccfbox = ccfbox[,-1]
  lagbox = lagbox[,-1]
  
  sig_tell_fun <- function(i){
    maxccf = ccfbox[i,]
    maxlag = lagbox[i,]
    
    j = 1:length(maxccf)
    sub_tell <- function(j){
      tells = 2/(sqrt(162 - abs(maxlag[j])))
      if(tells<=maxccf){
        return(tells)
      }else{
        return(0)
      }
    }
    
    tells = sapply(j,sub_tell)
    return(tells)
  }
  
  HSRid = as.data.frame(fread('main_plot_data/fig2/HSRid.csv'))
  HSRid = HSRid$HSRid
  
  ccfbox = ccfbox[,HSRid]
  lagbox = lagbox[,HSRid]
  
  colnames(ccfbox) = paste0('HSR',1:12)
  colnames(lagbox) = paste0('HSR',1:12)
  
  i = 1:nrow(ccfbox)
  
  sig_tell = do.call(rbind,lapply(i,sig_tell_fun))
  
  
  ccfbox = data.frame(
    PMEATO = paste0('NATO',1:4),
    ccfbox
  )
  
  lagbox = data.frame(
    PMEATO = paste0('NATO',1:4),
    lagbox
  )
  
  sigbox = data.frame(
    PMEATO = paste0('NATO',1:4),
    sig_tell
  )
  
  ccfboxm = reshape2::melt(ccfbox,'PMEATO')
  lagboxm = reshape2::melt(lagbox,'PMEATO')
  sigboxm = reshape2::melt(sigbox,'PMEATO')
  
  
  # tws in tibet 
  twstibet = import_index_insource_tibet('tws_tibet')
  twstibet = apply(twstibet,2,stand_tws)
  
  cor_twstibet  = 1
  lag_twstibet = 1
  tell_twstibet = 1
  for(i in 1:2){
    cor_twstibet1  = 1
    lag_twstibet1 = 1
    tell_twstibet1 = 1
    for(j in 1:4){
      tmpccf = ccf(twstibet[,i],pmeato[,j])
      tmpcor = max(tmpccf$acf)
      tmplag = tmpccf$lag[which(tmpccf$acf == tmpcor)]
      
      tmptell = 2/sqrt(162- abs(tmplag))
      
      cor_twstibet1 = c(cor_twstibet1,tmpcor)
      tell_twstibet1 = c(tell_twstibet1,tmptell)
      lag_twstibet1 = c(lag_twstibet1,tmplag)
      print(tell_twstibet1)
    }
    cor_twstibet1 = cor_twstibet1[-1]
    tell_twstibet1 = tell_twstibet1[-1]
    lag_twstibet1  = lag_twstibet1[-1]
    
    cor_twstibet = cbind(cor_twstibet,cor_twstibet1)
    tell_twstibet = cbind(tell_twstibet,tell_twstibet1)
    lag_twstibet = cbind(lag_twstibet,lag_twstibet1)
    
  }
  cor_twstibet = cor_twstibet[,-1]
  tell_twstibet = tell_twstibet[,-1]
  lag_twstibet  = lag_twstibet[,-1]
  
  colnames(cor_twstibet) = c("TP_Moun1",'TP_Moun2')
  colnames(tell_twstibet) = c("TP_Moun1",'TP_Moun2')
  colnames(lag_twstibet) = c("TP_Moun1",'TP_Moun2')
  
  cor_twstp = data.frame(
    PMEATO = paste0('NATO',1:4),
    cor_twstibet
  )
  lag_twstp = data.frame(
    PMEATO = paste0('NATO',1:4),
    lag_twstibet
  )
  tell_twstp = data.frame(
    PMEATO = paste0('NATO',1:4),
    tell_twstibet
  )
  
  
  cor_twstpm = reshape2::melt(cor_twstp,'PMEATO')
  lag_twstpm = reshape2::melt(lag_twstp,'PMEATO')
  tell_twstpm = reshape2::melt(tell_twstp,'PMEATO')
  
  
  bar_cordf = rbind(ccfboxm,cor_twstpm)
  bar_lagdf = rbind(lagboxm,lag_twstpm)
  bar_sigtell = rbind(sigboxm,tell_twstpm)
  
  fwrite(bar_cordf,'main_plot_data/fig2/bar_cordf.csv')
  fwrite(bar_lagdf,'main_plot_data/fig2/bar_lagdf.csv')
  fwrite(bar_sigtell,'main_plot_data/fig2/bar_sigtell.csv')
  
  
}
cor_analysis_twssubs_pme <- function(
  
){
  setwd('/media/sdb5/Vapor_projcts/Vapor_tibet')
  stand_pme <- function(x){
    x = x[1:174]
    x = ts(x,start = c(2003,1),frequency = 12)
    x = decompose(x)$trend
    x = x[-which(is.na(x))]
    
    x = (x - mean(x))/sd(x)
    return(x)
  }
  stand_tws <- function(x){
    x = x/sd(x)
    return(x)
  }
  pmeato = import_index_insource_tibet('pme_mean','ato')
  pmeato = apply(pmeato,2,stand_pme)
  
  pmeato3 = pmeato[,3]
  
  fwrite(pmeato,'main_plot_data/fig2/stand_pmeato.csv')
  
  twssubs = as.data.frame(
    fread('main_plot_data/fig2/tws_subs.csv')
  )
  
  i = 1:ncol(twssubs)
  
  ccfbox = 1
  lagbox = 1
  for(i in i){
    tmptws = twssubs[,i]
    tmpccf = ccf(tmptws,pmeato3)$acf
    tmplags = ccf(tmptws,pmeato3)$lag
    
    maxid = which(tmpccf == max(tmpccf))
    tmplags = tmplags[maxid]
    tmpccf = max(tmpccf)
    
    ccfbox = c(ccfbox,tmpccf)
    lagbox = c(lagbox,tmplags)
  }
  
  ccfbox = ccfbox[-1]
  lagbox = lagbox[-1]
  
  sig_tell_fun <- function(i){
    maxccf = ccfbox[i]
    maxlag = lagbox[i]
    
    tells = 2/(sqrt(162 - abs(maxlag)))
    
    if(tells<=maxccf){
      return(tells)
    }
  }
  
  HSRid = which(ccfbox > 0.40)
  hsrtws = twssubs[,HSRid]
  fwrite(hsrtws,'main_plot_data/fig2/stand_hsrtws.csv')
  fwrite(data.frame(HSRid = HSRid),'main_plot_data/fig2/HSRid.csv')
  
  ccfbox = ccfbox[HSRid]
  lagbox = lagbox[HSRid]
  i = 1:length(ccfbox)
  
  sig_tells_subs = sapply(i,sig_tell_fun)
  ret_ccf_lag_tell_subs  = data.frame(
    maxccf = ccfbox,
    lag = lagbox,
    sig_tell = sig_tells_subs
  )
  
  fwrite(ret_ccf_lag_tell_subs,'main_plot_data/fig2/ret_ccf_lag_tells_subs.csv')
  
  # tws in tibet 
  twstibet = import_index_insource_tibet('tws_tibet')
  twstibet = apply(twstibet,2,stand_tws)
  
  fwrite(twstibet,'main_plot_data/fig2/stand_twstp.csv')
  
  cor_twstibet  = 1
  lag_twstibet = 1
  tell_twstibet = 1
  for(i in 1:2){
    tmpccf = ccf(twstibet[,i],pmeato3)
    tmpcor = max(tmpccf$acf)
    tmplag = tmpccf$lag[which(tmpccf$acf == tmpcor)]
    
    tmptell = 2/sqrt(162- abs(tmplag))
    
    cor_twstibet = c(cor_twstibet,tmpcor)
    tell_twstibet = c(tell_twstibet,tmptell)
    lag_twstibet = c(lag_twstibet,tmplag)
  }
  cor_twstibet = cor_twstibet[-1]
  tell_twstibet = tell_twstibet[-1]
  lag_twstibet  = lag_twstibet[-1]
  
  ret_ccf_lag_tell_tp = data.frame(
    maxccf = cor_twstibet,
    lag = lag_twstibet,
    sig_tell = tell_twstibet
  )
  
  fwrite(ret_ccf_lag_tell_tp,
         'main_plot_data/fig2/ret_ccf_lag_tell_tp.csv')
  
  
  
  
  
}
covar_pme_deleterep_snowcover_intibet<-function(
  
){
  source('/media/sdb5/Vapor_projcts/Vapor_tibet/R/import_index_insource_tibet.R')
  # import pme in ato and io 
  pmeio = import_index_insource_tibet(var = 'pme',region = 'io')
  pmeato = import_index_insource_tibet(var = 'pme',region = 'ato')
  
  pmeio = pmeio[1:174,]
  pmeato = pmeato[1:174,]
  
  trend_stand_fun<-function(x){
    x = ts(x,start = c(2003,1),frequency = 12)
    x = decompose(x)$trend
    naid = which(is.na(x))
    x = x[-naid]
    
    x = (x-mean(x))/sd(x)
    return(x)
  }
  pmeio = apply(pmeio,2,trend_stand_fun)
  pmeato = apply(pmeato,2,trend_stand_fun)
  
  # import delterep in tibet border
  delterep = import_index_insource_tibet(var = 'delterep')
  # import snowcover in tibet border
  snowcover = import_index_insource_tibet(var = 'snowcover')
  tws = import_index_insource_tibet(var = 'tws_tibet')
  
  to_annual_trend<-function(x){
    x = c(rep(NA,6),x)
    xm = matrix(x,nrow = 12)
    xann = apply(xm,2,mean,
                 na.rm = T)
    return(xann)
  }
  
  snowann = apply(snowcover,2,to_annual_trend)
}
covar_tws_pme_insource_tibet <-function(
  
){
  
  tws = data_management('grace')
  tibet = shp_management('tibet')
  tws = raster::mask(crop(tws,tibet),tibet)
  
  cluster_shp = 'shp/cluster_tws_neg_shp_deter/'
  cluster_shp = list.files(cluster_shp,pattern = '*.shp$',full.names = T)
  cluster_shp = lapply(cluster_shp,shapefile)
  clusters_combine = do.call('bind',cluster_shp)
  
  cluster_shp[[4]] = tibet - clusters_combine
  
  i = 1:4
  i <<- i 
  cluster_shp <<- cluster_shp
  tws <<- tws
  
  sub_calc_tws_cluster_tibet <-function(i){
    library(raster)
    tmpshp = cluster_shp[[i]]
    tmptws = mask(crop(tws,tmpshp),tmpshp)
    tmptws = as.list(tmptws)
    
    tmptwsm = lapply(tmptws,cellStats,stat = 'mean',na.rm = T)
    tmptwsm  =do.call('c',tmptwsm)
    return(tmptwsm)
  }
  library(doParallel)
  cl = makeCluster(4)
  clusterExport(cl,c('i','tws','cluster_shp'))
  retdf = parLapply(cl,i,sub_calc_tws_cluster_tibet)
  stopCluster(cl)
  
  tws_cluster_df = do.call('cbind',retdf)
  colnames(tws_cluster_df) = paste0('tibet_','region',1:3)
  
  sub_calc_trend_intibet <-function(x){
    xm = ts(x,start = c(2003,1),frequency = 12)
    xm = decompose(xm)$trend
    
    return(xm)
  }
  
  dir.create('output/tws_full_df/')
  fwrite(tws_cluster_df,'output/tws_full_df/tws_full_df.csv')
  tws_trend_df = apply(tws_cluster_df,2,sub_calc_trend_intibet)
  naid = which(is.na(tws_trend_df[,1]))
  tws_trend_df = tws_trend_df[-naid,]
  fwrite(tws_trend_df,'output/tws_trend_df/tws_trend_df.csv')
  
  source('/media/sdb5/Vapor_projcts/Vapor_tibet/R/import_index_insource_tibet.R')
  pme_io = import_index_insource_tibet('pme','io')
  pme_ato = import_index_insource_tibet('pme','ato')
  
  stand_fun <-function(x){
    #x = (x-mean(x,na.rm = T))/sd(x,na.rm = T)
    x = (x-mean(x,na.rm = T))/(max(x,na.rm= T)-min(x,na.rm= T))
    return(x)
  }
  
  tws_trend_stand = apply(tws_trend_df,2,stand_fun)
  pme_io = pme_io[1:174,]
  pme_ato = pme_ato[1:174,]
  pme_trend_io = apply(pme_io,2,sub_calc_trend_intibet)
  pme_trend_ato = apply(pme_ato,2,sub_calc_trend_intibet)
  pme_trend_io = pme_trend_io[-naid,]
  pme_trend_ato = pme_trend_ato[-naid,]
  
  pme_trend_io = apply(pme_trend_io,2,stand_fun)
  pme_trend_ato = apply(pme_trend_ato,2,stand_fun)
  
  date = seq(as.Date('2003-01-01'),as.Date('2017-06-01'),'1 month')
  date = date[-naid]
  pmedf = data.frame(
    date = date,
    pmeato3 = pme_trend_ato[,3],
    pme_io2 = pme_trend_io[,2])
  pmedf = reshape2::melt(pmedf,'date')
  
  twsdf = data.frame(date = date,tws_trend_stand)
  twsdf = reshape2::melt(twsdf,'date')
  
  twsdf$type = twsdf$variable
  
  pline = ggplot()+
    geom_line(data = pmedf,aes(x = date,y = value,color = variable),size = 1)+
    geom_line(data = twsdf,aes(x = date,y = value,color = variable),size = 1.5)+
    facet_wrap(~type,nrow = 2)+
    theme_bw()
  

  
}
create_tws_border_grace <- function(
  
){
  setwd('/media/sdb5/Vapor_projcts/Vapor_tibet')
  tws = data_management('grace')
  tibet = shp_management('tibet')
  tws = mask(crop(tws,tibet),tibet)
  
  tws = rasterToPolygons(tws)
  dir.create('shp/border_based_tws')
  library(sf)
  library(maptools)
  library(dplyr)
  writePolyShape(tws,'shp/border_based_tws/cell_border.shp')
  
  tmp = st_read('shp/border_based_tws/cell_border.shp')
  tmp = tmp %>% group_by() %>% st_union()
  st_write(tmp,'shp/border_based_tws/cell_border.shp',
           append = F)
  
  
}
cross_correlation_pme_tws_tibet<-function(
  tws,pme
){
  corbox = 1
  for(i in 1:ncol(pme)){
    tmpcor = max(ccf(tws,pme[,i])$acf)
    #tmpcor = cor(tws,pme[,i])
    corbox = c(corbox,tmpcor)
  }
  corbox = corbox[-1]
  return(corbox)
  
  
  
}
detect_min_twspoints_based_multis <- function(
  
){
  neg_clus = list.files('shp/cluster_tws_neg_shp_deter/',
                        pattern = '*.shp$',
                        full.names = T)[1:2]
  neg_clus1 = shapefile(neg_clus[1])
  neg_clus2 = shapefile(neg_clus[2])
  
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/spatial_pattern_of_tws_neg_infuture.R")
  tws245 = spatial_pattern_of_tws_neg_infuture(mode = 'ssp245')
  tws585 = spatial_pattern_of_tws_neg_infuture(mode = 'ssp585')
  
  to_rast <-function(x){
    coordinates(x) = ~long + lat
    gridded(x) = T
    x = raster(x)
    return(x)
  }
  
  rast245 = tws245[,c(1,2,4)]
  rast585 = tws585[,c(1,2,4)]
  
  rast245 = to_rast(rast245)
  rast585 = to_rast(rast585)
  
  rast245_1 = mask(rast245,neg_clus1)
  rast245_2 = mask(rast245,neg_clus2)
  
  rast585_1 = mask(rast585,neg_clus1)
  rast585_2 = mask(rast585,neg_clus2)
  
  
 
  
  ret_centroid_min245_subs1<-function(rast){
    
    df = as.data.frame(rast,xy =T)
    naid = which(is.na(df[,3]))
    df = df[-naid,]
    
    dfc = df[,1:3]
    id = which(dfc[,3]<= -7)
    dfc = dfc[id,]
    
    set.seed(12345)
    cl = kmeans(dfc,2)
    
    dfc$cluster = cl$cluster
    id1 = which(dfc$cluster == 2)
    
    dfc1 = dfc[id1,]
    
    minloc1 = dfc1[which(dfc1[,3] == min(dfc1[,3])),]
    
    ret = minloc1
    return(ret)
  }
  ret_centroid_min245_subs2<-function(rast){
    
    df = as.data.frame(rast,xy =T)
    naid = which(is.na(df[,3]))
    df = df[-naid,]
    
    dfc = df[,1:3]
    id = which(dfc[,3]<= -7)
    dfc = dfc[id,]
    
    set.seed(12345)
    cl = kmeans(dfc,2)
    
    dfc$cluster = cl$cluster

    id1 = which(dfc$cluster == 1)
    
    dfc1 = dfc[id1,]
    
    minloc1 = dfc1[which(dfc1[,3] == min(dfc1[,3])),]
    
    ret = minloc1
    return(ret)
  }
  ret_centroid_min585_subs1<-function(rast){
    
    df = as.data.frame(rast,xy =T)
    naid = which(is.na(df[,3]))
    df = df[-naid,]
    
    dfc = df[,1:3]
    id = which(dfc[,3]<= -7)
    dfc = dfc[id,]
    
    set.seed(12345)
    cl = kmeans(dfc,2)
    
    dfc$cluster = cl$cluster
    
    id1 = which(dfc$cluster == 2)
    
    dfc1 = dfc[id1,]
    
    minloc1 = dfc1[which(dfc1[,3] == min(dfc1[,3])),]
    
    ret = minloc1
    return(ret)
  }
  ret_centroid_min585_subs2<-function(rast){
    
    df = as.data.frame(rast,xy =T)
    naid = which(is.na(df[,3]))
    df = df[-naid,]
    
    dfc = df[,1:3]
    id = which(dfc[,3]<= -7)
    dfc = dfc[id,]
    
    set.seed(12345)
    cl = kmeans(dfc,2)
    
    dfc$cluster = cl$cluster
    
    id1 = which(dfc$cluster == 1)
    
    dfc1 = dfc[-id1,]
    
    minloc1 = dfc1[which(dfc1[,3] == min(dfc1[,3])),]
    
    ret = minloc1
    return(ret)
  }
  
  ret245_1 = ret_centroid_min245_subs1(rast245_1)
  ret245_2 = ret_centroid_min245_subs2(rast245_2)
  ret585_1 = ret_centroid_min585_subs1(rast585_1)
  ret585_2 = ret_centroid_min585_subs2(rast585_2)
  
  ret245 = rbind(ret245_1,ret245_2)
  ret585 = rbind(ret585_1,ret585_2)
  
  
  return(list(ret245,ret585))
  
  
  
}
evaluate_annual_centroid_region12_distance <-function(
  
){
  library(raster)
  input_rast = dir.create('output/twsneg_raster')
  input_rast = paste0('output/twsneg_raster/',type,'.nc')
  
  raster = lapply(input_rast,raster)
  plot(raster[[1]])
  
  determine_centroid <-function(x){
    xdf = as.data.frame(x,xy = T)
    minid = which(xdf[,3] == min(xdf[,3],na.rm = T))
    xcentroid = xdf[minid,]
    return(xcentroid)
  }
  
  x1 = determine_centroid(raster[[1]])
  
  xdf2 = as.data.frame(raster[[1]],xy = T)
  plot(raster[[12]])
}
evaluate_index_consider_earth <- function(
  
){
  trend_fun_calc<-function(x){
    x = ts(x ,start = c(2003,1),frequency = 12)
    x = decompose(x)$trend
    
    x = x[-which(is.na(x))]
    x = (x-mean(x))/sd(x)
    return(x)
  }
  trend_fun_calc_tws<-function(x){
    x = ts(x ,start = c(2003,1),frequency = 12)
    x = decompose(x)$trend
    
    x = x[-which(is.na(x))]
    x = x/sd(x)
    return(x)
  }
  
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/calc_regional_mean_consider_earth_ratio.R")
  
  pr = data_management('era5_pr_include_ocean')
  e = data_management('era5_e_include_ocean')
  pme = pr - e
  
  ato = shp_management('ocean','ato')
  pme = raster::mask(crop(pme,ato),ato)
  cluster_ato = shp_management('cluster_ato')[[3]]
  
  pme = crop(pme,cluster_ato)
  dfpme = as.data.frame(pme,xy = T)
  
  pmeori = do.call(c,lapply(as.list(pme),cellStats,
                            stat = 'mean'))
  pmeori = trend_fun_calc(pmeori)
  
  pmemean_earth = calc_regional_mean_consider_earth_ratio(dfpme)
  
  p1 = matplot(cbind(pmeori,pmemean_earth))
  
  # evaluate temperature nato 
  t = data_management('global_era5_temperature')
  t = mask(crop(t,ato),ato)
  t = crop(t,cluster_ato)
  
  tori = do.call(c,lapply(as.list(t),cellStats,
                          stat = 'mean'))
  tori = trend_fun_calc(tori)
  dft = as.data.frame(t,xy = T)
  tearth = calc_regional_mean_consider_earth_ratio(
    dft,t
  )
  matplot(cbind(tori,tearth))
  
  
  # evaluate the tibet index
  tws = data_management('grace')
  tibet = shp_management('tibet')
  neg_shps = list.files('shp/cluster_tws_neg_shp_deter',
                        pattern = '*.shp$',full.names =T)
  neg_shps = lapply(neg_shps[1:2],shapefile)
  
  tpm1 = neg_shps[[1]]
  tpm2 = neg_shps[[2]]
  
  tws_tpm1 = mask(crop(tws,tpm1),tpm1)
  tws_tpm2 = mask(crop(tws,tpm2),tpm2)
  
  dftws1 = as.data.frame(tws_tpm1,xy= T)
  dftws2 = as.data.frame(tws_tpm2,xy  =T)
  
  dftws1_ori = do.call(c,lapply(as.list(tws_tpm1),
                                cellStats,stat = 'mean'))
  dftws2_ori = do.call(c,lapply(as.list(tws_tpm2),
                                cellStats,stat = 'mean'))
  dftws1_ori = trend_fun_calc(dftws1_ori)
  dftws2_ori = trend_fun_calc(dftws2_ori)
  
  tws1_ear = calc_regional_mean_consider_earth_ratio(
    dftws1,tws
  )
  
  tws2_ear = calc_regional_mean_consider_earth_ratio(
    dftws2,tws
  )
  
  
  matplot(cbind(tws1_ear,dftws1_ori))
  
  
  
  
  
  
}
extent_adjust_cmip6_temperature <- function(
  
){
  input = '/media/root/Shen_drive1/CMIP6_combined_2099/'
  var = c('T')
  
  input_t = paste0(input,var[1])
  
  mode = c('ssp245','ssp585')
  
  files = list.files(input_t,full.names = T)
  files585 = list.files(files[2])
  files = list.files(files[1])
  
  sub_extract_model <-function(x){
    xn = strsplit(x,'_')[[1]][2]  
    return(xn)
  }
  models = lapply(files,sub_extract_model)
  models = do.call('c',models)
  
  input_t_ssp245 = list.files(list.files(input_t,full.names = T)[1],
                              full.names = T)
  input_t_ssp585 = list.files(list.files(input_t,full.names = T)[2],
                              full.names = T)
  
  
  i = 1:8
  sub_adjust_fun245 <- function(i){
    library(raster)
    
    tmpinput = input_t_ssp245[[i]]
    tmps = stack(tmpinput)
    extent(tmps) = extent(0,360,0,90)
    tmps1 = crop(tmps,extent(0,180,0,90))
    tmps2 = crop(tmps,extent(180,360,0,90))
    
    extent(tmps2) = extent(-180,0,0,90)
    
    tmps = merge(tmps2,tmps1)
    writeRaster(tmps,tmpinput,format = 'CDF',overwrite = T)
    
  }  
  sub_adjust_fun585 <- function(i){
    library(raster)
    
    tmpinput = input_t_ssp585[[i]]
    tmps = stack(tmpinput)
    extent(tmps) = extent(0,360,0,90)
    tmps1 = crop(tmps,extent(0,180,0,90))
    tmps2 = crop(tmps,extent(180,360,0,90))
    
    extent(tmps2) = extent(-180,0,0,90)
    
    tmps = merge(tmps2,tmps1)
    writeRaster(tmps,tmpinput,format = 'CDF',overwrite = T)
    
  }  
  
  library(doParallel)
  i <<- i
  input_t_ssp245 <<- input_t_ssp245
  input_t_ssp585 <<- input_t_ssp585
  
  cl = makeCluster(10)
  clusterExport(cl,c('i','input_t_ssp245'))
  system.time(parLapply(cl,i,sub_adjust_fun245))
  stopCluster(cl)
  
  
  cl = makeCluster(10)
  clusterExport(cl,c('i','input_t_ssp585'))
  system.time(parLapply(cl,i,sub_adjust_fun585))
  stopCluster(cl)
  
}
fig_mca_tibet_plot_leadingmode_subplot <- function(
  
){
  input_loc_pme = 'output/mca_analysis/loc_pme.csv'
  input_loc_tws = 'output/mca_analysis/loc_whole_tws.csv'
  
  input_modtws = 'output/mca_analysis/modu.csv'
  input_modpme = 'output/mca_analysis/modv.csv'
  
  input_tws_st = 'output/mca_analysis/ajs_full_mat.csv'
  input_pme_st = 'output/mca_analysis/bjs_full_mat.csv'
  
  loc_pme = as.data.frame(fread(input_loc_pme))
  loc_tws = as.data.frame(fread(input_loc_tws))
  colnames(loc_pme) = c('long','lat')
  colnames(loc_tws) = c('long','lat')
  
  loc_tws[,1] = loc_tws[,1]+0.125
  loc_tws[,2] = loc_tws[,2]+0.125
  
  modtws = as.data.frame(fread(input_modtws))
  modpme = as.data.frame(fread(input_modpme))
  tws_st = as.data.frame(fread(input_tws_st))
  pme_st = as.data.frame(fread(input_pme_st))
  
  modpme$variable[which(modpme$variable == 'Model_right1')] = 
    'PME Mode 1'
  modpme$variable[which(modpme$variable == 'Model_right2')] = 
    'PME Mode 2'
  modpme$variable[which(modpme$variable == 'Model_right3')] = 
    'PME Mode 3'
  modpme$variable[which(modpme$variable == 'Model_right4')] = 
    'PME Mode 4'
  
  modpme = modpme[which(modpme$variable == 'PME Mode 1'),]
  
  
  modtws$variable[which(modtws$variable == 'Model_left1')] = 
    'TWS Mode 1'
  modtws$variable[which(modtws$variable == 'Model_left2')] = 
    'TWS Mode 2'
  modtws$variable[which(modtws$variable == 'Model_left3')] = 
    'TWS Mode 3'
  modtws$variable[which(modtws$variable == 'Model_left4')] = 
    'TWS Mode 4'
  
  modtws = modtws[which(modtws$variable == 'TWS Mode 1'),]
  
  modtws$levels = cut(modtws$value,
                      breaks = c(seq(-0.011,0.011,0.0055)))
  modpme$levels = cut(modpme$value,
                      breaks =  c(seq(-0.011,0.011,0.0055)))
  
  library(RColorBrewer)
  fils = colorRampPalette(brewer.pal(
    9,'Spectral'
  ))(5)
  
  #import world and 
  world = shp_management('world')
  ato = shp_management('ocean','ato')
  world = crop(world,extent(-180,180,0,90))
  worldland = crop(world,extent(-20,180,0,90))
  
  fontsize = 14
  text_theme = theme(
    axis.text = element_text(size = fontsize,
                             color= 'black'),
    axis.title = element_text(size = fontsize,
                              color= 'black'),
    #axis.title.x = element_blank(),
    strip.text = element_text(size = fontsize,
                              color= 'black'),
    legend.text = element_text(size = fontsize,
                               color= 'black')
  )
  label_p2 = data.frame(
    x = 160,
    y = 10,
    label = paste0('(',letters[seq(3,12,3)],')'),
    variable = paste0('TWS ','Mode ',1:4)
  )
  label_p1 = data.frame(
    x = 15,
    y = 10,
    label = paste0('(',letters[seq(2,12,3)],')'),
    variable = paste0('PME ','Mode ',1:4)
  )
  label_p1$label = '(c)'
  label_p1 = label_p1[1,]
  label_p2 = label_p2[1,]
  
  fil_manual = brewer.pal(4,'Spectral')
  fil_manual = rev(fil_manual)
  
  cluster_atos1 = shp_management('cluster_ato')
  cluster_atos = do.call('bind',cluster_atos1)
  
  cluster_ios1 = shp_management('cluster_io')
  cluster_ios = do.call('bind',cluster_ios1)
  
  world_atos = crop(world,extent(cluster_atos))
  world_ios = crop(world,extent(cluster_ios))
  
  bigsubs = 'shp/big_scale_subs/'
  hsrid = as.data.frame(fread('main_plot_data/fig2/HSRid.csv'))
  hsrid = as.numeric(hsrid$HSRid)
  
  bigsubs = paste0(bigsubs,
                   'region',1:15,'.shp')
  bigsubs = bigsubs[-14]
  
  hsr1 = lapply(bigsubs[-c(2,3)],shapefile)
  
  loc_center_longlat<- function(x){
    x = extent(x)
    cenlong = (x[1]+x[2])/2
    cenlat = (x[3]+x[4])/2
    retdf = data.frame(
      long= cenlong,
      lat = cenlat
    )
    return(retdf)
  }
  
  dfato = do.call(rbind,lapply(cluster_atos1,loc_center_longlat))
  dfio = do.call(rbind,lapply(cluster_ios1,loc_center_longlat))
  dfhsr = do.call(rbind,lapply(hsr1,loc_center_longlat))
  
  dfato$label = paste0('NATO',1:4)
  dfio$label = paste0('IO',1:4)
  dfhsr$label = paste0('HSR',1:12)
  
  
  hsr = do.call(bind,hsr1)
  
  modpme$variable2 = 'Mode 1: PME over ocean and TWS in land'
  modtws$variable2 = 'Mode 1: PME over ocean and TWS in land'
  
  modpme_ato = modpme[which(modpme$long <31),]
  modpme_io = modpme[which(modpme$long > 31 &
                             modpme$lat < 32),]
  
  modpme_ato$variable2 = 'Mode 1: PME-NATO'
  modpme_io$variable2 = 'Mode 1: PME-IO'
  modtws$variable2 = 'Mode 1: TWS in land'
  
  p1 = ggplot()+
    geom_tile(data = modpme_ato,
              aes(x = long,y = lat,
                  fill = levels))+
    geom_polygon(data = world_atos,
                 aes(x = long,
                     y = lat,
                     group = group),
                 color = 'black',
                 size = 0.5,
                 fill = 'transparent')+
    geom_polygon(data = cluster_atos,
                 aes(x = long,
                     y = lat,
                     group = group),
                 color = 'black',
                 size = 0.8,
                 fill = 'transparent')+
    geom_text_repel(data = dfato,
              aes(x = long,
                  y = lat,
                  label = label),
              color = 'black',
              size = 4,
              bg.color = 'white',
              bg.r =0.25,
              force = F)+
    geom_text(data = label_p1,
              aes(x = x,y = y,
                  label = label),
              size = 5,color = 'black')+
    #scale_fill_brewer(palette = 'Spectral')+
    scale_fill_manual(values = fil_manual)+
    #scale_color_manual(values= route_col)+
    theme_bw()+
    theme(panel.grid = element_blank(),
          legend.position = 'none')+
    guides(fill = guide_legend(title = '',
                               nrow = 1))+
    text_theme+
    theme(axis.text.y = element_text(angle = 90,hjust = 0.5,vjust = 0.5))+
    xlab("Longitude")+
    ylab('Latitude')+
    facet_wrap(~variable2,nrow = 1)+
    scale_x_continuous(breaks = seq(-100,0,50),
                       labels = paste0(c(100,50,0),c('°W','°W','°')))+
    scale_y_continuous(breaks = c(0,20,40,60,80),
                       labels = paste0(c(0,20,40,60,80),c('°',rep('°N',4))))
  
  
  label_p2 = label_p1
  label_p2$x = 100
  label_p2$y = 30
  label_p2$label = '(e)'
  p2 = ggplot()+
    geom_tile(data = modpme_io,
              aes(x = long,y = lat,
                  fill = levels))+
    geom_polygon(data = world_ios,
                 aes(x = long,
                     y = lat,
                     group = group),
                 color = 'black',
                 size = 0.5,
                 fill = 'transparent')+
    geom_polygon(data = cluster_ios,
                 aes(x = long,
                     y = lat,
                     group = group),
                 color = 'black',
                 size = 0.8,
                 fill = 'transparent')+
    geom_text_repel(data = dfio,
                 aes(x = long,
                     y = lat,
                     label = label),
                 color = 'black',
                 size = 4,
              bg.color = 'white',
              bg.r =0.25,
              force = F)+
    geom_text(data = label_p2,
              aes(x = x,y = y,
                  label = label),
              size = 5,color = 'black')+
    #scale_fill_brewer(palette = 'Spectral')+
    scale_fill_manual(values = fil_manual)+
    #scale_color_manual(values= route_col)+
    theme_bw()+
    theme(panel.grid = element_blank(),
          legend.position = 'none')+
    guides(fill = guide_legend(title = '',
                               nrow = 1))+
    text_theme+
    theme(axis.text.y = element_text(angle = 90,hjust = 0.5,vjust = 0.5))+
    xlab("Longitude")+
    ylab('Latitude')+
    facet_wrap(~variable2,nrow = 1)+
    scale_x_continuous(breaks = seq(40,100,20),
                       labels = paste0(seq(40,100,20),'°E'))+
    scale_y_continuous(breaks = c(0,10,20,30),
                       labels = paste0(c(0,10,20,30),c('°',rep('°N',3))))
    
 
  label_p3 = label_p1
  label_p3$x = 160
  label_p3$y = 80
  label_p3$label = '(e)'
  p3 = ggplot()+
    geom_tile(data = modtws,
              aes(x = long,y = lat,
                  fill = levels))+
    geom_polygon(data = worldland,
                 aes(x = long,
                     y = lat,
                     group = group),
                 color = 'black',
                 size = 0.5,
                 fill = 'transparent')+
    geom_polygon(data = hsr,
                 aes(x = long,
                     y = lat,
                     group = group),
                 color = 'black',
                 size = 0.8,
                 fill = 'transparent')+
    geom_text(data = dfhsr,
              aes(x = long,
                  y = lat,
                  label = label),
              color = 'black',
              size = 4)+
    geom_text(data = label_p3,
              aes(x = x,y = y,
                  label = label),
              size = 5,color = 'black')+
    #scale_fill_brewer(palette = 'Spectral')+
    scale_fill_manual(values = fil_manual[2:3])+
    #scale_color_manual(values= route_col)+
    theme_bw()+
    theme(panel.grid = element_blank(),
          legend.position = 'none')+
    guides(fill = guide_legend(title = '',
                               nrow = 1))+
    text_theme+
    theme(axis.text.y = element_text(angle = 90,hjust = 0.5,vjust = 0.5))+
    xlab("Longitude")+
    ylab('Latitude')+
    facet_wrap(~variable2,nrow = 1)
  
  p123 = plot_grid(
    p1,p2,
    rel_widths = c(1,1),
    rel_heights = c(1,1),
    nrow = 2
    
  )
  
  
  return(p123)
}
fig_mca_tibet_plot_leadingmode <- function(
  
){
  input_loc_pme = 'output/mca_analysis/loc_pme.csv'
  input_loc_tws = 'output/mca_analysis/loc_whole_tws.csv'
  
  input_modtws = 'output/mca_analysis/modu.csv'
  input_modpme = 'output/mca_analysis/modv.csv'
  
  input_tws_st = 'output/mca_analysis/ajs_full_mat.csv'
  input_pme_st = 'output/mca_analysis/bjs_full_mat.csv'
  
  loc_pme = as.data.frame(fread(input_loc_pme))
  loc_tws = as.data.frame(fread(input_loc_tws))
  colnames(loc_pme) = c('long','lat')
  colnames(loc_tws) = c('long','lat')
  
  loc_tws[,1] = loc_tws[,1]+0.125
  loc_tws[,2] = loc_tws[,2]+0.125
  
  modtws = as.data.frame(fread(input_modtws))
  modpme = as.data.frame(fread(input_modpme))
  tws_st = as.data.frame(fread(input_tws_st))
  pme_st = as.data.frame(fread(input_pme_st))
  
  modpme$variable[which(modpme$variable == 'Model_right1')] = 
    'PME Mode 1'
  modpme$variable[which(modpme$variable == 'Model_right2')] = 
    'PME Mode 2'
  modpme$variable[which(modpme$variable == 'Model_right3')] = 
    'PME Mode 3'
  modpme$variable[which(modpme$variable == 'Model_right4')] = 
    'PME Mode 4'
  
  modpme = modpme[which(modpme$variable == 'PME Mode 1'),]
  
  
  modtws$variable[which(modtws$variable == 'Model_left1')] = 
    'TWS Mode 1'
  modtws$variable[which(modtws$variable == 'Model_left2')] = 
    'TWS Mode 2'
  modtws$variable[which(modtws$variable == 'Model_left3')] = 
    'TWS Mode 3'
  modtws$variable[which(modtws$variable == 'Model_left4')] = 
    'TWS Mode 4'
  
  modtws = modtws[which(modtws$variable == 'TWS Mode 1'),]
  
  modtws$levels = cut(modtws$value,
                      breaks = c(seq(-0.011,0.011,0.0055)))
  modpme$levels = cut(modpme$value,
                      breaks =  c(seq(-0.011,0.011,0.0055)))
  
  library(RColorBrewer)
  fils = colorRampPalette(brewer.pal(
    9,'Spectral'
  ))(5)
  
  #import world and 
  world = shp_management('world')
  ato = shp_management('ocean','ato')
  world = crop(world,extent(-180,180,0,90))
  
  fontsize = 14
  text_theme = theme(
    axis.text = element_text(size = fontsize,
                             color= 'black'),
    axis.title = element_text(size = fontsize,
                              color= 'black'),
    #axis.title.x = element_blank(),
    strip.text = element_text(size = fontsize,
                              color= 'black'),
    legend.text = element_text(size = fontsize,
                               color= 'black')
  )
  label_p2 = data.frame(
    x = 160,
    y = 10,
    label = paste0('(',letters[seq(3,12,3)],')'),
    variable = paste0('TWS ','Mode ',1:4)
  )
  label_p1 = data.frame(
    x = -170,
    y = 10,
    label = paste0('(',letters[seq(2,12,3)],')'),
    variable = paste0('PME ','Mode ',1:4)
  )
  
  label_p1 = label_p1[1,]
  label_p2 = label_p2[1,]
  
  fil_manual = brewer.pal(4,'Spectral')
  fil_manual = rev(fil_manual)
  
  cluster_atos = shp_management('cluster_ato')
  cluster_atos = do.call('bind',cluster_atos)
  
  bigsubs = 'shp/big_scale_subs/'
  hsrid = as.data.frame(fread('main_plot_data/fig2/HSRid.csv'))
  hsrid = as.numeric(hsrid$HSRid)
  
  bigsubs = paste0(bigsubs,
                   'region',1:15,'.shp')
  bigsubs = bigsubs[-14]
  
  hsr1 = lapply(bigsubs[-c(2,3)],shapefile)
  
  loc_center_longlat<- function(x){
    x = extent(x)
    cenlong = (x[1]+x[2])/2
    cenlat = (x[3]+x[4])/2
    retdf = data.frame(
      long= cenlong,
      lat = cenlat
    )
    return(retdf)
  }
  
  dfhsr = do.call(rbind,lapply(hsr1,loc_center_longlat))
  dfhsr$label = paste0('HSR',1:12)
  
  hsr = do.call(bind,hsr1)
  
  modpme$variable2 = 'Mode 1: PME over ocean and TWS in land'
  modtws$variable2 = 'Mode 1: PME over ocean and TWS in land'
  
  trajdf = as.data.frame(
    fread('whole_time_traj/whole_time_traj.csv')
  )
  trajdf$region[which(is.na(trajdf$region))] = 'NA'
  cur_df = as.data.frame(
    fread('/home/share/R_project/xinjiang_vapor/analysis_output/fig4/current_df.csv')
  )
  
  idless50 = which(cur_df$lat <= 50 &
                     cur_df$lat >= 10)
  cur_df = cur_df[idless50,]
  
  idbig1 = which(cur_df$u>0 &
                   cur_df$v >0)
  idbig2 = which(cur_df$u<0 &
                   cur_df$v >0)
  idbig3 = which(cur_df$u>0 &
                   cur_df$v <0)
  
  
  cur_df1 = cur_df[idbig1,]
  cur_df2 = cur_df[idbig2,]
  cur_df3 = cur_df[idbig3,]
  
  cur_df3 = cur_df3[
    which(cur_df3$long > -20 &
            cur_df3$lat <= 40 &
            cur_df3$lat >=30),
  ]
  
  cid1 = seq(1,nrow(cur_df1),40)
  cid2 = seq(1,nrow(cur_df2),200)
  cid3 = seq(1,nrow(cur_df3),30)
  
  cur_df1 = cur_df1[cid1,]
  cur_df2 = cur_df2[cid2,]
  cur_df3 = cur_df3[cid3,]
  
  
  cols_cur = c('#2988AE','#30376E','#4169E1')
  
  library(ggsci)
  col_traj = pal_material('blue')(9)
  col_traj = colorRampPalette(col_traj)(9*3)
  col_traj = col_traj[seq(2,9*3,2)][4:12]
  
  
  p1 = ggplot()+
    geom_tile(data = modpme,
              aes(x = long,y = lat,
                  fill = levels))+
    geom_tile(data = modtws,
              aes(x = long,y = lat,
                  fill = levels))+
    geom_polygon(data = world,
                 aes(x = long,
                     y = lat,
                     group = group),
                 color = 'black',
                 size = 0.5,
                 fill = 'transparent')+
    geom_polygon(data = hsr,
                 aes(x = long,
                     y = lat,
                     group = group),
                 color = 'black',
                 size = 0.3,
                 fill = 'transparent')+
    geom_text(data = label_p1,
              aes(x = x,y = y,
                  label = label),
              size = 5,color = 'black')+
    #scale_fill_brewer(palette = 'Spectral')+
    scale_fill_manual(values = fil_manual)+
    #scale_color_manual(values= route_col)+
    scale_x_continuous(breaks = c(-100,0,100),
                       labels = paste0(c(100,0,100),c('°W','°','°E')))+
    scale_y_continuous(breaks = c(0,20,40,60,80),
                       labels = paste0(c(0,20,40,60,80),c('°',rep('°N',4))))+
    theme_bw()+
    theme(panel.grid = element_blank(),
          legend.position = 'bottom')+
    guides(fill = guide_legend(title = '',
                               nrow = 1))+
    text_theme+
    theme(axis.text.y = element_text(angle = 90,hjust = 0.5,vjust = 0.5))+
    xlab("Longitude")+
    ylab('Latitude')+
    facet_wrap(~variable2,nrow = 1)
  
  
  
  pme_st = t(pme_st)
  tws_st = t(tws_st)
  
  pme_st = pme_st[,1:4]
  tws_st = tws_st[,1:4]
  
  colnames(pme_st)= paste0('PME Mode ',1:4)
  colnames(tws_st) = paste0('TWS Mode ',1:4)
  
  cors_cal_fun<-function(i){
    tmp = cor(pme_st[,i],tws_st[,i])
    tmp.sig = cor.test(pme_st[,i],
                       tws_st[,i])$p.value
    retdf = data.frame(
      cor = tmp,
      sig = tmp.sig
    )
    return(retdf)
  }
  i = 1:4
  cors = lapply(i,cors_cal_fun)
  cors = do.call(rbind,cors)
  
  cors$sig = c('7.78e-59',
               '1.78e-60',
               '4.58e-104',
               '1.07e-83')
  
  cors$x = as.Date('2004-06-01')
  cors$y = 100
  
  cors = cors[1,]
  
  covs = fread('output/mca_analysis/model_covs_weight.csv',
               header = T)
  covs = as.data.frame(covs)
  covs = covs[1:4,2]
  covs = round(covs *100,2)
  covs = paste0(covs,'%')
  cors$type = paste0("Mode ",1,' (',covs[1],')')
  
  label_line = data.frame(
    x = as.Date('2004-06-01'),
    y = -110,
    label = paste0('(',letters[seq(1,12,3)],')'),
    type = paste0("Mode ",1:4,' (',covs,')')
  )
  label_line = label_line[1,]
  
  date = seq(as.Date('2003-01-01'),
             as.Date('2017-06-01'),
             '1 month')
  date = date[-c(1:6,169:174)]
  
  dfpme_st = data.frame(
    date,
    pme_st
  )
  dftws_st = data.frame(
    date,
    tws_st
  )
  
  dfpme_st = dfpme_st[,1:2]
  dftws_st = dftws_st[,1:2]
  
  dfpme_st = reshape2::melt(dfpme_st,'date')
  dftws_st = reshape2::melt(dftws_st,'date')
  
  
  dfpme_st$type = rep(paste0("Mode ",1,' (',covs[1],')'),
                      each = 162)
  dftws_st$type = rep(paste0("Mode ",1,' (',covs[1],')'),
                      each = 162)
  dfpme_st$col = 'PME'
  dftws_st$col = 'TWS'
  dfline = rbind(dfpme_st,
                 dftws_st)
  
  
  
  library(ggsci)
  cols = pal_lancet(alpha = 1)(9)[c(1,7)]
  
  p3 = ggplot()+
    geom_line(data = dfline,
              aes(x = date,y= value,
                  color = col),
              size = 1.3)+
    geom_text(data = cors,
              aes(x = x,y = y,
                  label = paste0('cor: ',round(cor,2),'(',
                                 sig,')')),
              size = 5,
              color = 'black',
              hjust = 0)+
    geom_text(data = label_line,
              aes(x = x,y = y,
                  label = label),
              size = 5,color = 'black')+
    scale_color_manual(values = cols)+
    theme_bw()+
    theme(panel.grid = element_blank(),
          legend.position = 'bottom')+
    
    text_theme+
    theme(axis.text.y = element_text(angle = 90,hjust = 0.5,vjust = 0.5))+
    guides(color = guide_legend(title = '',
                                nrow = 2))+
    facet_wrap(~type,nrow = 1)+
    scale_y_continuous(breaks = c(-100,-50,0,75,150))+
    xlab("Time")+
    ylab('Time coefficients')
  
  library(ggpubr)
  p3_leg = as_ggplot(get_legend(p3))
  p2_leg = as_ggplot(get_legend(p1))
  p12leg = plot_grid(p3_leg,
                     p2_leg,nrow = 1,
                     rel_widths = c(1,1),
                     rel_heights = c(1,1))
  p1 = p1+ theme(legend.position = 'none')
  p2 = p2+ theme(legend.position = 'none')
  p3 = p3+theme(legend.position = 'none')
  library(cowplot)
  p123 = plot_grid(
    p3,p1,
    rel_heights = c(1,1),
    rel_widths = c(1,2),nrow =1
  )
  
  p123leg = plot_grid(p123,
                      p12leg,
                      ncol = 1,
                      rel_heights = c(10,1))
  dir.create('main_plot/SI/fig_combine_mca_trend')
  png('main_plot/SI/combine_mca_trend/mca_leg.png',
      height = 25,
      width = 25,
      units = 'cm',
      res = 800)
  print(p12leg)
  dev.off()
  return(p123)
}
fig_mca_tibet_plot <- function(
  
){
  input_loc_pme = 'output/mca_analysis/loc_pme.csv'
  input_loc_tws = 'output/mca_analysis/loc_whole_tws.csv'
  
  input_modtws = 'output/mca_analysis/modu.csv'
  input_modpme = 'output/mca_analysis/modv.csv'
  
  input_tws_st = 'output/mca_analysis/ajs_full_mat.csv'
  input_pme_st = 'output/mca_analysis/bjs_full_mat.csv'
  
  loc_pme = as.data.frame(fread(input_loc_pme))
  loc_tws = as.data.frame(fread(input_loc_tws))
  colnames(loc_pme) = c('long','lat')
  colnames(loc_tws) = c('long','lat')
  
  loc_tws[,1] = loc_tws[,1]+0.125
  loc_tws[,2] = loc_tws[,2]+0.125
  
  modtws = as.data.frame(fread(input_modtws))
  modpme = as.data.frame(fread(input_modpme))
  tws_st = as.data.frame(fread(input_tws_st))
  pme_st = as.data.frame(fread(input_pme_st))
  
  modpme$variable[which(modpme$variable == 'Model_right1')] = 
    'PME Mode 1'
  modpme$variable[which(modpme$variable == 'Model_right2')] = 
    'PME Mode 2'
  modpme$variable[which(modpme$variable == 'Model_right3')] = 
    'PME Mode 3'
  modpme$variable[which(modpme$variable == 'Model_right4')] = 
    'PME Mode 4'
  
  modtws$variable[which(modtws$variable == 'Model_left1')] = 
    'TWS Mode 1'
  modtws$variable[which(modtws$variable == 'Model_left2')] = 
    'TWS Mode 2'
  modtws$variable[which(modtws$variable == 'Model_left3')] = 
    'TWS Mode 3'
  modtws$variable[which(modtws$variable == 'Model_left4')] = 
    'TWS Mode 4'
  
  modtws$levels = cut(modtws$value,
                      breaks = c(seq(-0.011,0.011,0.0055)))
  modpme$levels = cut(modpme$value,
                      breaks =  c(seq(-0.011,0.011,0.0055)))
  
  library(RColorBrewer)
  fils = colorRampPalette(brewer.pal(
    9,'Spectral'
  ))(5)
  
  #import world and 
  world = shp_management('world')
  ato = shp_management('ocean','ato')
  world = crop(world,extent(-180,180,0,90))
  world_oce = crop(world,c(extent(ato)[1],
                           110,extent(ato)[3],
                           extent(ato)[4]))
  world_eu = crop(world,extent(-20,180,0,90))
  
  
  fontsize = 14
  text_theme = theme(
    axis.text = element_text(size = fontsize,
                             color= 'black'),
    axis.title = element_text(size = fontsize,
                              color= 'black'),
    #axis.title.x = element_blank(),
    strip.text = element_text(size = fontsize,
                              color= 'black'),
    legend.text = element_text(size = fontsize,
                               color= 'black')
  )
  label_p2 = data.frame(
    x = 160,
    y = 10,
    label = paste0('(',letters[seq(3,12,3)],')'),
    variable = paste0('TWS ','Mode ',1:4)
  )
  label_p1 = data.frame(
    x = -120,
    y = 10,
    label = paste0('(',letters[seq(2,12,3)],')'),
    variable = paste0('PME ','Mode ',1:4)
  )
  
  
  p1 = ggplot()+
    geom_polygon(data = world_oce,
                 aes(x = long,
                     y = lat,
                     group = group),
                 color = 'black',
                 size = 0.5,
                 fill = 'transparent')+
    geom_tile(data = modpme,
              aes(x = long,y = lat,
                  fill = levels))+
    geom_text(data = label_p1,
              aes(x = x,y = y,
                  label = label),
              size = 4,color = 'black')+
    scale_fill_brewer(palette = 'Spectral')+
    #scale_fill_manual(values = fils)+
    #scale_color_manual(values= route_col)+
    theme_bw()+
    theme(panel.grid = element_blank(),
          legend.position = 'bottom')+
    guides(fill = guide_legend(title = '',
                               nrow = 2))+
    text_theme+
    xlab("Longitude")+
    ylab('Latitude')+
    facet_wrap(~variable,nrow = 4)
  
  
  
  
  p2 = ggplot()+
    geom_polygon(data = world_eu,
                 aes(x = long,
                     y = lat,
                     group = group),
                 color = 'black',
                 size = 0.5,
                 fill = 'transparent')+
    geom_tile(data = modtws,
              aes(x = long,y = lat,
                  fill = levels))+
    
    geom_text(data = label_p2,
              aes(x = x,y = y,
                  label = label),
              size = 4,color = 'black')+
    scale_fill_brewer(palette = 'Spectral')+
    #scale_color_manual(values= route_col)+
    
    #scale_fill_manual(values = fils)+
    theme_bw()+
    theme(panel.grid = element_blank(),
          legend.position = 'bottom')+
    guides(fill = guide_legend(title = '',
                               nrow = 2))+
    
    text_theme+
    xlab("Longitude")+
    ylab('Latitude')+
    facet_wrap(~variable,nrow = 4)
  
  pme_st = t(pme_st)
  tws_st = t(tws_st)
  
  pme_st = pme_st[,1:4]
  tws_st = tws_st[,1:4]
  
  colnames(pme_st)= paste0('PME Mode ',1:4)
  colnames(tws_st) = paste0('TWS Mode ',1:4)
  
  cors_cal_fun<-function(i){
    tmp = cor(pme_st[,i],tws_st[,i])
    tmp.sig = cor.test(pme_st[,i],
                       tws_st[,i])$p.value
    retdf = data.frame(
      cor = tmp,
      sig = tmp.sig
    )
    return(retdf)
  }
  i = 1:4
  cors = lapply(i,cors_cal_fun)
  cors = do.call(rbind,cors)
  
  cors$sig = c('7.78e-59',
               '1.78e-60',
               '4.58e-104',
               '1.07e-83')
  
  cors$x = as.Date('2004-06-01')
  cors$y = 100
  
  
  covs = fread('output/mca_analysis/model_covs_weight.csv',
                  header = T)
  covs = as.data.frame(covs)
  covs = covs[1:4,2]
  covs = round(covs *100,2)
  covs = paste0(covs,'%')
  cors$type = paste0("Mode ",1:4,' (',covs,')')
  
  label_line = data.frame(
    x = as.Date('2015-06-01'),
    y = -68,
    label = paste0('(',letters[seq(1,12,3)],')'),
    type = paste0("Mode ",1:4,' (',covs,')')
  )
  
  date = seq(as.Date('2003-01-01'),
             as.Date('2017-06-01'),
             '1 month')
  date = date[-c(1:6,169:174)]
  
  dfpme_st = data.frame(
    date,
    pme_st
  )
  dftws_st = data.frame(
    date,
    tws_st
  )
  
  dfpme_st = reshape2::melt(dfpme_st,'date')
  dftws_st = reshape2::melt(dftws_st,'date')
  
  
  dfpme_st$type = rep(paste0("Mode ",1:4,' (',covs,')'),
                      each = 162)
  dftws_st$type = rep(paste0("Mode ",1:4,' (',covs,')'),
                      each = 162)
  dfpme_st$col = 'PME'
  dftws_st$col = 'TWS'
  dfline = rbind(dfpme_st,
                 dftws_st)
  
  
  
  library(ggsci)
  cols = pal_lancet(alpha = 1)(9)[c(1,7)]
  
  p3 = ggplot()+
    geom_line(data = dfline,
              aes(x = date,y= value,
                  color = col),
              size = 1.3)+
    geom_text(data = cors,
              aes(x = x,y = y,
                  label = paste0('cor: ',round(cor,2),'(',
                                 sig,')')),
              size = 4,
              color = 'black',
              hjust = 0)+
    geom_text(data = label_line,
              aes(x = x,y = y,
                  label = label),
              size = 4,color = 'black')+
    scale_color_manual(values = cols)+
    theme_bw()+
    theme(panel.grid = element_blank(),
          legend.position = 'bottom')+
    
    text_theme+
    guides(color = guide_legend(title = '',
                                nrow = 2))+
    facet_wrap(~type,nrow = 4)+
    scale_y_continuous(breaks = c(-100,-50,0,75,150))+
    xlab("Time")+
    ylab('Time coefficients')
  
  library(ggpubr)
  p3_leg = as_ggplot(get_legend(p3))
  p2_leg = as_ggplot(get_legend(p1))
  p12leg = plot_grid(p3_leg,
                     p2_leg,nrow = 1,
                     rel_widths = c(1,1),
                     rel_heights = c(1,1))
  p1 = p1+ theme(legend.position = 'none')
  p2 = p2+ theme(legend.position = 'none')
  p3 = p3+theme(legend.position = 'none')
  library(cowplot)
  p123 = plot_grid(
    p3,p1,p2,
    rel_heights = c(1,1,1),
    rel_widths = c(1,1,1),nrow =1
  )
  
  p123leg = plot_grid(p123,
                      p12leg,
                      ncol = 1,
                      rel_heights = c(10,1))
  dir.create('main_plot/SI/fig_mca')
  png('main_plot/SI/fig_mca/mca.png',
      height = 25,
      width = 25,
      units = 'cm',
      res = 800)
  print(p123leg)
  dev.off()
}
fig_s1_evaluate_contr<-function(
  
){
  # import gpcc pr data 
  gpcc = data_management('gpcc_full')
  # import era5 pr data 
  era5 = data_management('era5_pr_include_ocean')
  # import shp_tibet 
  tibet = shp_management('tibet')
  gpcc = mask(crop(gpcc,tibet),tibet)
  era5 = mask(crop(era5,tibet),tibet)
  # cal cell stat
  gpcc = as.list(gpcc)
  era5 = as.list(era5)
  
  gpcc = lapply(gpcc,cellStats,stat = mean,
                na.rm = T)
  era5 = lapply(era5,cellStats,stat = mean,
                na.rm = T)
  
  gpcc = do.call('c',gpcc)
  era5 = do.call('c',era5)
  
  stand_trend_pr <- function(x){
    x = ts(x,start = c(2003,1),frequency = 12)
    x = decompose(x)$trend
    
    x = x[-which(is.na(x))]
    x = (x -mean(x))/sd(x)
    return(x)
  }
  
  #gpcc = stand_trend_pr(gpcc)
  #era5 = stand_trend_pr(era5)
  
  # import long term cr data 
  long_term = 'main_plot_data/fig1/tt_release/tt_release.csv'
  long_nolos = 'main_plot_data/fig1/contr_value_noloss.csv'
  
  long_term = as.data.frame(fread(long_term))
  long_nolos = as.data.frame(fread(long_nolos))
  
  long_term = long_term[,1]
  #long_term[10,]= abs(long_term[10,])
  long_nolos = long_nolos[,-1]
  
  #long_sum = apply(long_term,2,sum,na.rm= T)
  long_nolos = apply(long_nolos,2,sum,na.rm = T)
  long_nolos = as.numeric(long_nolos)
  long_nolos = abs(long_nolos)
  long_sum = abs(long_term)
  #long_nolos = abs(long_nolos)
  
  #long_sum = stand_trend_pr(long_sum)
  
  date = seq(as.Date('2003-01-01'),
             as.Date('2017-12-01'),
             '1 month')
  
  dateid = 1:180
  
  gpcc = (gpcc -mean(gpcc))/sd(gpcc)
  era5 = (era5-mean(era5))/sd(era5)
  TCR = (long_sum - mean(long_sum))/sd(long_sum)
  
  df = data.frame(
    date = date,
    GPCC_Pr = gpcc,
    ERA5_Pr = era5,
    TCR = TCR
  )
  
  dfm = reshape2::melt(df,'date')
  
  cols = ggsci::pal_lancet()(9)[c(1,4,7)]
  
  fontsize = 14
  text_theme = theme(
    legend.text = element_text(size = fontsize,
                               color = 'black'),
    axis.text = element_text(size = fontsize,
                             color = 'black'),
    axis.title = element_text(size = fontsize,
                              color = 'black'),
    strip.text = element_text(size = fontsize,
                              color = 'black')
  )
  labeldf = data.frame(
    x = as.Date('2003-03-01'),
    y = 3,
    label = '(a)'
  )
  p1 = ggplot()+
    geom_line(data = dfm,aes(x = date,
                             y = value,
                             color = variable,
                             linetype = variable),
              size = 1)+
    geom_text(data = labeldf,
              aes(x = x,y = y,
                  label = label),
              size = 5,color = 'black')+
    scale_color_manual(values = cols)+
    theme_bw()+
    text_theme+
    theme(legend.position = 'none')+
    guides(color = guide_legend(title = ''),
           linetype = guide_legend(title = ''))+

    xlab('Time')+
    ylab('Indices')

  cor1 = cor(gpcc,TCR)
  cor2 = cor(era5,TCR)
  pv1 = cor.test(gpcc,TCR)$p.value
  pv2 = cor.test(era5,TCR)$p.value
  
  df2 = data.frame(
    GPCC_Pr = gpcc,
    TCR = TCR
  )
  df3 = data.frame(
    ERA5_Pr = era5,
    TCR = TCR
  )
  textdf1 = data.frame(
    x = 1,
    y = -1,
    label = paste0('cor:',round(cor1,2),'(',
                   scientific(pv1,2),')')
  )
  
  textdf2 = data.frame(
    x = 1,
    y = -1,
    label = paste0('cor:',round(cor2,2),'(',
                   scientific(pv2,2),')')
  )
  labeldf2 = data.frame(
    x = -1,
    y = 3,
    label = '(b)'
  )
  labeldf3 = data.frame(
    x = -1,
    y = 3,
    label = '(c)'
  )
  
  p2 = ggplot()+
    geom_point(data = df2,
               aes(x = GPCC_Pr,
                   y = TCR),
               color = cols[1],
               size = 3,
               shape = 1)+
    geom_text(data = textdf1,
              aes(x =x,y = y,
                  label = label),
              size =5,color = 'black')+
    geom_text(data = labeldf2,
              aes(x =x,y = y,
                  label = label),
              size =5,color = 'black',
              hjust = 0)+
    geom_abline(slope = 1,intercept = 0)+
    theme_bw()+
    text_theme
  
  p3 = ggplot()+
    geom_point(data = df3,
               aes(x = ERA5_Pr,
                   y = TCR),
               color = cols[1],
               size = 3,
               shape = 1)+
    geom_text(data = textdf2,
              aes(x =x,y = y,
                  label = label),
              size =5,color = 'black')+
    geom_text(data = labeldf3,
              aes(x =x,y = y,
                  label = label),
              size =5,color = 'black',
              hjust = 0)+
    geom_abline(slope = 1,intercept = 0)+
    theme_bw()+
    text_theme
    #theme(legend.position = 'bottom')+

  
  p23 = plot_grid(
    p2,p3,rel_heights = c(1,1),
    rel_widths = c(1,1)
  )
  p123 = plot_grid(
    p1,p23,ncol = 1,
    rel_widths = c(1,1),
    rel_heights = c(1,1)
  )
  
  leg = as_ggplot(get_legend(p1+
                               theme(legend.position = 'bottom')))
  p123leg = plot_grid(p123,
                      leg,
                      ncol = 1,
                      rel_heights = c(10,1))
  
  
  
  dir.create('main_plot/SI')
  output = 'main_plot/SI/figS1_validate_simulate'
  dir.create(output)
  output = paste0(output,'/figS1.png')
  
  png(output,
      width = 25,
      height = 25,
      units = 'cm',
      res = 800)
  print(p123leg)
  dev.off()
  
  
  
}
fig_s2_month_contr<- function(
  
){
  # 
  setwd('/media/sdb5/Vapor_projcts/Vapor_tibet')
  library(data.table)
  library(ggplot2)
  library(RColorBrewer)
  long_term = 'main_plot_data/fig1/contr_in_source_variance_new.csv'
  long_nolos = 'main_plot_data/fig1/contr_rate_noloss.csv'
  
  long_term = as.data.frame(fread(long_term))
  long_nolos = as.data.frame(fread(long_nolos))
  
  sou_names = long_term$sou_names
  
  long_nolos1 = long_nolos[1:9,]
  long_nolos2 = long_nolos[10:12,]
  long_nolos = rbind(long_nolos1,
                     long_nolos[13,],
                     long_nolos2)
  
  long_nolos = long_nolos[,-1]
  long_term = long_term[,-1]
  
  i = 1:12
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/calc_month_mean_contr.R")
  mon_nolos = 1
  mon_term = 1
  for(i in 1:12){
    tmp_nolos = calc_month_mean_contr(i,long_nolos)
    tmp_term = calc_month_mean_contr(i,long_term)
    
    mon_nolos = cbind(mon_nolos,
                      tmp_nolos)
    mon_term = cbind(mon_term,
                     tmp_term)
    
  }
  mon_nolos = mon_nolos[,-1]
  mon_term = mon_term[,-1]
  
  colnames(mon_nolos) = month.abb
  colnames(mon_term) = month.abb
  
  mon_nolos = data.frame(
    Source = sou_names,
    mon_nolos
  )
  mon_term = data.frame(
    Source = sou_names,
    mon_term
  )    
  
  
  mon_nolos = reshape2::melt(mon_nolos,
                             'Source')
  mon_term = reshape2::melt(mon_term,'Source')
  
  mon_term$value = abs(mon_term$value)
  mon_term$levels = 
    cut(mon_term$value,
        breaks = c(seq(0,10,1),25,50,75,100))
  
  mon_nolos$value = abs(mon_nolos$value)
  mon_nolos$levels = 
    cut(mon_nolos$value,
        breaks = c(seq(0,10,1),25,50,75,100))
  
  fils = colorRampPalette(
    brewer.pal(9,'Spectral')
  )(14)
  fils = rev(fils)
  ptrail = ggplot()+
    geom_tile(data = mon_term,
              aes(x = variable,
                  y= Source,
                  fill = levels),
              color = 'white')+
    scale_fill_manual(values = fils)
  ptrail

  
  mon_term$value[which(mon_term$Source == 'tibet')]
  
  
  
  
}
fig_spatial_pattern_multi_year_mean_bord <- function(
  
){
  #
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/spatial_pattern_of_tws_neg_infuture_by_multi_year.R")
  df1_245 = spatial_pattern_of_tws_neg_infuture_by_multi_year(2020:2051,'ssp245')
  df2_245 = spatial_pattern_of_tws_neg_infuture_by_multi_year(2051:2082,'ssp245')
  df3_245 = spatial_pattern_of_tws_neg_infuture_by_multi_year(2082:2098,'ssp245')
  
  df1_585 = spatial_pattern_of_tws_neg_infuture_by_multi_year(2020:2051,'ssp585')
  df2_585 = spatial_pattern_of_tws_neg_infuture_by_multi_year(2051:2082,'ssp585')
  df3_585 = spatial_pattern_of_tws_neg_infuture_by_multi_year(2082:2098,'ssp585')
  
  
  df1_245$type = '(b) SSP245 2020-2051'
  df2_245$type = '(c) SSP245 2051-2082'
  df3_245$type = '(d) SSP245 2082-2098'
  
  df1_585$type = '(e) SSP585 2020-2051'
  df2_585$type = '(f) SSP585 2051-2082'
  df3_585$type = '(g) SSP585 2082-2098'
  
  twsdf = rbind(df1_245,df2_245,df3_245,
                df1_585,df2_585,df3_585)
  
  twsdf = twsdf[-which(twsdf$tws245>0),]
  
  # import border
  input='output/mulit_year_mean_proj_border'
  dir.create(input)
  files245 = paste0('year_',1:3,'_border245.csv')
  files585 = paste0('year_',1:3,'_border585.csv')
  
  input245 = paste0(input,'/',files245)
  input585 = paste0(input,'/',files585)
  
  bor1_245 = as.data.frame(fread(input245[1]))
  bor2_245 = as.data.frame(fread(input245[2]))
  bor3_245 = as.data.frame(fread(input245[3]))
  
  bor1_585 = as.data.frame(fread(input585[1]))
  bor2_585 = as.data.frame(fread(input585[2]))
  bor3_585 = as.data.frame(fread(input585[3]))
  
  bor1_245$type = '(b) SSP245 2020-2051'
  bor2_245$type = '(c) SSP245 2051-2082'
  bor3_245$type = '(d) SSP245 2082-2098'
  
  bor1_585$type = '(e) SSP585 2020-2051'
  bor2_585$type = '(f) SSP585 2051-2082'
  bor3_585$type = '(g) SSP585 2082-2098'
  
  bor1_245$col = '2020-2051'
  bor2_245$col = '2051-2082'
  bor3_245$col = '2082-2098'
  
  bor1_585$col = '2020-2051'
  bor2_585$col = '2051-2082'
  bor3_585$col = '2082-2098'
  
  bors = rbind(bor1_245,bor2_245,bor3_245,
               bor1_585,bor2_585,bor3_585)
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/import_proj_border_multi_min.R")
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/import_proj_border_multi_max.R")
  bors_max = import_proj_border_multi_max()
  bors_min = import_proj_border_multi_min()
  # determine central points in 
  cen245 = as.data.frame(fread('output/ret_centroid/ret_cen1.csv'))
  cen585 = as.data.frame(
    fread('output/ret_centroid/ret_cen2.csv')
  )
  
  cen245 = cen245[,1:2]
  cen585 = cen585[,1:2]
  
  colnames(cen245) = c('long','lat')
  colnames(cen585) = c('long','lat')
  
  determine_center_in_trajs <- function(borline){
    tmp = borline
    tmpleft = tmp[which(tmp$part == 'left'),]
    tmpright = tmp[which(tmp$part == 'right'),]
    
    tmpleft = tmpleft[order(tmpleft$long,decreasing = F),]
    tmpright = tmpright[order(tmpright$long,decreasing = F),]
    
    midleft = tmpleft[round(nrow(tmpleft)/2),]
    midright = tmpright[round(nrow(tmpright)/2),]
    
    retdf = rbind(midleft,midright)
    
    return(retdf)
  }
  
  bor1_245_max = import_proj_border_multi_max('bor1_245_max')
  bor2_245_max = import_proj_border_multi_max('bor2_245_max')
  bor3_245_max = import_proj_border_multi_max('bor3_245_max')
  bor1_585_max = import_proj_border_multi_max('bor1_585_max')
  bor2_585_max = import_proj_border_multi_max('bor2_585_max')
  bor3_585_max = import_proj_border_multi_max('bor3_585_max')
  
  cen1_245 = determine_center_in_trajs(bor1_245_max)
  cen2_245 = determine_center_in_trajs(bor2_245_max)
  cen3_245 = determine_center_in_trajs(bor3_245_max)
  
  cen1_585 = determine_center_in_trajs(bor1_585_max)
  cen2_585 = determine_center_in_trajs(bor2_585_max)
  cen3_585 = determine_center_in_trajs(bor3_585_max)
  
  path1_245 = rbind(cen245,cen1_245[,1:2])
  path1_245$group = c(1,2,1,2)
  path1_245$type = '(b) SSP245 2020-2051'
  path2_245 = rbind(cen245,cen2_245[,1:2])
  path2_245$group = c(1,2,1,2)
  path2_245$type = '(c) SSP245 2051-2082'
  path3_245 = rbind(cen245,cen3_245[,1:2])
  path3_245$group = c(1,2,1,2)
  path3_245$type = '(d) SSP245 2082-2098'
  
  path1_585 = rbind(cen585,cen1_585[,1:2])
  path1_585$group = c(1,2,1,2)
  path1_585$type = '(e) SSP585 2020-2051'
  path2_585 = rbind(cen585,cen2_585[,1:2])
  path2_585$group = c(1,2,1,2)
  path2_585$type = '(f) SSP585 2051-2082'
  path3_585 = rbind(cen585,cen3_585[,1:2])
  path3_585$group = c(1,2,1,2)
  path3_585$type = '(g) SSP585 2082-2098'
  
  paths = rbind(path1_245,path2_245,path3_245,
                path1_585,path2_585,path3_585)
  
  
  
  cen245 = rbind(cen245,cen245,cen245)
  cen585 = rbind(cen585,cen585,cen585)
  cen245$type = rep(c('(b) SSP245 2020-2051',
                      '(c) SSP245 2051-2082',
                      '(d) SSP245 2082-2098'),each = 2)
  
  cen585$type =  rep(c('(e) SSP585 2020-2051',
                       '(f) SSP585 2051-2082',
                       '(g) SSP585 2082-2098'),each = 2)
  
  cens = rbind(cen245,cen585)
  
  fontsize = 14
  text_theme = theme(
    axis.text = element_text(size = fontsize,color = 'black'),
    axis.title =  element_text(size = fontsize,color = 'black'),
    legend.title =  element_text(size = fontsize,color = 'black'),
    legend.text =  element_text(size = fontsize,color = 'black'),
    legend.position = 'bottom'
  )
  
  cols = pal_lancet()(9)[c(1,4,7)]
  cols = c('Border of the minimum TWS deficit area' = cols[1],
           'Border of the mean TWS deficit area' = cols[2],
           'Border of the maximum TWS deficit area' = cols[3])
  
  tibet = shp_management('tibet')
  ex = extent(tibet)
  cen_tibet = cbind(
    long = (ex[1]+ex[2])/2,
    lat = (ex[3]+ex[4])/2
  )
  p2map = get_googlemap(center = c(cen_tibet[1],
                                   cen_tibet[2]),
                        zoom = 3,
                        maptype = 'terrain',
                        color = 'bw',
                        language = 'en-En',
                        style=c(feature=c("administrative.country",
                                          "administrative.city"),
                                element="labels",
                                visibility="off"))
  twsdf = twsdf[-which(twsdf$tws245 ==0),]
  twsdf$levels= cut(twsdf$tws245,
                    breaks = c(seq(-16,-5,2),2.5,0))
  
  library(RColorBrewer)
  fils = colorRampPalette(brewer.pal(9,'Spectral'))(7+1)
  fils = fils[1:7]
  ex_tibet = extent(tibet)
  
  
  bors$col = 'Border of the mean TWS deficit area'
  bors_max$col = 'Border of the maximum TWS deficit area'
  bors_min$col = 'Border of the minimum TWS deficit area'

  p = ggmap(p2map,alpha = 1)+
    geom_polygon(data = tibet,
                 aes(x = long,y = lat,group =group),
                 fill = 'transparent',
                 color = 'black')+
    geom_tile(data = twsdf,
              aes(x = long,y = lat,fill = levels),
              alpha = 0.7)+
    geom_point(data = cens,
               aes(x = long,y = lat),
               color = cols[1],
               size = 2.5, shape = 16)+
    geom_point(data = cens,
               aes(x = long,y = lat),
               color = cols[1],
               size = 4.5,shape = 1)+
    geom_point(data = cens,
               aes(x = long,y = lat),
               color = cols[1],
               size = 4.5+2,shape = 1)+
   
    geom_path(data = paths,
              aes(x = long,y = lat,group = group),
              size = 1,color = cols[1],
              arrow = arrow(angle = 20,length = unit(0.3,'cm'),
                            type = 'open'))+
    scale_fill_manual(values = fils)+
    geom_path(data = bors_max,aes(x = long,y = lat,color = col))+
    geom_path(data = bors_min,aes(x = long,y = lat,color = col))+
    geom_path(data = bors,aes(x = long,y = lat,color = col))+
    scale_color_manual(values = cols)+
    facet_wrap(~type,nrow = 2)+
    guides(fill = guide_legend(title = 'Annual sum of monthly mean TWS',
                               title.position = 'top',
                               nrow = 3,order = 1),
           color = guide_legend(title = 'Projected northern border of TWS deficit area',
                                title.position = 'top',
                                nrow = 3,order = 2))+
    theme_bw()+
    theme(panel.grid = element_blank(),
          panel.background = element_blank())+
    text_theme+
    theme(strip.text = element_text(size = fontsize,
                                    color = 'black',hjust = 0),
          strip.background = element_blank(),
          axis.text.y = element_text(hjust = 0.5,angle = 90))+
    xlab('Longitude')+
    ylab('Latitude')+
    scale_x_continuous(breaks = seq(70,100,10),
                       labels = paste0(seq(70,100,10),
                                       '°E'),
                       limits = c(ex_tibet[1]-1,ex_tibet[2]+1))+
    scale_y_continuous(breaks = c(25,40),
                       labels = paste0(c(25,40),
                                       '°N'),
                       limits = c(ex_tibet[3]-1,ex_tibet[4]+1))
  
  output = 'main_plot/fig_spatial_pattern_multi_year_mean_bord'
  dir.create(output)
  output = paste0(output,'/fig1.png')
  #png(output,
  #    height = 20,
  #    width= 25,
  #    units = 'cm',res = 800)
  #print(p)
  #dev.off()
  
  
  
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/calc_multi_year_proj_pos_neg_area.R")
  ret = calc_multi_year_proj_pos_neg_area()
  
  pbar = ret[[1]]
  neg_max = ret[[2]]
  neg_min = ret[[3]]
  df_label = data.frame(x = 68,y= 34,label = 'TWS deficit area (10 km )')
  
  neg_max$label = paste0(neg_max$label,'(',
                         round(abs(round(neg_max$value))/308.1*100,1),'%)')
  neg_min$label = paste0(neg_min$label,'(',
                         round(abs(round(neg_min$value))/308.1*100,1),'%)')
  
  p1 = p +
    geom_text(data = neg_max,aes(x = x1-0.7,y = y-2,
                                 label =label),
              size = 3.5,color = cols[3],
              hjust = 0)+
    geom_text(data = neg_min,aes(x = x1-0.7,y = y-2.3,
                                 label =label),
              size = 3.5,color = cols[1],
              hjust = 0)
  
  pbar1 = pbar+theme(legend.position = 'bottom',
                     axis.text.y = element_text(angle = 90,hjust= 0.5),
                     axis.title.x = element_blank())+
    guides(fill = guide_legend(title = '',nrow = 2))
  p12 = plot_grid(pbar1,p1,ncol = 1,
                  rel_heights = c(4,6))
  
  png(output,
      height = 24,
      width= 25,
      units = 'cm',res = 800)
  print(p12)
  dev.off()
  
  
  
  
}
fig1_3d_trajs2<-function(
  
){
  library(raster)
  library(data.table)
  library(RColorBrewer)
  base = '/media/sdb5/Vapor_projcts/Vapor_tibet'
  setwd(base)
  source('/home/share/R_project/xinjiang_vapor/shp_management.R')
  source('/home/share/R_project/xinjiang_vapor/data_management.R')
  
  tibet = shp_management('tibet')
  world = shp_management('world')
  
  ex_tibet = extent(tibet)
  minlat = ex_tibet[3]
  maxlat = ex_tibet[4]
  minlong = ex_tibet[1]
  maxlong = ex_tibet[2]
  
  ex_box = extent(minlong-5,maxlong+5,minlat-5,maxlat+5)
  ex_box = as(ex_box,'SpatialPolygons')
  #crs(ex_box) = crs(tibet)
  
  #shapefile(ex_box,'shp/tibet_bigger_border2/border2.shp',
  #          overwrite = T)
  
  #ex_box = extent(ex_box[1]+10,ex_box[2]-10,ex_box[3]+10,ex_box[4]-10)
  dem = raster('Data/global_dem/elev.0.5-deg.nc')
  
  dem1 = crop(dem,extent(0,180,-90,90))
  dem2 = crop(dem,extent(180,360,-90,90))
  extent(dem2) = extent(-180,0,-90,90)
  dem = merge(dem1,dem2)
  
  #z = raster(nrow = 60,ncol = 360)
  #extent(z) = extent(dem)
  #dem = resample(dem,z)
  
  #dem = raster('Data/global_dem/elevation_10KMmd_SRTM.tif')
  world= shp_management('world')
  dem = crop(dem,extent(-180,180,0,90))
  dem = raster::mask(dem,world)
  
  ex1 = extent(tibet)
  ex1 = extent(ex1[1]-10,ex1[2]+10,
               ex1[3]-10,ex1[4]+10)
  
  
  raster2matrix <-function(dem){
    xyz = as.data.frame(dem,xy = T)
    x = unique(as.numeric(xyz[,1]))
    y = unique(as.numeric(xyz[,2]))
    
    or = order(y,decreasing = F)
    
    mat = matrix(xyz[,3],nrow = length(x))
    #mat = mat[,or]
    
    rownames(mat) = x
    colnames(mat) = y
    return(mat)
  }
  
  library(rayshader)
  demdf2 = raster2matrix(dem)
  
  longlat  = as.data.frame(dem,xy = T)
  long = unique(as.numeric(longlat$x))
  lat = unique(as.numeric(longlat$y))
  
  traj = as.data.frame(fread('whole_time_traj/whole_time_traj_with_height_varep.csv'))
  traj = traj[-which(traj$routeid==9),]
  traj1 = traj[which(traj$routeid == 1),]
  traj_group = group_by(traj,routeid)
  
  traj_jet = as.data.frame(
    fread('whole_time_traj/trajs_intermedia.csv')
  )
  traj_jet1 = traj_jet
  traj_jet = group_by(traj_jet,routeid)
  
  set_neg_value_zero <-function(x){
    x = as.numeric(x)
    subs<-function(x1){
      x1 = as.numeric(x1)
      if(is.na(x1)){
        x1 = x1
      }else{
        if(x1 <=0){
          x1 = 0
        }else{
          x1 = x1
        }
      }
      return(x1)
    }
    x = sapply(x,subs)
    return(x)
    
  }
  demdf2 = apply(demdf2, 2, set_neg_value_zero)
  
  world1 =crop(world,extent(-180,180,0,90))
  worlddf = fortify(world1)
  worlddf$height = -100
  worlddf = group_by(worlddf,group)
  
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/layout_plotly_3d_main.R")
  ret_set = layout_plotly_3d_main()
  legend_set = ret_set[[1]]
  xaxis = ret_set[[2]]
  yaxis = ret_set[[3]]
  zaxis = ret_set[[4]]
  
  library(RColorBrewer)
  traj_col = brewer.pal(9,'Spectral')
  traj_col = colorRampPalette(traj_col)(50)
  traj_col = traj_col[seq(1,9*3,3)]
  
  ear_col = c(hcl.colors(9,'Earth'))
  
  
  
  
  fig = plot_ly() %>%
    add_trace(z= ~t(demdf2),
              x = ~long,
              y = ~lat,
              type = 'surface',
              #fill= filllevels,
              colorbar=list(title='Altitude (m)'),
              
              #n= 10,
              colors = 'Spectral',
              #colorscale = 'Portland',
              #colors = ear_col,
              reversescale =T,
              legendgroup = 'Altitude',
              inherit = F,
              name = 'tile')
  
  fig1leg = fig
  
  i = 1:20
  i = i[-9]
  for(i in i){
    tmptraj = traj_group[which(traj_group$routeid == i),]
    
    if(is.na(tmptraj$region)){
      tmpcol = traj_col[6]
    }else{
      if(unique(tmptraj$region) == 'AS'){
        tmpcol = traj_col[1]
      }else if(unique(tmptraj$region) == 'CS'){
        tmpcol = traj_col[2]
      }else if(unique(tmptraj$region) == 'ATO'){
        tmpcol = traj_col[3]
      }else if(unique(tmptraj$region) == 'NAF'){
        tmpcol = traj_col[4]
      }else if(unique(tmptraj$region) == 'EU'){
        tmpcol = traj_col[5]
      }else if(unique(tmptraj$region) == 'MS'){
        tmpcol = traj_col[7]
      }else if(unique(tmptraj$region) == 'IO'){
        tmpcol = traj_col[8]
      }else if(unique(tmptraj$region) == 'BS'){
        tmpcol = traj_col[9]
      }
    }
    
    
    fig = fig %>%
      add_trace(data = tmptraj,
                y = ~lat, 
                x = ~long, 
                z = ~height, 
                
                mode = "lines", 
                type = "scatter3d", 
                #color = ~factor(region),
                legendgroup = 'Trajectory',
                line = list(width = 5,color= tmpcol),
                inherit = T)
  }
  
  fig = fig %>%
    add_trace(data = worlddf,
              x = worlddf$long,
              y = worlddf$lat,
              z = worlddf$height,
              type = 'scatter3d',
              line = list(color = 'black'),
              mode =  'lines') %>%
    add_trace(data = traj_jet,
              x = traj_jet$long,
              y = traj_jet$lat,
              z = traj_jet$height,
              type = 'scatter3d',
              line = list(color = '#000080',
                          width = 5),
              mode =  'lines')
  
  
  scene1 = list(
    xaxis = xaxis,
    yaxis = yaxis,
    zaxis = zaxis,
    yaxis = list(title = 'Sepal Width (cm)'),
    legend = legend_set,
    aspectmode = 'manual',
    aspectratio = list(x = 1.5,y = 1,z = 0.3),
    camera = list(eye = list(x = 0.01, y = -1.6, z = 0.3)))
  
  fig1 = fig %>% layout(scene = scene1) %>% layout(showlegend = F)
  fig1leg = fig1leg %>% layout(scene = scene1) 
  
  scene1r = list(
    xaxis = xaxis,
    yaxis = yaxis,
    zaxis = zaxis,
    yaxis = list(title = 'Sepal Width (cm)'),
    legend = legend_set,
    aspectmode = 'manual',
    aspectratio = list(x = 1.5,y = 1,z = 0.3),
    camera = list(eye = list(x = -0.01, y = 1.6, z = 0.3)))
  
 
  fig1r = fig %>% layout(scene = scene1r)
  
  dir.create('main_plot/fig1/')
  output1 = 'main_plot/fig1/fig1-1-withleg.svg'
  output1leg = 'main_plot/fig1/fig1-1leg.svg'
  output2 = 'main_plot/fig1/fig1-1-rev.svg'
  orca(fig1,output1,width = 1500,height = 800,scale = 1)
  orca(fig1leg,output1leg,width = 1500,height = 800,scale = 1)
  
  orca(fig1r,output2,width = 1500,height = 800,scale = 1)
  
  
  # ggplot
  input_contr = 'main_plot_data/fig1/long_term_mean_contr_raster.csv'
  contr_rast  = as.data.frame(fread(input_contr))
  naid = which(is.na(contr_rast[,3]))
  contr_rast = contr_rast[-naid,]
  contr_rast$cuts = cut(contr_rast$contr_rate,
                        breaks = c(seq(0,5,0.5),15,20,25,45),
                        right = F)
  nclass = length(unique(contr_rast$cuts))
  
  fil_blue = colorRampPalette(brewer.pal(9,'Blues'))(nclass*10)
  fil_blue = fil_blue[seq(1,nclass*5,5)+30]
  show_col(fil_blue)
  
  demdf = as.data.frame(dem,xy = T)
  colnames(demdf) = c('long','lat','dem')
  naid = which(is.na(demdf$dem))
  demdf = demdf[-naid,]
  demdf$dem[which(demdf$dem<0)] = 0
  library(ggplot2)
  
  traj_group2= traj
  traj_group2$region[which(traj_group2$region == 'ATO')] = 'NATO'
  traj_group2$region[which(is.na(traj_group2$region))] = 'NA'
  traj_col2 = c('AS' = traj_col[1],
                'CS' = traj_col[2],
                'NATO' = traj_col[3],
                'NAF' = traj_col[4],
                'EU' = traj_col[5],
                'NA' = traj_col[6],
                'MS'= traj_col[7],
                "IO" = traj_col[8],
                'BS' = traj_col[9])
  
  traj_mid = traj_group2[which(traj_group2$variable %in%
                                 paste0('long',1:19)),]
  
  tibet = shp_management('tibet')
  ex_tibet = as(extent(tibet),'SpatialPolygons')
  
  pg = ggplot()+
    geom_tile(data = contr_rast,
              aes(x = x, y = y,
                  fill = cuts))+
    geom_hline(yintercept = 15,color = 'black',
               linetype = 'dashed')+
    geom_hline(yintercept = 60,color = 'black',
               linetype = 'dashed')+
    
    geom_polygon(data = world1,
                 aes(x = long,y = lat,group = group),
                 color = 'black',
                 size = 0.5,
                 fill = 'transparent')+
    geom_polygon(data =tibet,
                 aes(x = long,y = lat,group= group),
                 color= 'black',
                 size= 0.5,
                 fill = 'transparent')+
    geom_path(data = traj_jet1,
              aes(x = long,y = lat,group= routeid),
              size = 0.5,
              #linetype = 'dashed',
              color = '#000080',
              #alpha = 0.5,
              arrow = arrow(20,
                            length = unit(0.25,'cm'),
                            type = 'open'))+
    geom_path(data = traj_group2,
              aes(x = long,y = lat,group= routeid,
                  color = factor(region)),
              size = 0.5,
              arrow = arrow(20,
                            length = unit(0.25,'cm'),
                            type = 'open'),
              show.legend = F)+
    geom_polygon(data =ex_tibet,
                 aes(x = long,y = lat,group= group),
                 color= 'black',
                 size= 0.1,
                 fill = 'transparent')+
    scale_color_manual(values = traj_col2,
                       guide = guide_legend(
                         title = 'Water vapor trajectories',
                         title.position = 'top',
                         nrow = 3
                       ))+
    #scale_fill_distiller(palette = 'Spectral')+
    scale_fill_manual(values = fil_blue,
                      guide = guide_legend(
                        title = 'Particle-scale water vapor contribution rates (1/1000000)',
                        title.position = 'top',
                        nrow = 2
                      ))+
    scale_x_continuous(breaks = seq(-180,180,90),
                       labels = c(paste0(seq(180,90,-90),'°W'),
                                  paste0(0,'°'),
                                  paste0(seq(90,180,90),'°E')))+
    scale_y_continuous(breaks = c(0,15,60,90),
                       labels = paste0(c(0,15,60,90),'°N'))+
    #facet_wrap(routeid ~ ., nrow = 4)+
    theme_bw()+
    theme(legend.position = 'none')
  
  pg2 = ggplot()+
    geom_polygon(data =tibet,
                 aes(x = long,y = lat,group= group),
                 color= 'black',
                 size= 0.5,
                 fill = 'white',
                 alpha  = 0.5)+
    geom_path(data = traj_jet1,
              aes(x = long,y = lat,group= routeid),
              size = 0.5,
              #linetype = 'dashed',
              color = '#000080',
              #alpha = 0.5,
              arrow = arrow(20,
                            length = unit(0.35,'cm'),
                            type = 'open'))+
    #facet_wrap(routeid ~ ., nrow = 4)+
    theme_bw()+
    theme(legend.position = 'none')
  
  
  fontsize = 14-2
  text_theme = theme(
    legend.text = element_text(size = fontsize,color = 'black'),
    axis.text = element_text(size = fontsize,color = 'black'),
    axis.title = element_blank(),
    #axis.title = element_text(size = fontsize,color = 'black'),
    legend.title = element_text(size = fontsize,color = 'black'),
    strip.text = element_text(size = fontsize,color = 'black')
  )
  
  pg = pg + text_theme + 
    theme(panel.grid = element_line(color = 'transparent'))
  
  pg2 = pg2 + theme_void()+
    theme(panel.background = element_rect(fill = 'transparent',
                                          color = 'black'),
          plot.background = element_rect(fill = 'transparent',
                                         color = 'black'))
  
  pg12 = ggdraw(pg)+
    draw_plot(pg2,x = 0.84,y = 0.1,
              width = 0.15,height = 0.25)
  
  
  
  png('main_plot/fig1/fig1_map_12.png',
      width = 23.05,
      height = 8,
      units = 'cm',
      res = 800)
  print(pg12)
  dev.off()
  
  
  
  library(ggpubr)
  pg_theme = as_ggplot(get_legend(
    pg + theme(legend.position = 'bottom')
  ))
  
  
  
  png('main_plot/fig1/fig1_map_theme2.png',
      width = 24,
      height = 8,
      units = 'cm',
      res = 800)
  print(pg_theme)
  dev.off()
  
  
  
  
  
  
  
}
fig1_3d_trajs_google<-function(
  
){
  library(raster)
  library(data.table)
  library(RColorBrewer)
  library(ggplot)
  
  base = '/media/sdb5/Vapor_projcts/Vapor_tibet'
  setwd(base)
  source('/home/share/R_project/xinjiang_vapor/shp_management.R')
  source('/home/share/R_project/xinjiang_vapor/data_management.R')
  
  tibet = shp_management('tibet')
  world = shp_management('world')
  
  world1 = crop(world,extent(-180,180,0,90))
  ex_world = extent(world1)
  cenlong = (ex_world[1] + ex_world[2])/2
  cenlat = (ex_world[3]+ex_world[4])/2
 
  landmap = get_googlemap(center = c(cenlong,cenlat),
                        zoom = 1,
                        maptype = 'terrain',
                        color = 'bw',
                        language = 'en-En',
                        style=c(feature=c(
                          "administrative.country",
                          "administrative.city"),
                          element="labels",
                          size = 12,
                          visibility="off"))
  bb = as.numeric(attributes(landmap)$bb)
  landy = seq(88.98413,0,
              length.out = dim(landmap)[1])
  landx = seq(-180,180,length.out = dim(landmap)[2])
  landxx = (array(landx,dim = dim(t(landmap))))
  landyy = t(array(landy,dim = dim(landmap)))
  
  ind1 = seq(1,dim(landxx)[1],1)
  ind2 = seq(1,dim(landxx)[2],1)
  library(plotly)
  pl = plot_ly() %>% 
    add_trace(x = (c(landxx[ind1,ind2])),
              y = (c(landyy[ind1,ind2])),
              z = 0,
              type = 'scatter3d',
              mode = 'markers',
              marker = list(color = 
                              c(landmap[ind1,ind2]),
                            size = 4),
              showlegend = F)
  
  
  gg = ggmap(landmap)
  
  
  ex_tibet = extent(tibet)
  minlat = ex_tibet[3]
  maxlat = ex_tibet[4]
  minlong = ex_tibet[1]
  maxlong = ex_tibet[2]
  
  ex_box = extent(minlong-5,maxlong+5,minlat-5,maxlat+5)
  ex_box = as(ex_box,'SpatialPolygons')
  #crs(ex_box) = crs(tibet)
  
  #shapefile(ex_box,'shp/tibet_bigger_border2/border2.shp',
  #          overwrite = T)
  
  #ex_box = extent(ex_box[1]+10,ex_box[2]-10,ex_box[3]+10,ex_box[4]-10)
  dem = raster('Data/global_dem/elev.0.5-deg.nc')
  
  dem1 = crop(dem,extent(0,180,-90,90))
  dem2 = crop(dem,extent(180,360,-90,90))
  extent(dem2) = extent(-180,0,-90,90)
  dem = merge(dem1,dem2)
  
  #z = raster(nrow = 60,ncol = 360)
  #extent(z) = extent(dem)
  #dem = resample(dem,z)
  
  #dem = raster('Data/global_dem/elevation_10KMmd_SRTM.tif')
  world= shp_management('world')
  dem = crop(dem,extent(-180,180,0,90))
  dem = raster::mask(dem,world)
  
  ex1 = extent(tibet)
  ex1 = extent(ex1[1]-10,ex1[2]+10,
               ex1[3]-10,ex1[4]+10)
  
  
  raster2matrix <-function(dem){
    xyz = as.data.frame(dem,xy = T)
    x = unique(as.numeric(xyz[,1]))
    y = unique(as.numeric(xyz[,2]))
    
    or = order(y,decreasing = F)
    
    mat = matrix(xyz[,3],nrow = length(x))
    #mat = mat[,or]
    
    rownames(mat) = x
    colnames(mat) = y
    return(mat)
  }
  
  library(rayshader)
  demdf2 = raster2matrix(dem)
  
  longlat  = as.data.frame(dem,xy = T)
  long = unique(as.numeric(longlat$x))
  lat = unique(as.numeric(longlat$y))
  
  traj = as.data.frame(fread('whole_time_traj/whole_time_traj_with_height_varep.csv'))
  traj = traj[-which(traj$routeid==9),]
  traj1 = traj[which(traj$routeid == 1),]
  traj_group = group_by(traj,routeid)
  
  traj_jet = as.data.frame(
    fread('whole_time_traj/trajs_intermedia.csv')
  )
  traj_jet = group_by(traj_jet,routeid)
  
  set_neg_value_zero <-function(x){
    x = as.numeric(x)
    subs<-function(x1){
      x1 = as.numeric(x1)
      if(is.na(x1)){
        x1 = x1
      }else{
        if(x1 <=0){
          x1 = 0
        }else{
          x1 = x1
        }
      }
      return(x1)
    }
    x = sapply(x,subs)
    return(x)
    
  }
  demdf2 = apply(demdf2, 2, set_neg_value_zero)
  
  world1 =crop(world,extent(-180,180,0,90))
  worlddf = fortify(world1)
  worlddf$height = -100
  worlddf = group_by(worlddf,group)
  
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/layout_plotly_3d_main.R")
  ret_set = layout_plotly_3d_main()
  legend_set = ret_set[[1]]
  xaxis = ret_set[[2]]
  yaxis = ret_set[[3]]
  zaxis = ret_set[[4]]
  
  fig = plot_ly() %>%
    add_trace(z= ~t(demdf2),
              x = ~long,
              y = ~lat,
              type = 'surface',
              #fill= filllevels,
              colorbar=list(title='Altitude (m)'),
              #n= 10,
              colors = 'Spectral',
              reversescale =T,
              legendgroup = 'Altitude',
              inherit = F,
              name = 'tile') %>%
    add_trace(data = traj_group,
              y = ~lat, 
              x = ~long, 
              z = ~height, 
              mode = "lines", 
              type = "scatter3d", 
              color = ~factor(region),
              
              legendgroup = 'Trajectory',
              line = list(width = 10),
              inherit = T) %>%
    add_trace(data = worlddf,
              x = worlddf$long,
              y = worlddf$lat,
              z = worlddf$height,
              type = 'scatter3d',
              line = list(color = 'black'),
              mode =  'lines') %>%
    add_trace(data = traj_jet,
              x = traj_jet$long,
              y = traj_jet$lat,
              z = traj_jet$height,
              type = 'scatter3d',
              line = list(color = '#000080',
                          width = 15),
              mode =  'lines')
  
  scene1 = list(
    xaxis = xaxis,
    yaxis = yaxis,
    zaxis = zaxis,
    yaxis = list(title = 'Sepal Width (cm)'),
    legend = legend_set,
    aspectmode = 'manual',
    aspectratio = list(x = 1.5,y = 1,z = 0.3),
    camera = list(eye = list(x = 0, y = -1.5, z = 1)))
  
  fig1 = fig %>% layout(scene = scene1)
  
  
  
  dir.create('main_plot/fig1/')
  output1 = 'main_plot/fig1/fig1.svg'
  
  orca(fig1,output1,width = 1500,height = 800,scale = 1)
  
  
}
fig1_3d_trajs_subs <- function(
  
){
  library(raster)
  library(data.table)
  library(RColorBrewer)
  base = '/media/sdb5/Vapor_projcts/Vapor_tibet'
  setwd(base)
  source('/home/share/R_project/xinjiang_vapor/shp_management.R')
  source('/home/share/R_project/xinjiang_vapor/data_management.R')
  
  tibet = shp_management('tibet')
  world = shp_management('world')
  
  ex_tibet = extent(tibet)
  minlat = ex_tibet[3]
  maxlat = ex_tibet[4]
  minlong = ex_tibet[1]
  maxlong = ex_tibet[2]
  
  ex_box = extent(minlong-5,maxlong+5,minlat-5,maxlat+5)
  ex_box = as(ex_box,'SpatialPolygons')
  #crs(ex_box) = crs(tibet)
  
  #shapefile(ex_box,'shp/tibet_bigger_border2/border2.shp',
  #          overwrite = T)
  
  #ex_box = extent(ex_box[1]+10,ex_box[2]-10,ex_box[3]+10,ex_box[4]-10)
  dem = raster('Data/global_dem/elev.0.5-deg.nc')
  
  dem1 = crop(dem,extent(0,180,-90,90))
  dem2 = crop(dem,extent(180,360,-90,90))
  extent(dem2) = extent(-180,0,-90,90)
  dem = merge(dem1,dem2)
  
  #z = raster(nrow = 60,ncol = 360)
  #extent(z) = extent(dem)
  #dem = resample(dem,z)
  
  #dem = raster('Data/global_dem/elevation_10KMmd_SRTM.tif')
  world= shp_management('world')
  dem = crop(dem,extent(-180,180,0,90))
  dem = raster::mask(dem,world)
  
  ex1 = extent(tibet)
  ex1 = extent(ex1[1]-10,ex1[2]+10,
               ex1[3]-10,ex1[4]+10)
  
  raster2matrix_sub <-function(dem,ex1){
    xyz = as.data.frame(dem,xy = T)
    
    x = unique(as.numeric(xyz[,1]))
    y = unique(as.numeric(xyz[,2]))
    id = which(xyz[,1] < ex1[1] |
                 xyz[,1] >ex1[2]|
                 xyz[,2] <ex1[3]|
                 xyz[,2] >ex1[4])
    z = xyz[,3]
    z[id] = NA
    
    or = order(y,decreasing = F)
    
    mat = matrix(z,nrow = length(x))
    #mat = mat[,or]
    
    rownames(mat) = x
    colnames(mat) = y
    return(mat)
  }
  
  library(rayshader)
  demdf2 = raster2matrix_sub(dem,ex1)
  
  longlat  = as.data.frame(dem,xy = T)
  long = unique(as.numeric(longlat$x))
  lat = unique(as.numeric(longlat$y))
  
  traj = as.data.frame(fread('whole_time_traj/whole_time_traj_with_height_varep.csv'))
  traj = traj[-which(traj$routeid==9),]
  fid = which(traj$long >= ex1[1] &
                traj$long <= ex1[2] &
                traj$lat >= ex1[3] &
                traj$lat <= ex1[4])
  traj = traj[fid,]
  traj_group = group_by(traj,routeid)
  
  traj_jet = as.data.frame(
    fread('whole_time_traj/trajs_intermedia.csv')
  )
  traj_jet = traj_jet[fid,]
  traj_jet = group_by(traj_jet,routeid)
  
  
  
  
  set_neg_value_zero <-function(x){
    x = as.numeric(x)
    subs<-function(x1){
      x1 = as.numeric(x1)
      if(is.na(x1)){
        x1 = x1
      }else{
        if(x1 <=0){
          x1 = 0
        }else{
          x1 = x1
        }
      }
      return(x1)
    }
    x = sapply(x,subs)
    return(x)
    
  }
  demdf2 = apply(demdf2, 2, set_neg_value_zero)
  
  world1 =crop(world,ex1)
  worlddf = fortify(world1)
  worlddf$height = -100
  worlddf = group_by(worlddf,group)
  
  ret_set = layout_plotly_3d_subs()
  legend_set = ret_set[[1]]
  xaxis = ret_set[[2]]
  yaxis = ret_set[[3]]
  zaxis = ret_set[[4]]
  
  
  fig = plot_ly(showscale = FALSE) %>%
    add_trace(z= ~t(demdf2),
              x = ~long,
              y = ~lat,
              type = 'surface',
              #fill= filllevels,
              colorbar=list(title='Altitude (m)'),
              #n= 10,
              colors = 'Spectral',
              reversescale =T,
              legendgroup = 'Altitude',
              inherit = F,
              name = 'tile') %>%
    add_trace(data = traj_group,
              y = ~lat, 
              x = ~long, 
              z = ~height, 
              mode = "lines", 
              type = "scatter3d", 
              color = ~factor(region),
              
              legendgroup = 'Trajectory',
              line = list(width = 10),
              inherit = T) %>%
    add_trace(data = worlddf,
              x = worlddf$long,
              y = worlddf$lat,
              z = worlddf$height,
              type = 'scatter3d',
              line = list(color = 'black'),
              mode =  'lines') %>%
    add_trace(data = traj_jet,
              x = traj_jet$long,
              y = traj_jet$lat,
              z = traj_jet$height,
              type = 'scatter3d',
              line = list(color = '#000080',
                          width = 15),
              mode =  'lines')
    
  
  scene2 = list(
    xaxis = xaxis,
    yaxis = yaxis,
    zaxis = zaxis,
    legend = legend_set,
    aspectmode = 'manual',
    aspectratio = list(x = 1.5,y = 1,z = 0.75),
    camera = list(eye = list(x = 1.5, y = 1.55, z = 0.85)))
  
  fig2 = fig %>% layout(scene = scene2) %>% layout(showlegend = F)
  fig2 = fig2 %>% hide_colorbar()
  fig2 = fig2 %>% layout(
    margin = list(l = 5,r=5,t = 5,b = 50),
    padding = list(l = 5,r =5,t =5,h = 50)
  )
  
  output2 = 'main_plot/fig1/fig2sub.svg'
  
  orca(fig2,output2,width = 375*2,height = 300*2,scale = 1)
  
  scene3 = list(
    xaxis = xaxis,
    yaxis = yaxis,
    zaxis = zaxis,
    legend = legend_set,
    aspectmode = 'manual',
    aspectratio = list(x = 1.5,y = 1,z = 0.75),
    camera = list(eye = list(x = -1.5, y = -1.65, z = 0.85)))
  
  fig3 = fig %>% layout(scene = scene3) %>% layout(showlegend = F)
  fig3 = fig3 %>% hide_colorbar()
  
  output3 = 'main_plot/fig1/fig3sub.svg'
  
  orca(fig3,output3,width = 375*2,height = 300*2,scale = 1)
  
  
  
  
  
  
  
  
  
  
  
  
}
fig1_3d_trajs<-function(
  
){
  library(raster)
  library(data.table)
  library(RColorBrewer)
  base = '/media/sdb5/Vapor_projcts/Vapor_tibet'
  setwd(base)
  source('/home/share/R_project/xinjiang_vapor/shp_management.R')
  source('/home/share/R_project/xinjiang_vapor/data_management.R')
  
  tibet = shp_management('tibet')
  world = shp_management('world')
  
  ex_tibet = extent(tibet)
  minlat = ex_tibet[3]
  maxlat = ex_tibet[4]
  minlong = ex_tibet[1]
  maxlong = ex_tibet[2]
  
  ex_box = extent(minlong-5,maxlong+5,minlat-5,maxlat+5)
  ex_box = as(ex_box,'SpatialPolygons')
  #crs(ex_box) = crs(tibet)
  
  #shapefile(ex_box,'shp/tibet_bigger_border2/border2.shp',
  #          overwrite = T)
  
  #ex_box = extent(ex_box[1]+10,ex_box[2]-10,ex_box[3]+10,ex_box[4]-10)
  dem = raster('Data/global_dem/elev.0.5-deg.nc')
  
  dem1 = crop(dem,extent(0,180,-90,90))
  dem2 = crop(dem,extent(180,360,-90,90))
  extent(dem2) = extent(-180,0,-90,90)
  dem = merge(dem1,dem2)
  
  #z = raster(nrow = 60,ncol = 360)
  #extent(z) = extent(dem)
  #dem = resample(dem,z)
  
  #dem = raster('Data/global_dem/elevation_10KMmd_SRTM.tif')
  world= shp_management('world')
  dem = crop(dem,extent(-180,180,0,90))
  dem = raster::mask(dem,world)
  
  ex1 = extent(tibet)
  ex1 = extent(ex1[1]-10,ex1[2]+10,
               ex1[3]-10,ex1[4]+10)
  
  
  raster2matrix <-function(dem){
    xyz = as.data.frame(dem,xy = T)
    x = unique(as.numeric(xyz[,1]))
    y = unique(as.numeric(xyz[,2]))
    
    or = order(y,decreasing = F)
    
    mat = matrix(xyz[,3],nrow = length(x))
    #mat = mat[,or]
    
    rownames(mat) = x
    colnames(mat) = y
    return(mat)
  }
  
  library(rayshader)
  demdf2 = raster2matrix(dem)
  
  longlat  = as.data.frame(dem,xy = T)
  long = unique(as.numeric(longlat$x))
  lat = unique(as.numeric(longlat$y))
  
  traj = as.data.frame(fread('whole_time_traj/whole_time_traj_with_height_varep.csv'))
  traj = traj[-which(traj$routeid==9),]
  traj1 = traj[which(traj$routeid == 1),]
  traj_group = group_by(traj,routeid)
  
  traj_jet = as.data.frame(
    fread('whole_time_traj/trajs_intermedia.csv')
  )
  traj_jet = group_by(traj_jet,routeid)
  
  set_neg_value_zero <-function(x){
    x = as.numeric(x)
    subs<-function(x1){
      x1 = as.numeric(x1)
      if(is.na(x1)){
        x1 = x1
      }else{
        if(x1 <=0){
          x1 = 0
        }else{
          x1 = x1
        }
      }
      return(x1)
    }
    x = sapply(x,subs)
    return(x)
    
  }
  demdf2 = apply(demdf2, 2, set_neg_value_zero)
  
  world1 =crop(world,extent(-180,180,0,90))
  worlddf = fortify(world1)
  worlddf$height = -100
  worlddf = group_by(worlddf,group)
  
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/layout_plotly_3d_main.R")
  ret_set = layout_plotly_3d_main()
  legend_set = ret_set[[1]]
  xaxis = ret_set[[2]]
  yaxis = ret_set[[3]]
  zaxis = ret_set[[4]]
  
  fig = plot_ly() %>%
    add_trace(z= ~t(demdf2),
              x = ~long,
              y = ~lat,
              type = 'surface',
              #fill= filllevels,
              colorbar=list(title='Altitude (m)'),
              #n= 10,
              colors = 'Spectral',
              reversescale =T,
              legendgroup = 'Altitude',
              inherit = F,
              name = 'tile') %>%
    add_trace(data = traj_group,
              y = ~lat, 
              x = ~long, 
              z = ~height, 
              mode = "lines", 
              type = "scatter3d", 
              color = ~factor(region),
              
              legendgroup = 'Trajectory',
              line = list(width = 10),
              inherit = T) %>%
    add_trace(data = worlddf,
              x = worlddf$long,
              y = worlddf$lat,
              z = worlddf$height,
              type = 'scatter3d',
              line = list(color = 'black'),
              mode =  'lines') %>%
    add_trace(data = traj_jet,
              x = traj_jet$long,
              y = traj_jet$lat,
              z = traj_jet$height,
              type = 'scatter3d',
              line = list(color = '#000080',
                          width = 15),
              mode =  'lines')
  
  
  scene1 = list(
    xaxis = xaxis,
    yaxis = yaxis,
    zaxis = zaxis,
    yaxis = list(title = 'Sepal Width (cm)'),
    legend = legend_set,
    aspectmode = 'manual',
    aspectratio = list(x = 1.5,y = 1,z = 0.3),
    camera = list(eye = list(x = 0, y = -1.5, z = 1)))
  
  scene2 = list(
    xaxis = xaxis,
    yaxis = yaxis,
    zaxis = zaxis,
    yaxis = list(title = 'Sepal Width (cm)'),
    legend = legend_set,
    aspectmode = 'manual',
    aspectratio = list(x = 1.5,y = 1,z = 0.3),
    camera = list(eye = list(x = 0, y = -0.001, z = 1.5)))
  
  
  fig1 = fig %>% layout(scene = scene2)
  
  
  
  dir.create('main_plot/fig1/')
  output1 = 'main_plot/fig1/fig1-1.svg'
  
  orca(fig1,output1,width = 1500,height = 800,scale = 1)
 
  
}
fig1_main_plot <- function(
  
){
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/fig1_3d_trajs.R")
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/fig1_3d_trajs_subs.R")
  fig1_3d_trajs()
  fig1_3d_trajs_subs()
}
fig2_plot_figure <- function(
  
){
  # 
  
  
  
  
}
fig3_plot_figure <- function(
  
){
  
  library(ggplot2)
  fontsize = 14
  text_theme= theme(
    axis.text = element_text(size = fontsize,
                             color = 'black'),
    axis.title = element_text(size = fontsize,
                              color = 'black',
                              face = 'bold'),
    legend.text =  element_text(size = fontsize,
                                color = 'black'),
    legend.title =  element_text(size = fontsize,
                                 color = 'black',
                                 face = 'bold')
  )
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/profile_analysis_particle_varep_across_tibet.R")
  profiles = profile_analysis_particle_varep_across_tibet()
  
  
  lastp = which(profiles$variable == 'long38')
  
  
  dem = raster('Data/global_dem/elev.0.5-deg.nc')
  dem1 = crop(dem,extent(0,180,0,90))
  dem2 = crop(dem,extent(180,360,0,90))
  extent(dem2) = extent(-180,0,0,90)
  dem = merge(dem2,dem1)
    
  dem = raster::mask(crop(dem,
                          extent(-180,180,20,50)),
                     world)
  demdf = as.data.frame(dem,xy = T)
  colnames(demdf) = c('long','lat','dem')
  demdf = demdf[-which(is.na(demdf$dem)),]
  uni_long = unique(demdf$long)
  i = 1:length(uni_long)
  calc_mean_dem_by_long <- function(i){
    tmpid = which(demdf$long == uni_long[i])
    tmp = max(demdf[tmpid,3])
    return(tmp)
  }
  longdem = sapply(i,calc_mean_dem_by_long)
  longdemdf = data.frame(
    long = uni_long,
    dem = longdem
  )
  
  
  # line plot 
  library(ggsci)
  traj_col = brewer.pal(9,'Spectral')[6:9]
  traj_col = colorRampPalette(traj_col)(7)
  traj_col = pal_material('blue')(7)
  profiles$region[which(is.na(profiles$region))] = 'NA'
  
  
  p1  = ggplot()+
    geom_area(data = longdemdf,
              aes(x = long,y = dem),fill = 'grey80',
              alpha = 0.7)+
    geom_path(data = profiles,
              aes(x = long,y = height,
                  color = region,
                  group = routeid),
              size = 1.3,
              arrow = arrow(20,
                            length = unit(0.5,'cm'),
                            type = 'open'))+
    geom_vline(xintercept = 68)+
    geom_vline(xintercept = 102)+
    scale_color_manual(values = traj_col)+
    theme_bw()+
    text_theme+
    xlab('Longitude')+
    ylab('Elevation')
  
  p1no = p1 + theme(legend.position =  'none')
  
  # spatial plot with map 
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/calc_pme_trends_across_ato.R")
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/calc_tws_trends_across_eurasia.R")
  #calc_pme_trends_across_ato()
  #calc_tws_trends_across_eurasia()
  
  pmeato = as.data.frame(fread('main_plot_data/fig3/pmeato.csv'))
  twsdf = as.data.frame(fread('main_plot_data/fig3/twsdf.csv'))
  twspos_tibet = as.data.frame(
    fread('main_plot_data/fig3/postwsdf_tibet.csv')
  )
  
  pmeatoneg = pmeato[which(pmeato$pmeato<=0),]
  #twsneg = twsdf
  twsneg = twsdf[which(twsdf$twsmonann<=0),]
  
  pmeatoneg$levels = cut(pmeatoneg$pmeato,
                         breaks = c(seq(-1752,0,200),0))
  twsneg = rbind(twsneg,twspos_tibet)
  twsneg$levels = cut(twsneg$twsmonann,
                      breaks = c(-223,-150,-50,
                                 seq(-40,0,10),
                                 seq(10,60,10)))
  
  nclass_pme = length(unique(pmeatoneg$levels))
  nclass_tws = length(unique(twsneg$levels))
  
  fil_pme = colorRampPalette(brewer.pal(9,'Spectral'))(nclass*3)
  fil_tws = colorRampPalette(brewer.pal(9,'Spectral'))(nclass*3)
  fil_blue = colorRampPalette(brewer.pal(9,'Spectral')[5:9])(16)
  fil_blue = fil_blue[seq(4,14,2)]
  
  fil_pme = fil_pme[seq(1,nclass_pme*2,2)]
  fil_tws = fil_tws[seq(1,nclass_tws*2,2)]
  fil_tws = c(fil_tws[1:7],fil_blue)
  
  
  
  library(ggnewscale)
  tibet = shp_management('tibet')
  world = shp_management('world')
  world = crop(world,extent(-180,180,0,90))
  
  p2 = ggplot()+
    geom_polygon(data = world,
                 aes(x = long,y= lat,group= group),
                 fill = 'transparent',
                 color = 'black')+
    
    geom_tile(data =twsneg,
              aes(x = long,y = lat,fill = levels))+
    scale_fill_manual(values = fil_tws)+
    new_scale_fill()+
    geom_tile(data = pmeatoneg,
              aes(x = long,y = lat,fill = levels))+
    scale_fill_manual(values =fil_pme)+
    geom_polygon(data = tibet,
                 aes(x = long,y= lat,group= group),
                 fill = 'transparent',
                 color = 'black')+
    geom_path(data = profiles,
              aes(x =long,y = lat,group = routeid,
                  color = region),
              size = 0.5,
              alpha = 1,
              arrow = arrow(20,
                            length = unit(0.25,'cm'),
                            type= 'open')
              )+
    scale_color_manual(values = traj_col)+
    theme_bw()+
    text_theme+
    theme(legend.position = 'none')+
    xlab('Longitude')+
    ylab('Latitude')
  
  
  p2
    
  # enlarge p2
  world_crop = crop(world,
                    extent(-20,105,20,50))
  p3 = ggplot()+
    geom_polygon(data = world_crop,
                 aes(x = long,y= lat,group= group),
                 fill = 'transparent',
                 color = 'black')+
    
    geom_tile(data =twsneg,
              aes(x = long,y = lat,fill = levels))+
    scale_fill_manual(values = fil_tws)+
    new_scale_fill()+
    geom_tile(data = pmeatoneg,
              aes(x = long,y = lat,fill = levels))+
    scale_fill_manual(values =fil_pme)+
    geom_polygon(data = tibet,
                 aes(x = long,y= lat,group= group),
                 fill = 'transparent',
                 color = 'black')+
    geom_path(data = profiles,
              aes(x =long,y = lat,group = routeid,
                  color = region),
              size = 1,
              alpha = 1,
              arrow = arrow(20,
                            length = unit(0.5,'cm'),
                            type= 'open')
    )+
    scale_color_manual(values = traj_col)+
    theme_bw()+
    text_theme+
    xlim(-20,105)+
    ylim(20,50)+
    theme(legend.position = 'none')+
    xlab('Longitude')+
    ylab('Latitude')
  
  # line_ plot
  
  
  # 
  
  
  
  
   
  
  
  
  
  
  
  
  
  
}
fig3_plot_figure2 <- function(
  
){
  setwd('/media/sdb5/Vapor_projcts/Vapor_tibet')
  library(data.table)
  library(raster)
  library(ggplot2)
  library(RColorBrewer)
  fontsize = 14
  text_theme= theme(
    axis.text = element_text(size = fontsize,
                             color = 'black'),
    axis.title = element_text(size = fontsize,
                              color = 'black',
                              face = 'bold'),
    legend.text =  element_text(size = fontsize,
                                color = 'black'),
    legend.title =  element_text(size = fontsize,
                                 color = 'black',
                                 face = 'bold')
  )
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/profile_analysis_particle_varep_across_tibet.R")
  profiles = profile_analysis_particle_varep_across_tibet()
  
  
  lastp = which(profiles$variable == 'long38')
  
  world = shp_management('world')
  dem = raster('Data/global_dem/elev.0.5-deg.nc')
  dem1 = crop(dem,extent(0,180,0,90))
  dem2 = crop(dem,extent(180,360,0,90))
  extent(dem2) = extent(-180,0,0,90)
  dem = merge(dem2,dem1)
  
  dem = raster::mask(crop(dem,
                          extent(-180,180,20,50)),
                     world)
  demdf = as.data.frame(dem,xy = T)
  colnames(demdf) = c('long','lat','dem')
  demdf = demdf[-which(is.na(demdf$dem)),]
  uni_long = unique(demdf$long)
  i = 1:length(uni_long)
  calc_mean_dem_by_long <- function(i){
    tmpid = which(demdf$long == uni_long[i])
    tmp = max(demdf[tmpid,3])
    return(tmp)
  }
  longdem = sapply(i,calc_mean_dem_by_long)
  longdemdf = data.frame(
    long = uni_long,
    dem = longdem
  )
  
  
  # line plot 
  library(ggsci)
  traj_col = brewer.pal(9,'Spectral')[6:9]
  traj_col = colorRampPalette(traj_col)(7)
  traj_col = pal_material('blue')(7)
  profiles$region[which(is.na(profiles$region))] = 'NA'
  
  
  p1  = ggplot()+
    geom_area(data = longdemdf,
              aes(x = long,y = dem),fill = 'grey80',
              alpha = 0.7)+
    geom_path(data = profiles,
              aes(x = long,y = height,
                  color = region,
                  group = routeid),
              size = 1.3,
              arrow = arrow(20,
                            length = unit(0.5,'cm'),
                            type = 'open'))+
    geom_vline(xintercept = 68)+
    geom_vline(xintercept = 102)+
    scale_color_manual(values = traj_col)+
    theme_bw()+
    text_theme+
    xlab('Longitude')+
    ylab('Elevation')
  
  p1no = p1 + theme(legend.position =  'none')
  
  # spatial plot with map 
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/calc_pme_trends_across_ato.R")
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/calc_tws_trends_across_eurasia.R")
  #calc_pme_trends_across_ato()
  #calc_tws_trends_across_eurasia()
  
  pmeato = as.data.frame(fread('main_plot_data/fig3/pmeato.csv'))
  twsdf = as.data.frame(fread('main_plot_data/fig3/twsdf.csv'))
  twspos_tibet = as.data.frame(
    fread('main_plot_data/fig3/postwsdf_tibet.csv')
  )
  
  pmeatoneg = pmeato[which(pmeato$pmeato<=0),]
  #twsneg = twsdf
  twsneg = twsdf[which(twsdf$twsmonann<=0),]
  
  pmeatoneg$levels = cut(pmeatoneg$pmeato,
                         breaks = c(seq(-1752,0,200),0))
  twsneg = rbind(twsneg,twspos_tibet)
  twsneg$levels = cut(twsneg$twsmonann,
                      breaks = c(-1620,-1000,-500,-223,-150,-50,
                                 seq(-40,0,10),
                                 seq(10,60,10),100,500,1000))
  
  nclass_pme = length(unique(pmeatoneg$levels))
  nclass_tws = 10
  
    
  fil_pme = colorRampPalette(brewer.pal(9,'Spectral'))(nclass_pme*3)
  fil_tws = colorRampPalette(brewer.pal(9,'Spectral'))(nclass_tws*5)
  
  fil_blue = colorRampPalette(brewer.pal(9,'Spectral')[5:9])(30)
  fil_blue = fil_blue[seq(8,24,2)]
  
  fil_pme = fil_pme[seq(1,nclass_pme*2,2)]
  fil_tws1 = fil_tws[1:4]
  fil_tws = fil_tws[seq(5,nclass_tws*2,2)]
  
  
  #fil_tws = c(fil_tws[1:9],fil_blue)
  
  fil_tws = c('(-1.62e+03,-1e+03]' = fil_tws1[1],
              '(-1e+03,-500]' = fil_tws1[2],
              '(-500,-223]' = fil_tws1[3],
              '(-223,-150]' = fil_tws1[4],
              '(-150,-50]' = fil_tws[2],
              '(-50,-40]' = fil_tws[3],
              '(-40,-30]' = fil_tws[4],
              '(-30,-20]' = fil_tws[5],
              '(-20,-10]' = fil_tws[6],
              '(-10,0]' = fil_tws[7],
              '(0,10]' = fil_blue[1],
              '(10,20]' = fil_blue[2],
              '(20,30]' = fil_blue[3],
              '(30,40]' = fil_blue[4],
              '(40,50]' = fil_blue[5],
              '(50,60]' = fil_blue[6],
              '(60,100]' = fil_blue[7],
              '(100,500]' = fil_blue[8],
              '(500,1e+03]' = fil_blue[9])
  
  
  
  library(ggnewscale)
  tibet = shp_management('tibet')
  world = shp_management('world')
  world = crop(world,extent(-180,180,0,90))
  library(ggmap)
  ex = extent(tibet)
  cen_tibet = cbind(
    long = (ex[1]+ex[2])/2,
    lat = (ex[3]+ex[4])/2
  )
  #api = read.table('google.api')
  #register_google(api)
  #library(httr)
  #set_config(use_proxy('127.0.0.1',44067))
  p2map = get_map(location = c(cen_tibet[1],
                               cen_tibet[2]),
                  zoom = 1,
                  source = 'google',
                  maptype = 'terrain',
                  color = 'bw',
                  language = 'en-En')
  
  p2 = ggplot()+
    geom_polygon(data = world,
                 aes(x = long,y= lat,group= group),
                 fill = 'transparent',
                 color = 'black')+
    
    geom_tile(data =twsneg,
              aes(x = long,y = lat,fill = levels))+
    scale_fill_manual(values = fil_tws)+
    new_scale_fill()+
    geom_tile(data = pmeatoneg,
              aes(x = long,y = lat,fill = levels))+
    scale_fill_manual(values =fil_pme)+
    geom_polygon(data = tibet,
                 aes(x = long,y= lat,group= group),
                 fill = 'transparent',
                 color = 'black')+
    geom_path(data = profiles,
              aes(x =long,y = lat,group = routeid,
                  color = region),
              size = 0.5,
              alpha = 1,
              arrow = arrow(20,
                            length = unit(0.25,'cm'),
                            type= 'open')
    )+
    scale_color_manual(values = traj_col)+
    theme_bw()+
    text_theme+
    theme(legend.position = 'right')+
    xlab('Longitude')+
    ylab('Latitude')
  
  # enlarge p2
  world_crop = crop(world,
                    extent(-20,105,20,50))
  p3 = ggplot()+
    geom_polygon(data = world_crop,
                 aes(x = long,y= lat,group= group),
                 fill = 'transparent',
                 color = 'black')+
    
    geom_tile(data =twsneg,
              aes(x = long,y = lat,fill = levels))+
    scale_fill_manual(values = fil_tws)+
    new_scale_fill()+
    geom_tile(data = pmeatoneg,
              aes(x = long,y = lat,fill = levels))+
    scale_fill_manual(values =fil_pme)+
    geom_polygon(data = tibet,
                 aes(x = long,y= lat,group= group),
                 fill = 'transparent',
                 color = 'black')+
    geom_path(data = profiles,
              aes(x =long,y = lat,group = routeid,
                  color = region),
              size = 1,
              alpha = 1,
              arrow = arrow(20,
                            length = unit(0.5,'cm'),
                            type= 'open')
    )+
    scale_color_manual(values = traj_col)+
    theme_bw()+
    text_theme+
    xlim(-20,105)+
    ylim(20,50)+
    theme(legend.position = 'none')+
    xlab('Longitude')+
    ylab('Latitude')
  
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/import_index_insource_tibet.R")
  # line_ plot
  stand_trend_tws <- function(x){
    
    to_year <- function(x){
      x = c(rep(NA,6),x)
      x = matrix(x,nrow = 12)
      x = apply(x,2,sum,na.rm = T)
      return(x)
    }
    x = (x)/sd(x)
    x = to_year(x)
    x = (x-mean(x))/sd(x)
    return(x)
  }
  stand_trend_pme <- function(x){
    trend_fun<-function(x){
      x = x[1:174]
      x = ts(x,start = c(2003,1),frequency = 12)
      x = decompose(x)$trend
      x = x[-which(is.na(x))]
      x = (x - mean(x))/sd(x)
      return(x)
    }
    to_year <- function(x){
      #x = x[-c(1:6)]
      x = c(rep(NA,6),x)
      x = matrix(x,nrow = 12)
      x = apply(x,2,sum,na.rm = T)
      return(x)
    }
    x = trend_fun(x)
    x = to_year(x)
    x = (x -mean(x))/sd(x)
    return(x)
  }
  
  twsdf = import_index_insource_tibet(var = 'tws_tibet')
  pmeato1 = import_index_insource_tibet(var = 'pme_mean',
                                        region = 'ato')
  
  pmeato3 = pmeato1[,3]
  twsdf = twsdf[,1:2]
  
  twsdf = apply(twsdf,2,stand_trend_tws)
  pmeato = stand_trend_pme(pmeato3)
  
  pos_area = as.data.frame(fread('output/pos_area/pos_area.csv'))
  pos_area = as.numeric(pos_area[,1])
  pos_area = pos_area / 10000
  pos_area = (pos_area - mean(pos_area))/(sd(pos_area))
  
  
  dfline = data.frame(
    Year= 2003:2016,
    
    PME_NATO3 = pmeato,
    TWS_Moun1 = twsdf[,1],
    TWS_Moun2 = twsdf[,2],
    PosTWS_Area_TP = pos_area[1:14]
  )
  dflinem = reshape2::melt(dfline,'Year')
  
  
  library(scales)
  col_lin = pal_lancet()(9)
  
  col_lin = colorRampPalette(col_lin)(20)
  show_col(col_lin)
  
  col_lin = c('TWS_Moun1'= col_lin[8],
              'TWS_Moun2'= col_lin[9],
              'PME_NATO3' = col_lin[1],
              'PosTWS_Area_TP' = col_lin[16])
  
  cor_pos_tws1 = cor(dfline$PosTWS_Area_TP,dfline$TWS_Moun1)
  cor_pos_tws2 = cor(dfline$PosTWS_Area_TP,dfline$TWS_Moun2)
  cor_pos_pme3 = cor(dfline$PosTWS_Area_TP,dfline$PME_NATO3)
  
  dfcor = data.frame(
    x = 2008,
    y = c(2.5,2,1.5),
    label = c(paste0('Cor TWS_Moun1 vs. PosTWS_Area_TP: ',
                     round(cor_pos_tws1,2)),
              paste0('Cor TWS_Moun2 vs. PosTWS_Area_TP: ',
                     round(cor_pos_tws2,2)),
              paste0('Cor PME_NATO3 vs. PosTWS_Area_TP: ',
                     round(cor_pos_pme3,2))),
    variable = unique(dflinem$variable)[c(2,3,1)]
  )
  
  plin = ggplot()+
    geom_vline(xintercept = 2007)+
    geom_line(data = dflinem,
              aes(x = Year,y = value,color = variable),
              size = 1.5)+
    geom_text(data = dfcor,
              aes(x = x,y = y,label = label,
                  color = variable),
              size = 4,hjust = 0)+
  
    scale_color_manual(values= col_lin)+
    theme_bw()+
    text_theme+
    theme(legend.position = 'none')+
    xlab('Year')+
    ylab('Standardized Annual Indices')
  
  # fig d and fig e
  type = paste0('year',2003:2016)
  twsborder = dir.create('shp/twsneg_border')
  twsborder = paste0('shp/twsneg_border/')
  twsborder = paste0('shp/twsneg_border/',type, '.shp')
  twsborder = lapply(twsborder,
                     shapefile)

  #pbor1 = borderdf[which(borderdf$type ==2),]
  
  input_tws0304 = 'main_plot_data/fig3/tws0304.csv'
  input_tws05 = 'main_plot_data/fig3/tws05.csv'
  input_tws0608 = 'main_plot_data/fig3/tws0608.csv'
  input_tws0916 = 'main_plot_data/fig3/tws0916.csv'
  
  tws0304 = as.data.frame(
    fread(input_tws0304)
  )  
  tws05 = as.data.frame(
    fread(input_tws05)
  )  
  tws0608 = as.data.frame(fread(input_tws0608))
  tws0916 = as.data.frame(fread(input_tws0916))
  
  naid = which(is.na(tws0304$tws))
  tws0304 = tws0304[-naid,]
  naid = which(is.na(tws05$tws))
  tws05 = tws05[-naid,]
  naid = which(is.na(tws0608$tws))
  tws0608 = tws0608[-naid,]
  naid = which(is.na(tws0916$tws))
  tws0916 = tws0916[-naid,]
  
  tws0304$levels = cut(tws0304$tws,
                       breaks = c(-1620,-1000,-500,-223,-150,-50,
                                    seq(-40,0,10),
                                    seq(10,60,10),100,500,1000))
  tws05$levels = cut(tws05$tws,
                       breaks = c(-1620,-1000,-500,-223,-150,-50,
                                  seq(-40,0,10),
                                  seq(10,60,10),100,500,1000))
  tws0608$levels = cut(tws0608$tws,
                     breaks = c(-1620,-1000,-500,-223,-150,-50,
                                seq(-40,0,10),
                                seq(10,60,10),100,500,1000))
  tws0916$levels = cut(tws0916$tws,
                     breaks = c(-1620,-1000,-500,-223,-150,-50,
                                seq(-40,0,10),
                                seq(10,60,10),100,500,1000))
  
  tws0304$type1 = '(a)'
  tws05$type1 = '(b)'
  tws0608$type1 = '(c)'
  tws0916$type1 ='(d)'
  
  tws_evo = rbind(tws0304,tws05,tws0608)
  
  
  pside = ggplot()+
    geom_tile(data = tws_evo,
              aes(x = long,y= lat,fill = levels))+
    scale_fill_manual(values = fil_tws)+
    geom_path(data = profiles,
              aes(x =long,y = lat,group = routeid,
                  color = region),
              size = 0.5,
              alpha = 1,
              arrow = arrow(20,
                            length = unit(0.5,'cm'),
                            type= 'open'))+
    scale_color_manual(values = traj_col)+
    facet_wrap(~type1,ncol = 1)+
    theme_bw()
  
  ex_tibet = extent(tibet)
  pside = pside+
    text_theme+
    theme(strip.text = element_blank(),
          legend.position = 'none',
          axis.title.x = element_blank())+
    xlim(ex_tibet[1]-1,ex_tibet[2]+1)+
    ylim(ex_tibet[3]-1,ex_tibet[4]+1)+
    ylab('Latitude')
  
  
  col_border = pal_lancet(alpha = 0.8)(9)
  col_border = colorRampPalette(col_border)(12)
  pside2 = ggplot()+
    geom_tile(data = tws0916,
              aes(x = long,y= lat,fill = levels))+
    
    scale_fill_manual(values = fil_tws)+
    geom_path(data = profiles,
              aes(x =long,y = lat,group = routeid,
                  color = region),
              size = 1,
              alpha = 1,
              arrow = arrow(20,
                            length = unit(0.5,'cm'),
                            type= 'open'))+
    scale_color_manual(values = traj_col)+
    new_scale_color()+
    geom_polygon(data = twsborder[[10]],
                 aes(x = long,y = lat,group = group),
                 size = 1,
                 fill = 'transparent',
                 color = col_border[5])+
    geom_polygon(data = twsborder[[14]],
                 aes(x = long,y = lat,group = group),
                 size = 1,
                 fill = 'transparent',
                 color = 'red')+
    #scale_color_manual(values = moving_line)+
    scale_color_viridis_d()+
    facet_wrap(~type1,nrow = 1)+
    theme_bw()+
    text_theme+
    theme(strip.text = element_blank(),
          legend.position = 'none')+
    xlim(ex_tibet[1]-1,ex_tibet[2]+1)+
    ylim(ex_tibet[3]-1,ex_tibet[4]+1)+
    ylab('Latitude')+
    xlab("Longitude")
  
 
  
  library(cowplot)
  
  p2no = p2 + theme(legend.position = 'none',
                    axis.title.x = element_blank())
  
  p1no = p1no + 
    theme(
      axis.text.x = element_text(angle = 0),
      axis.text.y = element_text(angle = 0)
    )
  p3 = p3 + 
    theme(
      axis.title.x = element_blank()
    )
  
  p123 = plot_grid(
    p1no,p2no,p3,pside2,
    rel_widths = c(1,1,1,1),
    rel_heights = c(1,2,2,2),
    ncol = 1,
    align = 'lr',
    axis = 'v'
  )
  
  p234 = plot_grid(
    plin,pside,
    rel_widths = c(1,1),
    rel_heights = c(1,6),
    ncol =1,
    align = 'lr',
    axis = 'v'
  )
  
  pful = plot_grid(
    p123,p234,
    rel_widths = c(3,1),
    rel_heights = c(1,1),
    nrow = 1,
    align = 'tb',
    axis = 'h'
  )
  
  png('main_plot/fig3/fig3_trail1.png',
      height = 24,
      width = 25,
      units = 'cm',
      res = 800)
  print(pful)
  dev.off()
  
  
  # 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
}
fig3_plot_figure3 <- function(
  
){
  setwd('/media/sdb5/Vapor_projcts/Vapor_tibet')
  source("/home/share/R_project/xinjiang_vapor/shp_management.R")
  source("/home/share/R_project/xinjiang_vapor/data_management.R")
  library(data.table)
  library(raster)
  library(ggplot2)
  library(RColorBrewer)
  library(ggsci)
  library(doParallel)
  library(ggmap)
  
  fontsize = 14
  text_theme= theme(
    axis.text = element_text(size = fontsize,
                             color = 'black'),
    axis.title = element_text(size = fontsize,
                              color = 'black'),
    legend.text =  element_text(size = fontsize,
                                color = 'black'),
    legend.title =  element_text(size = fontsize,
                                 color = 'black')
  )
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/profile_analysis_particle_varep_across_tibet.R")
  profiles = profile_analysis_particle_varep_across_tibet()
  
  
  lastp = which(profiles$variable == 'long38')
  lastp = profiles[lastp,]
  
  world = shp_management('world')
  dem = raster('Data/global_dem/elev.0.5-deg.nc')
  dem1 = crop(dem,extent(0,180,0,90))
  dem2 = crop(dem,extent(180,360,0,90))
  extent(dem2) = extent(-180,0,0,90)
  dem = merge(dem2,dem1)
  
  dem = raster::mask(crop(dem,
                          extent(-180,180,20,50)),
                     world)
  demdf = as.data.frame(dem,xy = T)
  colnames(demdf) = c('long','lat','dem')
  demdf = demdf[-which(is.na(demdf$dem)),]
  uni_long = unique(demdf$long)
  i = 1:length(uni_long)
  calc_mean_dem_by_long <- function(i){
    tmpid = which(demdf$long == uni_long[i])
    tmp = max(demdf[tmpid,3])
    return(tmp)
  }
  longdem = sapply(i,calc_mean_dem_by_long)
  longdemdf = data.frame(
    long = uni_long,
    dem = longdem
  )
  
  
  # line plot 
  library(ggsci)
  traj_col = pal_material('blue')(7)
  traj_col = colorRampPalette(traj_col)(7*3)
  traj_col = traj_col[seq(2,7*3,2)][4:10]
  profiles$region[which(is.na(profiles$region))] = 'NA'
  
  hm_label = data.frame(
    x = c(-100,-35,30,86,120),
    y = -500,
    label = c('NA','NATO','Eurasia',
              'HM','EAS')
  )
  
  label_p1 = data.frame(
    x = -175,y = 7500,label = '(a)'
  )
  
  label_traj = data.frame(
    x = -150,
    xend = -90,
    y = 5500,
    ylab = 4200,
    xlab = -120,
    label = 'Water vapor \n trajectory'
  )
  
  p1  = ggplot()+
    geom_hline(yintercept = 0,color = 'grey80',alpha = 0.7)+
    geom_area(data = longdemdf,
              aes(x = long,y = dem),fill = 'grey80',
              alpha = 0.7)+
    geom_path(data = profiles,
              aes(x = long,y = height,
                  color = region,
                  group = routeid),
              size = 0.75,
              arrow = arrow(20,
                            length = unit(0.5,'cm'),
                            type = 'open'))+
    geom_text(data = hm_label,
              aes(x = x,y = y,label = label),
              size = 4,
              color = 'black')+
    geom_text(data = label_p1,
              aes(x = x,y = y,label = label),
              size = 4,
              color = 'black')+
    geom_vline(xintercept = 68)+
    geom_vline(xintercept = 105)+
    scale_color_manual(values = traj_col)+
    
    geom_segment(data = label_traj,
                 aes(x = x,xend = xend,y = y,
                     yend = y),
                 size = 0.75,
                 color = traj_col[4],
                 arrow = arrow(20,
                               length = unit(0.5,'cm'),
                               type = 'open'))+
    geom_text(data = label_traj,
              aes(x = xlab,y = ylab,label = label),
              size = 4,
              color = 'black')+
    theme_bw()+
    text_theme+
    xlab('Longitude')+
    ylab('Elevation (km)')
  
  p1no = p1 + theme(legend.position =  'none')
  
  # spatial plot with map 
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/calc_pme_trends_across_ato.R")
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/calc_tws_trends_across_eurasia.R")
  #calc_pme_trends_across_ato()
  #calc_tws_trends_across_eurasia()
  
  pmeato = as.data.frame(fread('main_plot_data/fig3/pmeato.csv'))
  twsdf = as.data.frame(fread('main_plot_data/fig3/twsdf.csv'))
  twspos_tibet = as.data.frame(
    fread('main_plot_data/fig3/postwsdf_tibet.csv')
  )
  
  pmeatoneg = pmeato[which(pmeato$pmeato<=0),]
  #twsneg = twsdf
  twsneg = twsdf[which(twsdf$twsmonann<=0),]
  
  pmeatoneg$levels = cut(pmeatoneg$pmeato,
                         breaks = c(seq(-1752,0,200),0))
  twsneg = rbind(twsneg,twspos_tibet)
  twsneg$levels = cut(twsneg$twsmonann,
                      breaks = c(-1620,-1000,-500,-223,-150,-50,
                                 seq(-40,0,10),
                                 seq(10,60,10),100,500,1000))
  
  nclass_pme = length(unique(pmeatoneg$levels))
  nclass_tws = 10
  
  
  fil_pme = colorRampPalette(brewer.pal(9,'Spectral'))(nclass_pme*5)
  fil_tws = colorRampPalette(brewer.pal(9,'Spectral'))(nclass_tws*5)
  
  fil_blue = colorRampPalette(brewer.pal(9,'Spectral')[5:9])(30)
  fil_blue = fil_blue[seq(8,24,2)]
  
  fil_pme = fil_pme[seq(1,nclass_pme*2,2)]
  fil_tws1 = fil_tws[1:4]
  fil_tws = fil_tws[seq(5,nclass_tws*2,2)]
  
  
  #fil_tws = c(fil_tws[1:9],fil_blue)
  
  fil_tws = c('(-1.62e+03,-1e+03]' = fil_tws1[1],
              '(-1e+03,-500]' = fil_tws1[2],
              '(-500,-223]' = fil_tws1[3],
              '(-223,-150]' = fil_tws1[4],
              '(-150,-50]' = fil_tws[2],
              '(-50,-40]' = fil_tws[3],
              '(-40,-30]' = fil_tws[4],
              '(-30,-20]' = fil_tws[5],
              '(-20,-10]' = fil_tws[6],
              '(-10,0]' = fil_tws[7],
              '(0,10]' = fil_blue[1],
              '(10,20]' = fil_blue[2],
              '(20,30]' = fil_blue[3],
              '(30,40]' = fil_blue[4],
              '(40,50]' = fil_blue[5],
              '(50,60]' = fil_blue[6],
              '(60,100]' = fil_blue[7],
              '(100,500]' = fil_blue[8],
              '(500,1e+03]' = fil_blue[9])
  
  
  
  library(ggnewscale)
  tibet = shp_management('tibet')
  world = shp_management('world')
  world = crop(world,extent(-180,180,0,90))
  library(ggmap)
  ex = extent(tibet)
  cen_world = cbind(
    long = (ex[1]+ex[2])/2,
    lat = (ex[3]+ex[4])/2
  )
  #api = read.table('google.api')
  #register_google(api)
  #library(httr)
  #set_config(use_proxy('127.0.0.1',44067))
  p2map = get_googlemap(center = c(cen_world[1],
                                    cen_world[2]),
                         zoom = 3,
                         maptype = 'terrain',
                         color = 'bw',
                         language = 'en-En',
                         style=c(feature=c(
                           "administrative.country",
                                           "administrative.city"),
                                 element="labels",
                                 size = 12,
                                 visibility="off"))
  
  # input of currents ocean
  cur_df = as.data.frame(
    fread('/home/share/R_project/xinjiang_vapor/analysis_output/fig4/current_df.csv')
  )
  
  idless50 = which(cur_df$lat <= 50 &
                     cur_df$lat >= 10)
  cur_df = cur_df[idless50,]
  
  idbig1 = which(cur_df$u>0 &
                   cur_df$v >0)
  idbig2 = which(cur_df$u<0 &
                   cur_df$v >0)
  idbig3 = which(cur_df$u>0 &
                   cur_df$v <0)
  
  
  cur_df1 = cur_df[idbig1,]
  cur_df2 = cur_df[idbig2,]
  cur_df3 = cur_df[idbig3,]
  
  cur_df3 = cur_df3[
    which(cur_df3$long > -20 &
            cur_df3$lat <= 40 &
            cur_df3$lat >=30),
  ]
  
  cid1 = seq(1,nrow(cur_df1),40)
  cid2 = seq(1,nrow(cur_df2),300)
  cid3 = seq(1,nrow(cur_df3),30)
  
  cur_df1 = cur_df1[cid1,]
  cur_df2 = cur_df2[cid2,]
  cur_df3 = cur_df3[cid3,]
  
  
  cols_cur = c('#2988AE','#30376E','#4169E1')
  #col_point = '#5192f0'
  #col_point = '#4876FF'
  #col_point = pal_lancet()(9)[1]
 
  pois_oce1 = data.frame(
    x = c(-80,-30,-60,-45,0,0,-18),
    y = c(20,18,40,30,50,27,34)
  )
  pois_oce_pat1 = data.frame(
    x = c(-80,-60,0),
    y = c(20,40,50)
  )
  pois_oce_pat11 = data.frame(
    x = c(-80,-60),
    y = c(20,40)
  )
  pois_oce_pat2 = data.frame(
    x = c(-80,-45,0),
    y = c(20,30,50)
  )
  pois_oce_pat21 = data.frame(
    x = c(-80,-45),
    y = c(20,30)
  )
  pois_oce_pat3 = data.frame(
    x = c(-45,-18,0),
    y = c(30,34,27)
  )
  pois_oce_pat4 = data.frame(
    x = c(-30,-45,-18,0),
    y = c(18,30,34,27)
  )
  pois_oce_pat41 = data.frame(
    x = c(-30,-45),
    y = c(18,30)
  )
  
  
  colb = colorRampPalette(brewer.pal(9,'Blues'))(20)
  
  col_point = '#6495ED'
  #col_point = colb[20]
  #col_point = '#F8A58B'
  #col_point = '#3583AC'
  label_p2 = data.frame(
    x = -175,y = 80,label= '(c)'
  )
  
  intermedia_path = 'whole_time_traj/trajs_intermedia.csv'
  interpath = as.data.frame(fread(intermedia_path))
  
  pa1 = paste0('long',1:19)
  pa2 = paste0('long',20:38)
  
  interpath1 = interpath[which(interpath[,3] %in% pa1),]
  interpath2 = interpath[which(interpath[,3] %in% pa2),]
  
  sanjiangyuan = shp_management('sanjiangyuan')
  
  p2 = ggplot()+
    geom_polygon(data = world,
                 aes(x = long,y= lat,group= group),
                 fill = 'transparent',
                 color = 'black',
                 size = 0.5)+
    geom_tile(data =twsneg,
              aes(x = long,y = lat,fill = levels),
              alpha = 1)+
    scale_fill_manual(values = fil_tws,
                      labels = c('(-1000,-500]',
                                 '(-500,-223]',
                                 '(-223,-150]',
                                 '(-150,-50]',
                                 '(-50,-40]',
                                 '(-40,-30]',
                                 '(-30,-20]',
                                 '(-20,-10]',
                                 '(-10,0]',
                                 '(0,10]',
                                 '(10,20]',
                                 '(20,30]',
                                 '(30,40]',
                                 '(40,50]',
                                 '(50,60]'),
                      guide = guide_legend(order = 2,title ='Annual sum of monthly mean TWS (2003-2016)',
                                           title.position = 'top',nrow = 4))+
    geom_vline(xintercept = 68,
               size = 0.5)+
    geom_vline(xintercept = 105,
               size = 0.5)+
    new_scale_fill()+
    geom_tile(data = pmeatoneg,
              aes(x = long,y = lat,fill = levels),
              alpha = 0.8)+
    scale_fill_manual(values =fil_pme,
                      labels = c('(-1750,-1550]',
                                 '(-1550,-1350]',
                                 '(-1350,-1150]',
                                 '(-1150,-952]',
                                 '(-952,-752]',
                                 '(-752,-552]',
                                 '(-552,-352]',
                                 '(-352,-152]',
                                 '(-152,0]'),
                      
                      guide = guide_legend(order = 1,title = 'Annual sum of monthly mean PME in NATO(2003-2016)',
                                           title.position = 'top',
                                           nrow = 4))+
    geom_polygon(data = tibet,
                 aes(x = long,y= lat,group= group),
                 fill = 'transparent',
                 color = 'black')+
    
    #geom_path(data= pois_oce_pat1,
    #          aes(x = x,y = y),
    #          size = 1,
    #          color = col_point,
    #          linetype = 'solid',
    #          arrow=arrow(angle=20,length=unit(0.2,"inches"),
    #                      type="open"),
    #          alpha = 1)+
    #geom_path(data= pois_oce_pat2,
    #          aes(x = x,y = y),
    #          size = 1,
    #          color = col_point,
    #          linetype = 'solid',
    #          arrow=arrow(angle=20,length=unit(0.2,"inches"),
    #                      type="open"),
    #          alpha = 1)+
    #geom_path(data= pois_oce_pat3,
    #          aes(x = x,y = y),
    #          size = 1,
    #          color = col_point,
    #          linetype = 'solid',
    #          arrow=arrow(angle=20,length=unit(0.2,"inches"),
    #                      type="open"),
    #          alpha = 1)+
    #geom_path(data= pois_oce_pat4,
    #          aes(x = x,y = y),
    #          size = 1,
    #          color = col_point,
    #          linetype = 'solid',
    #          arrow=arrow(angle=20,length=unit(0.2,"inches"),
    #                      type="open"),
    #          alpha = 1)+
    #geom_path(data= pois_oce_pat11,
    #          aes(x = x,y = y),
    #          size = 1,
    #          color = col_point,
    #          linetype = 'solid',
    #          arrow=arrow(angle=20,length=unit(0.2,"inches"),
    #                      type="open"),
    #          alpha = 1)+
    #geom_path(data= pois_oce_pat21,
    #          aes(x = x,y = y),
    #          size = 1,
    #          color = col_point,
    #          linetype = 'solid',
    #          arrow=arrow(angle=20,length=unit(0.2,"inches"),
    #                      type="open"),
    #          alpha = 1)+
    #geom_path(data= pois_oce_pat41,
    #          aes(x = x,y = y),
    #          size = 1,
    #          color = col_point,
    #          linetype = 'solid',
    #          arrow=arrow(angle=20,length=unit(0.2,"inches"),
    #                      type="open"),
    #          alpha = 1)+
    geom_segment(data = cur_df1,
                 aes(x = long,y = lat,
                     xend = long+u,
                     yend = lat+v),
                 arrow = arrow(angle = 20,unit(0.15,'cm'),
                               type = 'open'),
                 color = cols_cur[1])+
    geom_segment(data = cur_df2,
                 aes(x = long,y = lat,
                     xend = long+u,
                     yend = lat+v),
                 arrow = arrow(angle = 20,unit(0.2,'cm'),
                               type = 'open'),
                 color = cols_cur[2])+ 
    geom_segment(data = cur_df3,
                 aes(x = long,y = lat,
                     xend = long+u,
                     yend = lat+v),
                 arrow = arrow(angle = 20,unit(0.2,'cm'),
                               type = 'open'),
                 color = cols_cur[3])+ 
    ##geom_point(
    #  data  = pois_oce1,
    #  aes(x = x, y= y),
    #  size = 2.5,
    #  color = col_point,shape = 16
    #)+
    #geom_point(
    #  data  = pois_oce1,
    ##  aes(x = x, y= y),
    #  size = 3.5,
    #  color = col_point,shape = 1
    #)+
    #geom_point(
    #  data  = pois_oce1,
    #  aes(x = x, y= y),
    #  size = 6,
    #  color = col_point,shape = 1
    #)+
    geom_path(data = profiles,
              aes(x =long,y = lat,group = routeid,
                  color = region),
              size = 0.75,
              alpha = 1,
              arrow = arrow(20,
                            length = unit(0.2,'inches'),
                            type= 'open'),
              show.legend = F
    )+
    scale_color_manual(values = traj_col)+
    geom_text(data = label_p2,
              aes(x = x,y = y,label = label),
              size = 4,
              color = 'black')+
    
    theme_bw()+
    text_theme+
    theme(legend.position = 'right')+
    #ylim(0,60)+
    xlab('Longitude')+
    ylab('Latitude')
  
  # enlarge p2
  world_crop = crop(world,
                    extent(-20,105,20,50))
  tibet_river = shp_management('tibet_river')
  country_label <- as.data.frame(
    fread('main_plot_data/fig3/country_label.csv')
  )
  country_label = country_label[-which(country_label$name == 'Hong Kong'|
                                         country_label$name == 'Macau'),]
  country_label$latitude[which(country_label$name=='India')]=
    country_label$latitude[which(country_label$name=='India')]+2
  library(ggrepel)
  
  neg_shps = list.files('shp/cluster_tws_neg_shp_deter',
                        pattern = '*.shp$',full.names =T)
  neg_shps = lapply(neg_shps[1:3],shapefile)
  neg_shps = do.call(bind,neg_shps)
  
  
  label_p3 = data.frame(
    x = 60,y = 44,label = '(d)'
  )
  
  current_set = data.frame(
    x = 85,
    xend = 95,
    y = 42.5
  )
  current_label = data.frame(
    x = 105,
    y = 42.5,
    label = 'Intermedia current'
  )
  p3 = ggmap(p2map)+
    geom_path(data = tibet_river,
                 aes(x = long,y = lat,group =group),
                 color = 'blue',alpha = 0.4)+
    geom_tile(data = twsneg,
              aes(x = long,
                  y = lat,
                  fill = levels),
              alpha = 0.5)+
    scale_fill_manual(values = fil_tws)+
    new_scale_fill()+
    geom_tile(data = pmeatoneg,
              aes(x = long,y = lat,fill = levels))+
    scale_fill_manual(values =fil_pme)+
    geom_polygon(data = tibet,
                 aes(x = long,y= lat,group= group),
                 fill = 'transparent',
                 color = 'black')+
    geom_polygon(data = neg_shps,
                 aes(x = long,y= lat,group= group),
                 fill = 'transparent',
                 color = 'black')+
    geom_polygon(data = sanjiangyuan,
                 aes(x = long,y= lat,group= group),
                 fill = 'transparent',
                 color = 'black')+
    
    geom_path(data = interpath1,
              aes(x =long,y = lat,group = routeid),
              color = '#000080',
              size = 1.5,
              alpha = 0.5,
              linetype = 'dashed',
              arrow = arrow(20,
                            length = unit(0.75,'cm'),
                            type= 'open')
    )+
    geom_path(data = interpath2,
              aes(x =long,y = lat,group = routeid),
              color = '#000080',
              size = 1.5,
              alpha = 0.5,
              linetype = 'dashed',
              arrow = arrow(20,
                            length = unit(0.75,'cm'),
                            type= 'open')
    )+
    geom_path(data = profiles,
              aes(x =long,y = lat,group = routeid,
                  color = region),
              size = 1,
              alpha = 1,
              arrow = arrow(20,
                            length = unit(0.5,'cm'),
                            type= 'open')
    )+
    geom_segment(data = current_set,
                 aes(x = x,y = y,xend = xend,
                     yend = y),
                 color = '#000080',
                 size = 1.5,
                 alpha = 0.5,
                 linetype = 'dashed',
                 arrow = arrow(20,
                               length = unit(0.75,'cm'),
                               type= 'open'))+
    geom_text_repel(data = current_label,
                    aes(x = x,y = y,label = label),
                    size = 4,
                    color = 'black',
                    #position = position_dodge2(0.5),
                    bg.color = 'white',
                    force = F,
                    bg.r = 0.15)+
    scale_color_manual(values = traj_col)+
    geom_text_repel(data = country_label,
                    aes(x = longitude,
                        y = latitude,
                        label = name),
                    size = 4,
                    color = 'black',
                    #position = position_dodge2(0.5),
                    bg.color = 'white',
                    force = F,
                    bg.r = 0.15)+
    geom_text_repel(data = label_p3,
                    aes(x = x,
                        y = y,
                        label = label),
                    size = 4,
                    color = 'black',
                    #position = position_dodge2(0.5),
                    bg.color = 'white',
                    force = F,
                    bg.r = 0.15)+
    theme_bw()+
    text_theme+
    #xlim(ex[1] -10,ex[2] + 10)+
    #ylim(ex[3] -5,ex[4] + 5)+
    theme(legend.position = 'none')+
    xlab('Longitude')+
    ylab('Latitude')
  
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/import_index_insource_tibet.R")
  # line_ plot
  stand_trend_tws <- function(x){
    
    to_year <- function(x){
      x = c(rep(NA,6),x)
      x = matrix(x,nrow = 12)
      x = apply(x,2,sum,na.rm = T)
      return(x)
    }
    x = (x)/sd(x)
    x = to_year(x)
    x = (x-mean(x))/sd(x)
    return(x)
  }
  stand_trend_snow <- function(x){
    
    to_year <- function(x){
      x = c(rep(NA,6),x)
      x = matrix(x,nrow = 12)
      x = apply(x,2,sum,na.rm = T)
      return(x)
    }
    x = to_year(x)
    x = (x-mean(x))/sd(x)
    return(x)
  }
  stand_trend_pme <- function(x){
    trend_fun<-function(x){
      x = x[1:174]
      x = ts(x,start = c(2003,1),frequency = 12)
      x = decompose(x)$trend
      x = x[-which(is.na(x))]
      x = (x - mean(x))/sd(x)
      return(x)
    }
    to_year <- function(x){
      #x = x[-c(1:6)]
      x = c(rep(NA,6),x)
      x = matrix(x,nrow = 12)
      x = apply(x,2,sum,na.rm = T)
      return(x)
    }
    x = trend_fun(x)
    x = to_year(x)
    x = (x -mean(x))/sd(x)
    return(x)
  }
  
  twsdf = import_index_insource_tibet(var = 'tws_tibet')
  pmeato1 = import_index_insource_tibet(var = 'pme_mean',
                                        region = 'ato')
  
  pmeato3 = pmeato1[,3]
  twsdf = twsdf[,1:2]
  
  twsdf = apply(twsdf,2,stand_trend_tws)
  pmeato = stand_trend_pme(pmeato3)
  
  pos_area = as.data.frame(fread('output/pos_area/pos_area.csv'))
  pos_area = as.numeric(pos_area[,1])
  pos_area1 = pos_area / 10000
  
  pos_area = (pos_area1 - mean(pos_area1))/(sd(pos_area1))
  
  # import snow cover
  snowcover = import_index_insource_tibet('snowcover')
  snowcover = snowcover[,1:2]
  snowcover = apply(snowcover,2,stand_trend_snow)
  
  
  dfbar = data.frame(
    Year = 2003:2016,
    SC_Moun1 = snowcover[,1],
    SC_Moun2 = snowcover[,2]
  )
  
  dfline = data.frame(
    Year= 2003:2016,
    
    PME_NATO3 = pmeato,
    TWS_Moun1 = twsdf[,1],
    TWS_Moun2 = twsdf[,2],
    PosTWS_Area_TP = pos_area[1:14]
  )
  dflinem = reshape2::melt(dfline,'Year')
  dfbarm = reshape2::melt(dfbar,'Year')
  
  library(scales)
  col_lin = pal_lancet()(9)
  
  col_lin = colorRampPalette(col_lin)(20)
  show_col(col_lin)
  
  col_lin = c('TWS_Moun1'= col_lin[8],
              'TWS_Moun2'= col_lin[9],
              'PME_NATO3' = col_lin[1],
              'PosTWS_Area_TP' = col_lin[16],
              'SC_Moun1' = col_lin[6],
              'SC_Moun2' = col_lin[7])
  size_lin = c('TWS_Moun1'= 1.5,
              'TWS_Moun2'= 1.5,
              'PME_NATO3' = 1.5,
              'PosTWS_Area_TP' = 1.5,
              'SC_Moun1' = 1.5,
              'SC_Moun2' = 1.5)
  linetype_lin = c('TWS_Moun1'= 1,
                   'TWS_Moun2'= 1,
                   'PME_NATO3' = 1,
                   'PosTWS_Area_TP' = 1,
                   'SC_Moun1' = 1,
                   'SC_Moun2' = 1)
  
  
  
  p_pos_tws1 = cor.test(dfline$PosTWS_Area_TP,dfline$TWS_Moun1)$p.value
  p_pos_tws2 = cor.test(dfline$PosTWS_Area_TP,dfline$TWS_Moun2)$p.value
  p_pos_pme3 = cor.test(dfline$PosTWS_Area_TP,dfline$PME_NATO3)$p.value
  
  cor_pos_tws1 = cor.test(dfline$PosTWS_Area_TP,dfline$TWS_Moun1)$estimate
  cor_pos_tws2 = cor.test(dfline$PosTWS_Area_TP,dfline$TWS_Moun2)$estimate
  cor_pos_pme3 = cor.test(dfline$PosTWS_Area_TP,dfline$PME_NATO3)$estimate
  
  
  dfcor = data.frame(
    x = 2009,
    y = c(2.5,2,1.5),
    label = c(paste0('Cor TWS_Moun1: ',
                     round(cor_pos_tws1,2),' (p=',round(p_pos_tws1,2),')'),
              paste0('Cor TWS_Moun2: ',
                     round(cor_pos_tws2,2),' (p=',round(p_pos_tws2,2),')'),
              paste0('Cor PME_NATO3: ',
                     round(cor_pos_pme3,2),' (p=',round(p_pos_pme3,2),')')),
    variable = unique(dflinem$variable)[c(2,3,1)]
  )
  
  linseg1 = data.frame(
    x = c(2005,2016),
    xend = c(2016,2005),
    y = 2.7
  )
  
  linseg2 = data.frame(
    x = c(2005,2016),
    xend = c(2016,2005),
    y = 2
  )
  
  decpos1 = (dfline$PosTWS_Area_TP[14]-dfline$PosTWS_Area_TP[3])/dfline$PosTWS_Area_TP[3]
  dectws1 = (dfline$TWS_Moun1[14] - dfline$TWS_Moun1[3])/dfline$TWS_Moun1[3]
  dectws2 = (dfline$TWS_Moun2[14] - dfline$TWS_Moun2[3])/dfline$TWS_Moun2[3]
  decpme3 = (dfline$PME_NATO3[14] - dfline$PME_NATO3[3])/dfline$PME_NATO3[3]
  decsno1 = (dfbar$SC_Moun1[14]- dfbar$SC_Moun1[3])/dfbar$SC_Moun1[3]
  decsno2 = (dfbar$SC_Moun2[14]- dfbar$SC_Moun2[3])/dfbar$SC_Moun2[3]
  
  dech = data.frame(
    x = c(2010),
    y = 3+0,
    label = 'Decling period'
  )
  dech2 = data.frame(
    x = -135,
    y = 37,
    label = 'Decling \n period'
  )
  
  decdf1 = data.frame(
    x = 2007,
    y = c(2.4,1.9,1.3)-4,
    label1 = c(decpos1,decsno1,decsno2),
    label2 = c('PosTWS_Area_TP: ','SC_Moun1: ','SC_Moun2: ')
  )
  decdf2 = data.frame(
    x = 135,
    y = c(35,20,5),
    label1 = c(decpme3,dectws1,dectws2),
    label2 = c('PME_NATO3\n','TWS_Moun1\n ','TWS_Moun2\n')
  )
  
  decdf1$label1 = paste0(round(decdf1$label1 *100,2),'%')
  decdf2$label1 = paste0(round(decdf2$label1 *100,2),'%')
  
  decdf1$label = paste0(decdf1$label2,decdf1$label1)
  decdf2$label = paste0(decdf2$label2,decdf2$label1)
  
  decdf1$variable = c('PosTWS_Area_TP','SC_Moun1','SC_Moun2')
  decdf2$variable = c('PME_NATO3','TWS_Moun1','TWS_Moun2')
  
  
  label_plin = data.frame(
    x = 2003,y = 2.5,label = '(b)'
  )
  
  dflinebm = rbind(dfbarm,
                  dflinem[which(dflinem$variable == 'PosTWS_Area_TP'),])
  dflineadd = dflinem[-which(dflinem$variable == 'PosTWS_Area_TP'),]
  plin1 = ggplot()+
    geom_vline(xintercept = 2005)+
    geom_vline(xintercept = 2016)+
    geom_line(data = dflinebm,aes(x = Year,
                               y = value ,
                               color = variable,
                               size = variable,
                               linetype = variable))+
    geom_text(data = dech,
              aes(x = x,y = y,label = label),
              color = 'black',
              size = 4,hjust = 0.5)+
    geom_text(data = decdf1,
              aes(x = x,y = y,label = label,
                  color = variable),
              size = 4,hjust = 0,
              show.legend = F)+
    geom_segment(data = linseg1,
                 aes(x = x,xend = xend,y = y,yend = y),
                 color = 'black',
                 arrow = arrow(20,
                               length  =unit(0.3,'cm'),
                               type = 'closed'))+
    geom_text(data= label_plin,
              aes(x = x,y = y,label = label),
              size = 4,
              color = 'black')+
    scale_color_manual(values= col_lin,
                       guide = guide_legend(
                         nrow = 1,title = ''
                       ))+
    scale_size_manual(values = size_lin,
                      guide = guide_legend(
                        nrow = 1,title = ''
                      ))+
    scale_linetype_manual(values = linetype_lin,
                          guide = guide_legend(
                            nrow = 1,title = ''
                          ))+
    theme_bw()+
    text_theme+
    theme(legend.position = 'none')+
    xlab('Year')+
    ylab('Indices')
  
  plin2 = ggplot()+
    geom_vline(xintercept = 2005)+
    geom_vline(xintercept = 2016)+
    geom_line(data = dflineadd,aes(x = Year,
                                  y = value ,
                                  color = variable,
                                  size = variable,
                                  linetype = variable))+
    
    geom_segment(data = linseg2,
                 aes(x = x,xend = xend,y = y,yend = y),
                 color = 'black',
                 arrow = arrow(20,
                               length  =unit(0.3,'cm'),
                               type = 'closed'))+
    scale_color_manual(values= col_lin,
                       guide = guide_legend(
                         nrow = 1,title = ''
                       ))+
    scale_size_manual(values = size_lin,
                      guide = guide_legend(
                        nrow = 1,title = ''
                      ))+
    scale_linetype_manual(values = linetype_lin,
                          guide = guide_legend(
                            nrow = 1,title = ''
                          ))+
    scale_x_continuous(breaks = c(2005,2016))+
    theme_bw()+
    text_theme+
    theme(legend.position = 'none')+
    xlab('Year')+
    ylab('Indices')
  # fig d and fig e
  type = paste0('year',2003:2016)
  twsborder = dir.create('shp/twsneg_border')
  twsborder = paste0('shp/twsneg_border/')
  twsborder = paste0('shp/twsneg_border/',type, '.shp')
  twsborder = lapply(twsborder,
                     shapefile)
  
  #pbor1 = borderdf[which(borderdf$type ==2),]
  
  input_tws0304 = 'main_plot_data/fig3/tws0304.csv'
  input_tws05 = 'main_plot_data/fig3/tws05.csv'
  input_tws0608 = 'main_plot_data/fig3/tws0608.csv'
  input_tws0916 = 'main_plot_data/fig3/tws0916.csv'
  
  tws0304 = as.data.frame(
    fread(input_tws0304)
  )  
  tws05 = as.data.frame(
    fread(input_tws05)
  )  
  tws0608 = as.data.frame(fread(input_tws0608))
  tws0916 = as.data.frame(fread(input_tws0916))
  
  naid = which(is.na(tws0304$tws))
  tws0304 = tws0304[-naid,]
  naid = which(is.na(tws05$tws))
  tws05 = tws05[-naid,]
  naid = which(is.na(tws0608$tws))
  tws0608 = tws0608[-naid,]
  naid = which(is.na(tws0916$tws))
  tws0916 = tws0916[-naid,]
  
  tws0304$levels = cut(tws0304$tws,
                       breaks = c(-1620,-1000,-500,-223,-150,-50,
                                  seq(-40,0,10),
                                  seq(10,60,10),100,500,1000))
  tws05$levels = cut(tws05$tws,
                     breaks = c(-1620,-1000,-500,-223,-150,-50,
                                seq(-40,0,10),
                                seq(10,60,10),100,500,1000))
  tws0608$levels = cut(tws0608$tws,
                       breaks = c(-1620,-1000,-500,-223,-150,-50,
                                  seq(-40,0,10),
                                  seq(10,60,10),100,500,1000))
  tws0916$levels = cut(tws0916$tws,
                       breaks = c(-1620,-1000,-500,-223,-150,-50,
                                  seq(-40,0,10),
                                  seq(10,60,10),100,500,1000))
  
  tws0304$type1 = '(a)'
  tws05$type1 = '(b)'
  tws0608$type1 = '(c)'
  tws0916$type1 ='(d)'
  
  tws_evo = rbind(tws0304,tws05,tws0608,tws0916)
  ex = extent(tibet)
  cen_tibet = cbind(
    long = (ex[1]+ex[2])/2,
    lat = (ex[3]+ex[4])/2
  )
  #api = read.table('google.api')
  #register_google(api)
  #library(httr)
  #set_config(use_proxy('127.0.0.1',44067))
  p2map1 = get_googlemap(center = c(cen_tibet[1],
                                    cen_tibet[2]),
                         zoom = 4,
                         maptype = 'terrain',
                         color = 'bw',
                         language = 'en-En',
                         style=c(feature=c("administrative.country",
                                           "administrative.city"),
                                 element="labels",
                                 visibility="off"))
  
  col_border = pal_lancet(alpha = 0.8)(9)
  col_border = colorRampPalette(col_border)(12)
  
  
  
  twsborder2009 = fortify(twsborder[[7]])
  twsborder2012 = fortify(twsborder[[10]])
  twsborder2014 = fortify(twsborder[[14]])
  
  twsborder2009$type1 = '(d)'
  twsborder2012$type1 = '(d)'
  twsborder2014$type1 = '(d)'
  
  
 
  
  loc_min_neg_points <- function(type){
    types = c('2003-2004',
              '2005',
              '2006-2008',
              '2009-2016')
    tmp = types[type]
    
    if(tmp == types[1]){
      tmp1 = tws0304[which(tws0304$long < 80),]
      tmp2 = tws0304[which(tws0304$long > 80),]
      
      minloc1 = tmp1[which(tmp1$tws == min(tmp1$tws,
                                           na.rm = T)),]
      minloc2 = tmp2[which(tmp2$tws == min(tmp2$tws,
                                           na.rm = T)),]
      minloc = rbind(minloc1,minloc2)
    }else if(tmp == types[2]){
      minloc = tws05[which(tws05$tws == min(tws05$tws,
                                            na.rm = T)),]
    }else if(tmp == types[3]){
      tmp1 = tws0608[which(tws0608$long < 80),]
      tmp2 = tws0608[which(tws0608$long > 80),]
      
      minloc1 = tmp1[which(tmp1$tws == min(tmp1$tws,
                                           na.rm = T)),]
      minloc2 = tmp2[which(tmp2$tws == min(tmp2$tws,
                                           na.rm = T)),]
      minloc = rbind(minloc1,minloc2)
      
    }else if(tmp == types[4]){
      tmp1 = tws0916[which(tws0916$long < 85),]
      tmp2 = tws0916[which(tws0916$long > 85),]
      
      minloc1 = tmp1[which(tmp1$tws == min(tmp1$tws,
                                           na.rm = T)),]
      minloc2 = tmp2[which(tmp2$tws == min(tmp2$tws,
                                           na.rm = T)),]
      minloc = rbind(minloc1,minloc2)
    }
    return(minloc)
  }
  type = 1:4
  
  minlocs = do.call(rbind,lapply(type,loc_min_neg_points))
  minloc_col = pal_lancet(alpha = 0.8)(9)[1]
  
  
  bardf1 = data.frame(
    Year = c(2003,2004),
    y = pos_area1[1:2],
    label = round(pos_area1[1:2])
  )
  bardf2 = data.frame(
    Year = c(2005),
    y = pos_area1[3],
    label = round(pos_area1[3])
  )
  bardf3 = data.frame(
    Year = c(2006:2008),
    y = pos_area1[4:6],
    label = round(pos_area1[4:6])
  )
  bardf4 = data.frame(
    Year = c(2009:2016),
    y = pos_area1[7:14],
    label = round(pos_area1[7:14])
  )
  
  bar_col = colorRampPalette(
    pal_lancet(alpha = 0.8)(9)
  )(14*3)
  bar_col = bar_col[seq(1,14*2,2)]
  bar_col = c('2003'=bar_col[1],
              '2004'= bar_col[2],
              '2005'= bar_col[3],
              '2006'= bar_col[4],
              '2007'= bar_col[5],
              '2008'= bar_col[6],
              '2009'= bar_col[7],
              '2010'= bar_col[8],
              '2011'= bar_col[9],
              '2012'= bar_col[10],
              '2013'= bar_col[11],
              '2014'= bar_col[12],
              '2015'= bar_col[13],
              '2016'= bar_col[14])
  
  theme_bar = theme_void()+
    text_theme+
    theme(
      axis.line.x = element_line(size = 0.5,
                                 color = 'black'),
      axis.text.y = element_blank(),
      axis.title = element_blank(),
      legend.position = 'none'
    )
  
  
  pbar1 = ggplot()+
    geom_bar(data = bardf1,
             aes(x = Year,y = y,
                 fill = factor(Year)),
             stat = 'identity',
             position = position_dodge2(0.5),
             width = 0.5)+
    scale_x_continuous(breaks = c(2003,2004))+
    geom_text_repel(
      data  = bardf1,
      aes(x = Year,y = y+10,label = label),
      size = 4,
      color = 'black',
      position = position_dodge2(0.5),
      force = F
    )+
    scale_fill_manual(values = bar_col)+
    theme_bar
  
  pbar2 = ggplot()+
    geom_bar(data = bardf2,
             aes(x = Year,y = y,
                 fill = factor(Year)),
             stat = 'identity',
             position = position_dodge2(0.5),
             width = 0.5)+
    scale_x_continuous(breaks = c(2005))+
    geom_text_repel(
      data  = bardf2,
      aes(x = Year,y = y+10,label = label),
      size = 4,
      color = 'black',
      position = position_dodge2(0.5),
      force = F
    )+
    scale_fill_manual(values = bar_col)+
    theme_bar
  pbar3 = ggplot()+
    geom_bar(data = bardf3,
             aes(x = Year,y = y,
                 fill = factor(Year)),
             stat = 'identity',
             position = position_dodge2(0.5),
             width = 0.5)+
    scale_x_continuous(breaks = c(2006:2008))+
    geom_text_repel(
      data  = bardf3,
      aes(x = Year,y = y+10,label = label),
      size = 4,
      color = 'black',
      position = position_dodge2(0.5),
      force = F
    )+
    scale_fill_manual(values = bar_col)+
    theme_bar
  
  pbar4 = ggplot()+
    geom_bar(data = bardf4,
             aes(x = Year,y = y,
                 fill = factor(Year)),
             stat = 'identity',
             position = position_dodge2(0.5),
             width = 0.5)+
    scale_x_continuous(breaks = c(2009:2016))+
    geom_text_repel(
      data  = bardf4,
      aes(x = Year,y = y+10,label = label),
      size = 4,
      color = 'black',
      position = position_dodge2(0.5),
      force = F
    )+
    scale_fill_manual(values = bar_col)+
    theme_bar
  
  label_pside = data.frame(
    x = 70,y = 26,
    label = paste0('(',letters[5:8],') ',
                   c('2003-2004',
                     '2005',
                     '2006-2008',
                     '2009-2016')),
    type1 = paste0('(',letters[1:4],')')
  )
  pside = ggmap(p2map1)+
    geom_path(data = tibet_river,
              aes(x = long,y = lat,group =group),
              color = 'blue',alpha = 0.4)+
    geom_polygon(data = tibet,
                 aes(x= long,y = lat,group = group),
                 color = 'black',
                 fill = 'transparent',
                 size = 0.5)+
    geom_tile(data = tws_evo,
              aes(x = long,y= lat,fill = levels),
              alpha = 0.65)+
    geom_polygon(data = neg_shps,
                 aes(x= long,y = lat,group = group),
                 color = 'black',
                 fill = 'transparent',
                 size = 0.5)+
    scale_fill_manual(values = fil_tws)+
    geom_point(data = minlocs,
               aes(x = long,y = lat),
               color = minloc_col,
               size = 3+3,shape= 1)+
    geom_point(data = minlocs,
               aes(x = long,y = lat),
               color = minloc_col,
               size = 2+1.5,shape= 1)+
    geom_point(data = minlocs,
               aes(x = long,y = lat),
               color = minloc_col,
               size = 2,shape= 16)+
    geom_polygon(data = twsborder2012,
                 aes(x = long,y = lat,group = group),
                 size = 0.5,
                 fill = 'transparent',
                 color = col_border[5])+
    geom_polygon(data =twsborder2014,
                 aes(x = long,y = lat,group = group),
                 size = 0.5,
                 fill = 'transparent',
                 color = col_border[9])+
    geom_text_repel(
      data = label_pside,
      aes(x = x,y = y,label = label),
      size = 4,
      color = 'black',
      bg.color = 'white',
      force = F,
      bg.r = 0.15,
      hjust = 0
    )+
    
    facet_wrap(~type1,ncol = 1)+
    theme_bw()
  
  ex_tibet = extent(tibet)
  
  pside = pside+
    scale_x_continuous(breaks = seq(70,100,10),
                       labels = paste0(seq(70,100,10),
                                       '°E'),
                       limits = c(ex_tibet[1]-2,ex_tibet[2]+2))+
    scale_y_continuous(breaks = c(30,40),
                       labels = paste0(c(30,40),'°N'),
                       limits = c(ex_tibet[3]-1,ex_tibet[4]+1))+
    text_theme+
    theme(strip.text = element_blank(),
          legend.position = 'none',
          axis.text.y = element_text(angle = 90,hjust = 0.5),
          axis.title.x = element_blank())+
    ylab('Latitude')
  
 
  
  
  library(cowplot)
  
  p2no = p2 + theme(legend.position = 'none',
                    axis.title.x = element_blank(),
                    axis.text.y = element_text(angle = 90,hjust = 0.5)
                    )
  
  p2no1 = p2no + 
    new_scale_color()+
    scale_color_manual(values= col_lin,
                       guide = guide_legend(
                         nrow = 1,title = ''
                       ))
  p2no1 = p2no1 + 
    scale_x_continuous(breaks = c(-100,0,100),
                       labels = c(paste0(100,'°W'),
                                  0,
                                  paste0('100','°E')),
                       limits = c(-180,180))+
    scale_y_continuous(breaks = c(0,seq(30,90,30)),
                       labels = c(0,
                                  paste0(seq(30,90,30),'°N')))+
    theme(panel.grid = element_blank())
  
  
  p1no = p1no + 
    theme(
      axis.title.x = element_blank(),
      axis.text.y = element_text(angle = 90,hjust = 0.5),
      panel.grid = element_blank()
    )+
    scale_x_continuous(breaks = c(-100,0,100),
                       labels = c(paste0(100,'°W'),
                                  0,
                                  paste0('100','°E')),
                       limits = c(-180,180))+
    scale_y_continuous(breaks = seq(0,8000,2000),
                       labels = paste0(seq(0,8,2)))
  
  p3 = p3 + 
    scale_x_continuous(breaks = c(60,80,100),
                       labels = paste0(c(60,80,100),
                                       '°E'),
                       limits = c(ex[1] -10,ex[2] + 10))+
    scale_y_continuous(breaks = c(25,35,45),
                       labels = paste0(c(25,35,45),'°N'),
                       limits = c(ex[3] -5,ex[4] + 5))+
  
    theme(
      axis.title.x = element_blank(),
      axis.text.y = element_text(angle = 90,hjust = 0.5)
    )
  
  p1leg = p1no + theme(legend.position = 'bottom')
  p2leg = p2no + theme(legend.position = 'bottom')
  p3leg = p3 + theme(legend.position = 'bottom')
  plinleg1 = plin1 + theme(legend.position = 'bottom')
  plinleg2 = plin2 + theme(legend.position = 'bottom')
  
  library(ggpubr)
  p2leg = as_ggplot(get_legend(p2leg))
  p3leg = as_ggplot(get_legend(p3leg))
  p1leg = as_ggplot(get_legend(p1leg))
  plinleg = as_ggplot(get_legend(plinleg1))
  
  
  png('main_plot/fig3/fig3_final_leg1.png',
      height = 24,
      width = 27,
      units = 'cm',
      res = 800)
  print(p1leg)
  dev.off()
  
  png('main_plot/fig3/fig3_final_leg2.png',
      height = 24,
      width = 27,
      units = 'cm',
      res = 800)
  print(p2leg)
  dev.off()
  
  png('main_plot/fig3/fig3_final_leg3.png',
      height = 24,
      width = 27,
      units = 'cm',
      res = 800)
  print(p3leg)
  dev.off()
  
  png('main_plot/fig3/fig3_final_leg4.png',
      height = 24,
      width = 27,
      units = 'cm',
      res = 800)
  print(plinleg1)
  dev.off()
  png('main_plot/fig3/fig3_final_leg5.png',
      height = 24,
      width = 27,
      units = 'cm',
      res = 800)
  print(plinleg2)
  dev.off()
  
  

  p123 = plot_grid(
    p1no,p2no1,p3,
    rel_widths = c(1,1,1),
    rel_heights = c(1.5,2,2),
    ncol = 1,
    align = 'lr',
    axis = 'v'
  )
  
  plin11 = plin1 + 
    ylim(-3,3)+
    theme(axis.title.x = element_blank(),
          axis.text.y = element_text(angle = 90,
                                     hjust = 0.5))+
    theme(panel.grid = element_blank())+
    coord_fixed(ratio = 1.43)
  
  
  
  p234 = plot_grid(
    plin11,pside,
    rel_widths = c(1,1),
    rel_heights = c(1.5,4),
    ncol =1,
    align = 'lr',
    axis = 'v'
  )
 
  pful = plot_grid(
    p123,p234,
    rel_widths = c(1.5,1),
    rel_heights = c(1,1),
    nrow = 1,
    align = 'tb',
    axis = 'h'
  )
  
  library(cowplot)
  
  plin21 = plin2 + theme_void()+theme(
    axis.title = element_blank(),
    #plot.background = element_rect(fill = 'transparent'),
    #panel.background = element_rect(fill = 'transparent'),
    #panel.grid = element_line(color = 'transparent'),
    legend.position = 'none',
    axis.text = element_text(size = 12,color = 'black'))
  
  pful1 = pful
  
  
  png('main_plot/fig3/fig3_trail_full_final8.png',
      height = 24,
      width = 27,
      units = 'cm',
      res = 800)
  print(pful1)
  dev.off()
  
                                                 
  # 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
}
fig3_plot_figure4 <- function(
  
){
  setwd('/media/sdb5/Vapor_projcts/Vapor_tibet')
  source("/home/share/R_project/xinjiang_vapor/shp_management.R")
  source("/home/share/R_project/xinjiang_vapor/data_management.R")
  library(data.table)
  library(raster)
  library(ggplot2)
  library(RColorBrewer)
  library(ggsci)
  library(doParallel)
  library(ggmap)
  
  fontsize = 14
  text_theme= theme(
    axis.text = element_text(size = fontsize,
                             color = 'black'),
    axis.title = element_text(size = fontsize,
                              color = 'black'),
    legend.text =  element_text(size = fontsize,
                                color = 'black'),
    legend.title =  element_text(size = fontsize,
                                 color = 'black')
  )
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/profile_analysis_particle_varep_across_tibet.R")
  profiles = profile_analysis_particle_varep_across_tibet()
  
  
  lastp = which(profiles$variable == 'long38')
  lastp = profiles[lastp,]
  
  world = shp_management('world')
  dem = raster('Data/global_dem/elev.0.5-deg.nc')
  dem1 = crop(dem,extent(0,180,0,90))
  dem2 = crop(dem,extent(180,360,0,90))
  extent(dem2) = extent(-180,0,0,90)
  dem = merge(dem2,dem1)
  
  dem = raster::mask(crop(dem,
                          extent(-180,180,20,50)),
                     world)
  demdf = as.data.frame(dem,xy = T)
  colnames(demdf) = c('long','lat','dem')
  demdf = demdf[-which(is.na(demdf$dem)),]
  uni_long = unique(demdf$long)
  i = 1:length(uni_long)
  calc_mean_dem_by_long <- function(i){
    tmpid = which(demdf$long == uni_long[i])
    tmp = max(demdf[tmpid,3])
    return(tmp)
  }
  longdem = sapply(i,calc_mean_dem_by_long)
  longdemdf = data.frame(
    long = uni_long,
    dem = longdem
  )
  
  
  # line plot 
  library(ggsci)
  traj_col = pal_material('blue')(7)
  traj_col = colorRampPalette(traj_col)(7*3)
  traj_col = traj_col[seq(2,7*3,2)][4:10]
  profiles$region[which(is.na(profiles$region))] = 'NA'
  
  hm_label = data.frame(
    x = c(-100,-35,30,86,120),
    y = -500,
    label = c('NA','NATO','Eurasia',
              'HM','EAS')
  )
  
  label_p1 = data.frame(
    x = -175,y = 7500,label = '(a)'
  )
  
  label_traj = data.frame(
    x = -150,
    xend = -90,
    y = 5500,
    ylab = 4200,
    xlab = -120,
    label = 'Water vapor \n trajectory'
  )
  
  p1  = ggplot()+
    geom_hline(yintercept = 0,color = 'grey80',alpha = 0.7)+
    geom_area(data = longdemdf,
              aes(x = long,y = dem),fill = 'grey80',
              alpha = 0.7)+
    geom_path(data = profiles,
              aes(x = long,y = height,
                  color = region,
                  group = routeid),
              size = 0.75,
              arrow = arrow(20,
                            length = unit(0.5,'cm'),
                            type = 'open'))+
    geom_text(data = hm_label,
              aes(x = x,y = y,label = label),
              size = 4,
              color = 'black')+
    geom_text(data = label_p1,
              aes(x = x,y = y,label = label),
              size = 4,
              color = 'black')+
    geom_vline(xintercept = 68)+
    geom_vline(xintercept = 105)+
    scale_color_manual(values = traj_col)+
    
    geom_segment(data = label_traj,
                 aes(x = x,xend = xend,y = y,
                     yend = y),
                 size = 0.75,
                 color = traj_col[4],
                 arrow = arrow(20,
                               length = unit(0.5,'cm'),
                               type = 'open'))+
    geom_text(data = label_traj,
              aes(x = xlab,y = ylab,label = label),
              size = 4,
              color = 'black')+
    theme_bw()+
    text_theme+
    xlab('Longitude')+
    ylab('Elevation (km)')
  
  p1no = p1 + theme(legend.position =  'none')
  
  # spatial plot with map 
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/calc_pme_trends_across_ato.R")
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/calc_tws_trends_across_eurasia.R")
  #calc_pme_trends_across_ato()
  #calc_tws_trends_across_eurasia()
  
  pmeato = as.data.frame(fread('main_plot_data/fig3/pmeato.csv'))
  pmeio = as.data.frame(fread('output/pme_mmkio/pmemmkio.csv'))
  twsdf = as.data.frame(fread('main_plot_data/fig3/twsdf.csv'))
  twspos_tibet = as.data.frame(
    fread('main_plot_data/fig3/postwsdf_tibet.csv')
  )
  
  pmeatoneg = pmeato[which(pmeato$pmeato<=0),]
  pmeioneg = pmeio[which(pmeio$mmkio <=0),]
  colnames(pmeioneg) = c('long','lat','pmeato')
  pmeatoneg = rbind(pmeatoneg,pmeioneg)
  #twsneg = twsdf
  twsneg = twsdf[which(twsdf$twsmonann<=0),]
  
  pmeatoneg$levels = cut(pmeatoneg$pmeato,
                         breaks = c(seq(-1752,0,200),0))
  twsneg = rbind(twsneg,twspos_tibet)
  twsneg$levels = cut(twsneg$twsmonann,
                      breaks = c(-1620,-1000,-500,-223,-150,-50,
                                 seq(-40,0,10),
                                 seq(10,60,10),100,500,1000))
  
  nclass_pme = length(unique(pmeatoneg$levels))
  nclass_tws = 10
  
  
  fil_pme = colorRampPalette(brewer.pal(9,'Spectral'))(nclass_pme*5)
  fil_tws = colorRampPalette(brewer.pal(9,'Spectral'))(nclass_tws*5)
  
  fil_blue = colorRampPalette(brewer.pal(9,'Spectral')[5:9])(30)
  fil_blue = fil_blue[seq(8,24,2)]
  
  fil_pme = fil_pme[seq(1,nclass_pme*2,2)]
  fil_tws1 = fil_tws[1:4]
  fil_tws = fil_tws[seq(5,nclass_tws*2,2)]
  
  
  #fil_tws = c(fil_tws[1:9],fil_blue)
  
  fil_tws = c('(-1.62e+03,-1e+03]' = fil_tws1[1],
              '(-1e+03,-500]' = fil_tws1[2],
              '(-500,-223]' = fil_tws1[3],
              '(-223,-150]' = fil_tws1[4],
              '(-150,-50]' = fil_tws[2],
              '(-50,-40]' = fil_tws[3],
              '(-40,-30]' = fil_tws[4],
              '(-30,-20]' = fil_tws[5],
              '(-20,-10]' = fil_tws[6],
              '(-10,0]' = fil_tws[7],
              '(0,10]' = fil_blue[1],
              '(10,20]' = fil_blue[2],
              '(20,30]' = fil_blue[3],
              '(30,40]' = fil_blue[4],
              '(40,50]' = fil_blue[5],
              '(50,60]' = fil_blue[6],
              '(60,100]' = fil_blue[7],
              '(100,500]' = fil_blue[8],
              '(500,1e+03]' = fil_blue[9])
  
  
  
  library(ggnewscale)
  tibet = shp_management('tibet')
  world = shp_management('world')
  world = crop(world,extent(-180,180,0,90))
  library(ggmap)
  ex = extent(tibet)
  cen_world = cbind(
    long = (ex[1]+ex[2])/2,
    lat = (ex[3]+ex[4])/2
  )
  #api = read.table('google.api')
  #register_google(api)
  #library(httr)
  #set_config(use_proxy('127.0.0.1',44067))
  p2map = get_googlemap(center = c(cen_world[1],
                                   cen_world[2]),
                        zoom = 3,
                        maptype = 'terrain',
                        color = 'bw',
                        language = 'en-En',
                        style=c(feature=c(
                          "administrative.country",
                          "administrative.city"),
                          element="labels",
                          size = 12,
                          visibility="off"))
  
  # input of currents ocean
  cur_df = as.data.frame(
    fread('/home/share/R_project/xinjiang_vapor/analysis_output/fig4/current_df.csv')
  )
  
  idless50 = which(cur_df$lat <= 50 &
                     cur_df$lat >= 10)
  cur_df = cur_df[idless50,]
  
  idbig1 = which(cur_df$u>0 &
                   cur_df$v >0)
  idbig2 = which(cur_df$u<0 &
                   cur_df$v >0)
  idbig3 = which(cur_df$u>0 &
                   cur_df$v <0)
  
  
  cur_df1 = cur_df[idbig1,]
  cur_df2 = cur_df[idbig2,]
  cur_df3 = cur_df[idbig3,]
  
  cur_df3 = cur_df3[
    which(cur_df3$long > -20 &
            cur_df3$lat <= 40 &
            cur_df3$lat >=30),
  ]
  
  cid1 = seq(1,nrow(cur_df1),40)
  cid2 = seq(1,nrow(cur_df2),300)
  cid3 = seq(1,nrow(cur_df3),30)
  
  cur_df1 = cur_df1[cid1,]
  cur_df2 = cur_df2[cid2,]
  cur_df3 = cur_df3[cid3,]
  
  
  cols_cur = c('#2988AE','#30376E','#4169E1')
  #col_point = '#5192f0'
  #col_point = '#4876FF'
  #col_point = pal_lancet()(9)[1]
  
  pois_oce1 = data.frame(
    x = c(-80,-30,-60,-45,0,0,-18),
    y = c(20,18,40,30,50,27,34)
  )
  pois_oce_pat1 = data.frame(
    x = c(-80,-60,0),
    y = c(20,40,50)
  )
  pois_oce_pat11 = data.frame(
    x = c(-80,-60),
    y = c(20,40)
  )
  pois_oce_pat2 = data.frame(
    x = c(-80,-45,0),
    y = c(20,30,50)
  )
  pois_oce_pat21 = data.frame(
    x = c(-80,-45),
    y = c(20,30)
  )
  pois_oce_pat3 = data.frame(
    x = c(-45,-18,0),
    y = c(30,34,27)
  )
  pois_oce_pat4 = data.frame(
    x = c(-30,-45,-18,0),
    y = c(18,30,34,27)
  )
  pois_oce_pat41 = data.frame(
    x = c(-30,-45),
    y = c(18,30)
  )
  
  
  colb = colorRampPalette(brewer.pal(9,'Blues'))(20)
  
  col_point = '#6495ED'
  #col_point = colb[20]
  #col_point = '#F8A58B'
  #col_point = '#3583AC'
  label_p2 = data.frame(
    x = -175,y = 80,label= '(c)'
  )
  
  intermedia_path = 'whole_time_traj/trajs_intermedia.csv'
  interpath = as.data.frame(fread(intermedia_path))
  
  pa1 = paste0('long',1:19)
  pa2 = paste0('long',20:38)
  
  interpath1 = interpath[which(interpath[,3] %in% pa1),]
  interpath2 = interpath[which(interpath[,3] %in% pa2),]
  
  loc_interpath_last_p <- function(x){
    r1 = unique(x$routeid)
    
    ret1 = 1
    for(i in 1:length(r1)){
      id1 = which(x$routeid == r1[i])
      id1 = id1[(length(id1)-1):length(id1)]
      ret = x[id1,]
      ret1 = rbind(ret1,ret)
    }
    ret1 = ret1[-1,]
    return(ret1)
  }
  path1_end = loc_interpath_last_p(interpath1)
  path2_end = loc_interpath_last_p(interpath2)
  
  
  
  sanjiangyuan = shp_management('sanjiangyuan')
  
  p2 = ggplot()+
    geom_polygon(data = world,
                 aes(x = long,y= lat,group= group),
                 fill = 'transparent',
                 color = 'black',
                 size = 0.5)+
    geom_tile(data =twsneg,
              aes(x = long,y = lat,fill = levels),
              alpha = 1)+
    scale_fill_manual(values = fil_tws,
                      labels = c('(-1000,-500]',
                                 '(-500,-223]',
                                 '(-223,-150]',
                                 '(-150,-50]',
                                 '(-50,-40]',
                                 '(-40,-30]',
                                 '(-30,-20]',
                                 '(-20,-10]',
                                 '(-10,0]',
                                 '(0,10]',
                                 '(10,20]',
                                 '(20,30]',
                                 '(30,40]',
                                 '(40,50]',
                                 '(50,60]'),
                      guide = guide_legend(order = 2,title ='Annual sum of monthly mean TWS (2003-2016)',
                                           title.position = 'top',nrow = 4))+
    geom_vline(xintercept = 68,
               size = 0.5)+
    geom_vline(xintercept = 105,
               size = 0.5)+
    new_scale_fill()+
    geom_tile(data = pmeatoneg,
              aes(x = long,y = lat,fill = levels),
              alpha = 0.8)+
    scale_fill_manual(values =fil_pme,
                      labels = c('(-1750,-1550]',
                                 '(-1550,-1350]',
                                 '(-1350,-1150]',
                                 '(-1150,-952]',
                                 '(-952,-752]',
                                 '(-752,-552]',
                                 '(-552,-352]',
                                 '(-352,-152]',
                                 '(-152,0]'),
                      
                      guide = guide_legend(order = 1,title = 'Annual sum of monthly mean PME in NATO(2003-2016)',
                                           title.position = 'top',
                                           nrow = 4))+
    geom_polygon(data = tibet,
                 aes(x = long,y= lat,group= group),
                 fill = 'transparent',
                 color = 'black')+
    
    #geom_path(data= pois_oce_pat1,
    #          aes(x = x,y = y),
    #          size = 1,
    #          color = col_point,
    #          linetype = 'solid',
    #          arrow=arrow(angle=20,length=unit(0.2,"inches"),
    #                      type="open"),
    #          alpha = 1)+
    #geom_path(data= pois_oce_pat2,
    #          aes(x = x,y = y),
  #          size = 1,
  #          color = col_point,
  #          linetype = 'solid',
  #          arrow=arrow(angle=20,length=unit(0.2,"inches"),
  #                      type="open"),
  #          alpha = 1)+
  #geom_path(data= pois_oce_pat3,
  #          aes(x = x,y = y),
  #          size = 1,
  #          color = col_point,
  #          linetype = 'solid',
  #          arrow=arrow(angle=20,length=unit(0.2,"inches"),
  #                      type="open"),
  #          alpha = 1)+
  #geom_path(data= pois_oce_pat4,
  #          aes(x = x,y = y),
  #          size = 1,
  #          color = col_point,
  #          linetype = 'solid',
  #          arrow=arrow(angle=20,length=unit(0.2,"inches"),
  #                      type="open"),
  #          alpha = 1)+
  #geom_path(data= pois_oce_pat11,
  #          aes(x = x,y = y),
  #          size = 1,
  #          color = col_point,
  #          linetype = 'solid',
  #          arrow=arrow(angle=20,length=unit(0.2,"inches"),
  #                      type="open"),
  #          alpha = 1)+
  #geom_path(data= pois_oce_pat21,
  #          aes(x = x,y = y),
  #          size = 1,
  #          color = col_point,
  #          linetype = 'solid',
  #          arrow=arrow(angle=20,length=unit(0.2,"inches"),
  #                      type="open"),
  #          alpha = 1)+
  #geom_path(data= pois_oce_pat41,
  #          aes(x = x,y = y),
  #          size = 1,
  #          color = col_point,
  #          linetype = 'solid',
  #          arrow=arrow(angle=20,length=unit(0.2,"inches"),
  #                      type="open"),
  #          alpha = 1)+
  geom_segment(data = cur_df1,
               aes(x = long,y = lat,
                   xend = long+u,
                   yend = lat+v),
               arrow = arrow(angle = 20,unit(0.15,'cm'),
                             type = 'open'),
               color = cols_cur[1])+
    geom_segment(data = cur_df2,
                 aes(x = long,y = lat,
                     xend = long+u,
                     yend = lat+v),
                 arrow = arrow(angle = 20,unit(0.2,'cm'),
                               type = 'open'),
                 color = cols_cur[2])+ 
    geom_segment(data = cur_df3,
                 aes(x = long,y = lat,
                     xend = long+u,
                     yend = lat+v),
                 arrow = arrow(angle = 20,unit(0.2,'cm'),
                               type = 'open'),
                 color = cols_cur[3])+ 
    ##geom_point(
    #  data  = pois_oce1,
    #  aes(x = x, y= y),
    #  size = 2.5,
    #  color = col_point,shape = 16
    #)+
    #geom_point(
    #  data  = pois_oce1,
    ##  aes(x = x, y= y),
    #  size = 3.5,
    #  color = col_point,shape = 1
  #)+
  #geom_point(
  #  data  = pois_oce1,
  #  aes(x = x, y= y),
  #  size = 6,
  #  color = col_point,shape = 1
  #)+
  geom_path(data = profiles,
            aes(x =long,y = lat,group = routeid,
                color = region),
            size = 0.75,
            alpha = 1,
            arrow = arrow(20,
                          length = unit(0.2,'inches'),
                          type= 'open'),
            show.legend = F
  )+
    scale_color_manual(values = traj_col)+
    geom_text(data = label_p2,
              aes(x = x,y = y,label = label),
              size = 4,
              color = 'black')+
    
    theme_bw()+
    text_theme+
    theme(legend.position = 'right')+
    #ylim(0,60)+
    xlab('Longitude')+
    ylab('Latitude')
  
  # enlarge p2
  world_crop = crop(world,
                    extent(-20,105,20,50))
  tibet_river = shp_management('tibet_river')
  country_label <- as.data.frame(
    fread('main_plot_data/fig3/country_label.csv')
  )
  country_label = country_label[-which(country_label$name == 'Hong Kong'|
                                         country_label$name == 'Macau'),]
  country_label$latitude[which(country_label$name=='India')]=
    country_label$latitude[which(country_label$name=='India')]+2
  library(ggrepel)
  
  neg_shps = list.files('shp/cluster_tws_neg_shp_deter',
                        pattern = '*.shp$',full.names =T)
  neg_shps = lapply(neg_shps[1:3],shapefile)
  neg_shps = do.call(bind,neg_shps)
  
  
  label_p3 = data.frame(
    x = 60,y = 44,label = '(d)'
  )
  
  current_set = data.frame(
    x = 85,
    xend = 95,
    y = 42.5
  )
  current_set1 = data.frame(
    x = 94.75,
    xend = 95,
    y = 42.5
  )
  current_label = data.frame(
    x = 105,
    y = 42.5,
    label = 'Intermedia current'
  )
  p3 = ggmap(p2map)+
    geom_path(data = tibet_river,
              aes(x = long,y = lat,group =group),
              color = 'blue',alpha = 0.4)+
    geom_tile(data = twsneg,
              aes(x = long,
                  y = lat,
                  fill = levels),
              alpha = 0.5)+
    scale_fill_manual(values = fil_tws)+
    new_scale_fill()+
    geom_tile(data = pmeatoneg,
              aes(x = long,y = lat,fill = levels),
              alpha = 0.5)+
    scale_fill_manual(values =fil_pme)+
    geom_polygon(data = tibet,
                 aes(x = long,y= lat,group= group),
                 fill = 'transparent',
                 color = 'black')+
    geom_polygon(data = neg_shps,
                 aes(x = long,y= lat,group= group),
                 fill = 'transparent',
                 color = 'black')+
    geom_polygon(data = sanjiangyuan,
                 aes(x = long,y= lat,group= group),
                 fill = 'transparent',
                 color = 'black')+
    
    geom_path(data = interpath1,
              aes(x =long,y = lat,group = routeid),
              color = '#000080',
              size = 1.5,
              alpha = 0.5,
              linetype = 3
    )+
    geom_path(data = path1_end,
              aes(x =long,y = lat,group = routeid),
              color = '#000080',
              size = 1.5,
              alpha = 0.5,
              linetype = 1,
              arrow = arrow(20,
                            length = unit(0.50,'cm'),
                            type= 'open')
    )+
    geom_path(data = interpath2,
              aes(x =long,y = lat,group = routeid),
              color = '#000080',
              size = 1.5,
              alpha = 0.5,
              linetype = 3
    )+
    geom_path(data = path2_end,
              aes(x =long,y = lat,group = routeid),
              color = '#000080',
              size = 1.5,
              alpha = 0.5,
              linetype = 1,
              arrow = arrow(20,
                            length = unit(0.50,'cm'),
                            type= 'open')
    )+
    geom_path(data = profiles,
              aes(x =long,y = lat,group = routeid,
                  color = region),
              size = 1,
              alpha = 1,
              arrow = arrow(20,
                            length = unit(0.5,'cm'),
                            type= 'open')
    )+
    geom_segment(data = current_set,
                 aes(x = x,y = y,xend = xend,
                     yend = y),
                 color = '#000080',
                 size = 1.5,
                 alpha = 0.5,
                 linetype = 3)+
    geom_segment(data = current_set1,
                 aes(x = x,y = y,xend = xend,
                     yend = y),
                 color = '#000080',
                 size = 1.5,
                 alpha = 0.5,
                 linetype = 1,
                 arrow = arrow(20,
                               length = unit(0.50,'cm'),
                               type= 'open'))+
    geom_text_repel(data = current_label,
                    aes(x = x,y = y,label = label),
                    size = 4,
                    color = 'black',
                    #position = position_dodge2(0.5),
                    bg.color = 'white',
                    force = F,
                    bg.r = 0.15)+
    scale_color_manual(values = traj_col)+
    geom_text_repel(data = country_label,
                    aes(x = longitude,
                        y = latitude,
                        label = name),
                    size = 4,
                    color = 'black',
                    #position = position_dodge2(0.5),
                    bg.color = 'white',
                    force = F,
                    bg.r = 0.15)+
    geom_text_repel(data = label_p3,
                    aes(x = x,
                        y = y,
                        label = label),
                    size = 4,
                    color = 'black',
                    #position = position_dodge2(0.5),
                    bg.color = 'white',
                    force = F,
                    bg.r = 0.15)+
    theme_bw()+
    text_theme+
    #xlim(ex[1] -10,ex[2] + 10)+
    #ylim(ex[3] -5,ex[4] + 5)+
    theme(legend.position = 'none')+
    xlab('Longitude')+
    ylab('Latitude')
  
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/import_index_insource_tibet.R")
  # line_ plot
  stand_trend_tws <- function(x){
    
    to_year <- function(x){
      x = c(rep(NA,6),x)
      x = matrix(x,nrow = 12)
      x = apply(x,2,sum,na.rm = T)
      return(x)
    }
    x = (x)/sd(x)
    x = to_year(x)
    x = (x-mean(x))/sd(x)
    return(x)
  }
  stand_trend_snow <- function(x){
    
    to_year <- function(x){
      x = c(rep(NA,6),x)
      x = matrix(x,nrow = 12)
      x = apply(x,2,sum,na.rm = T)
      return(x)
    }
    x = to_year(x)
    x = (x-mean(x))/sd(x)
    return(x)
  }
  stand_trend_pme <- function(x){
    trend_fun<-function(x){
      x = x[1:174]
      x = ts(x,start = c(2003,1),frequency = 12)
      x = decompose(x)$trend
      x = x[-which(is.na(x))]
      x = (x - mean(x))/sd(x)
      return(x)
    }
    to_year <- function(x){
      #x = x[-c(1:6)]
      x = c(rep(NA,6),x)
      x = matrix(x,nrow = 12)
      x = apply(x,2,sum,na.rm = T)
      return(x)
    }
    x = trend_fun(x)
    x = to_year(x)
    x = (x -mean(x))/sd(x)
    return(x)
  }
  
  twsdf = import_index_insource_tibet(var = 'tws_tibet')
  pmeato1 = import_index_insource_tibet(var = 'pme_mean',
                                        region = 'ato')
  
  pmeato3 = pmeato1[,3]
  twsdf = twsdf[,1:2]
  
  twsdf = apply(twsdf,2,stand_trend_tws)
  pmeato = stand_trend_pme(pmeato3)
  
  pos_area = as.data.frame(fread('output/pos_area/pos_area.csv'))
  pos_area = as.numeric(pos_area[,1])
  pos_area1 = pos_area / 10000
  
  pos_area = (pos_area1 - mean(pos_area1))/(sd(pos_area1))
  
  # import snow cover
  snowcover = import_index_insource_tibet('snowcover')
  snowcover = snowcover[,1:2]
  snowcover = apply(snowcover,2,stand_trend_snow)
  
  
  dfbar = data.frame(
    Year = 2003:2016,
    SC_Moun1 = snowcover[,1],
    SC_Moun2 = snowcover[,2]
  )
  
  dfline = data.frame(
    Year= 2003:2016,
    PME_NATO3 = pmeato,
    TWS_Moun1 = twsdf[,1],
    TWS_Moun2 = twsdf[,2],
    PosTWS_Area_TP = pos_area[1:14]
  )
  dfline1 = data.frame(
    Year= 2003:2016,
    #PME_NATO3 = pmeato,
    TWS_Moun1 = twsdf[,1],
    TWS_Moun2 = twsdf[,2],
    PosTWS_Area_TP = pos_area[1:14]
  )
  dflinem = reshape2::melt(dfline1,'Year')
  dfbarm = reshape2::melt(dfbar,'Year')
  
  library(scales)
  col_lin = pal_lancet()(9)
  
  col_lin = colorRampPalette(col_lin)(20)
  show_col(col_lin)
  
  col_lin = c('TWS_Moun1'= col_lin[8],
              'TWS_Moun2'= col_lin[9],
              'PME_NATO3' = col_lin[1],
              'PosTWS_Area_TP' = col_lin[16],
              'SC_Moun1' = col_lin[6],
              'SC_Moun2' = col_lin[7])
  size_lin = c('TWS_Moun1'= 1.5,
               'TWS_Moun2'= 1.5,
               'PME_NATO3' = 1.5,
               'PosTWS_Area_TP' = 1.5,
               'SC_Moun1' = 1.5,
               'SC_Moun2' = 1.5)
  linetype_lin = c('TWS_Moun1'= 1,
                   'TWS_Moun2'= 1,
                   'PME_NATO3' = 1,
                   'PosTWS_Area_TP' = 1,
                   'SC_Moun1' = 1,
                   'SC_Moun2' = 1)
  
  
  
  p_pos_tws1 = cor.test(dfline$PosTWS_Area_TP,dfline$TWS_Moun1)$p.value
  p_pos_tws2 = cor.test(dfline$PosTWS_Area_TP,dfline$TWS_Moun2)$p.value
  p_pos_pme3 = cor.test(dfline$PosTWS_Area_TP,dfline$PME_NATO3)$p.value
  
  cor_pos_tws1 = cor.test(dfline$PosTWS_Area_TP,dfline$TWS_Moun1)$estimate
  cor_pos_tws2 = cor.test(dfline$PosTWS_Area_TP,dfline$TWS_Moun2)$estimate
  cor_pos_pme3 = cor.test(dfline$PosTWS_Area_TP,dfline$PME_NATO3)$estimate
  
  
  dfcor = data.frame(
    x = 2009,
    y = c(2.5,2,1.5),
    label = c(paste0('Cor TWS_Moun1: ',
                     round(cor_pos_tws1,2),' (p=',round(p_pos_tws1,2),')'),
              paste0('Cor TWS_Moun2: ',
                     round(cor_pos_tws2,2),' (p=',round(p_pos_tws2,2),')'),
              paste0('Cor PME_NATO3: ',
                     round(cor_pos_pme3,2),' (p=',round(p_pos_pme3,2),')')),
    variable = unique(dflinem$variable)[c(2,3,1)]
  )
  
  linseg1 = data.frame(
    x = c(2005,2016),
    xend = c(2016,2005),
    y = 2.7
  )
  
  linseg2 = data.frame(
    x = c(2005,2016),
    xend = c(2016,2005),
    y = 2
  )
  
  decpos1 = (dfline$PosTWS_Area_TP[14]-dfline$PosTWS_Area_TP[3])/dfline$PosTWS_Area_TP[3]
  dectws1 = (dfline$TWS_Moun1[14] - dfline$TWS_Moun1[3])/dfline$TWS_Moun1[3]
  dectws2 = (dfline$TWS_Moun2[14] - dfline$TWS_Moun2[3])/dfline$TWS_Moun2[3]
  decpme3 = (dfline$PME_NATO3[14] - dfline$PME_NATO3[3])/dfline$PME_NATO3[3]
  decsno1 = (dfbar$SC_Moun1[14]- dfbar$SC_Moun1[3])/dfbar$SC_Moun1[3]
  decsno2 = (dfbar$SC_Moun2[14]- dfbar$SC_Moun2[3])/dfbar$SC_Moun2[3]
  
  dech = data.frame(
    x = c(2010),
    y = 3+0,
    label = 'Decling period'
  )
  dech2 = data.frame(
    x = -135,
    y = 37,
    label = 'Decling \n period'
  )
  
  decdf1 = data.frame(
    x = 2007,
    y = c(2.4,1.9,1.3)-4,
    label1 = c(decpos1,dectws1,dectws2),
    label2 = c('PosTWS_Area_TP: ','TWS_Moun1: ','TWS_Moun2: ')
  )
  decdf2 = data.frame(
    x = 135,
    y = c(35,20,5),
    label1 = c(decpme3,dectws1,dectws2),
    label2 = c('PME_NATO3\n','TWS_Moun1\n ','TWS_Moun2\n')
  )
  
  decdf1$label1 = paste0(round(decdf1$label1 *100,2),'%')
  decdf2$label1 = paste0(round(decdf2$label1 *100,2),'%')
  
  decdf1$label = paste0(decdf1$label2,decdf1$label1)
  decdf2$label = paste0(decdf2$label2,decdf2$label1)
  
  decdf1$variable = c('PosTWS_Area_TP','TWS_Moun1','TWS_Moun2')
  decdf2$variable = c('PME_NATO3','TWS_Moun1','TWS_Moun2')
  
  
  label_plin = data.frame(
    x = 2003,y = 2.5,label = '(b)'
  )
  
  #dflinebm = rbind(dfbarm,
  #                 dflinem[which(dflinem$variable == 'PosTWS_Area_TP'),])
  dflinebm = dflinem
  dflineadd = dflinem[-which(dflinem$variable == 'PosTWS_Area_TP'),]
  plin1 = ggplot()+
    geom_vline(xintercept = 2005)+
    geom_vline(xintercept = 2016)+
    geom_line(data = dflinebm,aes(x = Year,
                                  y = value ,
                                  color = variable,
                                  size = variable,
                                  linetype = variable))+
    geom_text(data = dech,
              aes(x = x,y = y,label = label),
              color = 'black',
              size = 4,hjust = 0.5)+
    geom_text(data = decdf1,
              aes(x = x,y = y,label = label,
                  color = variable),
              size = 4,hjust = 0,
              show.legend = F)+
    geom_segment(data = linseg1,
                 aes(x = x,xend = xend,y = y,yend = y),
                 color = 'black',
                 arrow = arrow(20,
                               length  =unit(0.3,'cm'),
                               type = 'closed'))+
    geom_text(data= label_plin,
              aes(x = x,y = y,label = label),
              size = 4,
              color = 'black')+
    scale_color_manual(values= col_lin,
                       guide = guide_legend(
                         nrow = 1,title = ''
                       ))+
    scale_size_manual(values = size_lin,
                      guide = guide_legend(
                        nrow = 1,title = ''
                      ))+
    scale_linetype_manual(values = linetype_lin,
                          guide = guide_legend(
                            nrow = 1,title = ''
                          ))+
    theme_bw()+
    text_theme+
    theme(legend.position = 'none')+
    xlab('Year')+
    ylab('Indices')
  
  plin2 = ggplot()+
    geom_vline(xintercept = 2005)+
    geom_vline(xintercept = 2016)+
    geom_line(data = dflineadd,aes(x = Year,
                                   y = value ,
                                   color = variable,
                                   size = variable,
                                   linetype = variable))+
    
    geom_segment(data = linseg2,
                 aes(x = x,xend = xend,y = y,yend = y),
                 color = 'black',
                 arrow = arrow(20,
                               length  =unit(0.3,'cm'),
                               type = 'closed'))+
    scale_color_manual(values= col_lin,
                       guide = guide_legend(
                         nrow = 1,title = ''
                       ))+
    scale_size_manual(values = size_lin,
                      guide = guide_legend(
                        nrow = 1,title = ''
                      ))+
    scale_linetype_manual(values = linetype_lin,
                          guide = guide_legend(
                            nrow = 1,title = ''
                          ))+
    scale_x_continuous(breaks = c(2005,2016))+
    theme_bw()+
    text_theme+
    theme(legend.position = 'none')+
    xlab('Year')+
    ylab('Indices')
  # fig d and fig e
  type = paste0('year',2003:2016)
  twsborder = dir.create('shp/twsneg_border')
  twsborder = paste0('shp/twsneg_border/')
  twsborder = paste0('shp/twsneg_border/',type, '.shp')
  twsborder = lapply(twsborder,
                     shapefile)
  
  #pbor1 = borderdf[which(borderdf$type ==2),]
  
  input_tws0304 = 'main_plot_data/fig3/tws0304.csv'
  input_tws05 = 'main_plot_data/fig3/tws05.csv'
  input_tws0608 = 'main_plot_data/fig3/tws0608.csv'
  input_tws0916 = 'main_plot_data/fig3/tws0916.csv'
  
  tws0304 = as.data.frame(
    fread(input_tws0304)
  )  
  tws05 = as.data.frame(
    fread(input_tws05)
  )  
  tws0608 = as.data.frame(fread(input_tws0608))
  tws0916 = as.data.frame(fread(input_tws0916))
  
  naid = which(is.na(tws0304$tws))
  tws0304 = tws0304[-naid,]
  naid = which(is.na(tws05$tws))
  tws05 = tws05[-naid,]
  naid = which(is.na(tws0608$tws))
  tws0608 = tws0608[-naid,]
  naid = which(is.na(tws0916$tws))
  tws0916 = tws0916[-naid,]
  
  tws0304$levels = cut(tws0304$tws,
                       breaks = c(-1620,-1000,-500,-223,-150,-50,
                                  seq(-40,0,10),
                                  seq(10,60,10),100,500,1000))
  tws05$levels = cut(tws05$tws,
                     breaks = c(-1620,-1000,-500,-223,-150,-50,
                                seq(-40,0,10),
                                seq(10,60,10),100,500,1000))
  tws0608$levels = cut(tws0608$tws,
                       breaks = c(-1620,-1000,-500,-223,-150,-50,
                                  seq(-40,0,10),
                                  seq(10,60,10),100,500,1000))
  tws0916$levels = cut(tws0916$tws,
                       breaks = c(-1620,-1000,-500,-223,-150,-50,
                                  seq(-40,0,10),
                                  seq(10,60,10),100,500,1000))
  
  tws0304$type1 = '(a)'
  tws05$type1 = '(b)'
  tws0608$type1 = '(c)'
  tws0916$type1 ='(d)'
  
  tws_evo = rbind(tws0304,tws05,tws0608,tws0916)
  ex = extent(tibet)
  cen_tibet = cbind(
    long = (ex[1]+ex[2])/2,
    lat = (ex[3]+ex[4])/2
  )
  #api = read.table('google.api')
  #register_google(api)
  #library(httr)
  #set_config(use_proxy('127.0.0.1',44067))
  p2map1 = get_googlemap(center = c(cen_tibet[1],
                                    cen_tibet[2]),
                         zoom = 4,
                         maptype = 'terrain',
                         color = 'bw',
                         language = 'en-En',
                         style=c(feature=c("administrative.country",
                                           "administrative.city"),
                                 element="labels",
                                 visibility="off"))
  
  col_border = pal_lancet(alpha = 0.8)(9)
  col_border = colorRampPalette(col_border)(12)
  
  
  
  twsborder2009 = fortify(twsborder[[7]])
  twsborder2012 = fortify(twsborder[[10]])
  twsborder2014 = fortify(twsborder[[14]])
  
  twsborder2009$type1 = '(d)'
  twsborder2012$type1 = '(d)'
  twsborder2014$type1 = '(d)'
  
  
  
  
  loc_min_neg_points <- function(type){
    types = c('2003-2004',
              '2005',
              '2006-2008',
              '2009-2016')
    tmp = types[type]
    
    if(tmp == types[1]){
      tmp1 = tws0304[which(tws0304$long < 80),]
      tmp2 = tws0304[which(tws0304$long > 80),]
      
      minloc1 = tmp1[which(tmp1$tws == min(tmp1$tws,
                                           na.rm = T)),]
      minloc2 = tmp2[which(tmp2$tws == min(tmp2$tws,
                                           na.rm = T)),]
      minloc = rbind(minloc1,minloc2)
    }else if(tmp == types[2]){
      minloc = tws05[which(tws05$tws == min(tws05$tws,
                                            na.rm = T)),]
    }else if(tmp == types[3]){
      tmp1 = tws0608[which(tws0608$long < 80),]
      tmp2 = tws0608[which(tws0608$long > 80),]
      
      minloc1 = tmp1[which(tmp1$tws == min(tmp1$tws,
                                           na.rm = T)),]
      minloc2 = tmp2[which(tmp2$tws == min(tmp2$tws,
                                           na.rm = T)),]
      minloc = rbind(minloc1,minloc2)
      
    }else if(tmp == types[4]){
      tmp1 = tws0916[which(tws0916$long < 85),]
      tmp2 = tws0916[which(tws0916$long > 85),]
      
      minloc1 = tmp1[which(tmp1$tws == min(tmp1$tws,
                                           na.rm = T)),]
      minloc2 = tmp2[which(tmp2$tws == min(tmp2$tws,
                                           na.rm = T)),]
      minloc = rbind(minloc1,minloc2)
    }
    return(minloc)
  }
  type = 1:4
  
  minlocs = do.call(rbind,lapply(type,loc_min_neg_points))
  minloc_col = pal_lancet(alpha = 0.8)(9)[1]
  
  
  bardf1 = data.frame(
    Year = c(2003,2004),
    y = pos_area1[1:2],
    label = round(pos_area1[1:2])
  )
  bardf2 = data.frame(
    Year = c(2005),
    y = pos_area1[3],
    label = round(pos_area1[3])
  )
  bardf3 = data.frame(
    Year = c(2006:2008),
    y = pos_area1[4:6],
    label = round(pos_area1[4:6])
  )
  bardf4 = data.frame(
    Year = c(2009:2016),
    y = pos_area1[7:14],
    label = round(pos_area1[7:14])
  )
  
  bar_col = colorRampPalette(
    pal_lancet(alpha = 0.8)(9)
  )(14*3)
  bar_col = bar_col[seq(1,14*2,2)]
  bar_col = c('2003'=bar_col[1],
              '2004'= bar_col[2],
              '2005'= bar_col[3],
              '2006'= bar_col[4],
              '2007'= bar_col[5],
              '2008'= bar_col[6],
              '2009'= bar_col[7],
              '2010'= bar_col[8],
              '2011'= bar_col[9],
              '2012'= bar_col[10],
              '2013'= bar_col[11],
              '2014'= bar_col[12],
              '2015'= bar_col[13],
              '2016'= bar_col[14])
  
  theme_bar = theme_void()+
    text_theme+
    theme(
      axis.line.x = element_line(size = 0.5,
                                 color = 'black'),
      axis.text.y = element_blank(),
      axis.title = element_blank(),
      legend.position = 'none'
    )
  
  
  pbar1 = ggplot()+
    geom_bar(data = bardf1,
             aes(x = Year,y = y,
                 fill = factor(Year)),
             stat = 'identity',
             position = position_dodge2(0.5),
             width = 0.5)+
    scale_x_continuous(breaks = c(2003,2004))+
    geom_text_repel(
      data  = bardf1,
      aes(x = Year,y = y+10,label = label),
      size = 4,
      color = 'black',
      position = position_dodge2(0.5),
      force = F
    )+
    scale_fill_manual(values = bar_col)+
    theme_bar
  
  pbar2 = ggplot()+
    geom_bar(data = bardf2,
             aes(x = Year,y = y,
                 fill = factor(Year)),
             stat = 'identity',
             position = position_dodge2(0.5),
             width = 0.5)+
    scale_x_continuous(breaks = c(2005))+
    geom_text_repel(
      data  = bardf2,
      aes(x = Year,y = y+10,label = label),
      size = 4,
      color = 'black',
      position = position_dodge2(0.5),
      force = F
    )+
    scale_fill_manual(values = bar_col)+
    theme_bar
  pbar3 = ggplot()+
    geom_bar(data = bardf3,
             aes(x = Year,y = y,
                 fill = factor(Year)),
             stat = 'identity',
             position = position_dodge2(0.5),
             width = 0.5)+
    scale_x_continuous(breaks = c(2006:2008))+
    geom_text_repel(
      data  = bardf3,
      aes(x = Year,y = y+10,label = label),
      size = 4,
      color = 'black',
      position = position_dodge2(0.5),
      force = F
    )+
    scale_fill_manual(values = bar_col)+
    theme_bar
  
  pbar4 = ggplot()+
    geom_bar(data = bardf4,
             aes(x = Year,y = y,
                 fill = factor(Year)),
             stat = 'identity',
             position = position_dodge2(0.5),
             width = 0.5)+
    scale_x_continuous(breaks = c(2009:2016))+
    geom_text_repel(
      data  = bardf4,
      aes(x = Year,y = y+10,label = label),
      size = 4,
      color = 'black',
      position = position_dodge2(0.5),
      force = F
    )+
    scale_fill_manual(values = bar_col)+
    theme_bar
  
  label_pside = data.frame(
    x = 70,y = 26,
    label = paste0('(',letters[5:8],') ',
                   c('2003-2004',
                     '2005',
                     '2006-2008',
                     '2009-2016')),
    type1 = paste0('(',letters[1:4],')')
  )
  pside = ggmap(p2map1)+
    geom_path(data = tibet_river,
              aes(x = long,y = lat,group =group),
              color = 'blue',alpha = 0.4)+
    geom_polygon(data = tibet,
                 aes(x= long,y = lat,group = group),
                 color = 'black',
                 fill = 'transparent',
                 size = 0.5)+
    geom_tile(data = tws_evo,
              aes(x = long,y= lat,fill = levels),
              alpha = 0.65)+
    geom_polygon(data = neg_shps,
                 aes(x= long,y = lat,group = group),
                 color = 'black',
                 fill = 'transparent',
                 size = 0.5)+
    scale_fill_manual(values = fil_tws)+
    geom_point(data = minlocs,
               aes(x = long,y = lat),
               color = minloc_col,
               size = 3+3,shape= 1)+
    geom_point(data = minlocs,
               aes(x = long,y = lat),
               color = minloc_col,
               size = 2+1.5,shape= 1)+
    geom_point(data = minlocs,
               aes(x = long,y = lat),
               color = minloc_col,
               size = 2,shape= 16)+
    geom_polygon(data = twsborder2012,
                 aes(x = long,y = lat,group = group),
                 size = 0.5,
                 fill = 'transparent',
                 color = col_border[5])+
    geom_polygon(data =twsborder2014,
                 aes(x = long,y = lat,group = group),
                 size = 0.5,
                 fill = 'transparent',
                 color = col_border[9])+
    geom_text_repel(
      data = label_pside,
      aes(x = x,y = y,label = label),
      size = 4,
      color = 'black',
      bg.color = 'white',
      force = F,
      bg.r = 0.15,
      hjust = 0
    )+
    
    facet_wrap(~type1,ncol = 1)+
    theme_bw()
  
  ex_tibet = extent(tibet)
  
  pside = pside+
    scale_x_continuous(breaks = seq(70,100,10),
                       labels = paste0(seq(70,100,10),
                                       '°E'),
                       limits = c(ex_tibet[1]-2,ex_tibet[2]+2))+
    scale_y_continuous(breaks = c(30,40),
                       labels = paste0(c(30,40),'°N'),
                       limits = c(ex_tibet[3]-1,ex_tibet[4]+1))+
    text_theme+
    theme(strip.text = element_blank(),
          legend.position = 'none',
          axis.text.y = element_text(angle = 90,hjust = 0.5),
          axis.title.x = element_blank())+
    ylab('Latitude')
  
  
  
  
  library(cowplot)
  
  p2no = p2 + theme(legend.position = 'none',
                    axis.title.x = element_blank(),
                    axis.text.y = element_text(angle = 90,hjust = 0.5)
  )
  
  p2no1 = p2no + 
    new_scale_color()+
    scale_color_manual(values= col_lin,
                       guide = guide_legend(
                         nrow = 1,title = ''
                       ))
  p2no1 = p2no1 + 
    scale_x_continuous(breaks = c(-100,0,100),
                       labels = c(paste0(100,'°W'),
                                  0,
                                  paste0('100','°E')),
                       limits = c(-180,180))+
    scale_y_continuous(breaks = c(0,seq(30,90,30)),
                       labels = c(0,
                                  paste0(seq(30,90,30),'°N')))+
    theme(panel.grid = element_blank())
  
  
  p1no = p1no + 
    theme(
      axis.title.x = element_blank(),
      axis.text.y = element_text(angle = 90,hjust = 0.5),
      panel.grid = element_blank()
    )+
    scale_x_continuous(breaks = c(-100,0,100),
                       labels = c(paste0(100,'°W'),
                                  0,
                                  paste0('100','°E')),
                       limits = c(-180,180))+
    scale_y_continuous(breaks = seq(0,8000,2000),
                       labels = paste0(seq(0,8,2)))
  
  p3 = p3 + 
    scale_x_continuous(breaks = c(60,80,100),
                       labels = paste0(c(60,80,100),
                                       '°E'),
                       limits = c(ex[1] -10,ex[2] + 10))+
    scale_y_continuous(breaks = c(25,35,45),
                       labels = paste0(c(25,35,45),'°N'),
                       limits = c(ex[3] -5,ex[4] + 5))+
    
    theme(
      axis.title.x = element_blank(),
      axis.text.y = element_text(angle = 90,hjust = 0.5)
    )
  
  p1leg = p1no + theme(legend.position = 'bottom')
  p2leg = p2no + theme(legend.position = 'bottom')
  p3leg = p3 + theme(legend.position = 'bottom')
  plinleg1 = plin1 + theme(legend.position = 'bottom')
  plinleg2 = plin2 + theme(legend.position = 'bottom')
  
  library(ggpubr)
  p2leg = as_ggplot(get_legend(p2leg))
  p3leg = as_ggplot(get_legend(p3leg))
  p1leg = as_ggplot(get_legend(p1leg))
  plinleg = as_ggplot(get_legend(plinleg1))
  
  
  png('main_plot/fig3/fig3_final_leg1.png',
      height = 24,
      width = 27,
      units = 'cm',
      res = 800)
  print(p1leg)
  dev.off()
  
  png('main_plot/fig3/fig3_final_leg2.png',
      height = 24,
      width = 27,
      units = 'cm',
      res = 800)
  print(p2leg)
  dev.off()
  
  png('main_plot/fig3/fig3_final_leg3.png',
      height = 24,
      width = 27,
      units = 'cm',
      res = 800)
  print(p3leg)
  dev.off()
  
  png('main_plot/fig3/fig3_final_leg4.png',
      height = 24,
      width = 27,
      units = 'cm',
      res = 800)
  print(plinleg1)
  dev.off()
  png('main_plot/fig3/fig3_final_leg5.png',
      height = 24,
      width = 27,
      units = 'cm',
      res = 800)
  print(plinleg2)
  dev.off()
  
  
  
  p123 = plot_grid(
    p1no,p2no1,p3,
    rel_widths = c(1,1,1),
    rel_heights = c(1.5,2,2),
    ncol = 1,
    align = 'lr',
    axis = 'v'
  )
  
  plin11 = plin1 + 
    ylim(-3,3)+
    theme(axis.title.x = element_blank(),
          axis.text.y = element_text(angle = 90,
                                     hjust = 0.5))+
    theme(panel.grid = element_blank())+
    coord_fixed(ratio = 1.43)
  
  
  
  p234 = plot_grid(
    plin11,pside,
    rel_widths = c(1,1),
    rel_heights = c(1.5,4),
    ncol =1,
    align = 'lr',
    axis = 'v'
  )
  
  pful = plot_grid(
    p123,p234,
    rel_widths = c(1.5,1),
    rel_heights = c(1,1),
    nrow = 1,
    align = 'tb',
    axis = 'h'
  )
  
  library(cowplot)
  
  plin21 = plin2 + theme_void()+theme(
    axis.title = element_blank(),
    #plot.background = element_rect(fill = 'transparent'),
    #panel.background = element_rect(fill = 'transparent'),
    #panel.grid = element_line(color = 'transparent'),
    legend.position = 'none',
    axis.text = element_text(size = 12,color = 'black'))
  
  pful1 = pful
  
  
  png('main_plot/fig3/fig3_trail_full_final9.png',
      height = 24,
      width = 27,
      units = 'cm',
      res = 800)
  print(pful1)
  dev.off()
  
  
  # 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
}
fig3_plot_figure5 <- function(
  
){
  setwd('/media/sdb5/Vapor_projcts/Vapor_tibet')
  source("/home/share/R_project/xinjiang_vapor/shp_management.R")
  source("/home/share/R_project/xinjiang_vapor/data_management.R")
  library(data.table)
  library(raster)
  library(ggplot2)
  library(RColorBrewer)
  library(ggsci)
  library(doParallel)
  library(ggmap)
  
  text_size = 2.3
  fontsize = 7
  text_theme= theme(
    axis.text = element_text(size = fontsize,
                             color = 'black'),
    axis.title = element_text(size = fontsize,
                              color = 'black'),
    legend.text =  element_text(size = fontsize,
                                color = 'black'),
    legend.title =  element_text(size = fontsize,
                                 color = 'black')
  )
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/profile_analysis_particle_varep_across_tibet.R")
  profiles = profile_analysis_particle_varep_across_tibet()
  
  
  lastp = which(profiles$variable == 'long38')
  lastp = profiles[lastp,]
  
  world = shp_management('world')
  dem = raster('Data/global_dem/elev.0.5-deg.nc')
  dem1 = crop(dem,extent(0,180,0,90))
  dem2 = crop(dem,extent(180,360,0,90))
  extent(dem2) = extent(-180,0,0,90)
  dem = merge(dem2,dem1)
  
  dem = raster::mask(crop(dem,
                          extent(-180,180,20,50)),
                     world)
  demdf = as.data.frame(dem,xy = T)
  colnames(demdf) = c('long','lat','dem')
  demdf = demdf[-which(is.na(demdf$dem)),]
  uni_long = unique(demdf$long)
  i = 1:length(uni_long)
  calc_mean_dem_by_long <- function(i){
    tmpid = which(demdf$long == uni_long[i])
    tmp = max(demdf[tmpid,3])
    return(tmp)
  }
  longdem = sapply(i,calc_mean_dem_by_long)
  longdemdf = data.frame(
    long = uni_long,
    dem = longdem
  )
  
  
  # line plot 
  library(ggsci)
  traj_col = pal_material('blue')(7)
  traj_col = colorRampPalette(traj_col)(7*3)
  traj_col = traj_col[seq(2,7*3,2)][4:10]
  profiles$region[which(is.na(profiles$region))] = 'NA'
  
  hm_label = data.frame(
    x = c(-100,-35,30,86,120),
    y = -500,
    label = c('NA','NATO','Eurasia',
              'HM','EAS')
  )
  
  label_p1 = data.frame(
    x = -175,y = 7500,label = '(a)'
  )
  
  label_traj = data.frame(
    x = -150,
    xend = -90,
    y = 5500,
    ylab = 4200,
    xlab = -120,
    label = 'Water vapor \n trajectory'
  )
  
  p1  = ggplot()+
    geom_hline(yintercept = 0,color = 'grey80',alpha = 0.7)+
    geom_area(data = longdemdf,
              aes(x = long,y = dem),fill = 'grey80',
              alpha = 0.7)+
    geom_path(data = profiles,
              aes(x = long,y = height,
                  color = region,
                  group = routeid),
              size = 0.75,
              arrow = arrow(20,
                            length = unit(0.25,'cm'),
                            type = 'open'))+
    geom_text(data = hm_label,
              aes(x = x,y = y,label = label),
              size = text_size,
              color = 'black')+
    geom_text(data = label_p1,
              aes(x = x,y = y,label = label),
              size = text_size,
              color = 'black')+
    geom_vline(xintercept = 68)+
    geom_vline(xintercept = 105)+
    scale_color_manual(values = traj_col)+
    
    geom_segment(data = label_traj,
                 aes(x = x,xend = xend,y = y,
                     yend = y),
                 size = 0.75,
                 color = traj_col[4],
                 arrow = arrow(20,
                               length = unit(0.25,'cm'),
                               type = 'open'))+
    geom_text(data = label_traj,
              aes(x = xlab,y = ylab,label = label),
              size = text_size,
              color = 'black')+
    theme_bw()+
    text_theme+
    xlab('Longitude')+
    ylab('Elevation (km)')
  
  p1no = p1 + theme(legend.position =  'none')
  
  # spatial plot with map 
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/calc_pme_trends_across_ato.R")
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/calc_tws_trends_across_eurasia.R")
  #calc_pme_trends_across_ato()
  #calc_tws_trends_across_eurasia()
  
  pmeato = as.data.frame(fread('main_plot_data/fig3/pmeato.csv'))
  pmeio = as.data.frame(fread('output/pme_mmkio/pmemmkio.csv'))
  twsdf = as.data.frame(fread('main_plot_data/fig3/twsdf.csv'))
  twspos_tibet = as.data.frame(
    fread('main_plot_data/fig3/postwsdf_tibet.csv')
  )
  
  pmeatoneg = pmeato[which(pmeato$pmeato<=0),]
  pmeioneg = pmeio[which(pmeio$mmkio <=0),]
  colnames(pmeioneg) = c('long','lat','pmeato')
  pmeatoneg = rbind(pmeatoneg,pmeioneg)
  #twsneg = twsdf
  twsneg = twsdf[which(twsdf$twsmonann<=0),]
  
  pmeatoneg$levels = cut(pmeatoneg$pmeato,
                         breaks = c(seq(-1752,0,200),0))
  twsneg = rbind(twsneg,twspos_tibet)
  twsneg$levels = cut(twsneg$twsmonann,
                      breaks = c(-1620,-1000,-500,-223,-150,-50,
                                 seq(-40,0,10),
                                 seq(10,60,10),100,500,1000))
  
  nclass_pme = length(unique(pmeatoneg$levels))
  nclass_tws = 10
  
  
  fil_pme = colorRampPalette(brewer.pal(9,'Spectral'))(nclass_pme*5)
  fil_tws = colorRampPalette(brewer.pal(9,'Spectral'))(nclass_tws*5)
  
  fil_blue = colorRampPalette(brewer.pal(9,'Spectral')[5:9])(30)
  fil_blue = fil_blue[seq(8,24,2)]
  
  fil_pme = fil_pme[seq(1,nclass_pme*2,2)]
  fil_tws1 = fil_tws[1:4]
  fil_tws = fil_tws[seq(5,nclass_tws*2,2)]
  
  
  #fil_tws = c(fil_tws[1:9],fil_blue)
  
  fil_tws = c('(-1.62e+03,-1e+03]' = fil_tws1[1],
              '(-1e+03,-500]' = fil_tws1[2],
              '(-500,-223]' = fil_tws1[3],
              '(-223,-150]' = fil_tws1[4],
              '(-150,-50]' = fil_tws[2],
              '(-50,-40]' = fil_tws[3],
              '(-40,-30]' = fil_tws[4],
              '(-30,-20]' = fil_tws[5],
              '(-20,-10]' = fil_tws[6],
              '(-10,0]' = fil_tws[7],
              '(0,10]' = fil_blue[1],
              '(10,20]' = fil_blue[2],
              '(20,30]' = fil_blue[3],
              '(30,40]' = fil_blue[4],
              '(40,50]' = fil_blue[5],
              '(50,60]' = fil_blue[6],
              '(60,100]' = fil_blue[7],
              '(100,500]' = fil_blue[8],
              '(500,1e+03]' = fil_blue[9])
  
  
  
  library(ggnewscale)
  tibet = shp_management('tibet')
  world = shp_management('world')
  world = crop(world,extent(-180,180,0,90))
  library(ggmap)
  ex = extent(tibet)
  cen_world = cbind(
    long = (ex[1]+ex[2])/2,
    lat = (ex[3]+ex[4])/2
  )
  #api = read.table('google.api')
  #register_google(api)
  #library(httr)
  #set_config(use_proxy('127.0.0.1',44067))
  p2map = get_googlemap(center = c(cen_world[1],
                                   cen_world[2]),
                        zoom = 3,
                        maptype = 'terrain',
                        color = 'bw',
                        language = 'en-En',
                        style=c(feature=c(
                          "administrative.country",
                          "administrative.city"),
                          element="labels",
                          size = 12,
                          visibility="off"))
  
  # input of currents ocean
  cur_df = as.data.frame(
    fread('/home/share/R_project/xinjiang_vapor/analysis_output/fig4/current_df.csv')
  )
  
  idless50 = which(cur_df$lat <= 50 &
                     cur_df$lat >= 10)
  cur_df = cur_df[idless50,]
  
  idbig1 = which(cur_df$u>0 &
                   cur_df$v >0)
  idbig2 = which(cur_df$u<0 &
                   cur_df$v >0)
  idbig3 = which(cur_df$u>0 &
                   cur_df$v <0)
  
  
  cur_df1 = cur_df[idbig1,]
  cur_df2 = cur_df[idbig2,]
  cur_df3 = cur_df[idbig3,]
  
  cur_df3 = cur_df3[
    which(cur_df3$long > -20 &
            cur_df3$lat <= 40 &
            cur_df3$lat >=30),
  ]
  
  cid1 = seq(1,nrow(cur_df1),40)
  cid2 = seq(1,nrow(cur_df2),300)
  cid3 = seq(1,nrow(cur_df3),30)
  
  cur_df1 = cur_df1[cid1,]
  cur_df2 = cur_df2[cid2,]
  cur_df3 = cur_df3[cid3,]
  
  
  cols_cur = c('#2988AE','#30376E','#4169E1')
  #col_point = '#5192f0'
  #col_point = '#4876FF'
  #col_point = pal_lancet()(9)[1]
  
  pois_oce1 = data.frame(
    x = c(-80,-30,-60,-45,0,0,-18),
    y = c(20,18,40,30,50,27,34)
  )
  pois_oce_pat1 = data.frame(
    x = c(-80,-60,0),
    y = c(20,40,50)
  )
  pois_oce_pat11 = data.frame(
    x = c(-80,-60),
    y = c(20,40)
  )
  pois_oce_pat2 = data.frame(
    x = c(-80,-45,0),
    y = c(20,30,50)
  )
  pois_oce_pat21 = data.frame(
    x = c(-80,-45),
    y = c(20,30)
  )
  pois_oce_pat3 = data.frame(
    x = c(-45,-18,0),
    y = c(30,34,27)
  )
  pois_oce_pat4 = data.frame(
    x = c(-30,-45,-18,0),
    y = c(18,30,34,27)
  )
  pois_oce_pat41 = data.frame(
    x = c(-30,-45),
    y = c(18,30)
  )
  
  
  colb = colorRampPalette(brewer.pal(9,'Blues'))(20)
  
  col_point = '#6495ED'
  #col_point = colb[20]
  #col_point = '#F8A58B'
  #col_point = '#3583AC'
  label_p2 = data.frame(
    x = -175,y = 80,label= '(c)'
  )
  
  intermedia_path = 'whole_time_traj/trajs_intermedia.csv'
  interpath = as.data.frame(fread(intermedia_path))
  
  pa1 = paste0('long',1:19)
  pa2 = paste0('long',20:38)
  
  interpath1 = interpath[which(interpath[,3] %in% pa1),]
  interpath2 = interpath[which(interpath[,3] %in% pa2),]
  
  loc_interpath_last_p <- function(x){
    r1 = unique(x$routeid)
    
    ret1 = 1
    for(i in 1:length(r1)){
      id1 = which(x$routeid == r1[i])
      id1 = id1[(length(id1)-1):length(id1)]
      ret = x[id1,]
      ret1 = rbind(ret1,ret)
    }
    ret1 = ret1[-1,]
    return(ret1)
  }
  path1_end = loc_interpath_last_p(interpath1)
  path2_end = loc_interpath_last_p(interpath2)
  
  
  
  sanjiangyuan = shp_management('sanjiangyuan')
  
  p2 = ggplot()+
    geom_polygon(data = world,
                 aes(x = long,y= lat,group= group),
                 fill = 'transparent',
                 color = 'black',
                 size = 0.5)+
    geom_tile(data =twsneg,
              aes(x = long,y = lat,fill = levels),
              alpha = 1)+
    scale_fill_manual(values = fil_tws,
                      labels = c('(-1000,-500]',
                                 '(-500,-223]',
                                 '(-223,-150]',
                                 '(-150,-50]',
                                 '(-50,-40]',
                                 '(-40,-30]',
                                 '(-30,-20]',
                                 '(-20,-10]',
                                 '(-10,0]',
                                 '(0,10]',
                                 '(10,20]',
                                 '(20,30]',
                                 '(30,40]',
                                 '(40,50]',
                                 '(50,60]'),
                      guide = guide_legend(order = 2,title ='Annual sum of monthly mean TWS (2003-2016)',
                                           title.position = 'top',nrow = 4))+
    geom_vline(xintercept = 68,
               size = 0.5)+
    geom_vline(xintercept = 105,
               size = 0.5)+
    new_scale_fill()+
    geom_tile(data = pmeatoneg,
              aes(x = long,y = lat,fill = levels),
              alpha = 0.8)+
    scale_fill_manual(values =fil_pme,
                      labels = c('(-1750,-1550]',
                                 '(-1550,-1350]',
                                 '(-1350,-1150]',
                                 '(-1150,-952]',
                                 '(-952,-752]',
                                 '(-752,-552]',
                                 '(-552,-352]',
                                 '(-352,-152]',
                                 '(-152,0]'),
                      
                      guide = guide_legend(order = 1,title = 'Annual sum of monthly mean PME in NATO(2003-2016)',
                                           title.position = 'top',
                                           nrow = 4))+
    geom_polygon(data = tibet,
                 aes(x = long,y= lat,group= group),
                 fill = 'transparent',
                 color = 'black')+
    
    #geom_path(data= pois_oce_pat1,
    #          aes(x = x,y = y),
    #          size = 1,
    #          color = col_point,
    #          linetype = 'solid',
    #          arrow=arrow(angle=20,length=unit(0.2,"inches"),
    #                      type="open"),
    #          alpha = 1)+
    #geom_path(data= pois_oce_pat2,
    #          aes(x = x,y = y),
  #          size = 1,
  #          color = col_point,
  #          linetype = 'solid',
  #          arrow=arrow(angle=20,length=unit(0.2,"inches"),
  #                      type="open"),
  #          alpha = 1)+
  #geom_path(data= pois_oce_pat3,
  #          aes(x = x,y = y),
  #          size = 1,
  #          color = col_point,
  #          linetype = 'solid',
  #          arrow=arrow(angle=20,length=unit(0.2,"inches"),
  #                      type="open"),
  #          alpha = 1)+
  #geom_path(data= pois_oce_pat4,
  #          aes(x = x,y = y),
  #          size = 1,
  #          color = col_point,
  #          linetype = 'solid',
  #          arrow=arrow(angle=20,length=unit(0.2,"inches"),
  #                      type="open"),
  #          alpha = 1)+
  #geom_path(data= pois_oce_pat11,
  #          aes(x = x,y = y),
  #          size = 1,
  #          color = col_point,
  #          linetype = 'solid',
  #          arrow=arrow(angle=20,length=unit(0.2,"inches"),
  #                      type="open"),
  #          alpha = 1)+
  #geom_path(data= pois_oce_pat21,
  #          aes(x = x,y = y),
  #          size = 1,
  #          color = col_point,
  #          linetype = 'solid',
  #          arrow=arrow(angle=20,length=unit(0.2,"inches"),
  #                      type="open"),
  #          alpha = 1)+
  #geom_path(data= pois_oce_pat41,
  #          aes(x = x,y = y),
  #          size = 1,
  #          color = col_point,
  #          linetype = 'solid',
  #          arrow=arrow(angle=20,length=unit(0.2,"inches"),
  #                      type="open"),
  #          alpha = 1)+
  geom_segment(data = cur_df1,
               aes(x = long,y = lat,
                   xend = long+u,
                   yend = lat+v),
               arrow = arrow(angle = 20,unit(0.1,'cm'),
                             type = 'open'),
               color = cols_cur[1])+
    geom_segment(data = cur_df2,
                 aes(x = long,y = lat,
                     xend = long+u,
                     yend = lat+v),
                 arrow = arrow(angle = 20,unit(0.1,'cm'),
                               type = 'open'),
                 color = cols_cur[2])+ 
    geom_segment(data = cur_df3,
                 aes(x = long,y = lat,
                     xend = long+u,
                     yend = lat+v),
                 arrow = arrow(angle = 20,unit(0.1,'cm'),
                               type = 'open'),
                 color = cols_cur[3])+ 
    ##geom_point(
    #  data  = pois_oce1,
    #  aes(x = x, y= y),
    #  size = 2.5,
    #  color = col_point,shape = 16
    #)+
    #geom_point(
    #  data  = pois_oce1,
    ##  aes(x = x, y= y),
    #  size = 3.5,
    #  color = col_point,shape = 1
  #)+
  #geom_point(
  #  data  = pois_oce1,
  #  aes(x = x, y= y),
  #  size = 6,
  #  color = col_point,shape = 1
  #)+
  geom_path(data = profiles,
            aes(x =long,y = lat,group = routeid,
                color = region),
            size = 0.75,
            alpha = 1,
            arrow = arrow(20,
                          length = unit(0.2,'inches'),
                          type= 'open'),
            show.legend = F
  )+
    scale_color_manual(values = traj_col)+
    geom_text(data = label_p2,
              aes(x = x,y = y,label = label),
              size = text_size,
              color = 'black')+
    
    theme_bw()+
    text_theme+
    theme(legend.position = 'right')+
    #ylim(0,60)+
    xlab('Longitude')+
    ylab('Latitude')
  
  # enlarge p2
  world_crop = crop(world,
                    extent(-20,105,20,50))
  tibet_river = shp_management('tibet_river')
  country_label <- as.data.frame(
    fread('main_plot_data/fig3/country_label.csv')
  )
  country_label = country_label[-which(country_label$name == 'Hong Kong'|
                                         country_label$name == 'Macau'),]
  country_label$latitude[which(country_label$name=='India')]=
    country_label$latitude[which(country_label$name=='India')]+2
  library(ggrepel)
  
  neg_shps = list.files('shp/cluster_tws_neg_shp_deter',
                        pattern = '*.shp$',full.names =T)
  neg_shps = lapply(neg_shps[1:3],shapefile)
  neg_shps = do.call(bind,neg_shps)
  
  
  label_p3 = data.frame(
    x = 60,y = 44,label = '(d)'
  )
  
  current_set = data.frame(
    x = 85,
    xend = 95,
    y = 42.5
  )
  current_set1 = data.frame(
    x = 94.75,
    xend = 95,
    y = 42.5
  )
  current_label = data.frame(
    x = 105,
    y = 42.5,
    label = 'Intermedia current'
  )
  p3 = ggmap(p2map)+
    geom_path(data = tibet_river,
              aes(x = long,y = lat,group =group),
              color = 'blue',alpha = 0.4)+
    geom_tile(data = twsneg,
              aes(x = long,
                  y = lat,
                  fill = levels),
              alpha = 0.5)+
    scale_fill_manual(values = fil_tws)+
    new_scale_fill()+
    geom_tile(data = pmeatoneg,
              aes(x = long,y = lat,fill = levels),
              alpha = 0.5)+
    scale_fill_manual(values =fil_pme)+
    geom_polygon(data = tibet,
                 aes(x = long,y= lat,group= group),
                 fill = 'transparent',
                 color = 'black')+
    geom_polygon(data = neg_shps,
                 aes(x = long,y= lat,group= group),
                 fill = 'transparent',
                 color = 'black')+
    geom_polygon(data = sanjiangyuan,
                 aes(x = long,y= lat,group= group),
                 fill = 'transparent',
                 color = 'black')+
    
    geom_path(data = interpath1,
              aes(x =long,y = lat,group = routeid),
              color = '#000080',
              size = 1.5,
              alpha = 0.5,
              linetype = 3
    )+
    geom_path(data = path1_end,
              aes(x =long,y = lat,group = routeid),
              color = '#000080',
              size = 1.5,
              alpha = 0.5,
              linetype = 1,
              arrow = arrow(20,
                            length = unit(0.50,'cm'),
                            type= 'open')
    )+
    geom_path(data = interpath2,
              aes(x =long,y = lat,group = routeid),
              color = '#000080',
              size = 1.5,
              alpha = 0.5,
              linetype = 3
    )+
    geom_path(data = path2_end,
              aes(x =long,y = lat,group = routeid),
              color = '#000080',
              size = 1.5,
              alpha = 0.5,
              linetype = 1,
              arrow = arrow(20,
                            length = unit(0.50,'cm'),
                            type= 'open')
    )+
    geom_path(data = profiles,
              aes(x =long,y = lat,group = routeid,
                  color = region),
              size = 1,
              alpha = 1,
              arrow = arrow(20,
                            length = unit(0.5,'cm'),
                            type= 'open')
    )+
    geom_segment(data = current_set,
                 aes(x = x,y = y,xend = xend,
                     yend = y),
                 color = '#000080',
                 size = 1.5,
                 alpha = 0.5,
                 linetype = 3)+
    geom_segment(data = current_set1,
                 aes(x = x,y = y,xend = xend,
                     yend = y),
                 color = '#000080',
                 size = 1.5,
                 alpha = 0.5,
                 linetype = 1,
                 arrow = arrow(20,
                               length = unit(0.50,'cm'),
                               type= 'open'))+
    geom_text_repel(data = current_label,
                    aes(x = x,y = y,label = label),
                    size = text_size,
                    color = 'black',
                    #position = position_dodge2(0.5),
                    bg.color = 'white',
                    force = F,
                    bg.r = 0.15)+
    scale_color_manual(values = traj_col)+
    geom_text_repel(data = country_label,
                    aes(x = longitude,
                        y = latitude,
                        label = name),
                    size = text_size,
                    color = 'black',
                    #position = position_dodge2(0.5),
                    bg.color = 'white',
                    force = F,
                    bg.r = 0.15)+
    geom_text_repel(data = label_p3,
                    aes(x = x,
                        y = y,
                        label = label),
                    size = text_size,
                    color = 'black',
                    #position = position_dodge2(0.5),
                    bg.color = 'white',
                    force = F,
                    bg.r = 0.15)+
    theme_bw()+
    text_theme+
    #xlim(ex[1] -10,ex[2] + 10)+
    #ylim(ex[3] -5,ex[4] + 5)+
    theme(legend.position = 'none')+
    xlab('Longitude')+
    ylab('Latitude')
  
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/import_index_insource_tibet.R")
  # line_ plot
  stand_trend_tws <- function(x){
    
    to_year <- function(x){
      x = c(rep(NA,6),x)
      x = matrix(x,nrow = 12)
      x = apply(x,2,sum,na.rm = T)
      return(x)
    }
    x = (x)/sd(x)
    x = to_year(x)
    x = (x-mean(x))/sd(x)
    return(x)
  }
  stand_trend_snow <- function(x){
    
    to_year <- function(x){
      x = c(rep(NA,6),x)
      x = matrix(x,nrow = 12)
      x = apply(x,2,sum,na.rm = T)
      return(x)
    }
    x = to_year(x)
    x = (x-mean(x))/sd(x)
    return(x)
  }
  stand_trend_pme <- function(x){
    trend_fun<-function(x){
      x = x[1:174]
      x = ts(x,start = c(2003,1),frequency = 12)
      x = decompose(x)$trend
      x = x[-which(is.na(x))]
      x = (x - mean(x))/sd(x)
      return(x)
    }
    to_year <- function(x){
      #x = x[-c(1:6)]
      x = c(rep(NA,6),x)
      x = matrix(x,nrow = 12)
      x = apply(x,2,sum,na.rm = T)
      return(x)
    }
    x = trend_fun(x)
    x = to_year(x)
    x = (x -mean(x))/sd(x)
    return(x)
  }
  
  twsdf = import_index_insource_tibet(var = 'tws_tibet')
  pmeato1 = import_index_insource_tibet(var = 'pme_mean',
                                        region = 'ato')
  
  pmeato3 = pmeato1[,3]
  twsdf = twsdf[,1:2]
  
  twsdf = apply(twsdf,2,stand_trend_tws)
  pmeato = stand_trend_pme(pmeato3)
  
  pos_area = as.data.frame(fread('output/pos_area/pos_area.csv'))
  pos_area = as.numeric(pos_area[,1])
  pos_area1 = pos_area / 10000
  
  pos_area = (pos_area1 - mean(pos_area1))/(sd(pos_area1))
  
  # import snow cover
  snowcover = import_index_insource_tibet('snowcover')
  snowcover = snowcover[,1:2]
  snowcover = apply(snowcover,2,stand_trend_snow)
  
  
  dfbar = data.frame(
    Year = 2003:2016,
    SC_Moun1 = snowcover[,1],
    SC_Moun2 = snowcover[,2]
  )
  
  dfline = data.frame(
    Year= 2003:2016,
    PME_NATO3 = pmeato,
    TWS_Moun1 = twsdf[,1],
    TWS_Moun2 = twsdf[,2],
    PosTWS_Area = pos_area[1:14]
  )
  dfline1 = data.frame(
    Year= 2003:2016,
    #PME_NATO3 = pmeato,
    TWS_Moun1 = twsdf[,1],
    TWS_Moun2 = twsdf[,2],
    PosTWS_Area = pos_area[1:14]
  )
  dflinem = reshape2::melt(dfline1,'Year')
  dfbarm = reshape2::melt(dfbar,'Year')
  
  library(scales)
  col_lin = pal_lancet()(9)
  
  col_lin = colorRampPalette(col_lin)(20)
  show_col(col_lin)
  
  col_lin = c('TWS_Moun1'= col_lin[8],
              'TWS_Moun2'= col_lin[9],
              'PME_NATO3' = col_lin[1],
              'PosTWS_Area' = col_lin[16],
              'SC_Moun1' = col_lin[6],
              'SC_Moun2' = col_lin[7])
  size_lin = c('TWS_Moun1'= 1.5,
               'TWS_Moun2'= 1.5,
               'PME_NATO3' = 1.5,
               'PosTWS_Area' = 1.5,
               'SC_Moun1' = 1.5,
               'SC_Moun2' = 1.5)
  linetype_lin = c('TWS_Moun1'= 1,
                   'TWS_Moun2'= 1,
                   'PME_NATO3' = 1,
                   'PosTWS_Area' = 1,
                   'SC_Moun1' = 1,
                   'SC_Moun2' = 1)
  
  
  
  p_pos_tws1 = cor.test(dfline$PosTWS_Area,dfline$TWS_Moun1)$p.value
  p_pos_tws2 = cor.test(dfline$PosTWS_Area,dfline$TWS_Moun2)$p.value
  p_pos_pme3 = cor.test(dfline$PosTWS_Area,dfline$PME_NATO3)$p.value
  
  cor_pos_tws1 = cor.test(dfline$PosTWS_Area,dfline$TWS_Moun1)$estimate
  cor_pos_tws2 = cor.test(dfline$PosTWS_Area,dfline$TWS_Moun2)$estimate
  cor_pos_pme3 = cor.test(dfline$PosTWS_Area,dfline$PME_NATO3)$estimate
  
  
  dfcor = data.frame(
    x = 2009,
    y = c(2.5,2,1.5),
    label = c(paste0('Cor TWS_Moun1: ',
                     round(cor_pos_tws1,2),' (p=',round(p_pos_tws1,2),')'),
              paste0('Cor TWS_Moun2: ',
                     round(cor_pos_tws2,2),' (p=',round(p_pos_tws2,2),')'),
              paste0('Cor PME_NATO3: ',
                     round(cor_pos_pme3,2),' (p=',round(p_pos_pme3,2),')')),
    variable = unique(dflinem$variable)[c(2,3,1)]
  )
  
  linseg1 = data.frame(
    x = c(2005,2016),
    xend = c(2016,2005),
    y = 2.7
  )
  
  linseg2 = data.frame(
    x = c(2005,2016),
    xend = c(2016,2005),
    y = 2
  )
  
  decpos1 = (dfline$PosTWS_Area[14]-dfline$PosTWS_Area[3])/dfline$PosTWS_Area[3]
  dectws1 = (dfline$TWS_Moun1[14] - dfline$TWS_Moun1[3])/dfline$TWS_Moun1[3]
  dectws2 = (dfline$TWS_Moun2[14] - dfline$TWS_Moun2[3])/dfline$TWS_Moun2[3]
  decpme3 = (dfline$PME_NATO3[14] - dfline$PME_NATO3[3])/dfline$PME_NATO3[3]
  decsno1 = (dfbar$SC_Moun1[14]- dfbar$SC_Moun1[3])/dfbar$SC_Moun1[3]
  decsno2 = (dfbar$SC_Moun2[14]- dfbar$SC_Moun2[3])/dfbar$SC_Moun2[3]
  
  dech = data.frame(
    x = c(2010),
    y = 3+0,
    label = 'Decling period'
  )
  dech2 = data.frame(
    x = -135,
    y = 37,
    label = 'Decling \n period'
  )
  
  decdf1 = data.frame(
    x = 2007,
    y = c(2.4,1.9,1.3)-4,
    label1 = c(decpos1,dectws1,dectws2),
    label2 = c('PosTWS_Area: ','TWS_Moun1: ','TWS_Moun2: ')
  )
  decdf2 = data.frame(
    x = 135,
    y = c(35,20,5),
    label1 = c(decpme3,dectws1,dectws2),
    label2 = c('PME_NATO3\n','TWS_Moun1\n ','TWS_Moun2\n')
  )
  
  decdf1$label1 = paste0(round(decdf1$label1 *100,2),'%')
  decdf2$label1 = paste0(round(decdf2$label1 *100,2),'%')
  
  decdf1$label = paste0(decdf1$label2,decdf1$label1)
  decdf2$label = paste0(decdf2$label2,decdf2$label1)
  
  decdf1$variable = c('PosTWS_Area','TWS_Moun1','TWS_Moun2')
  decdf2$variable = c('PME_NATO3','TWS_Moun1','TWS_Moun2')
  
  
  label_plin = data.frame(
    x = 2003,y = 2.5,label = '(b)'
  )
  
  #dflinebm = rbind(dfbarm,
  #                 dflinem[which(dflinem$variable == 'PosTWS_Area'),])
  dflinebm = dflinem
  dflineadd = dflinem[-which(dflinem$variable == 'PosTWS_Area'),]
  plin1 = ggplot()+
    geom_vline(xintercept = 2005)+
    geom_vline(xintercept = 2016)+
    geom_line(data = dflinebm,aes(x = Year,
                                  y = value ,
                                  color = variable,
                                  size = variable,
                                  linetype = variable))+
    geom_text(data = dech,
              aes(x = x,y = y,label = label),
              color = 'black',
              size = text_size,hjust = 0.5)+
    geom_text(data = decdf1,
              aes(x = x,y = y,label = label,
                  color = variable),
              size = text_size,hjust = 0,
              show.legend = F)+
    geom_segment(data = linseg1,
                 aes(x = x,xend = xend,y = y,yend = y),
                 color = 'black',
                 arrow = arrow(20,
                               length  =unit(0.3,'cm'),
                               type = 'closed'))+
    geom_text(data= label_plin,
              aes(x = x,y = y,label = label),
              size = text_size,
              color = 'black')+
    scale_color_manual(values= col_lin,
                       guide = guide_legend(
                         nrow = 1,title = ''
                       ))+
    scale_size_manual(values = size_lin,
                      guide = guide_legend(
                        nrow = 1,title = ''
                      ))+
    scale_linetype_manual(values = linetype_lin,
                          guide = guide_legend(
                            nrow = 1,title = ''
                          ))+
    theme_bw()+
    text_theme+
    theme(legend.position = 'none')+
    xlab('Year')+
    ylab('Indices')
  
  plin2 = ggplot()+
    geom_vline(xintercept = 2005)+
    geom_vline(xintercept = 2016)+
    geom_line(data = dflineadd,aes(x = Year,
                                   y = value ,
                                   color = variable,
                                   size = variable,
                                   linetype = variable))+
    
    geom_segment(data = linseg2,
                 aes(x = x,xend = xend,y = y,yend = y),
                 color = 'black',
                 arrow = arrow(20,
                               length  =unit(0.3,'cm'),
                               type = 'closed'))+
    scale_color_manual(values= col_lin,
                       guide = guide_legend(
                         nrow = 1,title = ''
                       ))+
    scale_size_manual(values = size_lin,
                      guide = guide_legend(
                        nrow = 1,title = ''
                      ))+
    scale_linetype_manual(values = linetype_lin,
                          guide = guide_legend(
                            nrow = 1,title = ''
                          ))+
    scale_x_continuous(breaks = c(2005,2016))+
    theme_bw()+
    text_theme+
    theme(legend.position = 'none')+
    xlab('Year')+
    ylab('Indices')
  # fig d and fig e
  type = paste0('year',2003:2016)
  twsborder = dir.create('shp/twsneg_border')
  twsborder = paste0('shp/twsneg_border/')
  twsborder = paste0('shp/twsneg_border/',type, '.shp')
  twsborder = lapply(twsborder,
                     shapefile)
  
  #pbor1 = borderdf[which(borderdf$type ==2),]
  
  input_tws0304 = 'main_plot_data/fig3/tws0304.csv'
  input_tws05 = 'main_plot_data/fig3/tws05.csv'
  input_tws0608 = 'main_plot_data/fig3/tws0608.csv'
  input_tws0916 = 'main_plot_data/fig3/tws0916.csv'
  
  tws0304 = as.data.frame(
    fread(input_tws0304)
  )  
  tws05 = as.data.frame(
    fread(input_tws05)
  )  
  tws0608 = as.data.frame(fread(input_tws0608))
  tws0916 = as.data.frame(fread(input_tws0916))
  
  naid = which(is.na(tws0304$tws))
  tws0304 = tws0304[-naid,]
  naid = which(is.na(tws05$tws))
  tws05 = tws05[-naid,]
  naid = which(is.na(tws0608$tws))
  tws0608 = tws0608[-naid,]
  naid = which(is.na(tws0916$tws))
  tws0916 = tws0916[-naid,]
  
  tws0304$levels = cut(tws0304$tws,
                       breaks = c(-1620,-1000,-500,-223,-150,-50,
                                  seq(-40,0,10),
                                  seq(10,60,10),100,500,1000))
  tws05$levels = cut(tws05$tws,
                     breaks = c(-1620,-1000,-500,-223,-150,-50,
                                seq(-40,0,10),
                                seq(10,60,10),100,500,1000))
  tws0608$levels = cut(tws0608$tws,
                       breaks = c(-1620,-1000,-500,-223,-150,-50,
                                  seq(-40,0,10),
                                  seq(10,60,10),100,500,1000))
  tws0916$levels = cut(tws0916$tws,
                       breaks = c(-1620,-1000,-500,-223,-150,-50,
                                  seq(-40,0,10),
                                  seq(10,60,10),100,500,1000))
  
  tws0304$type1 = '(a)'
  tws05$type1 = '(b)'
  tws0608$type1 = '(c)'
  tws0916$type1 ='(d)'
  
  tws_evo = rbind(tws0304,tws05,tws0608,tws0916)
  ex = extent(tibet)
  cen_tibet = cbind(
    long = (ex[1]+ex[2])/2,
    lat = (ex[3]+ex[4])/2
  )
  #api = read.table('google.api')
  #register_google(api)
  #library(httr)
  #set_config(use_proxy('127.0.0.1',44067))
  p2map1 = get_googlemap(center = c(cen_tibet[1],
                                    cen_tibet[2]),
                         zoom = 4,
                         maptype = 'terrain',
                         color = 'bw',
                         language = 'en-En',
                         style=c(feature=c("administrative.country",
                                           "administrative.city"),
                                 element="labels",
                                 visibility="off"))
  
  col_border = pal_lancet(alpha = 0.8)(9)
  col_border = colorRampPalette(col_border)(12)
  
  
  
  twsborder2009 = fortify(twsborder[[7]])
  twsborder2012 = fortify(twsborder[[10]])
  twsborder2014 = fortify(twsborder[[14]])
  
  twsborder2009$type1 = '(d)'
  twsborder2012$type1 = '(d)'
  twsborder2014$type1 = '(d)'
  
  
  
  
  loc_min_neg_points <- function(type){
    types = c('2003-2004',
              '2005',
              '2006-2008',
              '2009-2016')
    tmp = types[type]
    
    if(tmp == types[1]){
      tmp1 = tws0304[which(tws0304$long < 80),]
      tmp2 = tws0304[which(tws0304$long > 80),]
      
      minloc1 = tmp1[which(tmp1$tws == min(tmp1$tws,
                                           na.rm = T)),]
      minloc2 = tmp2[which(tmp2$tws == min(tmp2$tws,
                                           na.rm = T)),]
      minloc = rbind(minloc1,minloc2)
    }else if(tmp == types[2]){
      minloc = tws05[which(tws05$tws == min(tws05$tws,
                                            na.rm = T)),]
    }else if(tmp == types[3]){
      tmp1 = tws0608[which(tws0608$long < 80),]
      tmp2 = tws0608[which(tws0608$long > 80),]
      
      minloc1 = tmp1[which(tmp1$tws == min(tmp1$tws,
                                           na.rm = T)),]
      minloc2 = tmp2[which(tmp2$tws == min(tmp2$tws,
                                           na.rm = T)),]
      minloc = rbind(minloc1,minloc2)
      
    }else if(tmp == types[4]){
      tmp1 = tws0916[which(tws0916$long < 85),]
      tmp2 = tws0916[which(tws0916$long > 85),]
      
      minloc1 = tmp1[which(tmp1$tws == min(tmp1$tws,
                                           na.rm = T)),]
      minloc2 = tmp2[which(tmp2$tws == min(tmp2$tws,
                                           na.rm = T)),]
      minloc = rbind(minloc1,minloc2)
    }
    return(minloc)
  }
  type = 1:4
  
  minlocs = do.call(rbind,lapply(type,loc_min_neg_points))
  minloc_col = pal_lancet(alpha = 0.8)(9)[1]
  
  
  bardf1 = data.frame(
    Year = c(2003,2004),
    y = pos_area1[1:2],
    label = round(pos_area1[1:2])
  )
  bardf2 = data.frame(
    Year = c(2005),
    y = pos_area1[3],
    label = round(pos_area1[3])
  )
  bardf3 = data.frame(
    Year = c(2006:2008),
    y = pos_area1[4:6],
    label = round(pos_area1[4:6])
  )
  bardf4 = data.frame(
    Year = c(2009:2016),
    y = pos_area1[7:14],
    label = round(pos_area1[7:14])
  )
  
  bar_col = colorRampPalette(
    pal_lancet(alpha = 0.8)(9)
  )(14*3)
  bar_col = bar_col[seq(1,14*2,2)]
  bar_col = c('2003'=bar_col[1],
              '2004'= bar_col[2],
              '2005'= bar_col[3],
              '2006'= bar_col[4],
              '2007'= bar_col[5],
              '2008'= bar_col[6],
              '2009'= bar_col[7],
              '2010'= bar_col[8],
              '2011'= bar_col[9],
              '2012'= bar_col[10],
              '2013'= bar_col[11],
              '2014'= bar_col[12],
              '2015'= bar_col[13],
              '2016'= bar_col[14])
  
  theme_bar = theme_void()+
    text_theme+
    theme(
      axis.line.x = element_line(size = 0.5,
                                 color = 'black'),
      axis.text.y = element_blank(),
      axis.title = element_blank(),
      legend.position = 'none'
    )
  
  
  pbar1 = ggplot()+
    geom_bar(data = bardf1,
             aes(x = Year,y = y,
                 fill = factor(Year)),
             stat = 'identity',
             position = position_dodge2(0.5),
             width = 0.5)+
    scale_x_continuous(breaks = c(2003,2004))+
    geom_text_repel(
      data  = bardf1,
      aes(x = Year,y = y+10,label = label),
      size = text_size,
      color = 'black',
      position = position_dodge2(0.5),
      force = F
    )+
    scale_fill_manual(values = bar_col)+
    theme_bar
  
  pbar2 = ggplot()+
    geom_bar(data = bardf2,
             aes(x = Year,y = y,
                 fill = factor(Year)),
             stat = 'identity',
             position = position_dodge2(0.5),
             width = 0.5)+
    scale_x_continuous(breaks = c(2005))+
    geom_text_repel(
      data  = bardf2,
      aes(x = Year,y = y+10,label = label),
      size = text_size,
      color = 'black',
      position = position_dodge2(0.5),
      force = F
    )+
    scale_fill_manual(values = bar_col)+
    theme_bar
  pbar3 = ggplot()+
    geom_bar(data = bardf3,
             aes(x = Year,y = y,
                 fill = factor(Year)),
             stat = 'identity',
             position = position_dodge2(0.5),
             width = 0.5)+
    scale_x_continuous(breaks = c(2006:2008))+
    geom_text_repel(
      data  = bardf3,
      aes(x = Year,y = y+10,label = label),
      size = text_size,
      color = 'black',
      position = position_dodge2(0.5),
      force = F
    )+
    scale_fill_manual(values = bar_col)+
    theme_bar
  
  pbar4 = ggplot()+
    geom_bar(data = bardf4,
             aes(x = Year,y = y,
                 fill = factor(Year)),
             stat = 'identity',
             position = position_dodge2(0.5),
             width = 0.5)+
    scale_x_continuous(breaks = c(2009:2016))+
    geom_text_repel(
      data  = bardf4,
      aes(x = Year,y = y+10,label = label),
      size = text_size,
      color = 'black',
      position = position_dodge2(0.5),
      force = F
    )+
    scale_fill_manual(values = bar_col)+
    theme_bar
  
  label_pside = data.frame(
    x = 70,y = 26,
    label = paste0('(',letters[5:8],') ',
                   c('2003-2004',
                     '2005',
                     '2006-2008',
                     '2009-2016')),
    type1 = paste0('(',letters[1:4],')')
  )
  pside = ggmap(p2map1)+
    geom_path(data = tibet_river,
              aes(x = long,y = lat,group =group),
              color = 'blue',alpha = 0.4)+
    geom_polygon(data = tibet,
                 aes(x= long,y = lat,group = group),
                 color = 'black',
                 fill = 'transparent',
                 size = 0.5)+
    geom_tile(data = tws_evo,
              aes(x = long,y= lat,fill = levels),
              alpha = 0.65)+
    geom_polygon(data = neg_shps,
                 aes(x= long,y = lat,group = group),
                 color = 'black',
                 fill = 'transparent',
                 size = 0.5)+
    scale_fill_manual(values = fil_tws)+
    geom_point(data = minlocs,
               aes(x = long,y = lat),
               color = minloc_col,
               size = 3+3,shape= 1)+
    geom_point(data = minlocs,
               aes(x = long,y = lat),
               color = minloc_col,
               size = 2+1.5,shape= 1)+
    geom_point(data = minlocs,
               aes(x = long,y = lat),
               color = minloc_col,
               size = 2,shape= 16)+
    geom_polygon(data = twsborder2012,
                 aes(x = long,y = lat,group = group),
                 size = 0.5,
                 fill = 'transparent',
                 color = col_border[5])+
    geom_polygon(data =twsborder2014,
                 aes(x = long,y = lat,group = group),
                 size = 0.5,
                 fill = 'transparent',
                 color = col_border[9])+
    geom_text_repel(
      data = label_pside,
      aes(x = x,y = y,label = label),
      size = text_size,
      color = 'black',
      bg.color = 'white',
      force = F,
      bg.r = 0.15,
      hjust = 0
    )+
    
    facet_wrap(~type1,ncol = 1)+
    theme_bw()
  
  ex_tibet = extent(tibet)
  
  pside = pside+
    scale_x_continuous(breaks = seq(70,100,10),
                       labels = paste0(seq(70,100,10),
                                       '°E'),
                       limits = c(ex_tibet[1]-2,ex_tibet[2]+2))+
    scale_y_continuous(breaks = c(30,40),
                       labels = paste0(c(30,40),'°N'),
                       limits = c(ex_tibet[3]-1,ex_tibet[4]+1))+
    text_theme+
    theme(strip.text = element_blank(),
          legend.position = 'none',
          axis.text.y = element_text(angle = 90,hjust = 0.5),
          axis.title.x = element_blank())+
    ylab('Latitude')
  
  
  
  
  library(cowplot)
  
  p2no = p2 + theme(legend.position = 'none',
                    axis.title.x = element_blank(),
                    axis.text.y = element_text(angle = 90,hjust = 0.5)
  )
  
  p2no1 = p2no + 
    new_scale_color()+
    scale_color_manual(values= col_lin,
                       guide = guide_legend(
                         nrow = 1,title = ''
                       ))
  p2no1 = p2no1 + 
    scale_x_continuous(breaks = c(-100,0,100),
                       labels = c(paste0(100,'°W'),
                                  0,
                                  paste0('100','°E')),
                       limits = c(-180,180))+
    scale_y_continuous(breaks = c(0,seq(30,90,30)),
                       labels = c(0,
                                  paste0(seq(30,90,30),'°N')))+
    theme(panel.grid = element_blank())
  
  
  p1no = p1no + 
    theme(
      axis.title.x = element_blank(),
      axis.text.y = element_text(angle = 90,hjust = 0.5),
      panel.grid = element_blank()
    )+
    scale_x_continuous(breaks = c(-100,0,100),
                       labels = c(paste0(100,'°W'),
                                  0,
                                  paste0('100','°E')),
                       limits = c(-180,180))+
    scale_y_continuous(breaks = seq(0,8000,2000),
                       labels = paste0(seq(0,8,2)))
  
  p3 = p3 + 
    scale_x_continuous(breaks = c(60,80,100),
                       labels = paste0(c(60,80,100),
                                       '°E'),
                       limits = c(ex[1] -10,ex[2] + 10))+
    scale_y_continuous(breaks = c(25,35,45),
                       labels = paste0(c(25,35,45),'°N'),
                       limits = c(ex[3] -5,ex[4] + 5))+
    
    theme(
      axis.title.x = element_blank(),
      axis.text.y = element_text(angle = 90,hjust = 0.5)
    )
  
  p1leg = p1no + theme(legend.position = 'bottom')
  p2leg = p2no + theme(legend.position = 'bottom')
  p3leg = p3 + theme(legend.position = 'bottom')
  plinleg1 = plin1 + theme(legend.position = 'bottom')
  plinleg2 = plin2 + theme(legend.position = 'bottom')
  
  library(ggpubr)
  p2leg = as_ggplot(get_legend(p2leg))
  p3leg = as_ggplot(get_legend(p3leg))
  p1leg = as_ggplot(get_legend(p1leg))
  plinleg = as_ggplot(get_legend(plinleg1))
  
  
  #png('main_plot/fig3/fig3_final_leg1.png',
  #    height = 24,
  #    width = 27,
  #    units = 'cm',
  #    res = 800)
  #print(p1leg)
  #dev.off()
  
  ggsave('main_plot/fig3/fig3_final_leg1.svg',
         plot = p1leg,device = 'svg',
         dpi = 800,width = 17.5,height = 16 ,units = 'cm')
  
  #png('main_plot/fig3/fig3_final_leg2.png',
  #    height = 24,
  #    width = 27,
  #    units = 'cm',
  #    res = 800)
  #print(p2leg)
  #dev.off()
  
  ggsave('main_plot/fig3/fig3_final_leg2.svg',
         plot = p2leg,device = 'svg',
         dpi = 800,width = 17.5,height = 16 ,units = 'cm')
  
  
  #png('main_plot/fig3/fig3_final_leg3.png',
  #    height = 24,
  #    width = 27,
  #    units = 'cm',
  #    res = 800)
  #print(p3leg)
  #dev.off()
  
  ggsave('main_plot/fig3/fig3_final_leg3.svg',
         plot = p3leg,device = 'svg',
         dpi = 800,width = 17.5,height = 16 ,units = 'cm')
  
  #png('main_plot/fig3/fig3_final_leg4.png',
  #    height = 24,
  #    width = 27,
  #    units = 'cm',
  #    res = 800)
  #print(plinleg1)
  #dev.off()
  
  ggsave('main_plot/fig3/fig3_final_leg4.svg',
         plot = plinleg1,device = 'svg',
         dpi = 800,width = 17.5,height = 16 ,units = 'cm')
  
  #png('main_plot/fig3/fig3_final_leg5.png',
  #    height = 24,
  #    width = 27,
  #    units = 'cm',
  #    res = 800)
  #print(plinleg2)
  #dev.off()
  
  ggsave('main_plot/fig3/fig3_final_leg5.svg',
         plot = plinleg2,device = 'svg',
         dpi = 800,width = 17.5,height = 16 ,units = 'cm')
  
  
  
  
  p123 = plot_grid(
    p1no,p2no1,p3,
    rel_widths = c(1,1,1),
    rel_heights = c(1.5,2,2),
    ncol = 1,
    align = 'lr',
    axis = 'v'
  )
  
  plin11 = plin1 + 
    ylim(-3,3)+
    theme(axis.title.x = element_blank(),
          axis.text.y = element_text(angle = 90,
                                     hjust = 0.5))+
    theme(panel.grid = element_blank())+
    coord_fixed(ratio = 1.43)
  
  
  
  p234 = plot_grid(
    plin11,pside,
    rel_widths = c(1,1),
    rel_heights = c(1.5,4),
    ncol =1,
    align = 'lr',
    axis = 'v'
  )
  
  pful = plot_grid(
    p123,p234,
    rel_widths = c(1.5,1),
    rel_heights = c(1,1),
    nrow = 1,
    align = 'tb',
    axis = 'h'
  )
  
  library(cowplot)
  
  plin21 = plin2 + theme_void()+theme(
    axis.title = element_blank(),
    #plot.background = element_rect(fill = 'transparent'),
    #panel.background = element_rect(fill = 'transparent'),
    #panel.grid = element_line(color = 'transparent'),
    legend.position = 'none',
    axis.text = element_text(size = 12,color = 'black'))
  
  pful1 = pful
  
  
  #png('main_plot/fig3/fig3_trail_full_final9.png',
  #    height = 24,
  #    width = 27,
  #    units = 'cm',
  #    res = 800)
  #print(pful1)
  #dev.off()
  
  ggsave('main_plot/fig3/fig3_trail_full_final9.svg',
         plot = pful1,device = 'svg',
         dpi = 800,width = 17.5,height = 16 ,units = 'cm')
  
  ggsave('main_plot/fig3/fig3_trail_full_final9.pdf',
         plot = pful1,device = 'pdf',
         dpi = 800,width = 17.5,height = 16 ,units = 'cm')
  
  
  
  # 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
}
fig4_decline_in_fut <-function(
  
){
  
  # import shp 
  source("/home/share/R_project/xinjiang_vapor/shp_management.R")
  tibet_river = shp_management('tibet_river')
  
  
  
  
  a = 'AIzaSyDpo7UFUbwB55ewwUw6Plj7GmvnyDq-eRU'
  write.table(a,'google.api')
  api = read.table('google.api')
  register_google(api)
  
  
  
  ex = extent(tibet)
  
  cen_tibet = cbind(
    long = (ex[1]+ex[2])/2,
    lat = (ex[3]+ex[4])/2
  )
  
  mine_pic = get_map(location = c(cen_tibet[1],
                                  cen_tibet[2]),
                     zoom = 3,
                     source = 'google',
                     maptype = 'terrain',
                     color = 'bw',
                     language = 'en-En')

  mine_pic2 =  ggmap(mine_pic,alpha = 1)+ 
    geom_polygon(data = tibet,
                 aes(x = long,y = lat,group =group),
                 fill = 'transparent',
                 color = 'black',alpha = 0.8)+
    geom_polygon(data = sanjiangyuan,
                 aes(x = long,y = lat,group =group),
                 fill = 'transparent',
                 color = 'black')+
    geom_tile(data = rastdf,
              aes(x = long,y = lat,fill = levels),
              alpha = 0.65)+
    geom_path(data = proj_north_border,
              aes(x = long,y = lat),
              color = 'red',
              size =1)+
    geom_path(data = tibet_river,
                 aes(x = long,y = lat,group =group),
                 fill = 'transparent',
                 color = 'blue',alpha = 0.2)+
   
    scale_fill_manual(values = fils)+
    theme_bw()
    
  ex_tibet = extent(tibet)
  ex_river = extent(tibet_river)
  mine_pic3 = mine_pic2+
    xlim(ex_river[1]-1,ex_river[2]+1)+
    ylim(ex_river[3]-1,ex_river[4]+1)
  
  
  
  
  
}
fig4_decline_in_fut2 <- function(
  
){
  setwd('/media/sdb5/Vapor_projcts/Vapor_tibet')
  source("/home/share/R_project/xinjiang_vapor/shp_management.R")
  detect_changing_points<-function(date,pos_area){
    library(prophet)
    pos245 = data.frame(ds = date,
                        y = pos_area)
    p = prophet(pos245,
                n.changepoints = 2,yearly.seasonality = T,
                changepoint.range = 0.8)
    
    changeloc = which(as.character.Date(date) %in% as.character.Date(p$changepoints))
    return(changeloc)
  }
  
  library(ggmap)
  library(ggplot2)
  library(raster)
  library(data.table)
  
  # import data 
  # plot line group1
  yearsfull = 2020:2098
  input_posrate = 'main_plot_data/fig4/fig4a/pos_rate.csv'
  input_posarea = 'main_plot_data/fig4/fig4a/pos_area.csv'
  
  posarea = as.data.frame(fread(input_posarea))
  
  date = seq(as.Date('2020-01-01'),as.Date('2098-01-01'),
             '1 year')
  changeloc1 = detect_changing_points(date,posarea[,1])
  changeloc2 = detect_changing_points(date,posarea[,2])
  
  changetrend1 = changeloc1
  changetrend2 = changeloc2
 
  
  min_point245 = which(posarea[,1] == min(posarea[,1]))
  min_point585 = which(posarea[,2] == min(posarea[,2]))
  
  changeloc1 = c(1,min_point245,79)
  changeloc2 = c(1,min_point585,79)
  
  dateid = 1:79
  changedf1 = data.frame(
    date = dateid[changeloc1],
    value = posarea[changeloc1,1],
    col = 'SSP245'
  )
  changedf2 = data.frame(
    date = dateid[changeloc2],
    value = posarea[changeloc2,2],
    col = 'SSP585'
  )
  changedf = rbind(changedf1,changedf2)
  
  
  
  posarea = data.frame(date = dateid,
                       posarea)
  posarea = reshape2::melt(posarea,'date')
  colnames(posarea) = c('date','col','value')
  posarea$type = '(a) temporal variation'
  
  # import changingpoints
  
  
  # import historical posarea
  hispos = as.data.frame(fread('output/pos_area/pos_area.csv'))
  hispos = as.numeric(hispos[,1])
  hispos = hispos / 10000
  
  mean_hispos = mean(hispos)
  min_hispos = min(hispos)
  max_hispos = max(hispos)
  
  changeseg = data.frame(
    x = c(1,changetrend1[2]),
    xend = c(changetrend1[1],79),
    y = c(mean_hispos,min_hispos)
  )
  
  # Fig 4b
  years1 = c(2020,2059,2098)
  years2 = c(2020,2095,2098)
  
  input_border245 = paste0('main_plot_data/fig4/fig4bc/border_ssp245_',
                            years1,'.csv')
  input_border585 = paste0('main_plot_data/fig4/fig4bc/border_ssp585_',
                            years2,'.csv')
  
  import_border245 <- function(i){
    tmp = as.data.frame(fread(input_border245[i]))
    tmp$year = years1[i]
    if(i == 1){
      tmp1 = tmp[which(tmp$long<=100),]
      tmp2 = tmp[-which(tmp$long<=100),]
      
      tmp1 = tmp1[order(tmp1$long),]
      tmp2 = tmp2[order(tmp2$lat,decreasing = T),]
      tmp = rbind(tmp1,tmp2)
    }
    tmp$group = paste0('ssp245','_',i)
    
    
    return(tmp)
  }
  import_border585 <- function(i){
    tmp = as.data.frame(fread(input_border585[i]))
    tmp$year = years2[i]
    if(i == 1){
      tmp1 = tmp[which(tmp$long<=100),]
      tmp2 = tmp[-which(tmp$long<=100),]
      
      tmp1 = tmp1[order(tmp1$long),]
      tmp2 = tmp2[order(tmp2$lat,decreasing = T),]
      tmp = rbind(tmp1,tmp2)
    }
    tmp$group = paste0('ssp585','_',i)
    return(tmp)
  }
  i = 1:length(years1)
  bordf245 = do.call(rbind,lapply(i,import_border245))
  bordf585 = do.call(rbind,lapply(i,import_border585))
  
  calc_mid_border245 <- function(i){
    tmp = as.data.frame(fread(input_border245[i]))
    tmpleft = tmp[which(tmp$part == 'left'),]
    tmpright = tmp[which(tmp$part == 'right'),]
    
    tmpleft = tmpleft[order(tmpleft$long,decreasing = F),]
    tmpright = tmpright[order(tmpright$long,decreasing = F),]
    
    midleft = tmpleft[round(nrow(tmpleft)/2),]
    midright = tmpright[round(nrow(tmpright)/2),]
    
    retdf = rbind(midleft,midright)
    retdf$year = years1[i]
    return(retdf)
    
  }
  calc_mid_border585 <- function(i){
    tmp = as.data.frame(fread(input_border585[i]))
    tmpleft = tmp[which(tmp$part == 'left'),]
    tmpright = tmp[which(tmp$part == 'right'),]
    
    tmpleft = tmpleft[order(tmpleft$long,decreasing = F),]
    tmpright = tmpright[order(tmpright$long,decreasing = F),]
    
    midleft = tmpleft[round(nrow(tmpleft)/2),]
    midright = tmpright[round(nrow(tmpright)/2),]
    
    retdf = rbind(midleft,midright)
    retdf$year = years2[i]
    return(retdf)
    
  }
  
  midbor245 = do.call(rbind,lapply(i,calc_mid_border245))
  midbor585 = do.call(rbind,lapply(i,calc_mid_border585))
  
  bordf245$type = 'SSP245'
  bordf585$type = 'SSP585'
  midbor245$type = 'SSP245'
  midbor585$type = 'SSP585'
  
  input_twsneg_multi245= 'main_plot_data/fig4/fig4bc/multi_twsneg245.csv'
  input_twsneg_multi585= 'main_plot_data/fig4/fig4bc/multi_twsneg585.csv'
  
  twsneg245 = as.data.frame(fread(input_twsneg_multi245))
  twsneg585 = as.data.frame(fread(input_twsneg_multi585))
  
  twsneg245$type = 'SSP245'
  twsneg585$type = 'SSP585'
  
  # p1 
  fontsize = 14
  text_theme = theme(
    axis.text = element_text(size = fontsize,color = 'black'),
    axis.title = element_text(size = fontsize,color = 'black'),
    legend.text =  element_text(size = fontsize,color = 'black'),
    legend.title = element_text(size = fontsize,color = 'black')
  )
  library(ggsci)
  library(ggrepel)
  col = pal_lancet(alpha = 0.8)(9)[c(1,7)]
  coltry = pal_locuszoom()(9)[1:4]
  bor_mid_col = rev(coltry)
  bor_mid_col = c('2020' = bor_mid_col[2],
                  '2098' = bor_mid_col[1])
  
  col = c(col,bor_mid_col)
  col = c('SSP245' = col[1],
          'SSP585' = col[2],
          col[3],
          col[4])
  
  changedf$year = yearsfull[c(changeloc1,changeloc2)]
  
  changedf_min = changedf[which(changedf$year == 2059|
                                  changedf$year == 2095),]
  changedf1 = changedf[-which(changedf$year == 2059|
                               changedf$year == 2095),]
  changedf1$col = changedf1$year
 
  textdf = data.frame(
   x =c(16.5,47.5,71),
   y= c(60,175,175),
   label = c('Steadily high period (SHP) \n 2020-2051',
             'Decreasing period (DP) \n 2051-2082',
             'Steadily low \n period (SLP) \n 2082-2098')
  )
  
  label_p1 = data.frame(
    x = 4,
    y = 185,label = '(a)'
  )
  yearsfull = 2020:2098
  
  
  label_hismin = data.frame(
    x = c(47,16),
    y = c(changeseg[,3])+5,
    label = paste0(c('Historical mean: ','Historical min: '),round(changeseg[,3],2))
  )
  
  p1 = ggplot()+
    geom_hline(yintercept = changeseg[1,3],
               color= 'black',
               linetype = 'dashed')+ 
    geom_hline(yintercept =changeseg[2,3],
               color= 'black',
               linetype = 'dashed')+
    geom_vline(xintercept = c(1,changetrend1,79),
               color = 'black')+
    geom_line(data = posarea,
              aes(x = date,y = value,color = factor(col)),
              size = 1.5)+
    geom_point(data = changedf1,
               aes(x = date,y = value,color = factor(col)),
               size = 2.5+2,shape = 16,
               show.legend = F)+
    geom_point(data = changedf1,
               aes(x = date,y = value,color = factor(col)),
               size = 4.5+2,shape = 1,
               show.legend = F)+
    geom_point(data = changedf_min,
               aes(x = date,y = value),
               color = coltry[1],
               size = 2.5+2,shape = 16,
               show.legend = F)+
    geom_point(data = changedf_min,
               aes(x = date,y = value),
               color = coltry[1],
               size = 4.5+2,shape = 1,
               show.legend = F)+
    geom_label_repel(data = changedf[c(2,5),],
                     aes(x = date,y = value,
                         label = year),
                     size = 5,
                     color = 'black',
                     min.segment.length = unit(2,'cm'))+
    geom_text(data = textdf,
              aes(x = x,y = y,label = label),
              size = 3.8,
              color = 'black',face = 'bold')+
    geom_text(data = label_p1,
              aes(x = x,y = y,label = label),
              size = 5,
              color = 'black',face = 'bold')+
    geom_text(data = label_hismin,
              aes(x = x,y = y,label = label),
              size = 3.8,
              color = 'black',face = 'bold')+
    scale_color_manual(values = col,
                       guide = guide_legend(nrow = 1))+
    theme_bw()+
    text_theme+
    theme(legend.position = 'none')+
    scale_x_continuous(breaks = seq(1,79,20),
                       labels = yearsfull[seq(1,79,20)])+
    xlab('')+
    ylab('Positive TWS area (10 km )')
  p1
  # p2
  # import tibet
  tibet = shp_management('tibet')
  tibet_river = shp_management('tibet_river')
  sanjiangyuan = shp_management('sanjiangyuan')
  sanjiangyuan = spTransform(sanjiangyuan,
                             crs(tibet))
  
  neg_shps = list.files('shp/cluster_tws_neg_shp_deter',
                        pattern = '*.shp$',full.names =T)
  neg_shps = lapply(neg_shps[1:2],shapefile)
  neg_shps = do.call(bind,neg_shps)
  
  
  #a = 'AIzaSyDpo7UFUbwB55ewwUw6Plj7GmvnyDq-eRU'
  #write.table(a,'google.api')
  #api = read.table('google.api')
  #register_google(api)
  ex = extent(tibet)
  cen_tibet = cbind(
    long = (ex[1]+ex[2])/2,
    lat = (ex[3]+ex[4])/2
  )
  cen245 = as.data.frame(fread('output/ret_centroid/ret_cen1.csv'))
  cen585 = as.data.frame(
    fread('output/ret_centroid/ret_cen2.csv')
  )
  
  cen245 = cen245[,1:2]
  cen585 = cen585[,1:2]
  
  colnames(cen245) = c('long','lat')
  colnames(cen585) = c('long','lat')
  
  cen245$type = 'SSP245'
  cen585$type = 'SSP585'
  
  cens = rbind(cen245,cen585)
  
  p2map = get_googlemap(center = c(cen_tibet[1],
                                   cen_tibet[2]),
                        zoom = 3,
                        maptype = 'terrain',
                        color = 'bw',
                        language = 'en-En',
                        style=c(feature=c("administrative.country",
                                          "administrative.city"),
                                element="labels",
                                visibility="off"))
  
  colnames(twsneg245) = c('long','lat',
                          'type','value','level')
  colnames(twsneg585) = c('long','lat',
                            'type','value','level')
  twsneg585$type = 'SSP585'
  twsneg245$type = 'SSP245'
  
  twsneg = rbind(twsneg245,twsneg585)
  twsneg$level = cut(twsneg$value,
                     breaks = seq(-12,0,1))
  nclass = length(unique(twsneg$level))
  library(RColorBrewer)
  fils = colorRampPalette(brewer.pal(9,'Spectral'))(nclass+1)
  fils = fils[1:nclass]
  
  cols_border = pal_npg()(9)[3]
  
  
  bordf245_outter = bordf245[which(bordf245$year == 2059),]
  bordf585_outter = bordf585[which(bordf585$year == 2095),]
  
  bordf245_in = bordf245[-which(bordf245$year == 2059),]
  bordf585_in = bordf585[-which(bordf585$year == 2095),]
  
  bordf = rbind(bordf245_in,
                bordf585_in)
  
  midbor = rbind(
    midbor245,
    midbor585
  )
  
  
  midbor245_outter = midbor245[3:4,]
  midbor585_outter = midbor585[3:4,]
  
  northcen1 = data.frame(
    long= cens[1,1],
    lat = cens[1,2],
    part = 'left',
    year = 2059,
    type = 'SSP245'
  )
  northcen2 = data.frame(
    long= cens[2,1],
    lat = cens[2,2],
    part = 'right',
    year = 2059,
    type = 'SSP245'
  )
  northcen3 = data.frame(
    long= cens[3,1],
    lat = cens[3,2],
    part = 'left',
    year = 2095,
    type = 'SSP585'
  )
  northcen4 = data.frame(
    long= cens[4,1],
    lat = cens[4,2],
    part = 'right',
    year = 2095,
    type = 'SSP585'
  )
  
  
  north1 = rbind(northcen1,
                 midbor245_outter[1,])
  north2 = rbind(northcen2,
                 midbor245_outter[2,])
  north3 = rbind(northcen3,
                 midbor585_outter[1,])
  north4 = rbind(northcen4,
                 midbor585_outter[2,])
  north1$group = c(1)
  north2$group = c(2)
  north3$group = 3
  north4$group = 4
  
  northpath = rbind(north1,north2,north3,north4)
  
  coltry = pal_locuszoom()(9)[1:4]
  bor_mid_col = rev(coltry)
  bor_mid_col = c('2020' = bor_mid_col[2],
                  '2098' = bor_mid_col[1])
  
  cen245 = as.data.frame(fread('output/ret_centroid/ret_cen1.csv'))
  cen585 = as.data.frame(
    fread('output/ret_centroid/ret_cen2.csv')
  )
  
  cen245 = cen245[,1:2]
  cen585 = cen585[,1:2]
  
  colnames(cen245) = c('long','lat')
  colnames(cen585) = c('long','lat')
  
  cen245$type = 'SSP245'
  cen585$type = 'SSP585'
  
  cens = rbind(cen245,cen585)
  
  label_p2 = data.frame(
    x = 103,
    y = 40,
    label = c('(c) SSP245','(e) SSP585'),
    type = c('SSP245','SSP585')
  )
  
  country_label <- as.data.frame(
    fread('main_plot_data/fig3/country_label.csv')
  )
  country_label = country_label[-which(country_label$name == 'Hong Kong'|
                                         country_label$name == 'Macau'),]
  country_label$latitude[which(country_label$name=='India')]=
    country_label$latitude[which(country_label$name=='India')]+2
  
  p2 = ggmap(p2map,alpha = 1)+
    
    geom_polygon(data = tibet,
                 aes(x = long,y = lat,group =group),
                 fill = 'transparent',
                 color = 'black')+
    geom_polygon(data = neg_shps,
                 aes(x = long,y = lat,group =group),
                 fill = 'transparent',
                 color = 'black')+
    
    geom_polygon(data = sanjiangyuan,
                 aes(x = long,y = lat,group =group),
                 fill = 'transparent',
                 color = 'black',
                 alpha = 0.5)+
    geom_tile(data = twsneg,
              aes(x = long,y = lat,fill = level),
              alpha = 0.7)+
    geom_path(data = bordf,
              aes(x = long,y = lat,group = group,
                  color = factor(year)),
              #color = cols_border,
              size =0.8)+
    geom_path(data = bordf245_outter,
              aes(x = long,y = lat,group = group),
              color = coltry[1],
              size = 1)+
    geom_path(data = bordf585_outter,
              aes(x = long,y = lat,group = group),
              color = coltry[1],
              size= 1)+
    geom_path(data = northpath,
              aes(x = long,y= lat,group =group),
              color = col[1],
              size = 1.5,
              arrow = arrow(20,unit(0.5,'cm')))+
    geom_point(data = cens,
               aes(x = long,y = lat),
               color = col[1],
               size = 3.5, shape = 16)+
    geom_point(data = cens,
               aes(x = long,y = lat),
               color = col[1],
               size = 4.5+2,shape = 1)+
    geom_point(data = cens,
               aes(x = long,y = lat),
               color = col[1],
               size = 4.5+2+3,shape = 1)+
    geom_path(data = tibet_river,
              aes(x = long,y = lat,group =group),
              color = 'blue',alpha = 0.2)+
    geom_text_repel(data = country_label,
                    aes(x = longitude,
                        y = latitude,
                        label = name),
                    size = 4,
                    color = 'black',
                    #position = position_dodge2(0.5),
                    bg.color = 'white',
                    force = F,
                    bg.r = 0.15)+
    geom_text_repel(data = label_p2,
                    aes(x = x,
                        y = y,
                        label = label),
                    size = 5,
                    color = 'black',
                    #position = position_dodge2(0.5),
                    bg.color = 'white',
                    force = F,
                    bg.r = 0.15)+
    scale_color_manual(values = bor_mid_col)+
    scale_fill_manual(values = fils)+
    guides(fill = guide_legend(nrow = 2,
                               title = 'Annual sum of monthly mean TWS in 2020-2098',
                               title.position = 'top'))+
    theme_bw()+
    facet_wrap(~type,nrow = 2)
  
  ex_river = extent(tibet_river)
  ex_tibet = extent(tibet)
  p2 = p2 +
    scale_x_continuous(breaks = seq(70,100,10),
                       labels = paste0(seq(70,100,10),
                                       '°E'),
                       limits = c(ex_tibet[1]-1,ex_tibet[2]+1))+
    scale_y_continuous(breaks = seq(25,40,5),
                       labels = paste0(seq(25,40,5),
                                       '°N'),
                       limits = c(ex_tibet[3]-1,ex_tibet[4]+1))
    
  p21 = p2+ theme(legend.position = 'none',
                  strip.text = element_blank())+
    text_theme+
    theme(panel.grid = element_blank())+
    theme(axis.text.y = element_text(angle = 90,
                                     hjust = 0.5))+
    xlab('Longitude')+
    ylab('Latitude')
  
  library(cowplot)
 
  
  # import the 
  
  changeloc1 = c(1,min_point245,79)
  changeloc2 = c(1,min_point585,79)
  
  pos_rate = as.data.frame(
    fread(input_posrate)
  )
  
  pointdf = data.frame(
    x = c(rep(1,3),rep(2.5,3)),
    y = c(pos_rate[changeloc1,1],pos_rate[changeloc2,2]),
    col = changedf$year
  )
  
  segment_h1 = data.frame(
    x = rep(0.5,3),
    xend = rep(1.5,3),
    y = rep(pos_rate[changeloc1,1],each = 1) 
  )
  segment_h1$x[3] = 1
  segment_h1$xend[1] = 1
  
  segment_h2 = data.frame(
    x = rep(1.5,3)+0.5,
    xend = rep(2.5,3)+0.5,
    y = rep(pos_rate[changeloc2,2],each = 1) 
  )
  segment_h2$x[3] = 2.5
  segment_h2$xend[1] = 2.5
  seg_h = rbind(segment_h1,segment_h2)
  
  
  arrow1 = data.frame(
    x = 0.75,
    y = pos_rate[changeloc1[1],1],
    yend = pos_rate[changeloc1[2],1]
  )
  
  arrow2 = data.frame(
    x = 1.25,
    y = pos_rate[changeloc1[2],1],
    yend = pos_rate[changeloc1[3],1]
  )
  
  arrow3 = data.frame(
    x = 1.75+0.5,
    y = pos_rate[changeloc2[1],2],
    yend = pos_rate[changeloc2[2],2]
  )
  
  arrow4 = data.frame(
    x = 2.25+0.5,
    y = pos_rate[changeloc2[2],2],
    yend = pos_rate[changeloc2[3],2]
  )
  
  label1 = data.frame(
    x = 0.7,
    y = (pos_rate[changeloc1[1],1] -
           pos_rate[changeloc1[2],1]),
    y1 =  (pos_rate[changeloc1[1],1] +
             pos_rate[changeloc1[2],1])/2
  )
  label1$label = paste0('-',round(label1$y),'%')
  
  label2 = data.frame(
    x = 1.3,
    y = (pos_rate[changeloc1[3],1] -
           pos_rate[changeloc1[2],1]),
    y1 = (pos_rate[changeloc1[3],1] +
           pos_rate[changeloc1[2],1])/2
  )
  label2$label = paste0('+',round(label2$y),'%')
  
  label3 = data.frame(
    x = 1.7+0.5,
    y = (pos_rate[changeloc2[1],2] -
           pos_rate[changeloc2[2],2]),
    y1 = (pos_rate[changeloc2[1],2] +
           pos_rate[changeloc2[2],2])/2
  )
  label3$label = paste0('-',round(label3$y),'%')
  
  label4 = data.frame(
    x = 2.3+0.5,
    y = (pos_rate[changeloc2[3],2] -
           pos_rate[changeloc2[2],2]),
    y1 = (pos_rate[changeloc2[3],2] +
            pos_rate[changeloc2[2],2])/2
  )
  label4$label = paste0('+',round(label4$y),'%')
  
  
  label13 = rbind(label1,label3)
  label24 = rbind(label2,label4)
  
  pointmindf= pointdf[which(pointdf$col==2059|
                              pointdf$col==2095),]
  pointdf1 = pointdf[-which(pointdf$col==2059|
                            pointdf$col==2095),]
  
  labelpoints = data.frame(
    x  = c(0.5,1,1.25,2.85,1.75,2.85),
    y = pointdf$y,
    label = paste0(round(pointdf$y),'%')
  )
  labelpoints$y[1] = labelpoints$y[1] + 1.25
  labelpoints$y[2] = labelpoints$y[2] - 4
  labelpoints$y[3] = labelpoints$y[3] + 4
  labelpoints$y[6] = labelpoints$y[6] + 1.25
  
  label_point = data.frame(
    x = 0.25,y= 50,label = '(b)'
  )
  ppoint = ggplot()+
    geom_segment(data = seg_h,
                 aes(x = x,xend = xend,y = y,yend = y),
                 color = 'black',
                 size= 0.5)+
    geom_point(data = pointdf1,
               aes(x = x,y = y,col = factor(col)),
               size = 2.5+2,shape = 16)+
    geom_point(data = pointdf1,
               aes(x = x,y = y,col = factor(col)),
               size = 4.5+2,shape = 1)+
    geom_point(data = pointmindf,
               aes(x = x,y = y),
               color = coltry[1],
               size = 2.5+2,shape = 16)+
    geom_point(data = pointmindf,
               aes(x = x,y = y),
               color = coltry[1],
               size = 4.5+2,shape = 1)+
    geom_segment(data = arrow1,
                 aes(x = x,xend = x,
                     y = y,yend = yend),
                 arrow = arrow(angle = 20,length = unit(0.5,'cm')))+
    geom_segment(data = arrow2,
                 aes(x = x,xend = x,
                     y = y,yend = yend),
                 arrow = arrow(angle = 20,length = unit(0.5,'cm')))+
    geom_segment(data = arrow3,
                 aes(x = x,xend = x,
                     y = y,yend = yend),
                 arrow = arrow(angle = 20,length = unit(0.5,'cm')))+
    geom_segment(data = arrow4,
                 aes(x = x,xend = x,
                     y = y,yend = yend),
                 arrow = arrow(angle = 20,length = unit(0.5,'cm')))+
    geom_text(data = label13,
              aes(x = x-0.25,y = y1,label = label),
              color = 'black',
              size = 5,
              angle = 90,
              hjust = 0.5)+
    geom_text(data = label24,
              aes(x = x+0.35,y = y1,label = label),
              color = 'black',
              size = 5,
              angle = 270,
              hjust = 0.5)+
    geom_text(data = labelpoints,
              aes(x = x,y = y,label = label),
              color = 'black',
              size = 5,
              hjust = 0.5)+
    geom_text(data = label_point,
              aes(x = x,y = y,label = label),
              color = 'black',
              size = 5,
              hjust = 0.5)+
    scale_x_continuous(breaks = c(1,2.5),
                       labels = c('SSP245','SSP585'),
                       limits = c(0,3.5))+
    scale_color_manual(values = bor_mid_col)+
    theme_bw()+
    text_theme+
    ylab('Positive TWS area (%)')
  
  # import bardf
  san245 = 'main_plot_data/fig4/fig4bc/sanjiangmin245.csv'
  san585 = 'main_plot_data/fig4/fig4bc/sanjiangmin585.csv'
  san245 = as.data.frame(fread(san245))
  san585 = as.data.frame(fread(san585))
  
  areasanjiang = area(sanjiangyuan)/10^10
  
  san245 = san245/areasanjiang *100
  san585 = san585 /areasanjiang * 100
  
  sandf1 = data.frame(
    x = c(1,2,3),
    year = yearsfull[changeloc1],
    y = san245$sanjiang,
    type = 'SSP245'
  )
  sandf2 = data.frame(
    x = c(1,2,3),
    year = yearsfull[changeloc2],
    y = san585$sanjiang,
    type = 'SSP585'
  )
  
  sandf = rbind(sandf1,sandf2)
  
  sandmin = sandf[which(sandf$year==2059|
                          sandf$year==2095),]
  sandf1 = sandf[-which(sandf$year==2059|
                         sandf$year==2095),]
  
  labeldf_san = data.frame(
    x = as.character(sandf$year),
    y = sandf$y-10,
    label = paste0(round(sandf$y),'%'),
    type = sandf$type
  )
  label_pbar = data.frame(
    x = c(0.75,0.75),
    y = 65,
    label = c('(d) SSP245','(f) SSP585'),
    type = c('SSP245','SSP585')
  )
  
  pbar = ggplot()+
    geom_bar(data = sandf1,
             aes(x = as.character(year),y = y,fill = factor(year)),
             stat = 'identity',
             position = position_dodge2(0.5),
             width = 0.5)+
    geom_bar(data = sandmin,
             aes(x = as.character(year),y = y),
             fill = coltry[1],
             stat = 'identity',
             position = position_dodge2(0.5),
             width = 0.5)+
    facet_wrap(~type,nrow = 2,
               scales = 'free_y')+
    scale_fill_manual(values = bor_mid_col)+
    geom_text_repel(data = labeldf_san,
              aes(x = x,y = y,label = label),
              size = 5,
              color = 'black',
              position = position_dodge2(0.5),
              bg.color = 'white',
              force = F,
              bg.r = 0.15)+
    geom_text(data = label_pbar,
                    aes(x = x,y = y,label = label),
                    size = 5,
                    color = 'black')+
    theme_bw()+
    text_theme+
    coord_flip()+
    ylab('Negative TWS area in SJY (%)')+
    xlab('Year')+
    theme(axis.text.y = element_text(angle = 90,hjust = 0.5),
          strip.text = element_blank())
  
 
  ppoint1 = ppoint + 
    theme(legend.position = 'none',
          axis.title.x = element_blank(),
          axis.text.y = element_text(angle = 90,
                                     hjust = 0.5),
          panel.grid = element_blank())
  
  pbar1 = pbar + 
    theme(legend.position = 'none',
          panel.grid = element_blank())
  
  p34 = plot_grid(
    ppoint1,
    pbar1,
    nrow = 2,
    rel_heights = c(1,2),
    rel_widths = c(1,1),
    align = 'v',
    axis = 'lr'
  )
  
  p1c = p1 +
    coord_fixed(ratio = 0.262)+
    theme(
      axis.title.x = element_blank(),
      panel.grid = element_blank()
    )
  
  p12 = plot_grid(
    p1c,p21,ncol = 1,
    rel_heights = c(1,2),
    rel_widths = c(1,1),
    align = 'v',
    axis = 'lr'
  )
  
  dir.create('main_plot/fig4')
  
  p1234  = plot_grid(
    p12,
    p34,
    nrow = 1,
    rel_heights = c(1,1),
    rel_widths = c(3,1.5),
    align = 'h',
    axis = 'tb'
  )
  
  png('main_plot/fig4/fig4_final4.png',
      height = 25,
      width = 28,
      units = 'cm',
      res = 800)
  print(p1234)
  dev.off()
  
  p1leg = p1+
    theme(legend.position = 'bottom')
  p2leg = p21 + 
    theme(legend.position = 'bottom')
  p3leg = ppoint+
    theme(legend.position = 'bottom')
  pbarleg = pbar+
    theme(legend.position = 'bottom')
  
  library(ggpubr)
  p1leg1 = as_ggplot(
    get_legend(p1leg)
  )
  p2leg1 =as_ggplot(
    get_legend(p2leg)
  )
  p3leg1 =as_ggplot(
    get_legend(p3leg)
  )
  pbarleg1 =as_ggplot(
    get_legend(pbarleg)
  )
  
  png('main_plot/fig4/fig4_final1_leg1.png',
      height = 25,
      width = 28,
      units = 'cm',
      res = 800)
  print(p1leg1)
  dev.off()
  
  png('main_plot/fig4/fig4_final1_leg2.png',
      height = 25,
      width = 28,
      units = 'cm',
      res = 800)
  print(p2leg1)
  dev.off()
  
  png('main_plot/fig4/fig4_final1_leg3.png',
      height = 25,
      width = 28,
      units = 'cm',
      res = 800)
  print(p3leg1)
  dev.off()
  
  png('main_plot/fig4/fig4_final1_leg4.png',
      height = 25,
      width = 28,
      units = 'cm',
      res = 800)
  print(pbarleg1)
  dev.off()
}
fig4_decline_in_fut3 <- function(
  
){
  setwd('/media/sdb5/Vapor_projcts/Vapor_tibet')
  source("/home/share/R_project/xinjiang_vapor/shp_management.R")
  detect_changing_points<-function(date,pos_area){
    library(prophet)
    pos245 = data.frame(ds = date,
                        y = pos_area)
    p = prophet(pos245,
                n.changepoints = 2,yearly.seasonality = T,
                changepoint.range = 0.8)
    
    changeloc = which(as.character.Date(date) %in% as.character.Date(p$changepoints))
    return(changeloc)
  }
  
  library(ggmap)
  library(ggplot2)
  library(raster)
  library(data.table)
  
  # import data 
  # plot line group1
  yearsfull = 2020:2098
  input_posrate = 'main_plot_data/fig4/fig4a/pos_rate.csv'
  input_posarea = 'main_plot_data/fig4/fig4a/pos_area.csv'
  input_posmin = 'output/future_pos_tws_area_based_snow_tws/pos_area_allcalc_min.csv'
  input_posmax = 'output/future_pos_tws_area_based_snow_tws/pos_area_allcalc_max.csv'
  
  
  posarea = as.data.frame(fread(input_posarea))
  posmin = as.data.frame(fread(input_posmin))
  posmax = as.data.frame(fread(input_posmax))
  
  colnames(posmin) = colnames(posarea)
  colnames(posmax) = colnames(posarea)
  
  date = seq(as.Date('2020-01-01'),as.Date('2098-01-01'),
             '1 year')
  changeloc1 = detect_changing_points(date,posarea[,1])
  changeloc2 = detect_changing_points(date,posarea[,2])
  
  changetrend1 = changeloc1
  changetrend2 = changeloc2
  
  
  min_point245 = which(posarea[,1] == min(posarea[,1]))
  min_point585 = which(posarea[,2] == min(posarea[,2]))
  
  changeloc1 = c(1,min_point245,79)
  changeloc2 = c(1,min_point585,79)
  
  dateid = 1:79
  changedf1 = data.frame(
    date = dateid[changeloc1],
    value = posarea[changeloc1,1],
    col = 'SSP245'
  )
  changedf2 = data.frame(
    date = dateid[changeloc2],
    value = posarea[changeloc2,2],
    col = 'SSP585'
  )
  changedf = rbind(changedf1,changedf2)
  
  
  
  posarea = data.frame(date = dateid,
                       posarea)
  posmin = data.frame(date= dateid,
                      posmin[3:81,])
  posmax = data.frame(date = dateid,
                      posmax[3:81,])
  
  posarea = reshape2::melt(posarea,'date')
  posmin = reshape2::melt(posmin,'date')
  posmax =reshape2::melt(posmax,'date')
  
  colnames(posarea) = c('date','col','value')
  colnames(posmin) = c('date','col','min')
  posmin$max = posmax$value
  
  posarea$type = '(a) temporal variation'
  posmin$type = '(a) temporal variation'
  # import changingpoints
  
  
  # import historical posarea
  hispos = as.data.frame(fread('output/pos_area/pos_area.csv'))
  hispos = as.numeric(hispos[,1])
  hispos = hispos / 10000
  
  mean_hispos = mean(hispos)
  min_hispos = min(hispos)
  max_hispos = max(hispos)
  
  changeseg = data.frame(
    x = c(1,changetrend1[2]),
    xend = c(changetrend1[1],79),
    y = c(mean_hispos,min_hispos)
  )
  
  # Fig 4b
  years1 = c(2020,2093,2098)
  years2 = c(2020,2097,2098)
  
  input_border245 = paste0('main_plot_data/fig4/fig4bc/border_ssp245_',
                           years1,'.csv')
  input_border585 = paste0('main_plot_data/fig4/fig4bc/border_ssp585_',
                           years2,'.csv')
  
  import_border245 <- function(i){
    tmp = as.data.frame(fread(input_border245[i]))
    tmp$year = years1[i]
    
    tmp$group = paste0('ssp245','_',i)
    
    
    return(tmp)
  }
  import_border585 <- function(i){
    tmp = as.data.frame(fread(input_border585[i]))
    tmp$year = years2[i]
    
    tmp$group = paste0('ssp585','_',i)
    return(tmp)
  }
  i = 1:length(years1)
  bordf245 = do.call(rbind,lapply(i,import_border245))
  bordf585 = do.call(rbind,lapply(i,import_border585))
  
  calc_mid_border245 <- function(i){
    tmp = as.data.frame(fread(input_border245[i]))
    tmpleft = tmp[which(tmp$part == 'left'),]
    tmpright = tmp[which(tmp$part == 'right'),]
    
    tmpleft = tmpleft[order(tmpleft$long,decreasing = F),]
    tmpright = tmpright[order(tmpright$long,decreasing = F),]
    
    midleft = tmpleft[round(nrow(tmpleft)/2),]
    midright = tmpright[round(nrow(tmpright)/2),]
    
    retdf = rbind(midleft,midright)
    retdf$year = years1[i]
    return(retdf)
    
  }
  calc_mid_border585 <- function(i){
    tmp = as.data.frame(fread(input_border585[i]))
    tmpleft = tmp[which(tmp$part == 'left'),]
    tmpright = tmp[which(tmp$part == 'right'),]
    
    tmpleft = tmpleft[order(tmpleft$long,decreasing = F),]
    tmpright = tmpright[order(tmpright$long,decreasing = F),]
    
    midleft = tmpleft[round(nrow(tmpleft)/2),]
    midright = tmpright[round(nrow(tmpright)/2),]
    
    retdf = rbind(midleft,midright)
    retdf$year = years2[i]
    return(retdf)
    
  }
  
  midbor245 = do.call(rbind,lapply(i,calc_mid_border245))
  midbor585 = do.call(rbind,lapply(i,calc_mid_border585))
  
  bordf245$type = 'SSP245'
  bordf585$type = 'SSP585'
  midbor245$type = 'SSP245'
  midbor585$type = 'SSP585'
  
  input_twsneg_multi245= 'main_plot_data/fig4/fig4bc/multi_twsneg245.csv'
  input_twsneg_multi585= 'main_plot_data/fig4/fig4bc/multi_twsneg585.csv'
  
  twsneg245 = as.data.frame(fread(input_twsneg_multi245))
  twsneg585 = as.data.frame(fread(input_twsneg_multi585))
  
  twsneg245$type = 'SSP245'
  twsneg585$type = 'SSP585'
  
  # p1 
  fontsize = 14
  text_theme = theme(
    axis.text = element_text(size = fontsize,color = 'black'),
    axis.title = element_text(size = fontsize,color = 'black'),
    legend.text =  element_text(size = fontsize,color = 'black'),
    legend.title = element_text(size = fontsize,color = 'black')
  )
  library(ggsci)
  library(ggrepel)
  col = pal_lancet(alpha = 0.8)(9)[c(1,7)]
  coltry = pal_locuszoom()(9)[1:4]
  bor_mid_col = rev(coltry)
  bor_mid_col = c('2020' = bor_mid_col[2],
                  '2098' = bor_mid_col[1])
  
  col = c(col,bor_mid_col)
  col = c('SSP245' = col[1],
          'SSP585' = col[2],
          col[3],
          col[4])
  
  changedf$year = yearsfull[c(changeloc1,changeloc2)]
  
  changedf_min = changedf[which(changedf$year == 2093|
                                  changedf$year == 2097),]
  changedf1 = changedf[-which(changedf$year == 2093|
                                changedf$year == 2097),]
  changedf1$col = changedf1$year
  
  textdf = data.frame(
    x =c(16,47.5,71),
    y= c(30,230,220),
    label = c('Steadily high period (SHP) \n 2020-2051',
              'Decreasing period (DP) \n 2051-2082',
              'Steadily low \n period (SLP) \n 2082-2098')
  )
  
  label_p1 = data.frame(
    x = 4,
    y = 240,label = '(a)'
  )
  yearsfull = 2020:2098
  
  
  label_hismin = data.frame(
    x = c(47.5,16),
    y = c(changeseg[,3][1]+50,changeseg[,3][2]+10),
    label = paste0(c('Historical mean: ','Historical min: '),round(changeseg[,3],2))
  )
  
  p1 = ggplot()+
    geom_ribbon(data = posmin,
              aes(x = date,ymin = min,ymax = max,fill = factor(col)),
              alpha = 0.3,
              size = 1.5)+
    geom_hline(yintercept = changeseg[1,3],
               color= 'black',
               linetype = 'dashed')+ 
    geom_hline(yintercept =changeseg[2,3],
               color= 'black',
               linetype = 'dashed')+
    geom_vline(xintercept = c(1,changetrend1,79),
               color = 'black')+
    geom_line(data = posarea,
              aes(x = date,y = value,color = factor(col)),
              size = 1.5)+
    geom_point(data = changedf1,
               aes(x = date,y = value,color = factor(col)),
               size = 2.5+2,shape = 16,
               show.legend = F)+
    geom_point(data = changedf1,
               aes(x = date,y = value,color = factor(col)),
               size = 4.5+2,shape = 1,
               show.legend = F)+
    geom_point(data = changedf_min,
               aes(x = date,y = value),
               color = coltry[1],
               size = 2.5+2,shape = 16,
               show.legend = F)+
    geom_point(data = changedf_min,
               aes(x = date,y = value),
               color = coltry[1],
               size = 4.5+2,shape = 1,
               show.legend = F)+
    geom_label_repel(data = changedf[c(2,5),],
                     aes(x = date,y = value,
                         label = year),
                     size = 5,
                     color = 'black',
                     min.segment.length = unit(2,'cm'),
                     nudge_y=-4)+
    geom_text(data = textdf,
              aes(x = x,y = y,label = label),
              size = 3.8,
              color = 'black',face = 'bold')+
    geom_text(data = label_p1,
              aes(x = x,y = y,label = label),
              size = 5,
              color = 'black',face = 'bold')+
    geom_text(data = label_hismin,
              aes(x = x,y = y,label = label),
              size = 3.8,
              color = 'black',face = 'bold')+
    scale_color_manual(values = col,
                       guide = guide_legend(nrow = 1))+
    scale_fill_manual(values = col,
                       guide = guide_legend(nrow = 1))+
    theme_bw()+
    text_theme+
    theme(axis.text.y = element_text(angle = 90,hjust = 0.5))+
    theme(legend.position = 'none')+
    scale_x_continuous(breaks = c(1,32,63,79),
                       labels = yearsfull[c(1,32,63,79)])+
    #facet_wrap(~col,nrow = 1)+
    xlab('')+
    ylab('Positive TWS area (10 km )')
  p1
  # p2
  # import tibet
  tibet = shp_management('tibet')
  tibet_river = shp_management('tibet_river')
  sanjiangyuan = shp_management('sanjiangyuan')
  sanjiangyuan = spTransform(sanjiangyuan,
                             crs(tibet))
  
  neg_shps = list.files('shp/cluster_tws_neg_shp_deter',
                        pattern = '*.shp$',full.names =T)
  neg_shps = lapply(neg_shps[1:3],shapefile)
  neg_shps = do.call(bind,neg_shps)
  
  
  #a = 'AIzaSyDpo7UFUbwB55ewwUw6Plj7GmvnyDq-eRU'
  #write.table(a,'google.api')
  #api = read.table('google.api')
  #register_google(api)
  ex = extent(tibet)
  cen_tibet = cbind(
    long = (ex[1]+ex[2])/2,
    lat = (ex[3]+ex[4])/2
  )
  cen245 = as.data.frame(fread('output/ret_centroid/ret_cen1.csv'))
  cen585 = as.data.frame(
    fread('output/ret_centroid/ret_cen2.csv')
  )
  
  cen245 = cen245[,1:2]
  cen585 = cen585[,1:2]
  
  colnames(cen245) = c('long','lat')
  colnames(cen585) = c('long','lat')
  
  cen245$type = 'SSP245'
  cen585$type = 'SSP585'
  
  cens = rbind(cen245,cen585)
  
  p2map = get_googlemap(center = c(cen_tibet[1],
                                   cen_tibet[2]),
                        zoom = 3,
                        maptype = 'terrain',
                        color = 'bw',
                        language = 'en-En',
                        style=c(feature=c("administrative.country",
                                          "administrative.city"),
                                element="labels",
                                visibility="off"))
  
  colnames(twsneg245) = c('long','lat',
                          'type','value','level')
  colnames(twsneg585) = c('long','lat',
                          'type','value','level')
  twsneg585$type = 'SSP585'
  twsneg245$type = 'SSP245'
  
  twsneg = rbind(twsneg245,twsneg585)
  twsneg$level = cut(twsneg$value,
                     breaks = seq(-12,0,1))
  nclass = length(unique(twsneg$level))
  library(RColorBrewer)
  fils = colorRampPalette(brewer.pal(9,'Spectral'))(nclass+1)
  fils = fils[1:nclass]
  
  cols_border = pal_npg()(9)[3]
  
  tibet = shp_management('tibet')
  
  tibet_points = fortify(tibet)[1:2,1:2]
  colnames(tibet_points) = c('long','lat')
  tibet_points$part = 'left'
  tibet_points$year = 2020
  tibet_points$group = 'ssp245_1'
  tibet_points$type = 'SSP245'
  
  bordf245_outter = bordf245[which(bordf245$year == 2093),]
  bordf585_outter = bordf585[which(bordf585$year == 2097),]
  
  bordf245_in = bordf245[-which(bordf245$year == 2093),]
  bordf585_in = bordf585[-which(bordf585$year == 2097),]
  
  bordf245_in = rbind(tibet_points,bordf245_in)
  
  tibet_points$group = 'ssp585_1'
  tibet_points$type = 'SSP585'
  bordf585_in = rbind(tibet_points,bordf585_in)
  
  
  bordf = rbind(bordf245_in,
                bordf585_in)
  
  midbor = rbind(
    midbor245,
    midbor585
  )
  
  
  midbor245_outter = midbor245[3:4,]
  midbor585_outter = midbor585[3:4,]
  
  northcen1 = data.frame(
    long= cens[1,1],
    lat = cens[1,2],
    part = 'left',
    year = 2093,
    type = 'SSP245'
  )
  northcen2 = data.frame(
    long= cens[2,1],
    lat = cens[2,2],
    part = 'right',
    year = 2093,
    type = 'SSP245'
  )
  northcen3 = data.frame(
    long= cens[3,1],
    lat = cens[3,2],
    part = 'left',
    year = 2097,
    type = 'SSP585'
  )
  northcen4 = data.frame(
    long= cens[4,1],
    lat = cens[4,2],
    part = 'right',
    year = 2097,
    type = 'SSP585'
  )
  
  
  north1 = rbind(northcen1,
                 midbor245_outter[1,])
  north2 = rbind(northcen2,
                 midbor245_outter[2,])
  north3 = rbind(northcen3,
                 midbor585_outter[1,])
  north4 = rbind(northcen4,
                 midbor585_outter[2,])
  north1$group = c(1)
  north2$group = c(2)
  north3$group = 3
  north4$group = 4
  
  northpath = rbind(north1,north2,north3,north4)
  
  coltry = pal_locuszoom()(9)[1:4]
  bor_mid_col = rev(coltry)
  bor_mid_col = c('2020' = bor_mid_col[2],
                  '2098' = bor_mid_col[1])
  
  cen245 = as.data.frame(fread('output/ret_centroid/ret_cen1.csv'))
  cen585 = as.data.frame(
    fread('output/ret_centroid/ret_cen2.csv')
  )
  
  cen245 = cen245[,1:2]
  cen585 = cen585[,1:2]
  
  colnames(cen245) = c('long','lat')
  colnames(cen585) = c('long','lat')
  
  cen245$type = 'SSP245'
  cen585$type = 'SSP585'
  
  cens = rbind(cen245,cen585)
  
  label_p2 = data.frame(
    x = 103,
    y = 40,
    label = c('(c) SSP245','(e) SSP585'),
    type = c('SSP245','SSP585')
  )
  
  country_label <- as.data.frame(
    fread('main_plot_data/fig3/country_label.csv')
  )
  country_label = country_label[-which(country_label$name == 'Hong Kong'|
                                         country_label$name == 'Macau'),]
  country_label$latitude[which(country_label$name=='India')]=
    country_label$latitude[which(country_label$name=='India')]+2
  
  p2 = ggmap(p2map,alpha = 1)+
    
    geom_polygon(data = tibet,
                 aes(x = long,y = lat,group =group),
                 fill = 'transparent',
                 color = 'black')+
    geom_polygon(data = neg_shps,
                 aes(x = long,y = lat,group =group),
                 fill = 'transparent',
                 color = 'black')+
    
    geom_polygon(data = sanjiangyuan,
                 aes(x = long,y = lat,group =group),
                 fill = 'transparent',
                 color = 'black',
                 alpha = 0.5)+
    geom_tile(data = twsneg,
              aes(x = long,y = lat,fill = level),
              alpha = 0.7)+
    geom_path(data = bordf,
              aes(x = long,y = lat,group = group,
                  color = factor(year)),
              #color = cols_border,
              size =1)+
    geom_path(data = bordf245_outter,
              aes(x = long,y = lat,group = group),
              color = coltry[1],
              size = 1)+
    geom_path(data = bordf585_outter,
              aes(x = long,y = lat,group = group),
              color = coltry[1],
              size= 1)+
    geom_path(data = northpath,
              aes(x = long,y= lat,group =group),
              color = col[1],
              size = 1.5,
              arrow = arrow(20,unit(0.5,'cm')))+
    geom_point(data = cens,
               aes(x = long,y = lat),
               color = col[1],
               size = 3.5, shape = 16)+
    geom_point(data = cens,
               aes(x = long,y = lat),
               color = col[1],
               size = 4.5+2,shape = 1)+
    geom_point(data = cens,
               aes(x = long,y = lat),
               color = col[1],
               size = 4.5+2+3,shape = 1)+
    geom_path(data = tibet_river,
              aes(x = long,y = lat,group =group),
              color = 'blue',alpha = 0.2)+
    geom_text_repel(data = country_label,
                    aes(x = longitude,
                        y = latitude,
                        label = name),
                    size = 4,
                    color = 'black',
                    #position = position_dodge2(0.5),
                    bg.color = 'white',
                    force = F,
                    bg.r = 0.15)+
    geom_text_repel(data = label_p2,
                    aes(x = x,
                        y = y,
                        label = label),
                    size = 5,
                    color = 'black',
                    #position = position_dodge2(0.5),
                    bg.color = 'white',
                    force = F,
                    bg.r = 0.15)+
    scale_color_manual(values = bor_mid_col)+
    scale_fill_manual(values = fils)+
    guides(fill = guide_legend(nrow = 2,
                               title = 'Annual sum of monthly mean TWS in 2020-2098',
                               title.position = 'top'))+
    theme_bw()+
    facet_wrap(~type,nrow = 2)
  
  ex_river = extent(tibet_river)
  ex_tibet = extent(tibet)
  p2 = p2 +
    scale_x_continuous(breaks = seq(70,100,10),
                       labels = paste0(seq(70,100,10),
                                       '°E'),
                       limits = c(ex_tibet[1]-1,ex_tibet[2]+1))+
    scale_y_continuous(breaks = seq(25,40,5),
                       labels = paste0(seq(25,40,5),
                                       '°N'),
                       limits = c(ex_tibet[3]-1,ex_tibet[4]+1))
  
  p21 = p2+ theme(legend.position = 'none',
                  strip.text = element_blank())+
    text_theme+
    theme(panel.grid = element_blank())+
    theme(axis.text.y = element_text(angle = 90,
                                     hjust = 0.5))+
    xlab('Longitude')+
    ylab('Latitude')
  
  library(cowplot)
  
  
  # import the 
  
  changeloc1 = c(1,min_point245,79)
  changeloc2 = c(1,min_point585,79)
  
  pos_rate = as.data.frame(
    fread(input_posrate)
  )
  
  pointdf = data.frame(
    x = c(rep(1,3),rep(2.5,3)),
    y = c(pos_rate[changeloc1,1],pos_rate[changeloc2,2]),
    col = changedf$year
  )
  
  segment_h1 = data.frame(
    x = rep(0.5,3),
    xend = rep(1.5,3),
    y = rep(pos_rate[changeloc1,1],each = 1) 
  )
  segment_h1$x[3] = 1
  segment_h1$xend[1] = 1
  
  segment_h2 = data.frame(
    x = rep(1.5,3)+0.5,
    xend = rep(2.5,3)+0.5,
    y = rep(pos_rate[changeloc2,2],each = 1) 
  )
  segment_h2$x[3] = 2.5
  segment_h2$xend[1] = 2.5
  seg_h = rbind(segment_h1,segment_h2)
  
  
  arrow1 = data.frame(
    x = 0.75,
    y = pos_rate[changeloc1[1],1],
    yend = pos_rate[changeloc1[2],1]
  )
  
  arrow2 = data.frame(
    x = 1.25,
    y = pos_rate[changeloc1[2],1],
    yend = pos_rate[changeloc1[3],1]
  )
  
  arrow3 = data.frame(
    x = 1.75+0.5,
    y = pos_rate[changeloc2[1],2],
    yend = pos_rate[changeloc2[2],2]
  )
  
  arrow4 = data.frame(
    x = 2.25+0.5,
    y = pos_rate[changeloc2[2],2],
    yend = pos_rate[changeloc2[3],2]
  )
  
  label1 = data.frame(
    x = 0.7,
    y = (pos_rate[changeloc1[1],1] -
           pos_rate[changeloc1[2],1]),
    y1 =  (pos_rate[changeloc1[1],1] +
             pos_rate[changeloc1[2],1])/2
  )
  label1$label = paste0('-',round(label1$y),'%')
  
  label2 = data.frame(
    x = 1.3,
    y = (pos_rate[changeloc1[3],1] -
           pos_rate[changeloc1[2],1]),
    y1 = (pos_rate[changeloc1[3],1] +
            pos_rate[changeloc1[2],1])/2
  )
  label2$label = paste0('+',round(label2$y),'%')
  
  label3 = data.frame(
    x = 1.7+0.5,
    y = (pos_rate[changeloc2[1],2] -
           pos_rate[changeloc2[2],2]),
    y1 = (pos_rate[changeloc2[1],2] +
            pos_rate[changeloc2[2],2])/2
  )
  label3$label = paste0('-',round(label3$y),'%')
  
  label4 = data.frame(
    x = 2.3+0.5,
    y = (pos_rate[changeloc2[3],2] -
           pos_rate[changeloc2[2],2]),
    y1 = (pos_rate[changeloc2[3],2] +
            pos_rate[changeloc2[2],2])/2
  )
  label4$label = paste0('+',round(label4$y),'%')
  
  
  label13 = rbind(label1,label3)
  label24 = rbind(label2,label4)
  
  pointmindf= pointdf[which(pointdf$col==2093|
                              pointdf$col==2097),]
  pointdf1 = pointdf[-which(pointdf$col==2093|
                              pointdf$col==2097),]
  
  labelpoints = data.frame(
    x  = c(0.5,1,1.25,2.85,1.75,2.85),
    y = pointdf$y,
    label = paste0(round(pointdf$y),'%')
  )
  labelpoints$y[1] = labelpoints$y[1] + 1.25
  labelpoints$y[2] = labelpoints$y[2] - 4
  labelpoints$y[3] = labelpoints$y[3] + 4
  labelpoints$y[6] = labelpoints$y[6] + 1.25
  
  label_point = data.frame(
    x = 0.25,y= 71,label = '(b)'
  )
  ppoint = ggplot()+
    geom_segment(data = seg_h,
                 aes(x = x,xend = xend,y = y,yend = y),
                 color = 'black',
                 size= 0.5)+
    geom_point(data = pointdf1,
               aes(x = x,y = y,col = factor(col)),
               size = 2.5+2,shape = 16)+
    geom_point(data = pointdf1,
               aes(x = x,y = y,col = factor(col)),
               size = 4.5+2,shape = 1)+
    geom_point(data = pointmindf,
               aes(x = x,y = y),
               color = coltry[1],
               size = 2.5+2,shape = 16)+
    geom_point(data = pointmindf,
               aes(x = x,y = y),
               color = coltry[1],
               size = 4.5+2,shape = 1)+
    geom_segment(data = arrow1,
                 aes(x = x,xend = x,
                     y = y,yend = yend),
                 arrow = arrow(angle = 20,length = unit(0.5,'cm')))+
    geom_segment(data = arrow2,
                 aes(x = x,xend = x,
                     y = y,yend = yend),
                 arrow = arrow(angle = 20,length = unit(0.5,'cm')))+
    geom_segment(data = arrow3,
                 aes(x = x,xend = x,
                     y = y,yend = yend),
                 arrow = arrow(angle = 20,length = unit(0.5,'cm')))+
    geom_segment(data = arrow4,
                 aes(x = x,xend = x,
                     y = y,yend = yend),
                 arrow = arrow(angle = 20,length = unit(0.5,'cm')))+
    geom_text(data = label13,
              aes(x = x-0.25,y = y1,label = label),
              color = 'black',
              size = 5,
              angle = 90,
              hjust = 0.5)+
    geom_text(data = label24,
              aes(x = x+0.35,y = y1,label = label),
              color = 'black',
              size = 5,
              angle = 270,
              hjust = 0.5)+
    geom_text(data = labelpoints,
              aes(x = x,y = y,label = label),
              color = 'black',
              size = 5,
              hjust = 0.5)+
    geom_text(data = label_point,
              aes(x = x,y = y,label = label),
              color = 'black',
              size = 5,
              hjust = 0.5)+
    scale_x_continuous(breaks = c(1,2.5),
                       labels = c('SSP245','SSP585'),
                       limits = c(0,3.5))+
    scale_color_manual(values = bor_mid_col)+
    theme_bw()+
    text_theme+
    ylab('Positive TWS area (%)')
  
  # import bardf
  san245 = 'main_plot_data/fig4/fig4bc/sanjiangmin245.csv'
  san585 = 'main_plot_data/fig4/fig4bc/sanjiangmin585.csv'
  san245 = as.data.frame(fread(san245))
  san585 = as.data.frame(fread(san585))
  
  areasanjiang = area(sanjiangyuan)/10^10
  
  san245 = san245/areasanjiang *100
  san585 = san585 /areasanjiang * 100
  
  sandf1 = data.frame(
    x = c(1,2,3),
    year = yearsfull[changeloc1],
    y = san245$sanjiang,
    type = 'SSP245'
  )
  sandf2 = data.frame(
    x = c(1,2,3),
    year = yearsfull[changeloc2],
    y = san585$sanjiang,
    type = 'SSP585'
  )
  sandf2$y[1] = 0.01
  sandf = rbind(sandf1,sandf2)
  
  sandmin = sandf[which(sandf$year==2093|
                          sandf$year==2097),]
  sandf1 = sandf[-which(sandf$year==2093|
                          sandf$year==2097),]
  
  labeldf_san = data.frame(
    x = as.character(sandf$year),
    y = sandf$y-10,
    label = paste0(round(sandf$y),'%'),
    type = sandf$type
  )
  label_pbar = data.frame(
    x = c(0.75,0.75),
    y = 65,
    label = c('(d) SSP245','(f) SSP585'),
    type = c('SSP245','SSP585')
  )
  
  pbar = ggplot()+
    geom_bar(data = sandf1,
             aes(x = as.character(year),y = y,fill = factor(year)),
             stat = 'identity',
             position = position_dodge2(0.5),
             width = 0.5)+
    geom_bar(data = sandmin,
             aes(x = as.character(year),y = y),
             fill = coltry[1],
             stat = 'identity',
             position = position_dodge2(0.5),
             width = 0.5)+
    facet_wrap(~type,nrow = 2,
               scales = 'free_y')+
    scale_fill_manual(values = bor_mid_col)+
    geom_text_repel(data = labeldf_san,
                    aes(x = x,y = y,label = label),
                    size = 5,
                    color = 'black',
                    position = position_dodge2(0.5),
                    bg.color = 'white',
                    force = F,
                    bg.r = 0.15)+
    geom_text(data = label_pbar,
              aes(x = x,y = y,label = label),
              size = 5,
              color = 'black')+
    theme_bw()+
    text_theme+
    coord_flip()+
    ylab('Negative TWS area in SJY (%)')+
    xlab('Year')+
    theme(axis.text.y = element_text(angle = 90,hjust = 0.5),
          strip.text = element_blank())
  
  
  ppoint1 = ppoint + 
    theme(legend.position = 'none',
          axis.title.x = element_blank(),
          axis.text.y = element_text(angle = 90,
                                     hjust = 0.5),
          panel.grid = element_blank())
  
  pbar1 = pbar + 
    theme(legend.position = 'none',
          panel.grid = element_blank())
  
  p34 = plot_grid(
    ppoint1,
    pbar1,
    nrow = 2,
    rel_heights = c(1,2),
    rel_widths = c(1,1),
    align = 'v',
    axis = 'lr'
  )
  
  p1c = p1 +
    coord_fixed(ratio = 0.13)+
    theme(
      axis.title.x = element_blank(),
      panel.grid = element_blank()
    )
  
  p12 = plot_grid(
    p1c,p21,ncol = 1,
    rel_heights = c(1,2),
    rel_widths = c(1,1),
    align = 'v',
    axis = 'lr'
  )
  
  dir.create('main_plot/fig4')
  
  p1234  = plot_grid(
    p12,
    p34,
    nrow = 1,
    rel_heights = c(1,1),
    rel_widths = c(3,1.5),
    align = 'h',
    axis = 'tb'
  )
  
  png('main_plot/fig4/fig4_final10.png',
      height = 25,
      width = 28,
      units = 'cm',
      res = 800)
  print(p1234)
  dev.off()
  
  ggsave('main_plot/fig4/fig4_final10.pdf',
         plot = p,device = 'pdf',
         dpi = 800,width = 10,height = 10 ,units = 'cm')
  
  
  
  break
  p1leg = p1+
    theme(legend.position = 'bottom')
  p2leg = p21 + 
    theme(legend.position = 'bottom')
  p3leg = ppoint+
    theme(legend.position = 'bottom')
  pbarleg = pbar+
    theme(legend.position = 'bottom')
  
  library(ggpubr)
  p1leg1 = as_ggplot(
    get_legend(p1leg)
  )
  p2leg1 =as_ggplot(
    get_legend(p2leg)
  )
  p3leg1 =as_ggplot(
    get_legend(p3leg)
  )
  pbarleg1 =as_ggplot(
    get_legend(pbarleg)
  )
  
  png('main_plot/fig4/fig4_final1_leg1.png',
      height = 25,
      width = 28,
      units = 'cm',
      res = 800)
  print(p1leg1)
  dev.off()
  
  png('main_plot/fig4/fig4_final1_leg2.png',
      height = 25,
      width = 28,
      units = 'cm',
      res = 800)
  print(p2leg1)
  dev.off()
  
  png('main_plot/fig4/fig4_final1_leg3.png',
      height = 25,
      width = 28,
      units = 'cm',
      res = 800)
  print(p3leg1)
  dev.off()
  
  png('main_plot/fig4/fig4_final1_leg4.png',
      height = 25,
      width = 28,
      units = 'cm',
      res = 800)
  print(pbarleg1)
  dev.off()
}
fig4_decline_in_fut4 <- function(
  
){
  text_size = 2.6
  setwd('/media/sdb5/Vapor_projcts/Vapor_tibet')
  source("/home/share/R_project/xinjiang_vapor/shp_management.R")
  detect_changing_points<-function(date,pos_area){
    library(prophet)
    pos245 = data.frame(ds = date,
                        y = pos_area)
    p = prophet(pos245,
                n.changepoints = 2,yearly.seasonality = T,
                changepoint.range = 0.8)
    
    changeloc = which(as.character.Date(date) %in% as.character.Date(p$changepoints))
    return(changeloc)
  }
  
  library(ggmap)
  library(ggplot2)
  library(raster)
  library(data.table)
  
  # import data 
  # plot line group1
  yearsfull = 2020:2098
  input_posrate = 'main_plot_data/fig4/fig4a/pos_rate.csv'
  input_posarea = 'main_plot_data/fig4/fig4a/pos_area.csv'
  input_posmin = 'output/future_pos_tws_area_based_snow_tws/pos_area_allcalc_min.csv'
  input_posmax = 'output/future_pos_tws_area_based_snow_tws/pos_area_allcalc_max.csv'
  
  
  posarea = as.data.frame(fread(input_posarea))
  posmin = as.data.frame(fread(input_posmin))
  posmax = as.data.frame(fread(input_posmax))
  
  colnames(posmin) = colnames(posarea)
  colnames(posmax) = colnames(posarea)
  
  date = seq(as.Date('2020-01-01'),as.Date('2098-01-01'),
             '1 year')
  changeloc1 = detect_changing_points(date,posarea[,1])
  changeloc2 = detect_changing_points(date,posarea[,2])
  
  changetrend1 = changeloc1
  changetrend2 = changeloc2
  
  
  min_point245 = which(posarea[,1] == min(posarea[,1]))
  min_point585 = which(posarea[,2] == min(posarea[,2]))
  
  changeloc1 = c(1,min_point245,79)
  changeloc2 = c(1,min_point585,79)
  
  dateid = 1:79
  changedf1 = data.frame(
    date = dateid[changeloc1],
    value = posarea[changeloc1,1],
    col = 'SSP245'
  )
  changedf2 = data.frame(
    date = dateid[changeloc2],
    value = posarea[changeloc2,2],
    col = 'SSP585'
  )
  changedf = rbind(changedf1,changedf2)
  
  
  
  posarea = data.frame(date = dateid,
                       posarea)
  posmin = data.frame(date= dateid,
                      posmin[3:81,])
  posmax = data.frame(date = dateid,
                      posmax[3:81,])
  
  posarea = reshape2::melt(posarea,'date')
  posmin = reshape2::melt(posmin,'date')
  posmax =reshape2::melt(posmax,'date')
  
  colnames(posarea) = c('date','col','value')
  colnames(posmin) = c('date','col','min')
  posmin$max = posmax$value
  
  posarea$type = '(a) temporal variation'
  posmin$type = '(a) temporal variation'
  # import changingpoints
  
  
  # import historical posarea
  hispos = as.data.frame(fread('output/pos_area/pos_area.csv'))
  hispos = as.numeric(hispos[,1])
  hispos = hispos / 10000
  
  mean_hispos = mean(hispos)
  min_hispos = min(hispos)
  max_hispos = max(hispos)
  
  changeseg = data.frame(
    x = c(1,changetrend1[2]),
    xend = c(changetrend1[1],79),
    y = c(mean_hispos,min_hispos)
  )
  
  # Fig 4b
  years1 = c(2020,2093,2098)
  years2 = c(2020,2097,2098)
  
  input_border245 = paste0('main_plot_data/fig4/fig4bc/border_ssp245_',
                           years1,'.csv')
  input_border585 = paste0('main_plot_data/fig4/fig4bc/border_ssp585_',
                           years2,'.csv')
  
  import_border245 <- function(i){
    tmp = as.data.frame(fread(input_border245[i]))
    tmp$year = years1[i]
    
    tmp$group = paste0('ssp245','_',i)
    
    
    return(tmp)
  }
  import_border585 <- function(i){
    tmp = as.data.frame(fread(input_border585[i]))
    tmp$year = years2[i]
    
    tmp$group = paste0('ssp585','_',i)
    return(tmp)
  }
  i = 1:length(years1)
  bordf245 = do.call(rbind,lapply(i,import_border245))
  bordf585 = do.call(rbind,lapply(i,import_border585))
  
  calc_mid_border245 <- function(i){
    tmp = as.data.frame(fread(input_border245[i]))
    tmpleft = tmp[which(tmp$part == 'left'),]
    tmpright = tmp[which(tmp$part == 'right'),]
    
    tmpleft = tmpleft[order(tmpleft$long,decreasing = F),]
    tmpright = tmpright[order(tmpright$long,decreasing = F),]
    
    midleft = tmpleft[round(nrow(tmpleft)/2),]
    midright = tmpright[round(nrow(tmpright)/2),]
    
    retdf = rbind(midleft,midright)
    retdf$year = years1[i]
    return(retdf)
    
  }
  calc_mid_border585 <- function(i){
    tmp = as.data.frame(fread(input_border585[i]))
    tmpleft = tmp[which(tmp$part == 'left'),]
    tmpright = tmp[which(tmp$part == 'right'),]
    
    tmpleft = tmpleft[order(tmpleft$long,decreasing = F),]
    tmpright = tmpright[order(tmpright$long,decreasing = F),]
    
    midleft = tmpleft[round(nrow(tmpleft)/2),]
    midright = tmpright[round(nrow(tmpright)/2),]
    
    retdf = rbind(midleft,midright)
    retdf$year = years2[i]
    return(retdf)
    
  }
  
  midbor245 = do.call(rbind,lapply(i,calc_mid_border245))
  midbor585 = do.call(rbind,lapply(i,calc_mid_border585))
  
  bordf245$type = 'SSP245'
  bordf585$type = 'SSP585'
  midbor245$type = 'SSP245'
  midbor585$type = 'SSP585'
  
  input_twsneg_multi245= 'main_plot_data/fig4/fig4bc/multi_twsneg245.csv'
  input_twsneg_multi585= 'main_plot_data/fig4/fig4bc/multi_twsneg585.csv'
  
  twsneg245 = as.data.frame(fread(input_twsneg_multi245))
  twsneg585 = as.data.frame(fread(input_twsneg_multi585))
  
  twsneg245$type = 'SSP245'
  twsneg585$type = 'SSP585'
  
  # p1 
  fontsize = 7
  text_theme = theme(
    axis.text = element_text(size = fontsize,color = 'black'),
    axis.title = element_text(size = fontsize,color = 'black'),
    legend.text =  element_text(size = fontsize,color = 'black'),
    legend.title = element_text(size = fontsize,color = 'black')
  )
  library(ggsci)
  library(ggrepel)
  col = pal_lancet(alpha = 0.8)(9)[c(1,7)]
  coltry = pal_locuszoom()(9)[1:4]
  bor_mid_col = rev(coltry)
  bor_mid_col = c('2020' = bor_mid_col[2],
                  '2098' = bor_mid_col[1])
  
  col = c(col,bor_mid_col)
  col = c('SSP245' = col[1],
          'SSP585' = col[2],
          col[3],
          col[4])
  
  changedf$year = yearsfull[c(changeloc1,changeloc2)]
  
  changedf_min = changedf[which(changedf$year == 2093|
                                  changedf$year == 2097),]
  changedf1 = changedf[-which(changedf$year == 2093|
                                changedf$year == 2097),]
  changedf1$col = changedf1$year
  
  textdf = data.frame(
    x =c(16,47.5,71),
    y= c(30,230,220),
    label = c('Steadily high period (SHP) \n 2020-2051',
              'Decreasing period (DP) \n 2051-2082',
              'Steadily low \n period (SLP) \n 2082-2098')
  )
  
  label_p1 = data.frame(
    x = 4,
    y = 240,label = '(a)'
  )
  yearsfull = 2020:2098
  
  
  label_hismin = data.frame(
    x = c(47.5,16),
    y = c(changeseg[,3][1]+50,changeseg[,3][2]+10),
    label = paste0(c('Historical mean: ','Historical min: '),round(changeseg[,3],2))
  )
  
  p1 = ggplot()+
    geom_ribbon(data = posmin,
                aes(x = date,ymin = min,ymax = max,fill = factor(col)),
                alpha = 0.3,
                size = 1.5)+
    geom_hline(yintercept = changeseg[1,3],
               color= 'black',
               linetype = 'dashed')+ 
    geom_hline(yintercept =changeseg[2,3],
               color= 'black',
               linetype = 'dashed')+
    geom_vline(xintercept = c(1,changetrend1,79),
               color = 'black')+
    geom_line(data = posarea,
              aes(x = date,y = value,color = factor(col)),
              size = 1)+
    geom_point(data = changedf1,
               aes(x = date,y = value,color = factor(col)),
               size = 2.5,shape = 16,
               show.legend = F)+
    geom_point(data = changedf1,
               aes(x = date,y = value,color = factor(col)),
               size = 4.5,shape = 1,
               show.legend = F)+
    geom_point(data = changedf_min,
               aes(x = date,y = value),
               color = coltry[1],
               size = 2.5,shape = 16,
               show.legend = F)+
    geom_point(data = changedf_min,
               aes(x = date,y = value),
               color = coltry[1],
               size = 4.5,shape = 1,
               show.legend = F)+
    geom_label_repel(data = changedf[c(2,5),],
                     aes(x = date,y = value,
                         label = year),
                     size = text_size,
                     color = 'black',
                     min.segment.length = unit(2,'cm'),
                     nudge_y=-4)+
    geom_text(data = textdf,
              aes(x = x,y = y,label = label),
              size = text_size,
              color = 'black',face = 'bold')+
    geom_text(data = label_p1,
              aes(x = x,y = y,label = label),
              size = text_size,
              color = 'black',face = 'bold')+
    geom_text(data = label_hismin,
              aes(x = x,y = y,label = label),
              size = text_size,
              color = 'black',face = 'bold')+
    scale_color_manual(values = col,
                       guide = guide_legend(nrow = 1))+
    scale_fill_manual(values = col,
                      guide = guide_legend(nrow = 1))+
    theme_bw()+
    text_theme+
    theme(axis.text.y = element_text(angle = 90,hjust = 0.5))+
    theme(legend.position = 'none')+
    scale_x_continuous(breaks = c(1,32,63,79),
                       labels = yearsfull[c(1,32,63,79)])+
    #facet_wrap(~col,nrow = 1)+
    xlab('')+
    ylab('Positive TWS area (10 km )')
  p1
  # p2
  # import tibet
  tibet = shp_management('tibet')
  tibet_river = shp_management('tibet_river')
  sanjiangyuan = shp_management('sanjiangyuan')
  sanjiangyuan = spTransform(sanjiangyuan,
                             crs(tibet))
  
  neg_shps = list.files('shp/cluster_tws_neg_shp_deter',
                        pattern = '*.shp$',full.names =T)
  neg_shps = lapply(neg_shps[1:3],shapefile)
  neg_shps = do.call(bind,neg_shps)
  
  
  #a = 'AIzaSyDpo7UFUbwB55ewwUw6Plj7GmvnyDq-eRU'
  #write.table(a,'google.api')
  #api = read.table('google.api')
  #register_google(api)
  ex = extent(tibet)
  cen_tibet = cbind(
    long = (ex[1]+ex[2])/2,
    lat = (ex[3]+ex[4])/2
  )
  cen245 = as.data.frame(fread('output/ret_centroid/ret_cen1.csv'))
  cen585 = as.data.frame(
    fread('output/ret_centroid/ret_cen2.csv')
  )
  
  cen245 = cen245[,1:2]
  cen585 = cen585[,1:2]
  
  colnames(cen245) = c('long','lat')
  colnames(cen585) = c('long','lat')
  
  cen245$type = 'SSP245'
  cen585$type = 'SSP585'
  
  cens = rbind(cen245,cen585)
  
  p2map = get_googlemap(center = c(cen_tibet[1],
                                   cen_tibet[2]),
                        zoom = 3,
                        maptype = 'terrain',
                        color = 'bw',
                        language = 'en-En',
                        style=c(feature=c("administrative.country",
                                          "administrative.city"),
                                element="labels",
                                visibility="off"))
  
  colnames(twsneg245) = c('long','lat',
                          'type','value','level')
  colnames(twsneg585) = c('long','lat',
                          'type','value','level')
  twsneg585$type = 'SSP585'
  twsneg245$type = 'SSP245'
  
  twsneg = rbind(twsneg245,twsneg585)
  twsneg$level = cut(twsneg$value,
                     breaks = seq(-12,0,1))
  nclass = length(unique(twsneg$level))
  library(RColorBrewer)
  fils = colorRampPalette(brewer.pal(9,'Spectral'))(nclass+1)
  fils = fils[1:nclass]
  
  cols_border = pal_npg()(9)[3]
  
  tibet = shp_management('tibet')
  
  tibet_points = fortify(tibet)[1:2,1:2]
  colnames(tibet_points) = c('long','lat')
  tibet_points$part = 'left'
  tibet_points$year = 2020
  tibet_points$group = 'ssp245_1'
  tibet_points$type = 'SSP245'
  
  bordf245_outter = bordf245[which(bordf245$year == 2093),]
  bordf585_outter = bordf585[which(bordf585$year == 2097),]
  
  bordf245_in = bordf245[-which(bordf245$year == 2093),]
  bordf585_in = bordf585[-which(bordf585$year == 2097),]
  
  bordf245_in = rbind(tibet_points,bordf245_in)
  
  tibet_points$group = 'ssp585_1'
  tibet_points$type = 'SSP585'
  bordf585_in = rbind(tibet_points,bordf585_in)
  
  
  bordf = rbind(bordf245_in,
                bordf585_in)
  
  midbor = rbind(
    midbor245,
    midbor585
  )
  
  
  midbor245_outter = midbor245[3:4,]
  midbor585_outter = midbor585[3:4,]
  
  northcen1 = data.frame(
    long= cens[1,1],
    lat = cens[1,2],
    part = 'left',
    year = 2093,
    type = 'SSP245'
  )
  northcen2 = data.frame(
    long= cens[2,1],
    lat = cens[2,2],
    part = 'right',
    year = 2093,
    type = 'SSP245'
  )
  northcen3 = data.frame(
    long= cens[3,1],
    lat = cens[3,2],
    part = 'left',
    year = 2097,
    type = 'SSP585'
  )
  northcen4 = data.frame(
    long= cens[4,1],
    lat = cens[4,2],
    part = 'right',
    year = 2097,
    type = 'SSP585'
  )
  
  
  north1 = rbind(northcen1,
                 midbor245_outter[1,])
  north2 = rbind(northcen2,
                 midbor245_outter[2,])
  north3 = rbind(northcen3,
                 midbor585_outter[1,])
  north4 = rbind(northcen4,
                 midbor585_outter[2,])
  north1$group = c(1)
  north2$group = c(2)
  north3$group = 3
  north4$group = 4
  
  northpath = rbind(north1,north2,north3,north4)
  
  coltry = pal_locuszoom()(9)[1:4]
  bor_mid_col = rev(coltry)
  bor_mid_col = c('2020' = bor_mid_col[2],
                  '2098' = bor_mid_col[1])
  
  cen245 = as.data.frame(fread('output/ret_centroid/ret_cen1.csv'))
  cen585 = as.data.frame(
    fread('output/ret_centroid/ret_cen2.csv')
  )
  
  cen245 = cen245[,1:2]
  cen585 = cen585[,1:2]
  
  colnames(cen245) = c('long','lat')
  colnames(cen585) = c('long','lat')
  
  cen245$type = 'SSP245'
  cen585$type = 'SSP585'
  
  cens = rbind(cen245,cen585)
  
  label_p2 = data.frame(
    x = 103,
    y = 40,
    label = c('(c) SSP245','(e) SSP585'),
    type = c('SSP245','SSP585')
  )
  
  country_label <- as.data.frame(
    fread('main_plot_data/fig3/country_label.csv')
  )
  country_label = country_label[-which(country_label$name == 'Hong Kong'|
                                         country_label$name == 'Macau'),]
  country_label$latitude[which(country_label$name=='India')]=
    country_label$latitude[which(country_label$name=='India')]+2
  
  p2 = ggmap(p2map,alpha = 1)+
    
    geom_polygon(data = tibet,
                 aes(x = long,y = lat,group =group),
                 fill = 'transparent',
                 color = 'black')+
    geom_polygon(data = neg_shps,
                 aes(x = long,y = lat,group =group),
                 fill = 'transparent',
                 color = 'black')+
    
    geom_polygon(data = sanjiangyuan,
                 aes(x = long,y = lat,group =group),
                 fill = 'transparent',
                 color = 'black',
                 alpha = 0.5)+
    geom_tile(data = twsneg,
              aes(x = long,y = lat,fill = level),
              alpha = 0.7)+
    geom_path(data = bordf,
              aes(x = long,y = lat,group = group,
                  color = factor(year)),
              #color = cols_border,
              size =1)+
    geom_path(data = bordf245_outter,
              aes(x = long,y = lat,group = group),
              color = coltry[1],
              size = 1)+
    geom_path(data = bordf585_outter,
              aes(x = long,y = lat,group = group),
              color = coltry[1],
              size= 1)+
    geom_path(data = northpath,
              aes(x = long,y= lat,group =group),
              color = col[1],
              size = 1.2,
              arrow = arrow(20,unit(0.5,'cm')))+
    geom_point(data = cens,
               aes(x = long,y = lat),
               color = col[1],
               size = 2.5, shape = 16)+
    geom_point(data = cens,
               aes(x = long,y = lat),
               color = col[1],
               size = 4.5,shape = 1)+
    geom_point(data = cens,
               aes(x = long,y = lat),
               color = col[1],
               size = 4.5+2,shape = 1)+
    geom_path(data = tibet_river,
              aes(x = long,y = lat,group =group),
              color = 'blue',alpha = 0.2)+
    geom_text_repel(data = country_label,
                    aes(x = longitude,
                        y = latitude,
                        label = name),
                    size = text_size,
                    color = 'black',
                    #position = position_dodge2(0.5),
                    bg.color = 'white',
                    force = F,
                    bg.r = 0.15)+
    geom_text_repel(data = label_p2,
                    aes(x = x,
                        y = y,
                        label = label),
                    size = text_size,
                    color = 'black',
                    #position = position_dodge2(0.5),
                    bg.color = 'white',
                    force = F,
                    bg.r = 0.15)+
    scale_color_manual(values = bor_mid_col)+
    scale_fill_manual(values = fils)+
    guides(fill = guide_legend(nrow = 2,
                               title = 'Annual sum of monthly mean TWS in 2020-2098',
                               title.position = 'top'))+
    theme_bw()+
    facet_wrap(~type,nrow = 2)
  
  ex_river = extent(tibet_river)
  ex_tibet = extent(tibet)
  p2 = p2 +
    scale_x_continuous(breaks = seq(70,100,10),
                       labels = paste0(seq(70,100,10),
                                       '°E'),
                       limits = c(ex_tibet[1]-1,ex_tibet[2]+1))+
    scale_y_continuous(breaks = seq(25,40,5),
                       labels = paste0(seq(25,40,5),
                                       '°N'),
                       limits = c(ex_tibet[3]-1,ex_tibet[4]+1))
  
  p21 = p2+ theme(legend.position = 'none',
                  strip.text = element_blank())+
    text_theme+
    theme(panel.grid = element_blank())+
    theme(axis.text.y = element_text(angle = 90,
                                     hjust = 0.5))+
    xlab('Longitude')+
    ylab('Latitude')
  
  library(cowplot)
  
  
  # import the 
  
  changeloc1 = c(1,min_point245,79)
  changeloc2 = c(1,min_point585,79)
  
  pos_rate = as.data.frame(
    fread(input_posrate)
  )
  
  pointdf = data.frame(
    x = c(rep(1,3),rep(2.5,3)),
    y = c(pos_rate[changeloc1,1],pos_rate[changeloc2,2]),
    col = changedf$year
  )
  
  segment_h1 = data.frame(
    x = rep(0.5,3),
    xend = rep(1.5,3),
    y = rep(pos_rate[changeloc1,1],each = 1) 
  )
  segment_h1$x[3] = 1
  segment_h1$xend[1] = 1
  
  segment_h2 = data.frame(
    x = rep(1.5,3)+0.5,
    xend = rep(2.5,3)+0.5,
    y = rep(pos_rate[changeloc2,2],each = 1) 
  )
  segment_h2$x[3] = 2.5
  segment_h2$xend[1] = 2.5
  seg_h = rbind(segment_h1,segment_h2)
  
  
  arrow1 = data.frame(
    x = 0.75,
    y = pos_rate[changeloc1[1],1],
    yend = pos_rate[changeloc1[2],1]
  )
  
  arrow2 = data.frame(
    x = 1.25,
    y = pos_rate[changeloc1[2],1],
    yend = pos_rate[changeloc1[3],1]
  )
  
  arrow3 = data.frame(
    x = 1.75+0.5,
    y = pos_rate[changeloc2[1],2],
    yend = pos_rate[changeloc2[2],2]
  )
  
  arrow4 = data.frame(
    x = 2.25+0.5,
    y = pos_rate[changeloc2[2],2],
    yend = pos_rate[changeloc2[3],2]
  )
  
  label1 = data.frame(
    x = 0.7,
    y = (pos_rate[changeloc1[1],1] -
           pos_rate[changeloc1[2],1]),
    y1 =  (pos_rate[changeloc1[1],1] +
             pos_rate[changeloc1[2],1])/2
  )
  label1$label = paste0('-',round(label1$y),'%')
  
  label2 = data.frame(
    x = 1.3,
    y = (pos_rate[changeloc1[3],1] -
           pos_rate[changeloc1[2],1]),
    y1 = (pos_rate[changeloc1[3],1] +
            pos_rate[changeloc1[2],1])/2
  )
  label2$label = paste0('+',round(label2$y),'%')
  
  label3 = data.frame(
    x = 1.7+0.5,
    y = (pos_rate[changeloc2[1],2] -
           pos_rate[changeloc2[2],2]),
    y1 = (pos_rate[changeloc2[1],2] +
            pos_rate[changeloc2[2],2])/2
  )
  label3$label = paste0('-',round(label3$y),'%')
  
  label4 = data.frame(
    x = 2.3+0.5,
    y = (pos_rate[changeloc2[3],2] -
           pos_rate[changeloc2[2],2]),
    y1 = (pos_rate[changeloc2[3],2] +
            pos_rate[changeloc2[2],2])/2
  )
  label4$label = paste0('+',round(label4$y),'%')
  
  
  label13 = rbind(label1,label3)
  label24 = rbind(label2,label4)
  
  pointmindf= pointdf[which(pointdf$col==2093|
                              pointdf$col==2097),]
  pointdf1 = pointdf[-which(pointdf$col==2093|
                              pointdf$col==2097),]
  
  labelpoints = data.frame(
    x  = c(0.5,1,1.25,2.85,1.75,2.85),
    y = pointdf$y,
    label = paste0(round(pointdf$y),'%')
  )
  labelpoints$y[1] = labelpoints$y[1] + 1.25
  labelpoints$y[2] = labelpoints$y[2] - 4
  labelpoints$y[3] = labelpoints$y[3] + 4
  labelpoints$y[6] = labelpoints$y[6] + 1.25
  
  label_point = data.frame(
    x = 0.25,y= 71,label = '(b)'
  )
  ppoint = ggplot()+
    geom_segment(data = seg_h,
                 aes(x = x,xend = xend,y = y,yend = y),
                 color = 'black',
                 size= 0.5)+
    geom_point(data = pointdf1,
               aes(x = x,y = y,col = factor(col)),
               size = 2.5,shape = 16)+
    geom_point(data = pointdf1,
               aes(x = x,y = y,col = factor(col)),
               size = 4.5,shape = 1)+
    geom_point(data = pointmindf,
               aes(x = x,y = y),
               color = coltry[1],
               size = 2.5,shape = 16)+
    geom_point(data = pointmindf,
               aes(x = x,y = y),
               color = coltry[1],
               size = 4.5,shape = 1)+
    geom_segment(data = arrow1,
                 aes(x = x,xend = x,
                     y = y,yend = yend),
                 arrow = arrow(angle = 20,length = unit(0.25,'cm')))+
    geom_segment(data = arrow2,
                 aes(x = x,xend = x,
                     y = y,yend = yend),
                 arrow = arrow(angle = 20,length = unit(0.25,'cm')))+
    geom_segment(data = arrow3,
                 aes(x = x,xend = x,
                     y = y,yend = yend),
                 arrow = arrow(angle = 20,length = unit(0.25,'cm')))+
    geom_segment(data = arrow4,
                 aes(x = x,xend = x,
                     y = y,yend = yend),
                 arrow = arrow(angle = 20,length = unit(0.25,'cm')))+
    geom_text(data = label13,
              aes(x = x-0.25,y = y1,label = label),
              color = 'black',
              size = text_size,
              angle = 90,
              hjust = 0.5)+
    geom_text(data = label24,
              aes(x = x+0.35,y = y1,label = label),
              color = 'black',
              size = text_size,
              angle = 270,
              hjust = 0.5)+
    geom_text(data = labelpoints,
              aes(x = x,y = y,label = label),
              color = 'black',
              size = text_size,
              hjust = 0.5)+
    geom_text(data = label_point,
              aes(x = x,y = y,label = label),
              color = 'black',
              size = text_size,
              hjust = 0.5)+
    scale_x_continuous(breaks = c(1,2.5),
                       labels = c('SSP245','SSP585'),
                       limits = c(0,3.5))+
    scale_color_manual(values = bor_mid_col)+
    theme_bw()+
    text_theme+
    ylab('Positive TWS area (%)')
  
  # import bardf
  san245 = 'main_plot_data/fig4/fig4bc/sanjiangmin245.csv'
  san585 = 'main_plot_data/fig4/fig4bc/sanjiangmin585.csv'
  san245 = as.data.frame(fread(san245))
  san585 = as.data.frame(fread(san585))
  
  areasanjiang = area(sanjiangyuan)/10^10
  
  san245 = san245/areasanjiang *100
  san585 = san585 /areasanjiang * 100
  
  sandf1 = data.frame(
    x = c(1,2,3),
    year = yearsfull[changeloc1],
    y = san245$sanjiang,
    type = 'SSP245'
  )
  sandf2 = data.frame(
    x = c(1,2,3),
    year = yearsfull[changeloc2],
    y = san585$sanjiang,
    type = 'SSP585'
  )
  sandf2$y[1] = 0.01
  sandf = rbind(sandf1,sandf2)
  
  sandmin = sandf[which(sandf$year==2093|
                          sandf$year==2097),]
  sandf1 = sandf[-which(sandf$year==2093|
                          sandf$year==2097),]
  
  labeldf_san = data.frame(
    x = as.character(sandf$year),
    y = sandf$y-10,
    label = paste0(round(sandf$y),'%'),
    type = sandf$type
  )
  label_pbar = data.frame(
    x = c(0.75,0.75),
    y = 65,
    label = c('(d) SSP245','(f) SSP585'),
    type = c('SSP245','SSP585')
  )
  
  pbar = ggplot()+
    geom_bar(data = sandf1,
             aes(x = as.character(year),y = y,fill = factor(year)),
             stat = 'identity',
             position = position_dodge2(0.5),
             width = 0.5)+
    geom_bar(data = sandmin,
             aes(x = as.character(year),y = y),
             fill = coltry[1],
             stat = 'identity',
             position = position_dodge2(0.5),
             width = 0.5)+
    facet_wrap(~type,nrow = 2,
               scales = 'free_y')+
    scale_fill_manual(values = bor_mid_col)+
    geom_text_repel(data = labeldf_san,
                    aes(x = x,y = y,label = label),
                    size = text_size,
                    color = 'black',
                    position = position_dodge2(0.5),
                    bg.color = 'white',
                    force = F,
                    bg.r = 0.15)+
    geom_text(data = label_pbar,
              aes(x = x,y = y,label = label),
              size = text_size,
              color = 'black')+
    theme_bw()+
    text_theme+
    coord_flip()+
    ylab('Negative TWS area in SJY (%)')+
    xlab('Year')+
    theme(axis.text.y = element_text(angle = 90,hjust = 0.5),
          strip.text = element_blank())
  
  
  ppoint1 = ppoint + 
    theme(legend.position = 'none',
          axis.title.x = element_blank(),
          axis.text.y = element_text(angle = 90,
                                     hjust = 0.5),
          panel.grid = element_blank())
  
  pbar1 = pbar + 
    theme(legend.position = 'none',
          panel.grid = element_blank())
  
  p34 = plot_grid(
    ppoint1,
    pbar1,
    nrow = 2,
    rel_heights = c(1,2),
    rel_widths = c(1,1),
    align = 'v',
    axis = 'lr'
  )
  
  p1c = p1 +
    coord_fixed(ratio = 0.128)+
    theme(
      axis.title.x = element_blank(),
      panel.grid = element_blank()
    )
  
  p12 = plot_grid(
    p1c,p21,ncol = 1,
    rel_heights = c(1,2),
    rel_widths = c(1,1),
    align = 'v',
    axis = 'lr'
  )
  
  dir.create('main_plot/fig4')
  
  p1234  = plot_grid(
    p12,
    p34,
    nrow = 1,
    rel_heights = c(1,1),
    rel_widths = c(3,1.5),
    align = 'h',
    axis = 'tb'
  )
  
  #png('main_plot/fig4/fig4_final10.png',
  #    height = 25,
  #    width = 28,
  #    units = 'cm',
  #    res = 800)
  #print(p1234)
  #dev.off()
  
  ggsave('main_plot/fig4/fig4_final10.svg',
         plot = p1234,device = 'svg',
         dpi = 800,width = 17.5,height = 16 ,units = 'cm')
  
  ggsave('main_plot/fig4/fig4_final10.pdf',
         plot = p1234,device = 'pdf',
         dpi = 800,width = 17.5,height = 16 ,units = 'cm')
  
  
  
  p1leg = p1+
    theme(legend.position = 'bottom')
  p2leg = p21 + 
    theme(legend.position = 'bottom')
  p3leg = ppoint+
    theme(legend.position = 'bottom')
  pbarleg = pbar+
    theme(legend.position = 'bottom')
  
  library(ggpubr)
  p1leg1 = as_ggplot(
    get_legend(p1leg)
  )
  p2leg1 =as_ggplot(
    get_legend(p2leg)
  )
  p3leg1 =as_ggplot(
    get_legend(p3leg)
  )
  pbarleg1 =as_ggplot(
    get_legend(pbarleg)
  )
  
  #png('main_plot/fig4/fig4_final1_leg1.png',
  #    height = 25,
  #    width = 28,
  #    units = 'cm',
  #    res = 800)
  #print(p1leg1)
  #dev.off()
  
  ggsave('main_plot/fig4/fig4_final1_leg1.svg',
         plot = p1leg1,device = 'svg',
         dpi = 800,width = 17.5,height = 16 ,units = 'cm')
  
  #png('main_plot/fig4/fig4_final1_leg2.png',
  #    height = 25,
  #    width = 28,
  #    units = 'cm',
  #    res = 800)
  #print(p2leg1)
  #dev.off()
  
  ggsave('main_plot/fig4/fig4_final1_leg2.svg',
         plot = p2leg1,device = 'svg',
         dpi = 800,width = 17.5,height = 16 ,units = 'cm')
  
  #png('main_plot/fig4/fig4_final1_leg3.png',
  #    height = 25,
  #    width = 28,
  #    units = 'cm',
  #    res = 800)
  #print(p3leg1)
  #dev.off()
  
  ggsave('main_plot/fig4/fig4_final1_leg3.svg',
         plot = p3leg1,device = 'svg',
         dpi = 800,width = 17.5,height = 16 ,units = 'cm')
  
  
  #png('main_plot/fig4/fig4_final1_leg4.png',
  #    height = 25,
  #    width = 28,
  #    units = 'cm',
  #    res = 800)
  #print(pbarleg1)
  #dev.off()
  
  ggsave('main_plot/fig4/fig4_final1_leg4.svg',
         plot = pbarleg1,device = 'svg',
         dpi = 800,width = 17.5,height = 16 ,units = 'cm')
  
}
figs_attr_twstps_increase <- function(
  
){
  to_year_index <- function(x){
    
    to_year <- function(x){
      x = c(rep(NA,6),x)
      x = matrix(x,nrow = 12)
      x = apply(x,2,sum,na.rm = T)
      return(x)
    }
    x = to_year(x)
    x = (x-mean(x))/sd(x)
    return(x)
  }
  
  # import tws t
  input_twstp = 'main_plot_data/fig2/stand_twstp.csv'
  input_pmetp = 'output/pme_tibet_region/pmetp.csv'
  input_prtp = 'output/pr_tibet_region/prtp.csv'
  input_pmeato = 'main_plot_data/fig2/stand_pmeato.csv'
  
  
  twstp = as.data.frame(fread(input_twstp))
  pmetp = as.data.frame(fread(input_pmetp))
  prtp = as.data.frame(fread(input_prtp))
  pmeato = as.data.frame(fread(input_pmeato))
  
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/import_index_insource_tibet.R")
  snowcover = import_index_insource_tibet('snowcover')
  snowcover = snowcover[,1:2]
  
  twstps = as.numeric(twstp[,4])
  pmetps = as.numeric(pmetp[,3])
  prtps = as.numeric(prtp[,3])
  
  snowtpm1 = as.numeric(snowcover[,1])
  snowtpm2 = as.numeric(snowcover[,2])
  
  pmeato = pmeato[,1:4]
  pmeato = as.matrix(pmeato)
  
  a = twstp[,1]
  b = twstp[,2]
  
  model1 = lm(twstps ~ pmetps + a)
  model2 = lm(twstps ~ pmetps + b)
  
  
  coeff1 = data.frame(
    x = c('a1','b1'),
    y = model1$coefficients[c(2,3)],
    type = '(c)'
  )
  
  coeff2 = data.frame(
    x = c('a2','b2'),
    y = model2$coefficients[c(2,3)],
    type = '(d)'
  )
  
  dfbar = rbind(coeff1,coeff2)
  
  date = seq(as.Date('2003-07-01'),
             as.Date('2016-12-01'),
             '1 month')
  dfline1 = data.frame(
    date = date,
    'TWS-TPS'= twstps,
    'PME-TPS'= pmetps,
    'TWS-TPM1' = twstp[,1]
  )
  colnames(dfline1) = c('date','TWS-TPS','PME-TPS',
                        'TWS-TPM1')
  
  dfline2 = data.frame(
    date = date,
    'TWS-TPS' = twstps,
    'PME-TPS' = pmetps,
    'TWS-TPM2' = twstp[,2]
  )
  colnames(dfline2) = c('date','TWS-TPS','PME-TPS',
                        'TWS-TPM2')
  
  dfline1 = reshape2::melt(dfline1,'date')
  dfline2 = reshape2::melt(dfline2,'date')
  
  dfline1$type = '(a)'
  dfline2$type = '(b)'
  
  cols = pal_lancet()(9)
  cols = colorRampPalette(cols)(18)
  
  fils = c('a1' = cols[1],
           'a2' = cols[1],
           'b1' = cols[13],
           'b2' = cols[12])
  
  cols = c('PME-TPS' = cols[1],
           'TWS-TPS' = cols[14],
           'TWS-TPM1' = cols[13],
           'TWS-TPM2' = cols[12])
  
  dfline = rbind(dfline1,dfline2)
  fontsize = 14
  text_theme = theme(
    axis.text = element_text(size = fontsize,
                             color = 'black'),
    axis.title = element_text(size = fontsize,
                              color = 'black'),
    legend.text = element_text(size = fontsize,
                               color = 'black'),
    legend.title = element_text(size = fontsize,
                                color = 'black'),
    strip.text = element_blank()
  )
  
  label_figline = data.frame(
    x = date[5],
    y = 3,
    label = c('(a)','(c)'),
    type = c('(a)','(b)')
  )
  
  label_model = data.frame(
    x = date[20],
    y = -2.5,
    label = c('TWS-TPS = a1 × PME-TPS + b1 × TWS-TPM1',
              'TWS-TPS = a2 × PME-TPS + b2 × TWS-TPM2'),
    type = c('(a)','(b)')
  )
  
  
  pline = ggplot()+
    geom_text(data = label_figline,
              aes(x = x,y = y,label = label),
              size = 5,color = 'black',hjust= 0)+
    
    geom_line(data = dfline,aes(x = date,
                                y = value,
                                color = variable),
              size = 1.3)+
    geom_text(data = label_model,
              aes(x = x,y = y,label = label),
              size = 5,color = 'black',hjust = 0)+
    scale_color_manual(values = cols)+
    theme_bw()+
    text_theme+
    scale_y_continuous(breaks = c(-2,0,2))+
    theme(legend.position = 'bottom',
          axis.text.y = element_text(angle = 90,hjust = 0.5))+
    facet_wrap(~type,nrow = 2)+
    guides(color = guide_legend(title = ''))+
    xlab('')+
    ylab('Indices')
  
  dfbar2 = dfbar
  
  dfbar2$y2  =dfbar2$y * c(1.3,1.1,1.3,1.1)
  
  label_figbar = data.frame(
    x = c('a1','a2'),
    y = c(-0.8,-0.8),
    label = c('(b)',"(d)"),
    type = c('(c)','(d)')
  )
  
  pbar = ggplot()+
    geom_text(data = label_figbar,
              aes(x = x,y = y,label = label),
              size = 5,color = 'black',hjust= 0.5)+
    geom_bar(data = dfbar,
             aes(x = x,y = y,
                 fill = x),
             position = position_dodge2(0.7),
             width = 0.7,
             stat = 'identity',show.legend = F)+
    geom_text(data = dfbar2,
              aes(x = x,y = y2,
                  label = round(y,2)),
              position = position_dodge2(0.7),
              size= 5)+
    facet_wrap(~type,nrow = 2,scale = 'free_x')+
    scale_fill_manual(values = fils)+
    theme_bw()+
    text_theme+
    theme(axis.text.y = element_text(angle = 90,
                                     hjust = 0.5))+
    theme(legend.position = 'bottom')+
    guides(fill = guide_legend(title = ''))+
    xlab('')+
    ylab('TWS-TPS')
  
  pline_leg = as_ggplot(get_legend(pline))
  pline = pline+theme(legend.position = 'none')
  
  p12 = plot_grid(
    pline,pbar,
    rel_widths = c(3,1.5),
    rel_heights = c(1,1),
    nrow = 1
  )
  p123 = plot_grid(
    p12,pline_leg,
    rel_widths = c(1,1),
    rel_heights = c(10,1),
    ncol = 1
  )
  
  output = 'main_plot/SI/figs_attr_twstps_increase'
  dir.create(output)
  output = paste0(output,'/figs_attr_twstps.png')
  
  png(output,
      height = 22,
      width = 25,
      units = 'cm',
      res = 800)
  print(p123)
  dev.off()
  
  
  
  
  
}
shp_management <- function(
  pattern = 'ocean',
  names = 'ao'
){
  library(raster)
  if(pattern == 'ocean'){
    # ocean shp 
    ocean_path = '/media/sdb1/shp/ocean_shp'
    files = list.files(ocean_path,pattern = '*.shp$',full.names = T)
    oce_names = c('ao','ato','bs','cs','io','ms','po','rs')
    
    idr = which(oce_names == names)
    
    tmpshp = shapefile(files[idr])
    return(tmpshp)
    
  }else if(pattern == 'land'){
    # order: ao, 
    # land shp 
    land_path = '/media/sdb1/shp/north_land/'
    files = list.files(land_path,pattern = '*.shp$',full.names = T)
    con_names = c('as','eu','naf','na')
    
    idr = which(con_names == names)
    
    tmpshp = shapefile(files[idr])
    return(tmpshp)
  }else if(pattern =='as_bu_xinjiang'){
    path = '/media/sdb1/shp/asia_bu_xinjiang/'
    files = list.files(path,pattern = '*.shp$',full.names = T)
    
    tmpshp = shapefile(files)
  }else if(pattern == 'xinjiang'){
    shp_path = '/usr/local/flexpart_bk1/shp/Xinjiang_border.shp'
    tmpshp = shapefile(shp_path)
    return(tmpshp)
    
  }else if(pattern == 'combine_ocean'){
    xinjiang = shapefile('/usr/local/flexpart_bk1/shp/Xinjiang_border.shp')
    ocean_path = '/media/sdb1/shp/ocean_shp'
    files = list.files(ocean_path,pattern = '*.shp$',full.names = T)
    oce_names = c('ao','ato','bs','cs','io','ms','po','rs')
    
    idr = which(oce_names == names)
    
    tmpshp = shapefile(files[idr])
    tmpshp = do.call('bind',list(xinjiang,tmpshp))
    return(tmpshp)
  }else if(pattern == 'combine_land'){
    xinjiang = shapefile('/usr/local/flexpart_bk1/shp/Xinjiang_border.shp')
    
    land_path = '/media/sdb1/shp/north_land/'
    files = list.files(land_path,pattern = '*.shp$',full.names = T)
    con_names = c('as','eu','naf','na')
    
    idr = which(con_names == names)
    
    tmpshp = shapefile(files[idr])
    tmpshp = do.call('bind',list(xinjiang,tmpshp))
    return(tmpshp)
  }else if(pattern == 'china'){
    shp_path = '/media/sdb1/shp/China/China.shp'
    tmpshp= shapefile(shp_path)
    return(tmpshp)
  }else if(pattern == 'world'){
    shp_path = '/media/sdb1/shp/world_continent.shp'
    tmpshp= shapefile(shp_path)
    return(tmpshp)
  }else if(pattern == 'world_country'){
    shp_path = '/media/sdb1/shp/world_country/world.shp'
    tmpshp= shapefile(shp_path)
    return(tmpshp)
  }else if(pattern == 'world_include_ocean'){
    shp_path = '/media/sdb1/shp/world_oce.shp'
    tmpshp= shapefile(shp_path)
    return(tmpshp)
  }else if(pattern == 'shamo'){
    shp_path = '/media/sdb1/shp/north_land/shamo.shp'
    tmpshp = shapefile(shp_path)
    return(tmpshp)
  }else if(pattern == 'xinjiang_jishui_south'){
    shp_path = '/media/sdb1/shp/xinjiang_jishui/south_shp1.shp'
    tmpshp = shapefile(shp_path)
    return(tmpshp)
  }else if(pattern == 'xinjiang_jishui_north'){
    shp_path = '/media/sdb1/shp/xinjiang_jishui/north_shp1.shp'
    tmpshp = shapefile(shp_path)
    return(tmpshp)
  }else if(pattern == 'xinjiang_south'){
    shp_path = '/media/sdb1/shp/xinjiang_jishui/South_Xinjiang.shp'
    tmpshp = shapefile(shp_path)
    return(tmpshp)
  }else if(pattern == 'xinjiang_north'){
    shp_path = '/media/sdb1/shp/xinjiang_jishui/North_Xinjiang.shp'
    tmpshp = shapefile(shp_path)
    return(tmpshp)
  }else if(pattern == 'yrb'){
    shp_path = '/media/sdb5/Vapor_projcts/Vapor_yellow_river/shp/yrbasin'
    shp_path = list.files(shp_path,pattern = '*.shp$',full.names = T)
    tmpshp = shapefile(shp_path)
    return(tmpshp)
  }else if(pattern == 'tibet'){
    shp_path = '/media/sdb5/Vapor_projcts/Vapor_tibet/shp/tibet/'
    shp_path = list.files(shp_path,pattern = '*.shp$',full.names = T)
    tmpshp = shapefile(shp_path)
    return(tmpshp)
  }else if(pattern == 'province_yrb'){
    shp_path = '/media/sdb5/Vapor_projcts/Vapor_yellow_river/shp/Province/'
    files = list.files(shp_path,pattern = '*.shp$')
    
    filesname = '1'
    for(i in 1:length(files)){
      tmp = strsplit(files[i],'[.]')[[1]][1]
      tmp = tolower(tmp)
      filesname = c(filesname,tmp)
    }
    filesname = filesname[-1]
    
    shp_path = list.files(shp_path,
                          pattern = '*.shp$',full.names = T)
    
    id = which(filesname == names)
    shp_path = shp_path[id]
    
    tmpshp = shapefile(shp_path)
    return(tmpshp)
  }else if(pattern == 'whole_province'){
    shp_path = '/media/sdb5/Vapor_projcts/Vapor_yellow_river/shp/full_province.shp'
    tmpshp = shapefile(shp_path)
    return(tmpshp)
  }else if(pattern == 'eco_subregions'){
    shp_path = '/media/sdb5/Vapor_projcts/Vapor_yellow_river/shp/ChinaGeoEcoRegionsshp/ChinaGeoEcoRegions.shp'
    tmpshp = shapefile(shp_path)
    return(tmpshp)
  }else if(pattern == 'yrb_subregions'){
    base = '/media/sdb5/Vapor_projcts/Vapor_yellow_river'
    shp_path = 'shp/yrb_cluster'
    shp_path = paste0(shp_path,'/',
                      'region',1:7,'.shp')
    shp_path = paste0(base,'/',shp_path)
    
    shp_li = lapply(shp_path,shapefile)
    return(shp_li)
    
  }else if(pattern == 'sanjiangyuan'){
    input = '/media/sdb5/Vapor_projcts/Vapor_tibet/shp/sanjiangyuan/Sanjiangyuan_Boundary.shp'
    shp = shapefile(input)
    return(shp)
    
  }else if(pattern == 'neg_points'){
    input = 'shp/neg_points/'
    input = list.files(input,full.names = T,
                       pattern = '*.shp$')[c(2,4,5)]
    
    shp = lapply(input,shapefile)
    shp1 = as.data.frame(shp[[1]],xy = T) 
    shp2 = as.data.frame(shp[[2]],xy = T)
    shp3 = as.data.frame(shp[[3]],xy = T)
    
    shps = data.frame(
      long = c(shp1$coords.x1,shp2$coords.x1,shp3$coords.x1),
      lat = c(shp1$coords.x2,shp2$coords.x2,shp3$coords.x2)
      
    )
    return(shps)
  }else if(pattern == 'asiarivers'){
    setwd('/media/sdb5/Vapor_projcts/Vapor_tibet')
    path = 'shp//asia_rivers/asrivs.shp'
    
    shps = shapefile(path)
    
    return(shps)
  }else if(pattern == 'tibet_river'){
    setwd('/media/sdb5/Vapor_projcts/Vapor_tibet')
    path = 'shp/tibet_river/tibet_river.shp'
    shps = shapefile(path)
    return(shps)
  }else if(pattern == 'china'){
    #setwd('/media/sdb5/Vapor_projcts/Vapor_tibet')
    path = '/media/sdb1/shp/China/China.shp'
    shps = shapefile(path)
    return(shps)
  }else if(pattern == 'china_city'){
    #setwd('/media/sdb5/Vapor_projcts/Vapor_tibet')
    path = '/media/sdb1/shp/China/cities.shp'
    shps = shapefile(path)
    return(shps)
  }else if(pattern == 'cluster_ato'){
    path = '/home/share/R_project/xinjiang_vapor/cluster_shp/ato'
    path = paste0(path,'/ato',1:4,'.shp')
    shps = lapply(path,shapefile)
    return(shps)
  }else if(pattern == 'cluster_io'){
    path = '/media/sdb5/Vapor_projcts/Vapor_tibet/shp/cluster_io'
    path = paste0(path,'/region',1:4,'.shp')
    shps = lapply(path,shapefile)
    return(shps)
  }
  
  
  
  
  
  
  
}


  
  
figs_attribution_pmetwsinsubs_ato_io <- function(
  pmeato,pmeio,twssubs
){
  colnames(pmeato) = paste0('PME_NATO',1:4)
  colnames(pmeio) = paste0('PME_IO',1:4)
  colnames(twssubs) = paste0('TWS_Sub',1:3)
  
  pmeato = as.data.frame(pmeato)
  pmeio = as.data.frame(pmeio)
  twssubs = as.data.frame(twssubs)
  
  i = 1:3
  
  sub_fun <-function(i){
    tmptws = as.numeric(twssubs[,i])
    
    tmpmodel = lm(tmptws ~ 
                    pmeato$PME_NATO1+
                    pmeato$PME_NATO2+
                    pmeato$PME_NATO3+
                    pmeato$PME_NATO4+
                    pmeio$PME_IO1+
                    pmeio$PME_IO2+
                    pmeio$PME_IO3+
                    pmeio$PME_IO4)
    tmpcoef = tmpmodel$coefficients
    
  }
  
  
  
}
figs_bar_cor_twssubs_pmeato <- function(
  
){
  input_pmeato = 'main_plot_data/fig2/stand_pmeato.csv'
  input_twssubs = 'main_plot_data/fig2/tws_subs.csv'
  
  twssubs = as.data.frame(fread(input_twssubs))
  pmeato = as.data.frame(fread(input_pmeato))
  pmeato = pmeato[,1:4]
  
  corbox = 1
  lagbox = 1
  pvbox = 1
  for(i in 1:ncol(pmeato)){
    tmpcor1 = 1
    tmplag1 = 1
    tmppv1 = 1
    for(j in 1:ncol(twssubs)){
      tmpcor2 = max(ccf(twssubs[,j],pmeato[,i])$acf)
      maxid = which.max(ccf(twssubs[,j],pmeato[,i])$acf)
      tmplag2 = ccf(twssubs[,j],pmeato[,i])$lag[maxid]
      tmppv2 = cor.test(twssubs[,j],pmeato[,i])$p.value
      
      tmpcor1 = c(tmpcor1,tmpcor2)
      tmplag1 = c(tmplag1,tmplag2)
      tmppv1 = c(tmppv1,tmppv2)
  
    }
    tmpcor1 = tmpcor1[-1]
    tmplag1 = tmplag1[-1]
    tmppv1 = tmppv1[-1]
    
    corbox = cbind(corbox,tmpcor1)
    lagbox = cbind(lagbox,tmplag1)
    pvbox = cbind(pvbox,tmppv1)
  }
  corbox = corbox[,-1]
  lagbox = lagbox[,-1]
  pvbox = pvbox[,-1]
    
  corbox = t(corbox)
  lagbox = t(lagbox)
  pvbox = t(pvbox)
  
  colnames(corbox) =paste0('HSR',1:14)
  colnames(corbox)[-c(2,3)] = paste0('HSR',1:12)
  colnames(corbox)[c(2,3)] = paste0('LSR',1:2)
  
  
  dfcor = data.frame(
    region = paste0('NATO',1:4),
    corbox
  )
  
  
  dfcor  = reshape2::melt(dfcor,'region')
  
  dfcor$levels = cut(dfcor$value,
                     breaks = c(-0.25,0,0.4,0.6,0.8,1))
  
  nclass = length(unique(dfcor$levels))
  
  
  dfpvbox = data.frame(
    region = paste0('PME_NATO',1:4),
    pvbox
  )
  dfpvbox = reshape2::melt(dfpvbox,'region')
  dfpvbox$label = '**'
  less001 = which(dfpvbox$value<=0.01)
  less005 = which(dfpvbox$value <= 0.05)
  large005 = which(dfpvbox$value >0.05)
  
  dfpvbox$label[less005] = '*'
  dfpvbox$label[less001] = '**'
  dfpvbox$label[large005] = ''

  dfcor$label = paste0(
    round(dfcor$value,2),'\n',dfpvbox$label
  )
  
  dfcor2 = dfcor[which(dfcor$value >=0.4),]
  fontsize = 14
  text_theme = theme(
    legend.text = element_text(size =fontsize,
                               color = 'black'),
    legend.title = element_text(size = fontsize,
                                color = 'black'),
    axis.text = element_text(size = fontsize,
                             color = 'black'),
    axis.title = element_text(size = fontsize,
                              color = 'black'),
    axis.text.y = element_text(angle = 90,hjust = 0.5,
                               vjust = 0.5)
  )
  
  p1 = ggplot()+
    geom_tile(data = dfcor,
              aes(y = region, x = variable,
                  fill = levels),
              color = 'white')+
    geom_text(data = dfcor2,
              aes(x = variable,
                  y = region,
                  label = label),
              size = 5,
              color = 'black')+
    scale_fill_brewer(palette = 'Spectral')+
    theme_bw()+
    text_theme+
    xlab('')+
    ylab('')
  
  # plot map 
  world = shp_management('world')
  world = crop(world,extent(-20,180,0,90))
  
  tibet = shp_management('tibet')
  
  bigsubs = 'shp/big_scale_subs/'
  hsrid = as.data.frame(fread('main_plot_data/fig2/HSRid.csv'))
  hsrid = as.numeric(hsrid$HSRid)
  
  bigsubs = paste0(bigsubs,
                   'region',1:15,'.shp')
  bigsubs = bigsubs[-14]

  hsr = lapply(bigsubs[-c(2,3)],shapefile)
  lsr = lapply(bigsubs[c(2,3)],shapefile)
  
  loc_center_longlat <- function(x){
    library(raster)
    x = extent(x)
    cenlong = (x[1]+x[2])/2
    cenlat = (x[3]+x[4])/2
    ret = data.frame(
      long = cenlong,
      lat = cenlat
    )
    return(ret)    
  }
  
  dfhsr =do.call('rbind',lapply(hsr,loc_center_longlat))
  dflsr = do.call('rbind',lapply(lsr,loc_center_longlat))
  
  dfhsr$label = paste0('HSR',1:12)
  dflsr$label = paste0('LSR',1:2)
  
  hsr = do.call('bind',hsr)
  lsr = do.call('bind',lsr)
  
  fils = brewer.pal(4,'Spectral')[c(1,4)]
  library(ggrepel)
  pmap = ggplot()+
    geom_polygon(data = world,
                 aes(x = long,y = lat,
                     group= group),
                 size = 0.5,
                 color = 'black',
                 fill = 'transparent')+
    geom_polygon(data = tibet,
                 aes(x = long,y = lat,
                     group= group),
                 size = 0.5,
                 color = 'black',
                 fill = 'transparent')+
    geom_polygon(data = hsr,
                 aes(x = long,y = lat,
                     group = group),
                 size  = 0.8,
                 color = 'black',
                 fill = fils[2],
                 alpha = 0.3)+
    geom_polygon(data = lsr,
                 aes(x = long,y = lat,
                     group = group),
                 size  = 0.8,
                 color = 'black',
                 fill = fils[2],
                 alpha = 0.3)+
    geom_text_repel(data = dfhsr,
              aes(x = long,y = lat,
                  label = label),
              size = 5,
              color = 'black',
              bg.color = 'white',
              bg.r =0.25,
              force = F)+
    geom_text_repel(data = dflsr,
                    aes(x = long,y = lat,
                        label = label),
                    size = 5,
                    color = 'black',
                    bg.color = 'white',
                    bg.r =0.25,
                    force = F)+
    scale_x_continuous(breaks = c(0,50,100,150),
                       labels = c('0°',paste0(c(50,100,150),'°E')))+
    scale_y_continuous(breaks = c(0,20,40,60,80),
                       labels = c('0°',paste0(c(20,40,60,80),'°N')))+
    theme_bw()+
    text_theme+
    xlab('Longitude')+
    ylab('Latitude')
  
  p1 = p1 + theme(legend.position = 'bottom')
  
  p12 = plot_grid(
    pmap,p1,
    rel_widths = c(1,1),
    rel_heights = c(1.2,1.2),
    ncol = 1
  )
  
  output = 'main_plot/SI/generate_hsrlsr_subs'
  dir.create(output)
  output = paste0(output,'/fig_hsrlsr.png')
  png(output,
      height = 23,
      width = 25,
      units = 'cm',
      res = 800)
  print(p12)
  dev.off()
    
  
  
  
  
    
  
  
  
  
    
  
  
  
  
  
  
}
figs_combine_mca_trend_cross_correlation<- function(
  
){
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/fig_mca_tibet_plot_leadingmode.R")
  p1 = fig_mca_tibet_plot_leadingmode()
  
  p2 = figs_trend_pme_tws()
  
  p2 = p2 + theme(legend.position = 'bottom')
  
  p2leg = as_ggplot(get_legend(p2))
  
  p2 = p2 + theme(legend.position = 'none')
  
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/fig_mca_tibet_plot_leadingmode_subplot.R")
  p3 = fig_mca_tibet_plot_leadingmode_subplot()
  
  p12 = plot_grid(
    p1,p2,
    rel_heights = c(1,1,1),
    rel_widths = c(1,1,1),
    ncol = 1
  )
  
  p123 = plot_grid(
    p12,p3,
    rel_heights = c(1,1),
    rel_widths = c(2.5,1),
    ncol = 2
    
  )
  
  output = 'main_plot/SI/combine_mca_trend'
  dir.create(output)
  output_leg = paste0(output,'leg1.png')
  output = paste0(output,'/fig_mca_trend2.png')
  
  png(output,
      height = 23,
      width = 28,
      units = 'cm',
      res = 800)
  print(p123)
  dev.off()
  
  png(output_leg,
      height = 23,
      width = 28,
      units = 'cm',
      res = 800)
  print(p2leg)
  dev.off()
  
  
  
}
figs_compare_pmeoce_pmeland_cor <- function(
  
){
  input_pmeato_cor = 'main_plot/SI/covar_cor_pmeato_pmesubs/dfcors.csv'
  input_pmeio_cor = 'main_plot/SI/covar_cor_pmeio_pmesubs/dfcors.csv'
  
  
  atocor = as.data.frame(fread(input_pmeato_cor))
  iocor = as.data.frame(fread(input_pmeio_cor))
  
  id1ato = which(atocor$region == 'SR1')
  id2ato = which(atocor$region == 'SR2')
  id3ato = which(atocor$region == 'SR3')
  
  id1io = which(iocor$region == 'SR1')
  id2io = which(iocor$region == 'SR2')
  id3io = which(iocor$region == 'SR3')
  
  
  sr1ato = atocor[id1ato,]
  sr2ato = atocor[id2ato,]
  sr3ato = atocor[id3ato,]
  
  sr1io = iocor[id1io,]
  sr2io = iocor[id2io,]
  sr3io = iocor[id3io,]
  
  sr1 = rbind(sr1ato,sr1io)
  sr2 = rbind(sr2ato,sr2io)
  sr3 = rbind(sr3ato,sr3io)
  
  odi1 = order(sr1$value,decreasing = T)
  odi2 = order(sr2$value,decreasing = T)
  odi3 = order(sr3$value,decreasing = T)
  
  
  sr1 = sr1[odi1,]
  sr2 = sr2[odi2,]
  sr3 = sr3[odi3,]
  
  region1 = sr1$variable
  region2 = sr2$variable
  region3 = sr3$variable
  
  
  sr1$variable = factor(sr1$variable,
                        levels = region1)
  sr2$variable = factor(sr2$variable,
                        levels = region2)
  sr3$variable = factor(sr3$variable,
                        levels = region3)
  
  
  fils = pal_npg()(8)
  fils = c('IO1' = fils[1],
           'IO2' = fils[2],
           'IO3' = fils[3],
           'IO4' = fils[4],
           'NATO1' = fils[5],
           'NATO2' = fils[6],
           'NATO3' = fils[7],
           'NATO4' = fils[8])
  fontsize = 14
  text_theme = theme(
    legend.text =  element_text(size = fontsize,
                                color = 'black'),
    legend.title =  element_text(size = fontsize,
                                 color = 'black'),
    axis.text  =  element_text(size = fontsize,
                                color = 'black'),
    axis.title =  element_text(size = fontsize,
                                 color = 'black')
    
  )
  pbar1 = ggplot()+
    geom_bar(data = sr1,
             aes(x = variable,y = value,
                 fill = variable),
             stat = 'identity',
             position = position_dodge2(0.7),
             width = 0.7)+
    geom_text(data = sr1,
              aes(x = variable,y = value*0.5,
                  label = pvlabel),
              size = 5,
              color = 'white',
              position = position_dodge2(0.7))+
    geom_text(data = sr1,
              aes(x = variable,y = value *1.1,
                  label = value),
              size = 5,
              color = 'black',
              position = position_dodge2(0.7))+
    scale_fill_manual(values = fils)+
    #facet_wrap(~type,nrow = 3,scales = 'free')+
    theme_bw()+
    text_theme+
    xlab('')+
    ylab('')+
    theme(legend.position = 'none')
  
  pbar2 = ggplot()+
    geom_bar(data = sr2,
             aes(x = variable,y = value,
                 fill = variable),
             stat = 'identity',
             position = position_dodge2(0.7),
             width = 0.7)+
    geom_text(data = sr2,
              aes(x = variable,y = value*0.5,
                  label = pvlabel),
              size = 5,
              color = 'white',
              position = position_dodge2(0.7))+
    geom_text(data = sr2,
              aes(x = variable,y = value *1.1,
                  label = value),
              size = 5,
              color = 'black',
              position = position_dodge2(0.7))+
    
    scale_fill_manual(values = fils)+
    #facet_wrap(~type,nrow = 3,scales = 'free')+
    theme_bw()+
    text_theme+
    xlab('')+
    ylab('')+
    theme(legend.position = 'none')
  
  pbar3 = ggplot()+
    geom_bar(data = sr3,
             aes(x = variable,y = value,
                 fill = variable),
             stat = 'identity',
             position = position_dodge2(0.7),
             width = 0.7)+
    geom_text(data = sr3,
              aes(x = variable,y = value*0.5,
                  label = pvlabel),
              size = 5,
              color = 'white',
              position = position_dodge2(0.7))+
    geom_text(data = sr3,
              aes(x = variable,y = value *1.1,
                  label = value),
              size = 5,
              color = 'black',
              position = position_dodge2(0.7))+
    
    scale_fill_manual(values = fils)+
    #facet_wrap(~type,nrow = 3,scales = 'free')+
    theme_bw()+
    text_theme+
    xlab('')+
    ylab('')+
    theme(legend.position = 'none')
  
  
  pbars = plot_grid(
    pbar1,pbar2,pbar3,
    rel_widths = c(1,1,1),
    rel_heights = c(1,1,1),
    ncol = 1
  )
  
  output = 'main_plot/SI/compare_pmeoce_pmesubs_cor'
  dir.create(output)
  output_leg = paste0(output,'/leg.png')
  output = paste0(output,'/figs_pme_pme_cor.png')
  
  png(output,
      width = 25,
      height = 25,
      res = 800,
      units = 'cm')
  print(pbars)
  dev.off()
  
  
  library(ggpubr)
  legs = as_ggplot(get_legend(pbar1+
                                theme(legend.position ='bottom')))
  
  png(output_leg,
      width = 25,
      height = 25,
      res = 800,
      units = 'cm')
  print(legs)
  dev.off()
  
  
  
    
  
  
  
}
figs_compare_pmeoce_twsland_cor <- function(
  
){
  input_pmeato_cor = 'main_plot/SI/covar_cor_pmeato_twssubs/dfcors.csv'
  input_pmeio_cor = 'main_plot/SI/covar_cor_pmeio_twssubs/dfcors.csv'
  
  
  atocor = as.data.frame(fread(input_pmeato_cor))
  iocor = as.data.frame(fread(input_pmeio_cor))
  
  id1ato = which(atocor$region == 'SR1')
  id2ato = which(atocor$region == 'SR2')
  id3ato = which(atocor$region == 'SR3')
  
  id1io = which(iocor$region == 'SR1')
  id2io = which(iocor$region == 'SR2')
  id3io = which(iocor$region == 'SR3')
  
  
  sr1ato = atocor[id1ato,]
  sr2ato = atocor[id2ato,]
  sr3ato = atocor[id3ato,]
  
  sr1io = iocor[id1io,]
  sr2io = iocor[id2io,]
  sr3io = iocor[id3io,]
  
  sr1 = rbind(sr1ato,sr1io)
  sr2 = rbind(sr2ato,sr2io)
  sr3 = rbind(sr3ato,sr3io)
  
  odi1 = order(sr1$value,decreasing = T)
  odi2 = order(sr2$value,decreasing = T)
  odi3 = order(sr3$value,decreasing = T)
  
  
  sr1 = sr1[odi1,]
  sr2 = sr2[odi2,]
  sr3 = sr3[odi3,]
  
  region1 = sr1$variable
  region2 = sr2$variable
  region3 = sr3$variable
  
  
  sr1$variable = factor(sr1$variable,
                        levels = region1)
  sr2$variable = factor(sr2$variable,
                        levels = region2)
  sr3$variable = factor(sr3$variable,
                        levels = region3)
  
  
  fils = pal_npg()(8)
  
  fils = c('IO1' = fils[1],
           'IO2' = fils[2],
           'IO3' = fils[3],
           'IO4' = fils[4],
           'NATO1' = fils[5],
           'NATO2' = fils[6],
           'NATO3' = fils[7],
           'NATO4' = fils[8])
  fontsize = 14
  text_theme = theme(
    legend.text =  element_text(size = fontsize,
                                color = 'black'),
    legend.title =  element_text(size = fontsize,
                                 color = 'black'),
    axis.text  =  element_text(size = fontsize,
                               color = 'black'),
    axis.title =  element_text(size = fontsize,
                               color = 'black')
    
  )
  pbar1 = ggplot()+
    geom_bar(data = sr1,
             aes(x = variable,y = value,
                 fill = variable),
             stat = 'identity',
             position = position_dodge2(0.7),
             width = 0.7)+
    geom_text(data = sr1,
              aes(x = variable,y = value*0.5,
                  label = pvlabel),
              size = 5,
              color = 'white',
              position = position_dodge2(0.7))+
    geom_text(data = sr1,
              aes(x = variable,y = value *1.1,
                  label = value),
              size = 5,
              color = 'black',
              position = position_dodge2(0.7))+
    scale_fill_manual(values = fils)+
    #facet_wrap(~type,nrow = 3,scales = 'free')+
    theme_bw()+
    text_theme+
    theme(axis.text.y = element_text(angle = 90,hjust = 0.5))+
    xlab('')+
    ylab('')+
    theme(legend.position = 'none')
  
  pbar2 = ggplot()+
    geom_bar(data = sr2,
             aes(x = variable,y = value,
                 fill = variable),
             stat = 'identity',
             position = position_dodge2(0.7),
             width = 0.7)+
    geom_text(data = sr2,
              aes(x = variable,y = value*0.5,
                  label = pvlabel),
              size = 5,
              color = 'white',
              position = position_dodge2(0.7))+
    geom_text(data = sr2,
              aes(x = variable,y = value *1.1,
                  label = value),
              size = 5,
              color = 'black',
              position = position_dodge2(0.7))+
    
    scale_fill_manual(values = fils)+
    #facet_wrap(~type,nrow = 3,scales = 'free')+
    theme_bw()+
    text_theme+
    theme(axis.text.y = element_text(angle = 90,hjust = 0.5))+
    xlab('')+
    ylab('')+
    theme(legend.position = 'none')
  
  pbar3 = ggplot()+
    geom_bar(data = sr3,
             aes(x = variable,y = value,
                 fill = variable),
             stat = 'identity',
             position = position_dodge2(0.7),
             width = 0.7)+
    geom_text(data = sr3,
              aes(x = variable,y = value*0.5,
                  label = pvlabel),
              size = 5,
              color = 'white',
              position = position_dodge2(0.7))+
    geom_text(data = sr3,
              aes(x = variable,y = value *1.1,
                  label = value),
              size = 5,
              color = 'black',
              position = position_dodge2(0.7))+
    
    scale_fill_manual(values = fils)+
    #facet_wrap(~type,nrow = 3,scales = 'free')+
    theme_bw()+
    text_theme+
    theme(axis.text.y = element_text(angle = 90,hjust = 0.5))+
    xlab('')+
    ylab('')+
    theme(legend.position = 'none')
  
  
  pbars = plot_grid(
    pbar1,pbar2,pbar3,
    rel_widths = c(1,1,1),
    rel_heights = c(1,1,1),
    ncol = 1
  )
  
  output = 'main_plot/SI/compare_pmeoce_twssubs_cor'
  dir.create(output)
  output_leg = paste0(output,'/legends.pngs')
  output = paste0(output,'/figs_pme_tws_cor2.png')
  
  png(output,
      width = 25,
      height = 25,
      res = 800,
      units = 'cm')
  print(pbars)
  dev.off()
  
  
  library(ggpubr)
  legs = as_ggplot(get_legend(pbar1+
                                theme(legend.position ='bottom')))
  
  png(output_leg,
      width = 25,
      height = 25,
      res = 800,
      units = 'cm')
  print(legs)
  dev.off()
  
}
figs_compare_project_pos_result_by_snow_tws<-function(
  
){
  # Model 1 
  #Posarea_Multi_Projects_Mean
  #Posarea_SCT_TWSP
  t1 = figs_compare_project_results_basedon_mulit_calc_mean_and_nonproj_pt_snow()
  #Model 2
  #
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/figs_compare_project_results_basedon_mulit_calc_mean_and_nonproj_pt_snow_twsbypt.R")
  t2 = figs_compare_project_results_basedon_mulit_calc_mean_and_nonproj_pt_snow_twsbypt()
  
  # Modell 3
  t3 = figs_compare_project_results_basedon_mulit_calc_mean_and_proj_pt_snow_twsbyp()
  # Model 4
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/figs_compare_project_results_basedon_mulit_calc_mean_and_proj_pt_snow_twsbypt.R")
  t4 = figs_compare_project_results_basedon_mulit_calc_mean_and_proj_pt_snow_twsbypt()
  
  t1leg = as_ggplot(get_legend(t1))
  t2leg = as_ggplot(get_legend(t2))
  t3leg = as_ggplot(get_legend(t3))
  t4leg = as_ggplot(get_legend(t4))
  
  t1 = t1 +theme(
    legend.position = 'none'
  ) 
  
  t2 = t2 +theme(
    legend.position = 'none'
  ) 
  
  t3 = t3 +theme(
    legend.position = 'none'
  ) 
  
  t4 = t4 +theme(
    legend.position = 'none'
  ) 
    
    
  t = plot_grid(t1,t2,t3,t4,
                ncol = 1,
                rel_heights = c(1,1,1,1),
                rel_widths = c(1,1,1,1))
  
  output = 'main_plot/SI/compare_model1-4_posarea_by_snow'
  dir.create(output)
  output = paste0(output,'/figs.png')
  png(output,
      height = 25,
      width = 27,
      units = 'cm',
      res = 800)
  print(t)
  dev.off()
  
}
figs_compare_project_results_basedon_mulit_calc_mean_and_nonproj_pt_snow_twsbypt<-function(
  
){
  #source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/calc_project_multi_weighted_cmip6_pme_in_ato3.R")
  #calc_project_multi_weighted_cmip6_pme_in_ato3()
  #source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/project_pos_area_by_model_withtemper.R")
  #pos_area_multiwaeight = project_pos_area_by_model_withtemper()
  #fwrite(pos_area_multiweight,'output/future_pos_tws_area/multiweight_pos_tws_area_ensemble.csv')
  
  input1 = 'output/future_pos_tws_area_based_snow_tws/pos_tws_area_ensemble_ori_pme_t_tws_bypt.csv'
  input2 = 'output/future_pos_tws_area_based_snow_tws/pos_area_allcalc_mean.csv'
  
  pos_area_multiweight = as.data.frame(fread(input1))
  pos_area_ori = as.data.frame(fread(input2))
  
  pos_area_multiweight = pos_area_multiweight[3:81,]
  pos_area_ori = pos_area_ori[3:81,]
  
  yearfull = 2020:2098
  
  posarea245 = data.frame(
    date = yearfull,
    Posarea_Multi_Projects_Mean = pos_area_ori[,1],
    Posarea_SCT_TWSPT = pos_area_multiweight[,1]
  )
  posarea585 = data.frame(
    date = yearfull,
    Posarea_Multi_Projects_Mean = pos_area_ori[,2],
    Posarea_SCT_TWSPT = pos_area_multiweight[,2]
  )
  posarea245 = reshape2::melt(posarea245,'date')
  posarea585 = reshape2::melt(posarea585,'date')
  
  posarea245$type = '(a)'
  posarea585$type = '(c)'
  
  posareadf = rbind(posarea245,posarea585)
  
  cols = pal_lancet()(9)[c(1,7)]
  
  dfvline = data.frame(
    x = c(2020,2051,2082)
  )
  
  loc2051 = length(2020:2051)
  loc2082 = length(2020:2082)
  loc2098 = length(2020:2098)
  
  steadhigh_mean245 = data.frame(
    x = c(2030,2040),
    y = 235,
    value = c(mean(pos_area_ori[1:loc2051,1]),
              mean(pos_area_multiweight[1:loc2051,1])),
    variable = c('Posarea_Multi_Projects_Mean','Posarea_SCT_TWSPT'),
    type = '(a)'
  )
  steadhigh_mean585 = data.frame(
    x = c(2030,2040),
    y = 235,
    value = c(mean(pos_area_ori[1:loc2051,2]),
              mean(pos_area_multiweight[1:loc2051,2])),
    variable = c('Posarea_Multi_Projects_Mean','Posarea_SCT_TWSPT'),
    type = '(c)'
  )
  steadhigh_mean = rbind(steadhigh_mean245,steadhigh_mean585)
  steadhigh_mean$label = paste0('Mean: ',round(steadhigh_mean$value,2))
  
  dr245 = data.frame(
    x = c(2060,2075),
    y = 235,
    value = c(pos_area_ori[loc2082,1]-pos_area_ori[loc2051,1],
              pos_area_multiweight[loc2082,1] - pos_area_multiweight[loc2051,1]),
    variable = c('Posarea_Multi_Projects_Mean','Posarea_SCT_TWSPT'),
    type = '(a)'
  )
  
  dr585 = data.frame(
    x = c(2060,2075),
    y = 235,
    value = c(pos_area_ori[loc2082,2]-pos_area_ori[loc2051,2],
              pos_area_multiweight[loc2082,2] - pos_area_multiweight[loc2051,2]),
    variable = c('Posarea_Multi_Projects_Mean','Posarea_SCT_TWSPT'),
    type = '(c)'
  )
  dr = rbind(dr245,dr585)
  dr$label = paste0('Decline: ',round(dr$value,2))
  
  steadlow_mean245 = data.frame(
    x = c(2086),
    y = c(210,190)+25,
    value = c(mean(pos_area_ori[loc2082:loc2098,1]),
              mean(pos_area_multiweight[loc2082:loc2098,1])),
    variable = c('Posarea_Multi_Projects_Mean','Posarea_SCT_TWSPT'),
    type = '(a)'
  )
  steadlow_mean585 = data.frame(
    x = c(2086),
    y = c(210,190)+25,
    value = c(mean(pos_area_ori[loc2082:loc2098,2]),
              mean(pos_area_multiweight[loc2082:loc2098,2])),
    variable = c('Posarea_Multi_Projects_Mean','Posarea_SCT_TWSPT'),
    type = '(c)'
  )
  steadlow_mean = rbind(steadlow_mean245,steadlow_mean585)
  steadlow_mean$label = paste0('Mean: ',round(steadlow_mean$value,2))
  
  
  
  historical_mean = data.frame(
    x = 2067,
    y = 137.83+30,
    label = 'Historical mean: 137.83'
  )
  historical_min = data.frame(
    x = 2035,
    y = 73.38+5,
    label = 'Historical min: 73.38'
  )
  historical_label= rbind(historical_mean,historical_min)
  
  period_label = data.frame(
    x = c(2035,2066,2090),
    y = 10,
    label = c('Steadily high period \n 2020-2051(SHP)',
              'Decreasing period \n 2051-2082(DP)',
              'Steadily low period \n 2082-2098(SLP)')
  )
  
  figslabel = data.frame(x = 2020,
                         y = 235,
                         label = c('(a)','(b)'),
                         type = c('(a)','(c)'))
  blank_label = data.frame(
    x = 2035,
    y = 5,
    label = ''
  )
  fontsize =14
  text_theme = theme(
    legend.text = element_text(size = fontsize,color = 'black'),
    legend.title = element_text(size = fontsize,color = 'black'),
    axis.text = element_text(size = fontsize,color = 'black'),
    axis.title = element_text(size = fontsize,color = 'black')
  )
  
  linetype = c('Posarea_Multi_Projects_Mean'=1,
               'Posarea_SCT_TWSPT' = 3)
  pline = ggplot()+
    geom_text(data = blank_label,
              aes(x = x,y = y,label = label))+
    geom_vline(xintercept = c(2020,2051,2082,2098),
               size = 0.5,color = 'black')+
    geom_line(data = posareadf,
              aes(x = date,y = value,color = variable,
                  linetype = variable),
              size = 1.2)+
    geom_hline(yintercept = c(137.83,73.38),
               linetype = 'dashed',size = 0.5,color = 'black')+
    geom_text(data = steadhigh_mean,
              aes(x = x,y = y,label = label,color = variable),
              size= 4,hjust = 0.5,show.legend = F)+
    geom_text(data = dr,
              aes(x = x,y = y,label = label,color = variable),
              size= 4,hjust = 0.5,show.legend = F)+
    geom_text(data = steadlow_mean,
              aes(x = x,y = y,label = label,color = variable),
              size= 4,hjust = 0,show.legend = F)+
    geom_text(data = historical_label,
              aes(x = x,y = y,label = label),
              size= 4,hjust = 0.5,color = 'black')+
    geom_text(data = period_label,
              aes(x = x,y = y,label = label),
              size= 4,hjust = 0.5,color = 'black')+
    geom_text(data = figslabel,
              aes(x = x,y = y,label = label),
              size = 4,hjust = 0,color = 'black')+
    scale_color_manual(values = cols)+
    scale_linetype_manual(values = linetype)+
    #ylim(40,240)+
    theme_bw()+
    facet_wrap(~type,nrow = 2,scales = 'free_y')+
    theme(axis.text.y = element_text(angle = 90,hjust = 0.5),
          strip.text = element_blank(),
          panel.grid = element_blank())+
    theme(legend.position = 'bottom')+
    text_theme+
    scale_y_continuous(breaks = c(10,73.38,
                                  137.83,200),
                       labels =c(10,73.38,
                                 137.83,200) )+
    scale_x_continuous(breaks = c(2020,2051,2082,2098))+
    guides(color = guide_legend(title = ''),
           linetype = guide_legend(title = ''))+
    theme(legend.key.width = unit(2,'cm'))+
    xlab('Time')+
    ylab("Positive TWS area (10 km )")
  
  
  output = 'main_plot/SI/figs_compare_muliti_calc_mean_snowmodel2'
  dir.create(output)
  output = paste0(output,'/figs_covar_projectws.png')
  
  #return(pline)
  png(output,
      height = 20,
      width = 25,
      units = 'cm',
      res = 800)
  print(pline)
  dev.off()
  return('')
  break
  # pbar 
  source("/home/share/R_project/xinjiang_vapor/mmkTrend.R")
  calc_mmk <- function(x){
    x = mmkTrend(x)$Zc
    return(x)
  }
  pos_area_ori_mmk= apply(pos_area_ori,2,calc_mmk)
  pos_area_multi_mmk = apply(pos_area_multiweight,2,calc_mmk)
  
  mmk245 = data.frame(
    x = c('Posarea_Multi_Projects_Mean','Posarea_SCT_TWSPT'),
    y = c(pos_area_ori_mmk[1],pos_area_multi_mmk[1]),
    variable = c('Posarea_Multi_Projects_Mean','Posarea_SCT_TWSPT'),
    type = c('(b)','(b)')
  )
  mmk585 = data.frame(
    x =c('Posarea_Multi_Projects_Mean','Posarea_SCT_TWSPT'),
    y = c(pos_area_ori_mmk[2],pos_area_multi_mmk[2]),
    variable =c('Posarea_Multi_Projects_Mean','Posarea_SCT_TWSPT'),
    type = c('(d)','(d)')
  )
  
  mmkdf = rbind(mmk245,mmk585)
  
  pbar = ggplot()+
    geom_bar(data = mmkdf,
             aes(x = x,y= y, fill = variable),
             stat ='identity',
             position = position_dodge2(0.7),width = 0.7)+
    theme_bw()+
    facet_wrap(~type,nrow = 2)+
    scale_fill_manual(values = cols)+
    theme(axis.text.y = element_text(angle = 90,hjust = 0.5),
          strip.text = element_blank(),
          panel.grid = element_blank())+
    theme(legend.position = 'none')+
    xlab('')+
    ylab("MMK trend of posarea TWS")
  
  
  
  
  
}
figs_compare_project_results_basedon_mulit_calc_mean_and_nonproj_pt_snow<-function(
  
){
  #source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/calc_project_multi_weighted_cmip6_pme_in_ato3.R")
  #calc_project_multi_weighted_cmip6_pme_in_ato3()
  #source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/project_pos_area_by_model_withtemper.R")
  #pos_area_multiwaeight = project_pos_area_by_model_withtemper()
  #fwrite(pos_area_multiweight,'output/future_pos_tws_area/multiweight_pos_tws_area_ensemble.csv')
  
  input1 = 'output/future_pos_tws_area_based_snow_tws/pos_tws_area_ensemble_ori_pme_t.csv'
  input2 = 'output/future_pos_tws_area_based_snow_tws/pos_area_allcalc_mean.csv'
  
  pos_area_multiweight = as.data.frame(fread(input1))
  pos_area_ori = as.data.frame(fread(input2))
  
  pos_area_multiweight = pos_area_multiweight[3:81,]
  pos_area_ori = pos_area_ori[3:81,]
  
  yearfull = 2020:2098
  
  posarea245 = data.frame(
    date = yearfull,
    Posarea_Multi_Projects_Mean = pos_area_ori[,1],
    Posarea_SCT_TWSP = pos_area_multiweight[,1]
  )
  posarea585 = data.frame(
    date = yearfull,
    Posarea_Multi_Projects_Mean = pos_area_ori[,2],
    Posarea_SCT_TWSP = pos_area_multiweight[,2]
  )
  posarea245 = reshape2::melt(posarea245,'date')
  posarea585 = reshape2::melt(posarea585,'date')
  
  posarea245$type = '(a)'
  posarea585$type = '(c)'
  
  posareadf = rbind(posarea245,posarea585)
  
  cols = pal_lancet()(9)[c(1,7)]
  
  dfvline = data.frame(
    x = c(2020,2051,2082)
  )
  
  loc2051 = length(2020:2051)
  loc2082 = length(2020:2082)
  loc2098 = length(2020:2098)
  
  steadhigh_mean245 = data.frame(
    x = c(2030,2040),
    y = 235,
    value = c(mean(pos_area_ori[1:loc2051,1]),
              mean(pos_area_multiweight[1:loc2051,1])),
    variable = c('Posarea_Multi_Projects_Mean','Posarea_SCT_TWSP'),
    type = '(a)'
  )
  steadhigh_mean585 = data.frame(
    x = c(2030,2040),
    y = 235,
    value = c(mean(pos_area_ori[1:loc2051,2]),
              mean(pos_area_multiweight[1:loc2051,2])),
    variable = c('Posarea_Multi_Projects_Mean','Posarea_SCT_TWSP'),
    type = '(c)'
  )
  steadhigh_mean = rbind(steadhigh_mean245,steadhigh_mean585)
  steadhigh_mean$label = paste0('Mean: ',round(steadhigh_mean$value,2))
  
  dr245 = data.frame(
    x = c(2060,2075),
    y = 235,
    value = c(pos_area_ori[loc2082,1]-pos_area_ori[loc2051,1],
              pos_area_multiweight[loc2082,1] - pos_area_multiweight[loc2051,1]),
    variable = c('Posarea_Multi_Projects_Mean','Posarea_SCT_TWSP'),
    type = '(a)'
  )
  
  dr585 = data.frame(
    x = c(2060,2075),
    y = 235,
    value = c(pos_area_ori[loc2082,2]-pos_area_ori[loc2051,2],
              pos_area_multiweight[loc2082,2] - pos_area_multiweight[loc2051,2]),
    variable = c('Posarea_Multi_Projects_Mean','Posarea_SCT_TWSP'),
    type = '(c)'
  )
  dr = rbind(dr245,dr585)
  dr$label = paste0('Decline: ',round(dr$value,2))
  
  steadlow_mean245 = data.frame(
    x = c(2086),
    y = c(210,190)+25,
    value = c(mean(pos_area_ori[loc2082:loc2098,1]),
              mean(pos_area_multiweight[loc2082:loc2098,1])),
    variable = c('Posarea_Multi_Projects_Mean','Posarea_SCT_TWSP'),
    type = '(a)'
  )
  steadlow_mean585 = data.frame(
    x = c(2086),
    y = c(210,190)+25,
    value = c(mean(pos_area_ori[loc2082:loc2098,2]),
              mean(pos_area_multiweight[loc2082:loc2098,2])),
    variable = c('Posarea_Multi_Projects_Mean','Posarea_SCT_TWSP'),
    type = '(c)'
  )
  steadlow_mean = rbind(steadlow_mean245,steadlow_mean585)
  steadlow_mean$label = paste0('Mean: ',round(steadlow_mean$value,2))
  
  
  
  historical_mean = data.frame(
    x = 2067,
    y = 137.83+30,
    label = 'Historical mean: 137.83'
  )
  historical_min = data.frame(
    x = 2035,
    y = 73.38+5,
    label = 'Historical min: 73.38'
  )
  historical_label= rbind(historical_mean,historical_min)
  
  period_label = data.frame(
    x = c(2035,2066,2090),
    y = 10,
    label = c('Steadily high period \n 2020-2051(SHP)',
              'Decreasing period \n 2051-2082(DP)',
              'Steadily low period \n 2082-2098(SLP)')
  )
  
  figslabel = data.frame(x = 2020,
                         y = 235,
                         label = c('(a)','(b)'),
                         type = c('(a)','(c)'))
  blank_label = data.frame(
    x = 2035,
    y = 5,
    label = ''
  )
  fontsize =14
  text_theme = theme(
    legend.text = element_text(size = fontsize,color = 'black'),
    legend.title = element_text(size = fontsize,color = 'black'),
    axis.text = element_text(size = fontsize,color = 'black'),
    axis.title = element_text(size = fontsize,color = 'black')
  )
  
  linetype = c('Posarea_Multi_Projects_Mean'=1,
              'Posarea_SCT_TWSP' = 2)
  pline = ggplot()+
    geom_text(data = blank_label,
              aes(x = x,y = y,label = label))+
    geom_vline(xintercept = c(2020,2051,2082,2098),
               size = 0.5,color = 'black')+
    geom_line(data = posareadf,
              aes(x = date,y = value,color = variable,
                  linetype = variable),
              size = 1.2)+
    geom_hline(yintercept = c(137.83,73.38),
               linetype = 'dashed',size = 0.5,color = 'black')+
    geom_text(data = steadhigh_mean,
              aes(x = x,y = y,label = label,color = variable),
              size= 4,hjust = 0.5,show.legend = F)+
    geom_text(data = dr,
              aes(x = x,y = y,label = label,color = variable),
              size= 4,hjust = 0.5,show.legend = F)+
    geom_text(data = steadlow_mean,
              aes(x = x,y = y,label = label,color = variable),
              size= 4,hjust = 0,show.legend = F)+
    geom_text(data = historical_label,
              aes(x = x,y = y,label = label),
              size= 4,hjust = 0.5,color = 'black')+
    geom_text(data = period_label,
              aes(x = x,y = y,label = label),
              size= 4,hjust = 0.5,color = 'black')+
    geom_text(data = figslabel,
              aes(x = x,y = y,label = label),
              size = 4,hjust = 0,color = 'black')+
    scale_color_manual(values = cols)+
    scale_linetype_manual(values = linetype)+
    #ylim(40,240)+
    theme_bw()+
    facet_wrap(~type,nrow = 2,scales = 'free_y')+
    theme(axis.text.y = element_text(angle = 90,hjust = 0.5),
          strip.text = element_blank(),
          panel.grid = element_blank())+
    theme(legend.position = 'bottom')+
    text_theme+
    scale_y_continuous(breaks = c(10,73.38,
                                  137.83,200),
                       labels =c(10,73.38,
                                 137.83,200) )+
    scale_x_continuous(breaks = c(2020,2051,2082,2098))+
    guides(color = guide_legend(title = ''),
           linetype = guide_legend(title = ''))+
    theme(legend.key.width = unit(2,'cm'))+
    xlab('Time')+
    ylab("Positive TWS area (10 km )")
  
  
  output = 'main_plot/SI/figs_compare_muliti_calc_mean_snowmodel1'
  dir.create(output)
  output = paste0(output,'/figs_covar_projectws.png')
  
  #return(pline)
  png(output,
      height = 20,
      width = 25,
      units = 'cm',
      res = 800)
  print(pline)
  dev.off()
  return('')
  
  break
  # pbar 
  source("/home/share/R_project/xinjiang_vapor/mmkTrend.R")
  calc_mmk <- function(x){
    x = mmkTrend(x)$Zc
    return(x)
  }
  pos_area_ori_mmk= apply(pos_area_ori,2,calc_mmk)
  pos_area_multi_mmk = apply(pos_area_multiweight,2,calc_mmk)
  
  mmk245 = data.frame(
    x = c('Posarea_Multi_Projects_Mean','Posarea_SCT_TWSP'),
    y = c(pos_area_ori_mmk[1],pos_area_multi_mmk[1]),
    variable = c('Posarea_Multi_Projects_Mean','Posarea_SCT_TWSP'),
    type = c('(b)','(b)')
  )
  mmk585 = data.frame(
    x =c('Posarea_Multi_Projects_Mean','Posarea_SCT_TWSP'),
    y = c(pos_area_ori_mmk[2],pos_area_multi_mmk[2]),
    variable =c('Posarea_Multi_Projects_Mean','Posarea_SCT_TWSP'),
    type = c('(d)','(d)')
  )
  
  mmkdf = rbind(mmk245,mmk585)
  
  pbar = ggplot()+
    geom_bar(data = mmkdf,
             aes(x = x,y= y, fill = variable),
             stat ='identity',
             position = position_dodge2(0.7),width = 0.7)+
    theme_bw()+
    facet_wrap(~type,nrow = 2)+
    scale_fill_manual(values = cols)+
    theme(axis.text.y = element_text(angle = 90,hjust = 0.5),
          strip.text = element_blank(),
          panel.grid = element_blank())+
    theme(legend.position = 'none')+
    xlab('')+
    ylab("MMK trend of posarea TWS")
  
  
  
  
  
}
figs_compare_project_results_basedon_mulit_calc_mean_and_nonproj_pt<-function(
  
){
  #source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/calc_project_multi_weighted_cmip6_pme_in_ato3.R")
  #calc_project_multi_weighted_cmip6_pme_in_ato3()
  #source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/project_pos_area_by_model_withtemper.R")
  #pos_area_multiwaeight = project_pos_area_by_model_withtemper()
  #fwrite(pos_area_multiweight,'output/future_pos_tws_area/multiweight_pos_tws_area_ensemble.csv')
  
  input1 = 'output/future_pos_tws_area/pos_tws_area_ensemble_noproj_temper_pme.csv'
  input2 = 'output/future_pos_tws_area/pos_area_allcalc_mean.csv'
  
  pos_area_multiweight = as.data.frame(fread(input1))
  pos_area_ori = as.data.frame(fread(input2))
  
  pos_area_multiweight = pos_area_multiweight[5:81,]
  pos_area_ori = pos_area_ori[5:81,]
  
  yearfull = 2022:2098
  
  posarea245 = data.frame(
    date = yearfull,
    Posarea_Multi_Projects_Mean = pos_area_ori[,1],
    Posarea_PME_T = pos_area_multiweight[,1]
  )
  posarea585 = data.frame(
    date = yearfull,
    Posarea_Multi_Projects_Mean = pos_area_ori[,2],
    Posarea_PME_T = pos_area_multiweight[,2]
  )
  posarea245 = reshape2::melt(posarea245,'date')
  posarea585 = reshape2::melt(posarea585,'date')
  
  posarea245$type = '(a)'
  posarea585$type = '(c)'
  
  posareadf = rbind(posarea245,posarea585)
  
  cols = pal_lancet()(9)[c(1,7)]
  
  dfvline = data.frame(
    x = c(2022,2052,2082)
  )
  
  loc2052 = length(2022:2052)
  loc2082 = length(2022:2082)
  loc2098 = length(2022:2098)
  
  steadhigh_mean245 = data.frame(
    x = c(2030,2040),
    y = 235,
    value = c(mean(pos_area_ori[1:loc2052,1]),
              mean(pos_area_multiweight[1:loc2052,1])),
    variable = c('Posarea_Multi_Projects_Mean','Posarea_PME_T'),
    type = '(a)'
  )
  steadhigh_mean585 = data.frame(
    x = c(2030,2040),
    y = 235,
    value = c(mean(pos_area_ori[1:loc2052,2]),
              mean(pos_area_multiweight[1:loc2052,2])),
    variable = c('Posarea_Multi_Projects_Mean','Posarea_PME_T'),
    type = '(c)'
  )
  steadhigh_mean = rbind(steadhigh_mean245,steadhigh_mean585)
  steadhigh_mean$label = paste0('Mean: ',round(steadhigh_mean$value,2))
  
  dr245 = data.frame(
    x = c(2060,2075),
    y = 235,
    value = c(pos_area_ori[loc2082,1]-pos_area_ori[loc2052,1],
              pos_area_multiweight[loc2082,1] - pos_area_multiweight[loc2052,1]),
    variable = c('Posarea_Multi_Projects_Mean','Posarea_PME_T'),
    type = '(a)'
  )
  
  dr585 = data.frame(
    x = c(2060,2075),
    y = 235,
    value = c(pos_area_ori[loc2082,2]-pos_area_ori[loc2052,2],
              pos_area_multiweight[loc2082,2] - pos_area_multiweight[loc2052,2]),
    variable = c('Posarea_Multi_Projects_Mean','Posarea_PME_T'),
    type = '(c)'
  )
  dr = rbind(dr245,dr585)
  dr$label = paste0('Decline: ',round(dr$value,2))
  
  steadlow_mean245 = data.frame(
    x = c(2085),
    y = c(210,190)+25,
    value = c(mean(pos_area_ori[loc2082:loc2098,1]),
              mean(pos_area_multiweight[loc2082:loc2098,1])),
    variable = c('Posarea_Multi_Projects_Mean','Posarea_PME_T'),
    type = '(a)'
  )
  steadlow_mean585 = data.frame(
    x = c(2085),
    y = c(210,190)+25,
    value = c(mean(pos_area_ori[loc2082:loc2098,2]),
              mean(pos_area_multiweight[loc2082:loc2098,2])),
    variable = c('Posarea_Multi_Projects_Mean','Posarea_PME_T'),
    type = '(c)'
  )
  steadlow_mean = rbind(steadlow_mean245,steadlow_mean585)
  steadlow_mean$label = paste0('Mean: ',round(steadlow_mean$value,2))
  
  
  
  historical_mean = data.frame(
    x = 2067,
    y = 137.83+30,
    label = 'Historical mean: 137.83'
  )
  historical_min = data.frame(
    x = 2035,
    y = 73.38+5,
    label = 'Historical min: 73.38'
  )
  historical_label= rbind(historical_mean,historical_min)
  
  period_label = data.frame(
    x = c(2035,2066,2090),
    y = 10,
    label = c('Steadily high period \n 2022-2052(SHP)',
              'Decreasing period \n 2052-2082(DP)',
              'Steadily low period \n 2082-2098(SLP)')
  )
  
  figslabel = data.frame(x = 2022,
                         y = 235,
                         label = c('(a)','(b)'),
                         type = c('(a)','(c)'))
  blank_label = data.frame(
    x = 2035,
    y = 5,
    label = ''
  )
  fontsize =14
  text_theme = theme(
    legend.text = element_text(size = fontsize,color = 'black'),
    legend.title = element_text(size = fontsize,color = 'black'),
    axis.text = element_text(size = fontsize,color = 'black'),
    axis.title = element_text(size = fontsize,color = 'black')
  )
  pline = ggplot()+
    geom_text(data = blank_label,
              aes(x = x,y = y,label = label))+
    geom_vline(xintercept = c(2022,2052,2082,2098),
               size = 0.5,color = 'black')+
    geom_line(data = posareadf,
              aes(x = date,y = value,color = variable),
              size = 1.2)+
    geom_hline(yintercept = c(137.83,73.38),
               linetype = 'dashed',size = 0.5,color = 'black')+
    geom_text(data = steadhigh_mean,
              aes(x = x,y = y,label = label,color = variable),
              size= 4,hjust = 0.5,show.legend = F)+
    geom_text(data = dr,
              aes(x = x,y = y,label = label,color = variable),
              size= 4,hjust = 0.5,show.legend = F)+
    geom_text(data = steadlow_mean,
              aes(x = x,y = y,label = label,color = variable),
              size= 4,hjust = 0,show.legend = F)+
    geom_text(data = historical_label,
              aes(x = x,y = y,label = label),
              size= 4,hjust = 0.5,color = 'black')+
    geom_text(data = period_label,
              aes(x = x,y = y,label = label),
              size= 4,hjust = 0.5,color = 'black')+
    geom_text(data = figslabel,
              aes(x = x,y = y,label = label),
              size = 4,hjust = 0,color = 'black')+
    scale_color_manual(values = cols)+
    #ylim(40,240)+
    theme_bw()+
    facet_wrap(~type,nrow = 2,scales = 'free_y')+
    theme(axis.text.y = element_text(angle = 90,hjust = 0.5),
          strip.text = element_blank(),
          panel.grid = element_blank())+
    theme(legend.position = 'bottom')+
    text_theme+
    scale_y_continuous(breaks = c(10,73.38,
                                  137.83,200),
                       labels =c(10,73.38,
                                 137.83,200) )+
    scale_x_continuous(breaks = c(2022,2052,2082,2098))+
    guides(color = guide_legend(title = ''))+
    xlab('Time')+
    ylab("Positive TWS area (10 km )")
  
  output = 'main_plot/SI/figs_compare_muliti_calc_mean_ori_pmet'
  dir.create(output)
  output = paste0(output,'/figs_covar_projectws.png')
  
  png(output,
      height = 20,
      width = 25,
      units = 'cm',
      res = 800)
  print(pline)
  dev.off()
  
  break
  # pbar 
  source("/home/share/R_project/xinjiang_vapor/mmkTrend.R")
  calc_mmk <- function(x){
    x = mmkTrend(x)$Zc
    return(x)
  }
  pos_area_ori_mmk= apply(pos_area_ori,2,calc_mmk)
  pos_area_multi_mmk = apply(pos_area_multiweight,2,calc_mmk)
  
  mmk245 = data.frame(
    x = c('Posarea_Multi_Projects_Mean','Posarea_PME_T'),
    y = c(pos_area_ori_mmk[1],pos_area_multi_mmk[1]),
    variable = c('Posarea_Multi_Projects_Mean','Posarea_PME_T'),
    type = c('(b)','(b)')
  )
  mmk585 = data.frame(
    x =c('Posarea_Multi_Projects_Mean','Posarea_PME_T'),
    y = c(pos_area_ori_mmk[2],pos_area_multi_mmk[2]),
    variable =c('Posarea_Multi_Projects_Mean','Posarea_PME_T'),
    type = c('(d)','(d)')
  )
  
  mmkdf = rbind(mmk245,mmk585)
  
  pbar = ggplot()+
    geom_bar(data = mmkdf,
             aes(x = x,y= y, fill = variable),
             stat ='identity',
             position = position_dodge2(0.7),width = 0.7)+
    theme_bw()+
    facet_wrap(~type,nrow = 2)+
    scale_fill_manual(values = cols)+
    theme(axis.text.y = element_text(angle = 90,hjust = 0.5),
          strip.text = element_blank(),
          panel.grid = element_blank())+
    theme(legend.position = 'none')+
    xlab('')+
    ylab("MMK trend of posarea TWS")
  
  
  
  
  
}
figs_compare_project_results_basedon_mulit_calc_mean_and_ori_pme<-function(
  
){
  #source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/calc_project_multi_weighted_cmip6_pme_in_ato3.R")
  #calc_project_multi_weighted_cmip6_pme_in_ato3()
  #source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/project_pos_area_by_model_withtemper.R")
  #pos_area_multiwaeight = project_pos_area_by_model_withtemper()
  #fwrite(pos_area_multiweight,'output/future_pos_tws_area/multiweight_pos_tws_area_ensemble.csv')
  
  input1 = 'output/future_pos_tws_area/pos_tws_area_ensemble.csv'
  input2 = 'output/future_pos_tws_area/pos_area_allcalc_mean.csv'
  
  pos_area_multiweight = as.data.frame(fread(input1))
  pos_area_ori = as.data.frame(fread(input2))
  
  pos_area_multiweight = pos_area_multiweight[5:81,]
  pos_area_ori = pos_area_ori[5:81,]
  
  yearfull = 2022:2098
  
  posarea245 = data.frame(
    date = yearfull,
    Posarea_Multi_Projects_Mean = pos_area_ori[,1],
    Posarea_PME = pos_area_multiweight[,1]
  )
  posarea585 = data.frame(
    date = yearfull,
    Posarea_Multi_Projects_Mean = pos_area_ori[,2],
    Posarea_PME = pos_area_multiweight[,2]
  )
  posarea245 = reshape2::melt(posarea245,'date')
  posarea585 = reshape2::melt(posarea585,'date')
  
  posarea245$type = '(a)'
  posarea585$type = '(c)'
  
  posareadf = rbind(posarea245,posarea585)
  
  cols = pal_lancet()(9)[c(1,7)]
  
  dfvline = data.frame(
    x = c(2022,2052,2082)
  )
  
  loc2052 = length(2022:2052)
  loc2082 = length(2022:2082)
  loc2098 = length(2022:2098)
  
  steadhigh_mean245 = data.frame(
    x = c(2030,2040),
    y = 235,
    value = c(mean(pos_area_ori[1:loc2052,1]),
              mean(pos_area_multiweight[1:loc2052,1])),
    variable = c('Posarea_Multi_Projects_Mean','Posarea_PME'),
    type = '(a)'
  )
  steadhigh_mean585 = data.frame(
    x = c(2030,2040),
    y = 235,
    value = c(mean(pos_area_ori[1:loc2052,2]),
              mean(pos_area_multiweight[1:loc2052,2])),
    variable = c('Posarea_Multi_Projects_Mean','Posarea_PME'),
    type = '(c)'
  )
  steadhigh_mean = rbind(steadhigh_mean245,steadhigh_mean585)
  steadhigh_mean$label = paste0('Mean: ',round(steadhigh_mean$value,2))
  
  dr245 = data.frame(
    x = c(2060,2075),
    y = 235,
    value = c(pos_area_ori[loc2082,1]-pos_area_ori[loc2052,1],
              pos_area_multiweight[loc2082,1] - pos_area_multiweight[loc2052,1]),
    variable = c('Posarea_Multi_Projects_Mean','Posarea_PME'),
    type = '(a)'
  )
  
  dr585 = data.frame(
    x = c(2060,2075),
    y = 235,
    value = c(pos_area_ori[loc2082,2]-pos_area_ori[loc2052,2],
              pos_area_multiweight[loc2082,2] - pos_area_multiweight[loc2052,2]),
    variable = c('Posarea_Multi_Projects_Mean','Posarea_PME'),
    type = '(c)'
  )
  dr = rbind(dr245,dr585)
  dr$label = paste0('Decline: ',round(dr$value,2))
  
  steadlow_mean245 = data.frame(
    x = c(2085),
    y = c(210,190)+25,
    value = c(mean(pos_area_ori[loc2082:loc2098,1]),
              mean(pos_area_multiweight[loc2082:loc2098,1])),
    variable = c('Posarea_Multi_Projects_Mean','Posarea_PME'),
    type = '(a)'
  )
  steadlow_mean585 = data.frame(
    x = c(2085),
    y = c(210,190)+25,
    value = c(mean(pos_area_ori[loc2082:loc2098,2]),
              mean(pos_area_multiweight[loc2082:loc2098,2])),
    variable = c('Posarea_Multi_Projects_Mean','Posarea_PME'),
    type = '(c)'
  )
  steadlow_mean = rbind(steadlow_mean245,steadlow_mean585)
  steadlow_mean$label = paste0('Mean: ',round(steadlow_mean$value,2))
  
  
  
  historical_mean = data.frame(
    x = 2067,
    y = 137.83+30,
    label = 'Historical mean: 137.83'
  )
  historical_min = data.frame(
    x = 2035,
    y = 73.38+5,
    label = 'Historical min: 73.38'
  )
  historical_label= rbind(historical_mean,historical_min)
  
  period_label = data.frame(
    x = c(2035,2066,2090),
    y = 10,
    label = c('Steadily high period \n 2022-2052(SHP)',
              'Decreasing period \n 2052-2082(DP)',
              'Steadily low period \n 2082-2098(SLP)')
  )
  
  figslabel = data.frame(x = 2022,
                         y = 235,
                         label = c('(a)','(b)'),
                         type = c('(a)','(c)'))
  blank_label = data.frame(
    x = 2035,
    y = 5,
    label = ''
  )
  fontsize =14
  text_theme = theme(
    legend.text = element_text(size = fontsize,color = 'black'),
    legend.title = element_text(size = fontsize,color = 'black'),
    axis.text = element_text(size = fontsize,color = 'black'),
    axis.title = element_text(size = fontsize,color = 'black')
  )
  pline = ggplot()+
    geom_text(data = blank_label,
              aes(x = x,y = y,label = label))+
    geom_vline(xintercept = c(2022,2052,2082,2098),
               size = 0.5,color = 'black')+
    geom_line(data = posareadf,
              aes(x = date,y = value,color = variable),
              size = 1.2)+
    geom_hline(yintercept = c(137.83,73.38),
               linetype = 'dashed',size = 0.5,color = 'black')+
    geom_text(data = steadhigh_mean,
              aes(x = x,y = y,label = label,color = variable),
              size= 4,hjust = 0.5,show.legend = F)+
    geom_text(data = dr,
              aes(x = x,y = y,label = label,color = variable),
              size= 4,hjust = 0.5,show.legend = F)+
    geom_text(data = steadlow_mean,
              aes(x = x,y = y,label = label,color = variable),
              size= 4,hjust = 0,show.legend = F)+
    geom_text(data = historical_label,
              aes(x = x,y = y,label = label),
              size= 4,hjust = 0.5,color = 'black')+
    geom_text(data = period_label,
              aes(x = x,y = y,label = label),
              size= 4,hjust = 0.5,color = 'black')+
    geom_text(data = figslabel,
              aes(x = x,y = y,label = label),
              size = 4,hjust = 0,color = 'black')+
    scale_color_manual(values = cols)+
    #ylim(40,240)+
    theme_bw()+
    facet_wrap(~type,nrow = 2,scales = 'free_y')+
    theme(axis.text.y = element_text(angle = 90,hjust = 0.5),
          strip.text = element_blank(),
          panel.grid = element_blank())+
    theme(legend.position = 'bottom')+
    text_theme+
    scale_y_continuous(breaks = c(10,73.38,
                                  137.83,200),
                       labels =c(10,73.38,
                                 137.83,200) )+
    scale_x_continuous(breaks = c(2022,2052,2082,2098))+
    guides(color = guide_legend(title = ''))+
    xlab('Time')+
    ylab("Positive TWS area (10 km )")
  
  output = 'main_plot/SI/figs_compare_muliti_calc_mean_ori_pme'
  dir.create(output)
  output = paste0(output,'/figs_covar_projectws.png')
  
  png(output,
      height = 20,
      width = 25,
      units = 'cm',
      res = 800)
  print(pline)
  dev.off()
  
  break
  # pbar 
  source("/home/share/R_project/xinjiang_vapor/mmkTrend.R")
  calc_mmk <- function(x){
    x = mmkTrend(x)$Zc
    return(x)
  }
  pos_area_ori_mmk= apply(pos_area_ori,2,calc_mmk)
  pos_area_multi_mmk = apply(pos_area_multiweight,2,calc_mmk)
  
  mmk245 = data.frame(
    x = c('Posarea_Multi_Projects_Mean','Posarea_PME'),
    y = c(pos_area_ori_mmk[1],pos_area_multi_mmk[1]),
    variable = c('Posarea_Multi_Projects_Mean','Posarea_PME'),
    type = c('(b)','(b)')
  )
  mmk585 = data.frame(
    x =c('Posarea_Multi_Projects_Mean','Posarea_PME'),
    y = c(pos_area_ori_mmk[2],pos_area_multi_mmk[2]),
    variable =c('Posarea_Multi_Projects_Mean','Posarea_PME'),
    type = c('(d)','(d)')
  )
  
  mmkdf = rbind(mmk245,mmk585)
  
  pbar = ggplot()+
    geom_bar(data = mmkdf,
             aes(x = x,y= y, fill = variable),
             stat ='identity',
             position = position_dodge2(0.7),width = 0.7)+
    theme_bw()+
    facet_wrap(~type,nrow = 2)+
    scale_fill_manual(values = cols)+
    theme(axis.text.y = element_text(angle = 90,hjust = 0.5),
          strip.text = element_blank(),
          panel.grid = element_blank())+
    theme(legend.position = 'none')+
    xlab('')+
    ylab("MMK trend of posarea TWS")
  
  
  
  
  
}
figs_compare_project_results_basedon_mulit_calc_mean_and_proj_pme<-function(
  
){
  #source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/calc_project_multi_weighted_cmip6_pme_in_ato3.R")
  #calc_project_multi_weighted_cmip6_pme_in_ato3()
  #source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/project_pos_area_by_model_withtemper.R")
  #pos_area_multiwaeight = project_pos_area_by_model_withtemper()
  #fwrite(pos_area_multiweight,'output/future_pos_tws_area/multiweight_pos_tws_area_ensemble.csv')
  
  input1 = 'output/future_pos_tws_area/pos_tws_area_proj_pmeato.csv'
  input2 = 'output/future_pos_tws_area/pos_area_allcalc_mean.csv'
  
  pos_area_multiweight = as.data.frame(fread(input1))
  pos_area_ori = as.data.frame(fread(input2))
  
  pos_area_multiweight = pos_area_multiweight[5:81,]
  pos_area_ori = pos_area_ori[5:81,]
  
  yearfull = 2022:2098
  
  posarea245 = data.frame(
    date = yearfull,
    Posarea_Multi_Projects_Mean = pos_area_ori[,1],
    Posarea_MultiWeight_PME = pos_area_multiweight[,1]
  )
  posarea585 = data.frame(
    date = yearfull,
    Posarea_Multi_Projects_Mean = pos_area_ori[,2],
    Posarea_MultiWeight_PME = pos_area_multiweight[,2]
  )
  posarea245 = reshape2::melt(posarea245,'date')
  posarea585 = reshape2::melt(posarea585,'date')
  
  posarea245$type = '(a)'
  posarea585$type = '(c)'
  
  posareadf = rbind(posarea245,posarea585)
  
  cols = pal_lancet()(9)[c(1,7)]
  
  dfvline = data.frame(
    x = c(2022,2052,2082)
  )
  
  loc2052 = length(2022:2052)
  loc2082 = length(2022:2082)
  loc2098 = length(2022:2098)
  
  steadhigh_mean245 = data.frame(
    x = c(2030,2040),
    y = 235,
    value = c(mean(pos_area_ori[1:loc2052,1]),
              mean(pos_area_multiweight[1:loc2052,1])),
    variable = c('Posarea_Multi_Projects_Mean','Posarea_MultiWeight_PME'),
    type = '(a)'
  )
  steadhigh_mean585 = data.frame(
    x = c(2030,2040),
    y = 235,
    value = c(mean(pos_area_ori[1:loc2052,2]),
              mean(pos_area_multiweight[1:loc2052,2])),
    variable = c('Posarea_Multi_Projects_Mean','Posarea_MultiWeight_PME'),
    type = '(c)'
  )
  steadhigh_mean = rbind(steadhigh_mean245,steadhigh_mean585)
  steadhigh_mean$label = paste0('Mean: ',round(steadhigh_mean$value,2))
  
  dr245 = data.frame(
    x = c(2060,2075),
    y = 235,
    value = c(pos_area_ori[loc2082,1]-pos_area_ori[loc2052,1],
              pos_area_multiweight[loc2082,1] - pos_area_multiweight[loc2052,1]),
    variable = c('Posarea_Multi_Projects_Mean','Posarea_MultiWeight_PME'),
    type = '(a)'
  )
  
  dr585 = data.frame(
    x = c(2060,2075),
    y = 235,
    value = c(pos_area_ori[loc2082,2]-pos_area_ori[loc2052,2],
              pos_area_multiweight[loc2082,2] - pos_area_multiweight[loc2052,2]),
    variable = c('Posarea_Multi_Projects_Mean','Posarea_MultiWeight_PME'),
    type = '(c)'
  )
  dr = rbind(dr245,dr585)
  dr$label = paste0('Decline: ',round(dr$value,2))
  
  steadlow_mean245 = data.frame(
    x = c(2085),
    y = c(210,190)+25,
    value = c(mean(pos_area_ori[loc2082:loc2098,1]),
              mean(pos_area_multiweight[loc2082:loc2098,1])),
    variable = c('Posarea_Multi_Projects_Mean','Posarea_MultiWeight_PME'),
    type = '(a)'
  )
  steadlow_mean585 = data.frame(
    x = c(2085),
    y = c(210,190)+25,
    value = c(mean(pos_area_ori[loc2082:loc2098,2]),
              mean(pos_area_multiweight[loc2082:loc2098,2])),
    variable = c('Posarea_Multi_Projects_Mean','Posarea_MultiWeight_PME'),
    type = '(c)'
  )
  steadlow_mean = rbind(steadlow_mean245,steadlow_mean585)
  steadlow_mean$label = paste0('Mean: ',round(steadlow_mean$value,2))
  
  
  
  historical_mean = data.frame(
    x = 2067,
    y = 137.83+30,
    label = 'Historical mean: 137.83'
  )
  historical_min = data.frame(
    x = 2035,
    y = 73.38+5,
    label = 'Historical min: 73.38'
  )
  historical_label= rbind(historical_mean,historical_min)
  
  period_label = data.frame(
    x = c(2035,2066,2090),
    y = 10,
    label = c('Steadily high period \n 2022-2052(SHP)',
              'Decreasing period \n 2052-2082(DP)',
              'Steadily low period \n 2082-2098(SLP)')
  )
  
  figslabel = data.frame(x = 2022,
                         y = 235,
                         label = c('(a)','(b)'),
                         type = c('(a)','(c)'))
  blank_label = data.frame(
    x = 2035,
    y = 5,
    label = ''
  )
  fontsize =14
  text_theme = theme(
    legend.text = element_text(size = fontsize,color = 'black'),
    legend.title = element_text(size = fontsize,color = 'black'),
    axis.text = element_text(size = fontsize,color = 'black'),
    axis.title = element_text(size = fontsize,color = 'black')
  )
  pline = ggplot()+
    geom_text(data = blank_label,
              aes(x = x,y = y,label = label))+
    geom_vline(xintercept = c(2022,2052,2082,2098),
               size = 0.5,color = 'black')+
    geom_line(data = posareadf,
              aes(x = date,y = value,color = variable),
              size = 1.2)+
    geom_hline(yintercept = c(137.83,73.38),
               linetype = 'dashed',size = 0.5,color = 'black')+
    geom_text(data = steadhigh_mean,
              aes(x = x,y = y,label = label,color = variable),
              size= 4,hjust = 0.5,show.legend = F)+
    geom_text(data = dr,
              aes(x = x,y = y,label = label,color = variable),
              size= 4,hjust = 0.5,show.legend = F)+
    geom_text(data = steadlow_mean,
              aes(x = x,y = y,label = label,color = variable),
              size= 4,hjust = 0,show.legend = F)+
    geom_text(data = historical_label,
              aes(x = x,y = y,label = label),
              size= 4,hjust = 0.5,color = 'black')+
    geom_text(data = period_label,
              aes(x = x,y = y,label = label),
              size= 4,hjust = 0.5,color = 'black')+
    geom_text(data = figslabel,
              aes(x = x,y = y,label = label),
              size = 4,hjust = 0,color = 'black')+
    scale_color_manual(values = cols)+
    #ylim(40,240)+
    theme_bw()+
    facet_wrap(~type,nrow = 2,scales = 'free_y')+
    theme(axis.text.y = element_text(angle = 90,hjust = 0.5),
          strip.text = element_blank(),
          panel.grid = element_blank())+
    theme(legend.position = 'bottom')+
    text_theme+
    scale_y_continuous(breaks = c(10,73.38,
                                  137.83,200),
                       labels =c(10,73.38,
                                 137.83,200) )+
    scale_x_continuous(breaks = c(2022,2052,2082,2098))+
    guides(color = guide_legend(title = ''))+
    xlab('Time')+
    ylab("Positive TWS area (10 km )")
  
  output = 'main_plot/SI/figs_compare_muliti_calc_mean_multiweight_pme'
  dir.create(output)
  output = paste0(output,'/figs_covar_projectws.png')
  
  png(output,
      height = 20,
      width = 25,
      units = 'cm',
      res = 800)
  print(pline)
  dev.off()
  
  break
  # pbar 
  source("/home/share/R_project/xinjiang_vapor/mmkTrend.R")
  calc_mmk <- function(x){
    x = mmkTrend(x)$Zc
    return(x)
  }
  pos_area_ori_mmk= apply(pos_area_ori,2,calc_mmk)
  pos_area_multi_mmk = apply(pos_area_multiweight,2,calc_mmk)
  
  mmk245 = data.frame(
    x = c('Posarea_Multi_Projects_Mean','Posarea_MultiWeight_PME'),
    y = c(pos_area_ori_mmk[1],pos_area_multi_mmk[1]),
    variable = c('Posarea_Multi_Projects_Mean','Posarea_MultiWeight_PME'),
    type = c('(b)','(b)')
  )
  mmk585 = data.frame(
    x =c('Posarea_Multi_Projects_Mean','Posarea_MultiWeight_PME'),
    y = c(pos_area_ori_mmk[2],pos_area_multi_mmk[2]),
    variable =c('Posarea_Multi_Projects_Mean','Posarea_MultiWeight_PME'),
    type = c('(d)','(d)')
  )
  
  mmkdf = rbind(mmk245,mmk585)
  
  pbar = ggplot()+
    geom_bar(data = mmkdf,
             aes(x = x,y= y, fill = variable),
             stat ='identity',
             position = position_dodge2(0.7),width = 0.7)+
    theme_bw()+
    facet_wrap(~type,nrow = 2)+
    scale_fill_manual(values = cols)+
    theme(axis.text.y = element_text(angle = 90,hjust = 0.5),
          strip.text = element_blank(),
          panel.grid = element_blank())+
    theme(legend.position = 'none')+
    xlab('')+
    ylab("MMK trend of posarea TWS")
  
  
  
  
  
}
figs_compare_project_results_basedon_mulit_calc_mean_and_proj_pt_snow_twsbyp<-function(
  
){
  #source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/calc_project_multi_weighted_cmip6_pme_in_ato3.R")
  #calc_project_multi_weighted_cmip6_pme_in_ato3()
  #source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/project_pos_area_by_model_withtemper.R")
  #pos_area_multiwaeight = project_pos_area_by_model_withtemper()
  #fwrite(pos_area_multiweight,'output/future_pos_tws_area/multiweight_pos_tws_area_ensemble.csv')
  
  input1 = 'output/future_pos_tws_area_based_snow_tws/pos_tws_area_ensemble_proj_pme_t_tws_bypme.csv'
  input2 = 'output/future_pos_tws_area_based_snow_tws/pos_area_allcalc_mean.csv'
  
  pos_area_multiweight = as.data.frame(fread(input1))
  pos_area_ori = as.data.frame(fread(input2))
  
  pos_area_multiweight = pos_area_multiweight[3:81,]
  pos_area_ori = pos_area_ori[3:81,]
  
  yearfull = 2020:2098
  
  posarea245 = data.frame(
    date = yearfull,
    Posarea_Multi_Projects_Mean = pos_area_ori[,1],
    Posarea_MultiWeight_SCT_TWSP = pos_area_multiweight[,1]
  )
  posarea585 = data.frame(
    date = yearfull,
    Posarea_Multi_Projects_Mean = pos_area_ori[,2],
    Posarea_MultiWeight_SCT_TWSP = pos_area_multiweight[,2]
  )
  posarea245 = reshape2::melt(posarea245,'date')
  posarea585 = reshape2::melt(posarea585,'date')
  
  posarea245$type = '(a)'
  posarea585$type = '(c)'
  
  posareadf = rbind(posarea245,posarea585)
  
  cols = pal_lancet()(9)[c(1,7)]
  
  dfvline = data.frame(
    x = c(2020,2051,2082)
  )
  
  loc2051 = length(2020:2051)
  loc2082 = length(2020:2082)
  loc2098 = length(2020:2098)
  
  steadhigh_mean245 = data.frame(
    x = c(2030,2040),
    y = 235,
    value = c(mean(pos_area_ori[1:loc2051,1]),
              mean(pos_area_multiweight[1:loc2051,1])),
    variable = c('Posarea_Multi_Projects_Mean','Posarea_MultiWeight_SCT_TWSP'),
    type = '(a)'
  )
  steadhigh_mean585 = data.frame(
    x = c(2030,2040),
    y = 235,
    value = c(mean(pos_area_ori[1:loc2051,2]),
              mean(pos_area_multiweight[1:loc2051,2])),
    variable = c('Posarea_Multi_Projects_Mean','Posarea_MultiWeight_SCT_TWSP'),
    type = '(c)'
  )
  steadhigh_mean = rbind(steadhigh_mean245,steadhigh_mean585)
  steadhigh_mean$label = paste0('Mean: ',round(steadhigh_mean$value,2))
  
  dr245 = data.frame(
    x = c(2060,2075),
    y = 235,
    value = c(pos_area_ori[loc2082,1]-pos_area_ori[loc2051,1],
              pos_area_multiweight[loc2082,1] - pos_area_multiweight[loc2051,1]),
    variable = c('Posarea_Multi_Projects_Mean','Posarea_MultiWeight_SCT_TWSP'),
    type = '(a)'
  )
  
  dr585 = data.frame(
    x = c(2060,2075),
    y = 235,
    value = c(pos_area_ori[loc2082,2]-pos_area_ori[loc2051,2],
              pos_area_multiweight[loc2082,2] - pos_area_multiweight[loc2051,2]),
    variable = c('Posarea_Multi_Projects_Mean','Posarea_MultiWeight_SCT_TWSP'),
    type = '(c)'
  )
  dr = rbind(dr245,dr585)
  dr$label = paste0('Decline: ',round(dr$value,2))
  
  steadlow_mean245 = data.frame(
    x = c(2086),
    y = c(210,190)+25,
    value = c(mean(pos_area_ori[loc2082:loc2098,1]),
              mean(pos_area_multiweight[loc2082:loc2098,1])),
    variable = c('Posarea_Multi_Projects_Mean','Posarea_MultiWeight_SCT_TWSP'),
    type = '(a)'
  )
  steadlow_mean585 = data.frame(
    x = c(2086),
    y = c(210,190)+25,
    value = c(mean(pos_area_ori[loc2082:loc2098,2]),
              mean(pos_area_multiweight[loc2082:loc2098,2])),
    variable = c('Posarea_Multi_Projects_Mean','Posarea_MultiWeight_SCT_TWSP'),
    type = '(c)'
  )
  steadlow_mean = rbind(steadlow_mean245,steadlow_mean585)
  steadlow_mean$label = paste0('Mean: ',round(steadlow_mean$value,2))
  
  
  
  historical_mean = data.frame(
    x = 2067,
    y = 137.83+30,
    label = 'Historical mean: 137.83'
  )
  historical_min = data.frame(
    x = 2035,
    y = 73.38+5,
    label = 'Historical min: 73.38'
  )
  historical_label= rbind(historical_mean,historical_min)
  
  period_label = data.frame(
    x = c(2035,2066,2090),
    y = 10,
    label = c('Steadily high period \n 2020-2051(SHP)',
              'Decreasing period \n 2051-2082(DP)',
              'Steadily low period \n 2082-2098(SLP)')
  )
  
  figslabel = data.frame(x = 2020,
                         y = 235,
                         label = c('(a)','(b)'),
                         type = c('(a)','(c)'))
  blank_label = data.frame(
    x = 2035,
    y = 5,
    label = ''
  )
  fontsize =14
  text_theme = theme(
    legend.text = element_text(size = fontsize,color = 'black'),
    legend.title = element_text(size = fontsize,color = 'black'),
    axis.text = element_text(size = fontsize,color = 'black'),
    axis.title = element_text(size = fontsize,color = 'black')
  )
  
  linetype = c('Posarea_Multi_Projects_Mean'=1,
               'Posarea_MultiWeight_SCT_TWSP' = 4)
  pline = ggplot()+
    geom_text(data = blank_label,
              aes(x = x,y = y,label = label))+
    geom_vline(xintercept = c(2020,2051,2082,2098),
               size = 0.5,color = 'black')+
    geom_line(data = posareadf,
              aes(x = date,y = value,color = variable,
                  linetype = variable),
              size = 1.2)+
    geom_hline(yintercept = c(137.83,73.38),
               linetype = 'dashed',size = 0.5,color = 'black')+
    geom_text(data = steadhigh_mean,
              aes(x = x,y = y,label = label,color = variable),
              size= 4,hjust = 0.5,show.legend = F)+
    geom_text(data = dr,
              aes(x = x,y = y,label = label,color = variable),
              size= 4,hjust = 0.5,show.legend = F)+
    geom_text(data = steadlow_mean,
              aes(x = x,y = y,label = label,color = variable),
              size= 4,hjust = 0,show.legend = F)+
    geom_text(data = historical_label,
              aes(x = x,y = y,label = label),
              size= 4,hjust = 0.5,color = 'black')+
    geom_text(data = period_label,
              aes(x = x,y = y,label = label),
              size= 4,hjust = 0.5,color = 'black')+
    geom_text(data = figslabel,
              aes(x = x,y = y,label = label),
              size = 4,hjust = 0,color = 'black')+
    scale_color_manual(values = cols)+
    scale_linetype_manual(values = linetype)+
    #ylim(40,240)+
    theme_bw()+
    facet_wrap(~type,nrow = 2,scales = 'free_y')+
    theme(axis.text.y = element_text(angle = 90,hjust = 0.5),
          strip.text = element_blank(),
          panel.grid = element_blank())+
    theme(legend.position = 'bottom')+
    text_theme+
    scale_y_continuous(breaks = c(10,73.38,
                                  137.83,200),
                       labels =c(10,73.38,
                                 137.83,200) )+
    scale_x_continuous(breaks = c(2020,2051,2082,2098))+
    guides(color = guide_legend(title = ''),
           linetype = guide_legend(title = ''))+
    theme(legend.key.width = unit(2,'cm'))+
    xlab('Time')+
    ylab("Positive TWS area (10 km )")
  
  
  output = 'main_plot/SI/figs_compare_muliti_calc_mean_snowmodel3'
  dir.create(output)
  output = paste0(output,'/figs_covar_projectws.png')
  
  
  png(output,
      height = 20,
      width = 25,
      units = 'cm',
      res = 800)
  print(pline)
  dev.off()
  return('')
  break
  # pbar 
  source("/home/share/R_project/xinjiang_vapor/mmkTrend.R")
  calc_mmk <- function(x){
    x = mmkTrend(x)$Zc
    return(x)
  }
  pos_area_ori_mmk= apply(pos_area_ori,2,calc_mmk)
  pos_area_multi_mmk = apply(pos_area_multiweight,2,calc_mmk)
  
  mmk245 = data.frame(
    x = c('Posarea_Multi_Projects_Mean','Posarea_MultiWeight_SCT_TWSP'),
    y = c(pos_area_ori_mmk[1],pos_area_multi_mmk[1]),
    variable = c('Posarea_Multi_Projects_Mean','Posarea_MultiWeight_SCT_TWSP'),
    type = c('(b)','(b)')
  )
  mmk585 = data.frame(
    x =c('Posarea_Multi_Projects_Mean','Posarea_MultiWeight_SCT_TWSP'),
    y = c(pos_area_ori_mmk[2],pos_area_multi_mmk[2]),
    variable =c('Posarea_Multi_Projects_Mean','Posarea_MultiWeight_SCT_TWSP'),
    type = c('(d)','(d)')
  )
  
  mmkdf = rbind(mmk245,mmk585)
  
  pbar = ggplot()+
    geom_bar(data = mmkdf,
             aes(x = x,y= y, fill = variable),
             stat ='identity',
             position = position_dodge2(0.7),width = 0.7)+
    theme_bw()+
    facet_wrap(~type,nrow = 2)+
    scale_fill_manual(values = cols)+
    theme(axis.text.y = element_text(angle = 90,hjust = 0.5),
          strip.text = element_blank(),
          panel.grid = element_blank())+
    theme(legend.position = 'none')+
    xlab('')+
    ylab("MMK trend of posarea TWS")
  
  
  
  
  
}
figs_compare_project_results_basedon_mulit_calc_mean_and_proj_pt_snow_twsbypt<-function(
  
){
  #source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/calc_project_multi_weighted_cmip6_pme_in_ato3.R")
  #calc_project_multi_weighted_cmip6_pme_in_ato3()
  #source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/project_pos_area_by_model_withtemper.R")
  #pos_area_multiwaeight = project_pos_area_by_model_withtemper()
  #fwrite(pos_area_multiweight,'output/future_pos_tws_area/multiweight_pos_tws_area_ensemble.csv')
  
  input1 = 'output/future_pos_tws_area_based_snow_tws/pos_tws_area_ensemble_proj_pme_t_tws_bypmet.csv'
  input2 = 'output/future_pos_tws_area_based_snow_tws/pos_area_allcalc_mean.csv'
  
  pos_area_multiweight = as.data.frame(fread(input1))
  pos_area_ori = as.data.frame(fread(input2))
  
  pos_area_multiweight = pos_area_multiweight[3:81,]
  pos_area_ori = pos_area_ori[3:81,]
  
  yearfull = 2020:2098
  
  posarea245 = data.frame(
    date = yearfull,
    Posarea_Multi_Projects_Mean = pos_area_ori[,1],
    Posarea_MultiWeight_SCT_TWSPT = pos_area_multiweight[,1]
  )
  posarea585 = data.frame(
    date = yearfull,
    Posarea_Multi_Projects_Mean = pos_area_ori[,2],
    Posarea_MultiWeight_SCT_TWSPT = pos_area_multiweight[,2]
  )
  posarea245 = reshape2::melt(posarea245,'date')
  posarea585 = reshape2::melt(posarea585,'date')
  
  posarea245$type = '(a)'
  posarea585$type = '(c)'
  
  posareadf = rbind(posarea245,posarea585)
  
  cols = pal_lancet()(9)[c(1,7)]
  
  dfvline = data.frame(
    x = c(2020,2051,2082)
  )
  
  loc2051 = length(2020:2051)
  loc2082 = length(2020:2082)
  loc2098 = length(2020:2098)
  
  steadhigh_mean245 = data.frame(
    x = c(2030,2040),
    y = 235,
    value = c(mean(pos_area_ori[1:loc2051,1]),
              mean(pos_area_multiweight[1:loc2051,1])),
    variable = c('Posarea_Multi_Projects_Mean','Posarea_MultiWeight_SCT_TWSPT'),
    type = '(a)'
  )
  steadhigh_mean585 = data.frame(
    x = c(2030,2040),
    y = 235,
    value = c(mean(pos_area_ori[1:loc2051,2]),
              mean(pos_area_multiweight[1:loc2051,2])),
    variable = c('Posarea_Multi_Projects_Mean','Posarea_MultiWeight_SCT_TWSPT'),
    type = '(c)'
  )
  steadhigh_mean = rbind(steadhigh_mean245,steadhigh_mean585)
  steadhigh_mean$label = paste0('Mean: ',round(steadhigh_mean$value,2))
  
  dr245 = data.frame(
    x = c(2060,2075),
    y = 235,
    value = c(pos_area_ori[loc2082,1]-pos_area_ori[loc2051,1],
              pos_area_multiweight[loc2082,1] - pos_area_multiweight[loc2051,1]),
    variable = c('Posarea_Multi_Projects_Mean','Posarea_MultiWeight_SCT_TWSPT'),
    type = '(a)'
  )
  
  dr585 = data.frame(
    x = c(2060,2075),
    y = 235,
    value = c(pos_area_ori[loc2082,2]-pos_area_ori[loc2051,2],
              pos_area_multiweight[loc2082,2] - pos_area_multiweight[loc2051,2]),
    variable = c('Posarea_Multi_Projects_Mean','Posarea_MultiWeight_SCT_TWSPT'),
    type = '(c)'
  )
  dr = rbind(dr245,dr585)
  dr$label = paste0('Decline: ',round(dr$value,2))
  
  steadlow_mean245 = data.frame(
    x = c(2086),
    y = c(210,190)+25,
    value = c(mean(pos_area_ori[loc2082:loc2098,1]),
              mean(pos_area_multiweight[loc2082:loc2098,1])),
    variable = c('Posarea_Multi_Projects_Mean','Posarea_MultiWeight_SCT_TWSPT'),
    type = '(a)'
  )
  steadlow_mean585 = data.frame(
    x = c(2086),
    y = c(210,190)+25,
    value = c(mean(pos_area_ori[loc2082:loc2098,2]),
              mean(pos_area_multiweight[loc2082:loc2098,2])),
    variable = c('Posarea_Multi_Projects_Mean','Posarea_MultiWeight_SCT_TWSPT'),
    type = '(c)'
  )
  steadlow_mean = rbind(steadlow_mean245,steadlow_mean585)
  steadlow_mean$label = paste0('Mean: ',round(steadlow_mean$value,2))
  
  
  
  historical_mean = data.frame(
    x = 2067,
    y = 137.83+30,
    label = 'Historical mean: 137.83'
  )
  historical_min = data.frame(
    x = 2035,
    y = 73.38+5,
    label = 'Historical min: 73.38'
  )
  historical_label= rbind(historical_mean,historical_min)
  
  period_label = data.frame(
    x = c(2035,2066,2090),
    y = 10,
    label = c('Steadily high period \n 2020-2051(SHP)',
              'Decreasing period \n 2051-2082(DP)',
              'Steadily low period \n 2082-2098(SLP)')
  )
  
  figslabel = data.frame(x = 2020,
                         y = 235,
                         label = c('(a)','(b)'),
                         type = c('(a)','(c)'))
  blank_label = data.frame(
    x = 2035,
    y = 5,
    label = ''
  )
  fontsize =14
  text_theme = theme(
    legend.text = element_text(size = fontsize,color = 'black'),
    legend.title = element_text(size = fontsize,color = 'black'),
    axis.text = element_text(size = fontsize,color = 'black'),
    axis.title = element_text(size = fontsize,color = 'black')
  )
  
  linetype = c('Posarea_Multi_Projects_Mean'=1,
               'Posarea_MultiWeight_SCT_TWSPT' = 5)
  pline = ggplot()+
    geom_text(data = blank_label,
              aes(x = x,y = y,label = label))+
    geom_vline(xintercept = c(2020,2051,2082,2098),
               size = 0.5,color = 'black')+
    geom_line(data = posareadf,
              aes(x = date,y = value,color = variable,
                  linetype = variable),
              size = 1.2)+
    geom_hline(yintercept = c(137.83,73.38),
               linetype = 'dashed',size = 0.5,color = 'black')+
    geom_text(data = steadhigh_mean,
              aes(x = x,y = y,label = label,color = variable),
              size= 4,hjust = 0.5,show.legend = F)+
    geom_text(data = dr,
              aes(x = x,y = y,label = label,color = variable),
              size= 4,hjust = 0.5,show.legend = F)+
    geom_text(data = steadlow_mean,
              aes(x = x,y = y,label = label,color = variable),
              size= 4,hjust = 0,show.legend = F)+
    geom_text(data = historical_label,
              aes(x = x,y = y,label = label),
              size= 4,hjust = 0.5,color = 'black')+
    geom_text(data = period_label,
              aes(x = x,y = y,label = label),
              size= 4,hjust = 0.5,color = 'black')+
    geom_text(data = figslabel,
              aes(x = x,y = y,label = label),
              size = 4,hjust = 0,color = 'black')+
    scale_color_manual(values = cols)+
    scale_linetype_manual(values = linetype)+
    #ylim(40,240)+
    theme_bw()+
    facet_wrap(~type,nrow = 2,scales = 'free_y')+
    theme(axis.text.y = element_text(angle = 90,hjust = 0.5),
          strip.text = element_blank(),
          panel.grid = element_blank())+
    theme(legend.position = 'bottom')+
    text_theme+
    scale_y_continuous(breaks = c(10,73.38,
                                  137.83,200),
                       labels =c(10,73.38,
                                 137.83,200) )+
    scale_x_continuous(breaks = c(2020,2051,2082,2098))+
    guides(color = guide_legend(title = ''),
           linetype = guide_legend(title = ''))+
    theme(legend.key.width = unit(2,'cm'))+
    xlab('Time')+
    ylab("Positive TWS area (10 km )")
  
  
  output = 'main_plot/SI/figs_compare_muliti_calc_mean_snowmodel4'
  dir.create(output)
  output = paste0(output,'/figs_covar_projectws.png')
  
  #return(pline)
  png(output,
      height = 20,
      width = 25,
      units = 'cm',
      res = 800)
  print(pline)
  dev.off()
  
  return('')
  break
  # pbar 
  source("/home/share/R_project/xinjiang_vapor/mmkTrend.R")
  calc_mmk <- function(x){
    x = mmkTrend(x)$Zc
    return(x)
  }
  pos_area_ori_mmk= apply(pos_area_ori,2,calc_mmk)
  pos_area_multi_mmk = apply(pos_area_multiweight,2,calc_mmk)
  
  mmk245 = data.frame(
    x = c('Posarea_Multi_Projects_Mean','Posarea_MultiWeight_SCT_TWSPT'),
    y = c(pos_area_ori_mmk[1],pos_area_multi_mmk[1]),
    variable = c('Posarea_Multi_Projects_Mean','Posarea_MultiWeight_SCT_TWSPT'),
    type = c('(b)','(b)')
  )
  mmk585 = data.frame(
    x =c('Posarea_Multi_Projects_Mean','Posarea_MultiWeight_SCT_TWSPT'),
    y = c(pos_area_ori_mmk[2],pos_area_multi_mmk[2]),
    variable =c('Posarea_Multi_Projects_Mean','Posarea_MultiWeight_SCT_TWSPT'),
    type = c('(d)','(d)')
  )
  
  mmkdf = rbind(mmk245,mmk585)
  
  pbar = ggplot()+
    geom_bar(data = mmkdf,
             aes(x = x,y= y, fill = variable),
             stat ='identity',
             position = position_dodge2(0.7),width = 0.7)+
    theme_bw()+
    facet_wrap(~type,nrow = 2)+
    scale_fill_manual(values = cols)+
    theme(axis.text.y = element_text(angle = 90,hjust = 0.5),
          strip.text = element_blank(),
          panel.grid = element_blank())+
    theme(legend.position = 'none')+
    xlab('')+
    ylab("MMK trend of posarea TWS")
  
  
  
  
  
}
figs_compare_project_results_basedon_mulit_calc_mean_and_proj_pt<-function(
  
){
  #source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/calc_project_multi_weighted_cmip6_pme_in_ato3.R")
  #calc_project_multi_weighted_cmip6_pme_in_ato3()
  #source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/project_pos_area_by_model_withtemper.R")
  #pos_area_multiwaeight = project_pos_area_by_model_withtemper()
  #fwrite(pos_area_multiweight,'output/future_pos_tws_area/multiweight_pos_tws_area_ensemble.csv')
  
  input1 = 'output/future_pos_tws_area/pos_tws_area_ensemble_proj_temper_proj_pme.csv'
  input2 = 'output/future_pos_tws_area/pos_area_allcalc_mean.csv'
  
  pos_area_multiweight = as.data.frame(fread(input1))
  pos_area_ori = as.data.frame(fread(input2))
  
  pos_area_multiweight = pos_area_multiweight[5:81,]
  pos_area_ori = pos_area_ori[5:81,]
  
  yearfull = 2022:2098
  
  posarea245 = data.frame(
    date = yearfull,
    Posarea_Multi_Projects_Mean = pos_area_ori[,1],
    Posarea_MultiWeight_PME_T = pos_area_multiweight[,1]
  )
  posarea585 = data.frame(
    date = yearfull,
    Posarea_Multi_Projects_Mean = pos_area_ori[,2],
    Posarea_MultiWeight_PME_T = pos_area_multiweight[,2]
  )
  posarea245 = reshape2::melt(posarea245,'date')
  posarea585 = reshape2::melt(posarea585,'date')
  
  posarea245$type = '(a)'
  posarea585$type = '(c)'
  
  posareadf = rbind(posarea245,posarea585)
  
  cols = pal_lancet()(9)[c(1,7)]
  
  dfvline = data.frame(
    x = c(2022,2052,2082)
  )
  
  loc2052 = length(2022:2052)
  loc2082 = length(2022:2082)
  loc2098 = length(2022:2098)
  
  steadhigh_mean245 = data.frame(
    x = c(2030,2040),
    y = 235,
    value = c(mean(pos_area_ori[1:loc2052,1]),
              mean(pos_area_multiweight[1:loc2052,1])),
    variable = c('Posarea_Multi_Projects_Mean','Posarea_MultiWeight_PME_T'),
    type = '(a)'
  )
  steadhigh_mean585 = data.frame(
    x = c(2030,2040),
    y = 235,
    value = c(mean(pos_area_ori[1:loc2052,2]),
              mean(pos_area_multiweight[1:loc2052,2])),
    variable = c('Posarea_Multi_Projects_Mean','Posarea_MultiWeight_PME_T'),
    type = '(c)'
  )
  steadhigh_mean = rbind(steadhigh_mean245,steadhigh_mean585)
  steadhigh_mean$label = paste0('Mean: ',round(steadhigh_mean$value,2))
  
  dr245 = data.frame(
    x = c(2060,2075),
    y = 235,
    value = c(pos_area_ori[loc2082,1]-pos_area_ori[loc2052,1],
              pos_area_multiweight[loc2082,1] - pos_area_multiweight[loc2052,1]),
    variable = c('Posarea_Multi_Projects_Mean','Posarea_MultiWeight_PME_T'),
    type = '(a)'
  )
  
  dr585 = data.frame(
    x = c(2060,2075),
    y = 235,
    value = c(pos_area_ori[loc2082,2]-pos_area_ori[loc2052,2],
              pos_area_multiweight[loc2082,2] - pos_area_multiweight[loc2052,2]),
    variable = c('Posarea_Multi_Projects_Mean','Posarea_MultiWeight_PME_T'),
    type = '(c)'
  )
  dr = rbind(dr245,dr585)
  dr$label = paste0('Decline: ',round(dr$value,2))
  
  steadlow_mean245 = data.frame(
    x = c(2085),
    y = c(210,190)+25,
    value = c(mean(pos_area_ori[loc2082:loc2098,1]),
              mean(pos_area_multiweight[loc2082:loc2098,1])),
    variable = c('Posarea_Multi_Projects_Mean','Posarea_MultiWeight_PME_T'),
    type = '(a)'
  )
  steadlow_mean585 = data.frame(
    x = c(2085),
    y = c(210,190)+25,
    value = c(mean(pos_area_ori[loc2082:loc2098,2]),
              mean(pos_area_multiweight[loc2082:loc2098,2])),
    variable = c('Posarea_Multi_Projects_Mean','Posarea_MultiWeight_PME_T'),
    type = '(c)'
  )
  steadlow_mean = rbind(steadlow_mean245,steadlow_mean585)
  steadlow_mean$label = paste0('Mean: ',round(steadlow_mean$value,2))
  
  
  
  historical_mean = data.frame(
    x = 2067,
    y = 137.83+30,
    label = 'Historical mean: 137.83'
  )
  historical_min = data.frame(
    x = 2035,
    y = 73.38+5,
    label = 'Historical min: 73.38'
  )
  historical_label= rbind(historical_mean,historical_min)
  
  period_label = data.frame(
    x = c(2035,2066,2090),
    y = 10,
    label = c('Steadily high period \n 2022-2052(SHP)',
              'Decreasing period \n 2052-2082(DP)',
              'Steadily low period \n 2082-2098(SLP)')
  )
  
  figslabel = data.frame(x = 2022,
                         y = 235,
                         label = c('(a)','(b)'),
                         type = c('(a)','(c)'))
  blank_label = data.frame(
    x = 2035,
    y = 5,
    label = ''
  )
  fontsize =14
  text_theme = theme(
    legend.text = element_text(size = fontsize,color = 'black'),
    legend.title = element_text(size = fontsize,color = 'black'),
    axis.text = element_text(size = fontsize,color = 'black'),
    axis.title = element_text(size = fontsize,color = 'black')
  )
  pline = ggplot()+
    geom_text(data = blank_label,
              aes(x = x,y = y,label = label))+
    geom_vline(xintercept = c(2022,2052,2082,2098),
               size = 0.5,color = 'black')+
    geom_line(data = posareadf,
              aes(x = date,y = value,color = variable),
              size = 1.2)+
    geom_hline(yintercept = c(137.83,73.38),
               linetype = 'dashed',size = 0.5,color = 'black')+
    geom_text(data = steadhigh_mean,
              aes(x = x,y = y,label = label,color = variable),
              size= 4,hjust = 0.5,show.legend = F)+
    geom_text(data = dr,
              aes(x = x,y = y,label = label,color = variable),
              size= 4,hjust = 0.5,show.legend = F)+
    geom_text(data = steadlow_mean,
              aes(x = x,y = y,label = label,color = variable),
              size= 4,hjust = 0,show.legend = F)+
    geom_text(data = historical_label,
              aes(x = x,y = y,label = label),
              size= 4,hjust = 0.5,color = 'black')+
    geom_text(data = period_label,
              aes(x = x,y = y,label = label),
              size= 4,hjust = 0.5,color = 'black')+
    geom_text(data = figslabel,
              aes(x = x,y = y,label = label),
              size = 4,hjust = 0,color = 'black')+
    scale_color_manual(values = cols)+
    #ylim(40,240)+
    theme_bw()+
    facet_wrap(~type,nrow = 2,scales = 'free_y')+
    theme(axis.text.y = element_text(angle = 90,hjust = 0.5),
          strip.text = element_blank(),
          panel.grid = element_blank())+
    theme(legend.position = 'bottom')+
    text_theme+
    scale_y_continuous(breaks = c(10,73.38,
                                  137.83,200),
                       labels =c(10,73.38,
                                 137.83,200) )+
    scale_x_continuous(breaks = c(2022,2052,2082,2098))+
    guides(color = guide_legend(title = ''))+
    xlab('Time')+
    ylab("Positive TWS area (10 km )")
  
  output = 'main_plot/SI/figs_compare_muliti_calc_mean_multiweight_pmet'
  dir.create(output)
  output = paste0(output,'/figs_covar_projectws.png')
  
  png(output,
      height = 20,
      width = 25,
      units = 'cm',
      res = 800)
  print(pline)
  dev.off()
  
  break
  # pbar 
  source("/home/share/R_project/xinjiang_vapor/mmkTrend.R")
  calc_mmk <- function(x){
    x = mmkTrend(x)$Zc
    return(x)
  }
  pos_area_ori_mmk= apply(pos_area_ori,2,calc_mmk)
  pos_area_multi_mmk = apply(pos_area_multiweight,2,calc_mmk)
  
  mmk245 = data.frame(
    x = c('Posarea_Multi_Projects_Mean','Posarea_MultiWeight_PME_T'),
    y = c(pos_area_ori_mmk[1],pos_area_multi_mmk[1]),
    variable = c('Posarea_Multi_Projects_Mean','Posarea_MultiWeight_PME_T'),
    type = c('(b)','(b)')
  )
  mmk585 = data.frame(
    x =c('Posarea_Multi_Projects_Mean','Posarea_MultiWeight_PME_T'),
    y = c(pos_area_ori_mmk[2],pos_area_multi_mmk[2]),
    variable =c('Posarea_Multi_Projects_Mean','Posarea_MultiWeight_PME_T'),
    type = c('(d)','(d)')
  )
  
  mmkdf = rbind(mmk245,mmk585)
  
  pbar = ggplot()+
    geom_bar(data = mmkdf,
             aes(x = x,y= y, fill = variable),
             stat ='identity',
             position = position_dodge2(0.7),width = 0.7)+
    theme_bw()+
    facet_wrap(~type,nrow = 2)+
    scale_fill_manual(values = cols)+
    theme(axis.text.y = element_text(angle = 90,hjust = 0.5),
          strip.text = element_blank(),
          panel.grid = element_blank())+
    theme(legend.position = 'none')+
    xlab('')+
    ylab("MMK trend of posarea TWS")
  
  
  
  
  
}
figs_compare_project_results_basedon_multi_pmeato3<-function(
  
){
  #source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/calc_project_multi_weighted_cmip6_pme_in_ato3.R")
  #calc_project_multi_weighted_cmip6_pme_in_ato3()
  #source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/project_pos_area_by_model_withtemper.R")
  #pos_area_multiweight = project_pos_area_by_model_withtemper()
  #fwrite(pos_area_multiweight,'output/future_pos_tws_area/multiweight_pos_tws_area_ensemble.csv')
  
  input1 = 'output/future_pos_tws_area/multiweight_pos_tws_area_ensemble.csv'
  input2 = 'output/future_pos_tws_area/pos_tws_area_ensemble.csv'
  pos_area_multiweight = as.data.frame(fread(input1))
  pos_area_ori = as.data.frame(fread(input2))
  
  pos_area_multiweight = pos_area_multiweight[3:81,]
  pos_area_ori = pos_area_ori[3:81,]
  
  yearfull = 2020:2098
  
  posarea245 = data.frame(
    date = yearfull,
    Posarea_MultiMeanPME = pos_area_ori[,1],
    Posarea_MultiWeightPME = pos_area_multiweight[,1]
  )
  posarea585 = data.frame(
    date = yearfull,
    Posarea_MultiMeanPME = pos_area_ori[,2],
    Posarea_MultiWeightPME = pos_area_multiweight[,2]
  )
  posarea245 = reshape2::melt(posarea245,'date')
  posarea585 = reshape2::melt(posarea585,'date')
  
  posarea245$type = '(a)'
  posarea585$type = '(c)'
  
  posareadf = rbind(posarea245,posarea585)
  
  cols = pal_lancet()(9)[c(1,7)]
  
  dfvline = data.frame(
    x = c(2020,2051,2082)
  )
  
  loc2051 = length(2020:2051)
  loc2082 = length(2020:2082)
  loc2098 = length(2020:2098)
  
  steadhigh_mean245 = data.frame(
    x = c(2030,2040),
    y = c(210,210)+2,
    value = c(mean(pos_area_ori[1:loc2051,1]),
                             mean(pos_area_multiweight[1:loc2051,1])),
    variable = c('Posarea_MultiMeanPME','Posarea_MultiWeightPME'),
    type = '(a)'
  )
  steadhigh_mean585 = data.frame(
    x = c(2030,2040),
    y = c(210,210)+2,
    value = c(mean(pos_area_ori[1:loc2051,2]),
              mean(pos_area_multiweight[1:loc2051,2])),
    variable = c('Posarea_MultiMeanPME','Posarea_MultiWeightPME'),
    type = '(c)'
  )
  steadhigh_mean = rbind(steadhigh_mean245,steadhigh_mean585)
  steadhigh_mean$label = paste0('Mean: ',round(steadhigh_mean$value,2))
  
  dr245 = data.frame(
    x = c(2060,2075),
    y = c(210,210)+2,
    value = c(pos_area_ori[loc2082,1]-pos_area_ori[loc2051,1],
              pos_area_multiweight[loc2082,1] - pos_area_multiweight[loc2051,1]),
    variable = c('Posarea_MultiMeanPME','Posarea_MultiWeightPME'),
    type = '(a)'
  )
  
  dr585 = data.frame(
    x = c(2060,2075),
    y = c(210,210)+2,
    value = c(pos_area_ori[loc2082,2]-pos_area_ori[loc2051,2],
              pos_area_multiweight[loc2082,2] - pos_area_multiweight[loc2051,2]),
    variable = c('Posarea_MultiMeanPME','Posarea_MultiWeightPME'),
    type = '(c)'
  )
  dr = rbind(dr245,dr585)
  dr$label = paste0('Decline: ',round(dr$value,2))
  
  steadlow_mean245 = data.frame(
    x = c(2085),
    y = c(210,190)+2,
    value = c(mean(pos_area_ori[loc2082:loc2098,1]),
              mean(pos_area_multiweight[loc2082:loc2098,1])),
    variable = c('Posarea_MultiMeanPME','Posarea_MultiWeightPME'),
    type = '(a)'
  )
  steadlow_mean585 = data.frame(
    x = c(2085),
    y = c(210,190)+2,
    value = c(mean(pos_area_ori[loc2082:loc2098,2]),
              mean(pos_area_multiweight[loc2082:loc2098,2])),
    variable = c('Posarea_MultiMeanPME','Posarea_MultiWeightPME'),
    type = '(c)'
  )
  steadlow_mean = rbind(steadlow_mean245,steadlow_mean585)
  steadlow_mean$label = paste0('Mean: ',round(steadlow_mean$value,2))
  
  
  
  historical_mean = data.frame(
    x = 2067,
    y = 137.83+20,
    label = 'Historical mean: 137.83'
  )
  historical_min = data.frame(
    x = 2035,
    y = 73.38+5,
    label = 'Historical min: 73.38'
  )
  historical_label= rbind(historical_mean,historical_min)
  
  period_label = data.frame(
    x = c(2035,2066,2090),
    y = 40,
    label = c('Steadily high period \n 2020-2051(SHP)',
              'Decreasing period \n 2051-2082(DP)',
              'Steadily low period \n 2082-2098(SLP)')
  )
  
  figslabel = data.frame(x = 2022,
                         y = 235,
                         label = c('(a)','(b)'),
                         type = c('(a)','(c)'))
  blank_label = data.frame(
    x = 2035,
    y = 35,
    label = ''
  )
  fontsize =14
  text_theme = theme(
    legend.text = element_text(size = fontsize,color = 'black'),
    legend.title = element_text(size = fontsize,color = 'black'),
    axis.text = element_text(size = fontsize,color = 'black'),
    axis.title = element_text(size = fontsize,color = 'black')
  )
  pline = ggplot()+
    geom_text(data = blank_label,
              aes(x = x,y = y,label = label))+
    geom_vline(xintercept = c(2020,2051,2082,2098),
               size = 0.5,color = 'black')+
    geom_line(data = posareadf,
              aes(x = date,y = value,color = variable),
              size = 1.2)+
    geom_hline(yintercept = c(137.83,73.38),
               linetype = 'dashed',size = 0.5,color = 'black')+
    geom_text(data = steadhigh_mean,
              aes(x = x,y = y,label = label,color = variable),
              size= 4,hjust = 0.5,show.legend = F)+
    geom_text(data = dr,
              aes(x = x,y = y,label = label,color = variable),
              size= 4,hjust = 0.5,show.legend = F)+
    geom_text(data = steadlow_mean,
              aes(x = x,y = y,label = label,color = variable),
              size= 4,hjust = 0,show.legend = F)+
    geom_text(data = historical_label,
              aes(x = x,y = y,label = label),
              size= 4,hjust = 0.5,color = 'black')+
    geom_text(data = period_label,
              aes(x = x,y = y,label = label),
              size= 4,hjust = 0.5,color = 'black')+
    geom_text(data = figslabel,
              aes(x = x,y = y,label = label),
              size = 4,hjust = 0,color = 'black')+
    scale_color_manual(values = cols)+
    #ylim(40,240)+
    theme_bw()+
    facet_wrap(~type,nrow = 2,scales = 'free_y')+
    theme(axis.text.y = element_text(angle = 90,hjust = 0.5),
          strip.text = element_blank(),
          panel.grid = element_blank())+
    theme(legend.position = 'bottom')+
    text_theme+
    scale_y_continuous(breaks = c(40,73.38,
                                  137.83,200),
                       labels =c(40,73.38,
                                 137.83,200) )+
    scale_x_continuous(breaks = c(2020,2051,2082,2098))+
    guides(color = guide_legend(title = ''))+
    xlab('Time')+
    ylab("Positive TWS area (10 km )")
    
  output = 'main_plot/SI/figs_compare_project_results_basedon_multi_pmeato3'
  dir.create(output)
  output = paste0(output,'/figs_covar_projectws.png')
  
  png(output,
      height = 20,
      width = 25,
      units = 'cm',
      res = 800)
  print(pline)
  dev.off()
  
  break
  # pbar 
  source("/home/share/R_project/xinjiang_vapor/mmkTrend.R")
  calc_mmk <- function(x){
    x = mmkTrend(x)$Zc
    return(x)
  }
  pos_area_ori_mmk= apply(pos_area_ori,2,calc_mmk)
  pos_area_multi_mmk = apply(pos_area_multiweight,2,calc_mmk)
  
  mmk245 = data.frame(
    x = c('Posarea_MultiMeanPME','Posarea_MultiWeightPME'),
    y = c(pos_area_ori_mmk[1],pos_area_multi_mmk[1]),
    variable = c('Posarea_MultiMeanPME','Posarea_MultiWeightPME'),
    type = c('(b)','(b)')
  )
  mmk585 = data.frame(
    x =c('Posarea_MultiMeanPME','Posarea_MultiWeightPME'),
    y = c(pos_area_ori_mmk[2],pos_area_multi_mmk[2]),
    variable =c('Posarea_MultiMeanPME','Posarea_MultiWeightPME'),
    type = c('(d)','(d)')
  )
  
  mmkdf = rbind(mmk245,mmk585)
  
  pbar = ggplot()+
    geom_bar(data = mmkdf,
             aes(x = x,y= y, fill = variable),
             stat ='identity',
             position = position_dodge2(0.7),width = 0.7)+
    theme_bw()+
    facet_wrap(~type,nrow = 2)+
    scale_fill_manual(values = cols)+
    theme(axis.text.y = element_text(angle = 90,hjust = 0.5),
          strip.text = element_blank(),
          panel.grid = element_blank())+
    theme(legend.position = 'none')+
    xlab('')+
    ylab("MMK trend of posarea TWS")
  
  
  
  
  
}
figs_compare_project_results_basedon_ori_and_proj_pmetemper<-function(
  
){
  #source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/calc_project_multi_weighted_cmip6_pme_in_ato3.R")
  #calc_project_multi_weighted_cmip6_pme_in_ato3()
  #source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/project_pos_area_by_model_withtemper.R")
  #pos_area_multiwaeight = project_pos_area_by_model_withtemper()
  #fwrite(pos_area_multiweight,'output/future_pos_tws_area/multiweight_pos_tws_area_ensemble.csv')
  
  input1 = 'output/future_pos_tws_area/pos_tws_area_ensemble_noproj_temper_pme.csv'
  input2 = 'output/future_pos_tws_area/pos_tws_area_ensemble_proj_temper_proj_pme.csv'
  pos_area_multiweight = as.data.frame(fread(input1))
  pos_area_ori = as.data.frame(fread(input2))
  
  pos_area_multiweight = pos_area_multiweight[3:81,]
  pos_area_ori = pos_area_ori[3:81,]
  
  yearfull = 2020:2098
  
  posarea245 = data.frame(
    date = yearfull,
    Posarea_MultiWeight_PME_T = pos_area_ori[,1],
    Posarea_MultiMean_PME_T = pos_area_multiweight[,1]
  )
  posarea585 = data.frame(
    date = yearfull,
    Posarea_MultiWeight_PME_T = pos_area_ori[,2],
    Posarea_MultiMean_PME_T = pos_area_multiweight[,2]
  )
  posarea245 = reshape2::melt(posarea245,'date')
  posarea585 = reshape2::melt(posarea585,'date')
  
  posarea245$type = '(a)'
  posarea585$type = '(c)'
  
  posareadf = rbind(posarea245,posarea585)
  
  cols = pal_lancet()(9)[c(1,7)]
  
  dfvline = data.frame(
    x = c(2020,2051,2082)
  )
  
  loc2051 = length(2020:2051)
  loc2082 = length(2020:2082)
  loc2098 = length(2020:2098)
  
  steadhigh_mean245 = data.frame(
    x = c(2030,2040),
    y = 235,
    value = c(mean(pos_area_ori[1:loc2051,1]),
              mean(pos_area_multiweight[1:loc2051,1])),
    variable = c('Posarea_MultiWeight_PME_T','Posarea_MultiMean_PME_T'),
    type = '(a)'
  )
  steadhigh_mean585 = data.frame(
    x = c(2030,2040),
    y = 235,
    value = c(mean(pos_area_ori[1:loc2051,2]),
              mean(pos_area_multiweight[1:loc2051,2])),
    variable = c('Posarea_MultiWeight_PME_T','Posarea_MultiMean_PME_T'),
    type = '(c)'
  )
  steadhigh_mean = rbind(steadhigh_mean245,steadhigh_mean585)
  steadhigh_mean$label = paste0('Mean: ',round(steadhigh_mean$value,2))
  
  dr245 = data.frame(
    x = c(2060,2075),
    y = 235,
    value = c(pos_area_ori[loc2082,1]-pos_area_ori[loc2051,1],
              pos_area_multiweight[loc2082,1] - pos_area_multiweight[loc2051,1]),
    variable = c('Posarea_MultiWeight_PME_T','Posarea_MultiMean_PME_T'),
    type = '(a)'
  )
  
  dr585 = data.frame(
    x = c(2060,2075),
    y = 235,
    value = c(pos_area_ori[loc2082,2]-pos_area_ori[loc2051,2],
              pos_area_multiweight[loc2082,2] - pos_area_multiweight[loc2051,2]),
    variable = c('Posarea_MultiWeight_PME_T','Posarea_MultiMean_PME_T'),
    type = '(c)'
  )
  dr = rbind(dr245,dr585)
  dr$label = paste0('Decline: ',round(dr$value,2))
  
  steadlow_mean245 = data.frame(
    x = c(2085),
    y = c(210,190)+25,
    value = c(mean(pos_area_ori[loc2082:loc2098,1]),
              mean(pos_area_multiweight[loc2082:loc2098,1])),
    variable = c('Posarea_MultiWeight_PME_T','Posarea_MultiMean_PME_T'),
    type = '(a)'
  )
  steadlow_mean585 = data.frame(
    x = c(2085),
    y = c(210,190)+25,
    value = c(mean(pos_area_ori[loc2082:loc2098,2]),
              mean(pos_area_multiweight[loc2082:loc2098,2])),
    variable = c('Posarea_MultiWeight_PME_T','Posarea_MultiMean_PME_T'),
    type = '(c)'
  )
  steadlow_mean = rbind(steadlow_mean245,steadlow_mean585)
  steadlow_mean$label = paste0('Mean: ',round(steadlow_mean$value,2))
  
  
  
  historical_mean = data.frame(
    x = 2067,
    y = 137.83+30,
    label = 'Historical mean: 137.83'
  )
  historical_min = data.frame(
    x = 2035,
    y = 73.38+5,
    label = 'Historical min: 73.38'
  )
  historical_label= rbind(historical_mean,historical_min)
  
  period_label = data.frame(
    x = c(2035,2066,2090),
    y = 10,
    label = c('Steadily high period \n 2020-2051(SHP)',
              'Decreasing period \n 2051-2082(DP)',
              'Steadily low period \n 2082-2098(SLP)')
  )
  
  figslabel = data.frame(x = 2022,
                         y = 235,
                         label = c('(a)','(b)'),
                         type = c('(a)','(c)'))
  blank_label = data.frame(
    x = 2035,
    y = 5,
    label = ''
  )
  fontsize =14
  text_theme = theme(
    legend.text = element_text(size = fontsize,color = 'black'),
    legend.title = element_text(size = fontsize,color = 'black'),
    axis.text = element_text(size = fontsize,color = 'black'),
    axis.title = element_text(size = fontsize,color = 'black')
  )
  pline = ggplot()+
    geom_text(data = blank_label,
              aes(x = x,y = y,label = label))+
    geom_vline(xintercept = c(2020,2051,2082,2098),
               size = 0.5,color = 'black')+
    geom_line(data = posareadf,
              aes(x = date,y = value,color = variable),
              size = 1.2)+
    geom_hline(yintercept = c(137.83,73.38),
               linetype = 'dashed',size = 0.5,color = 'black')+
    geom_text(data = steadhigh_mean,
              aes(x = x,y = y,label = label,color = variable),
              size= 4,hjust = 0.5,show.legend = F)+
    geom_text(data = dr,
              aes(x = x,y = y,label = label,color = variable),
              size= 4,hjust = 0.5,show.legend = F)+
    geom_text(data = steadlow_mean,
              aes(x = x,y = y,label = label,color = variable),
              size= 4,hjust = 0,show.legend = F)+
    geom_text(data = historical_label,
              aes(x = x,y = y,label = label),
              size= 4,hjust = 0.5,color = 'black')+
    geom_text(data = period_label,
              aes(x = x,y = y,label = label),
              size= 4,hjust = 0.5,color = 'black')+
    geom_text(data = figslabel,
              aes(x = x,y = y,label = label),
              size = 4,hjust = 0,color = 'black')+
    scale_color_manual(values = cols)+
    #ylim(40,240)+
    theme_bw()+
    facet_wrap(~type,nrow = 2,scales = 'free_y')+
    theme(axis.text.y = element_text(angle = 90,hjust = 0.5),
          strip.text = element_blank(),
          panel.grid = element_blank())+
    theme(legend.position = 'bottom')+
    text_theme+
    scale_y_continuous(breaks = c(10,73.38,
                                  137.83,200),
                       labels =c(10,73.38,
                                 137.83,200) )+
    scale_x_continuous(breaks = c(2020,2051,2082,2098))+
    guides(color = guide_legend(title = ''))+
    xlab('Time')+
    ylab("Positive TWS area (10 km )")
  
  output = 'main_plot/SI/figs_compare_project_results_ori_proj_pme_temper'
  dir.create(output)
  output = paste0(output,'/figs_covar_projectws2.png')
  
  png(output,
      height = 20,
      width = 25,
      units = 'cm',
      res = 800)
  print(pline)
  dev.off()
  
  break
  # pbar 
  source("/home/share/R_project/xinjiang_vapor/mmkTrend.R")
  calc_mmk <- function(x){
    x = mmkTrend(x)$Zc
    return(x)
  }
  pos_area_ori_mmk= apply(pos_area_ori,2,calc_mmk)
  pos_area_multi_mmk = apply(pos_area_multiweight,2,calc_mmk)
  
  mmk245 = data.frame(
    x = c('Posarea_MultiWeight_PME_T','Posarea_MultiMean_PME_T'),
    y = c(pos_area_ori_mmk[1],pos_area_multi_mmk[1]),
    variable = c('Posarea_MultiWeight_PME_T','Posarea_MultiMean_PME_T'),
    type = c('(b)','(b)')
  )
  mmk585 = data.frame(
    x =c('Posarea_MultiWeight_PME_T','Posarea_MultiMean_PME_T'),
    y = c(pos_area_ori_mmk[2],pos_area_multi_mmk[2]),
    variable =c('Posarea_MultiWeight_PME_T','Posarea_MultiMean_PME_T'),
    type = c('(d)','(d)')
  )
  
  mmkdf = rbind(mmk245,mmk585)
  
  pbar = ggplot()+
    geom_bar(data = mmkdf,
             aes(x = x,y= y, fill = variable),
             stat ='identity',
             position = position_dodge2(0.7),width = 0.7)+
    theme_bw()+
    facet_wrap(~type,nrow = 2)+
    scale_fill_manual(values = cols)+
    theme(axis.text.y = element_text(angle = 90,hjust = 0.5),
          strip.text = element_blank(),
          panel.grid = element_blank())+
    theme(legend.position = 'none')+
    xlab('')+
    ylab("MMK trend of posarea TWS")
  
  
  
  
  
}
figs_compare_project_results_basedon_ori_pme_pmetemper<-function(
  
){
  #source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/calc_project_multi_weighted_cmip6_pme_in_ato3.R")
  #calc_project_multi_weighted_cmip6_pme_in_ato3()
  #source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/project_pos_area_by_model_withtemper.R")
  #pos_area_multiweight = project_pos_area_by_model_withtemper()
  #fwrite(pos_area_multiweight,'output/future_pos_tws_area/multiweight_pos_tws_area_ensemble.csv')
  
  input1 = 'output/future_pos_tws_area/pos_tws_area_ensemble_noproj_temper_pme.csv'
  input2 = 'output/future_pos_tws_area/pos_tws_area_ensemble.csv'
  pos_area_multiweight = as.data.frame(fread(input1))
  pos_area_ori = as.data.frame(fread(input2))
  
  pos_area_multiweight = pos_area_multiweight[3:81,]
  pos_area_ori = pos_area_ori[3:81,]
  
  yearfull = 2020:2098
  
  posarea245 = data.frame(
    date = yearfull,
    Posarea_OnlyPME = pos_area_ori[,1],
    Posarea_PME_T = pos_area_multiweight[,1]
  )
  posarea585 = data.frame(
    date = yearfull,
    Posarea_OnlyPME = pos_area_ori[,2],
    Posarea_PME_T = pos_area_multiweight[,2]
  )
  posarea245 = reshape2::melt(posarea245,'date')
  posarea585 = reshape2::melt(posarea585,'date')
  
  posarea245$type = '(a)'
  posarea585$type = '(c)'
  
  posareadf = rbind(posarea245,posarea585)
  
  cols = pal_lancet()(9)[c(1,7)]
  
  dfvline = data.frame(
    x = c(2020,2051,2082)
  )
  
  loc2051 = length(2020:2051)
  loc2082 = length(2020:2082)
  loc2098 = length(2020:2098)
  
  steadhigh_mean245 = data.frame(
    x = c(2030,2040),
    y = 235,
    value = c(mean(pos_area_ori[1:loc2051,1]),
              mean(pos_area_multiweight[1:loc2051,1])),
    variable = c('Posarea_OnlyPME','Posarea_PME_T'),
    type = '(a)'
  )
  steadhigh_mean585 = data.frame(
    x = c(2030,2040),
    y =235,
    value = c(mean(pos_area_ori[1:loc2051,2]),
              mean(pos_area_multiweight[1:loc2051,2])),
    variable = c('Posarea_OnlyPME','Posarea_PME_T'),
    type = '(c)'
  )
  steadhigh_mean = rbind(steadhigh_mean245,steadhigh_mean585)
  steadhigh_mean$label = paste0('Mean: ',round(steadhigh_mean$value,2))
  
  dr245 = data.frame(
    x = c(2060,2075),
    y = 235,
    value = c(pos_area_ori[loc2082,1]-pos_area_ori[loc2051,1],
              pos_area_multiweight[loc2082,1] - pos_area_multiweight[loc2051,1]),
    variable = c('Posarea_OnlyPME','Posarea_PME_T'),
    type = '(a)'
  )
  
  dr585 = data.frame(
    x = c(2060,2075),
    y = 235,
    value = c(pos_area_ori[loc2082,2]-pos_area_ori[loc2051,2],
              pos_area_multiweight[loc2082,2] - pos_area_multiweight[loc2051,2]),
    variable = c('Posarea_OnlyPME','Posarea_PME_T'),
    type = '(c)'
  )
  dr = rbind(dr245,dr585)
  dr$label = paste0('Decline: ',round(dr$value,2))
  
  steadlow_mean245 = data.frame(
    x = c(2085),
    y = c(210,190)+25,
    value = c(mean(pos_area_ori[loc2082:loc2098,1]),
              mean(pos_area_multiweight[loc2082:loc2098,1])),
    variable = c('Posarea_OnlyPME','Posarea_PME_T'),
    type = '(a)'
  )
  steadlow_mean585 = data.frame(
    x = c(2085),
    y = c(210,190)+25,
    value = c(mean(pos_area_ori[loc2082:loc2098,2]),
              mean(pos_area_multiweight[loc2082:loc2098,2])),
    variable = c('Posarea_OnlyPME','Posarea_PME_T'),
    type = '(c)'
  )
  steadlow_mean = rbind(steadlow_mean245,steadlow_mean585)
  steadlow_mean$label = paste0('Mean: ',round(steadlow_mean$value,2))
  
  
  
  historical_mean = data.frame(
    x = 2067,
    y = 137.83+30,
    label = 'Historical mean: 137.83'
  )
  historical_min = data.frame(
    x = 2035,
    y = 73.38+5,
    label = 'Historical min: 73.38'
  )
  historical_label= rbind(historical_mean,historical_min)
  
  period_label = data.frame(
    x = c(2035,2066,2090),
    y = 10,
    label = c('Steadily high period \n 2020-2051(SHP)',
              'Decreasing period \n 2051-2082(DP)',
              'Steadily low period \n 2082-2098(SLP)')
  )
  
  figslabel = data.frame(x = 2022,
                         y = 235,
                         label = c('(a)','(b)'),
                         type = c('(a)','(c)'))
  blank_label = data.frame(
    x = 2035,
    y = 5,
    label = ''
  )
  fontsize =14
  text_theme = theme(
    legend.text = element_text(size = fontsize,color = 'black'),
    legend.title = element_text(size = fontsize,color = 'black'),
    axis.text = element_text(size = fontsize,color = 'black'),
    axis.title = element_text(size = fontsize,color = 'black')
  )
  pline = ggplot()+
    geom_text(data = blank_label,
              aes(x = x,y = y,label = label))+
    geom_vline(xintercept = c(2020,2051,2082,2098),
               size = 0.5,color = 'black')+
    geom_line(data = posareadf,
              aes(x = date,y = value,color = variable),
              size = 1.2)+
    geom_hline(yintercept = c(137.83,73.38),
               linetype = 'dashed',size = 0.5,color = 'black')+
    geom_text(data = steadhigh_mean,
              aes(x = x,y = y,label = label,color = variable),
              size= 4,hjust = 0.5,show.legend = F)+
    geom_text(data = dr,
              aes(x = x,y = y,label = label,color = variable),
              size= 4,hjust = 0.5,show.legend = F)+
    geom_text(data = steadlow_mean,
              aes(x = x,y = y,label = label,color = variable),
              size= 4,hjust = 0,show.legend = F)+
    geom_text(data = historical_label,
              aes(x = x,y = y,label = label),
              size= 4,hjust = 0.5,color = 'black')+
    geom_text(data = period_label,
              aes(x = x,y = y,label = label),
              size= 4,hjust = 0.5,color = 'black')+
    geom_text(data = figslabel,
              aes(x = x,y = y,label = label),
              size = 4,hjust = 0,color = 'black')+
    scale_color_manual(values = cols)+
    #ylim(40,240)+
    theme_bw()+
    facet_wrap(~type,nrow = 2,scales = 'free_y')+
    theme(axis.text.y = element_text(angle = 90,hjust = 0.5),
          strip.text = element_blank(),
          panel.grid = element_blank())+
    theme(legend.position = 'bottom')+
    text_theme+
    scale_y_continuous(breaks = c(10,73.38,
                                  137.83,200),
                       labels =c(10,73.38,
                                 137.83,200) )+
    scale_x_continuous(breaks = c(2020,2051,2082,2098))+
    guides(color = guide_legend(title = ''))+
    xlab('Time')+
    ylab("Positive TWS area (10 km )")
  
  output = 'main_plot/SI/figs_compare_project_results_pme_pme_temper'
  dir.create(output)
  output = paste0(output,'/figs_covar_projectws.png')
  
  png(output,
      height = 20,
      width = 25,
      units = 'cm',
      res = 800)
  print(pline)
  dev.off()
  
  break
  # pbar 
  source("/home/share/R_project/xinjiang_vapor/mmkTrend.R")
  calc_mmk <- function(x){
    x = mmkTrend(x)$Zc
    return(x)
  }
  pos_area_ori_mmk= apply(pos_area_ori,2,calc_mmk)
  pos_area_multi_mmk = apply(pos_area_multiweight,2,calc_mmk)
  
  mmk245 = data.frame(
    x = c('Posarea_OnlyPME','Posarea_PME_T'),
    y = c(pos_area_ori_mmk[1],pos_area_multi_mmk[1]),
    variable = c('Posarea_OnlyPME','Posarea_PME_T'),
    type = c('(b)','(b)')
  )
  mmk585 = data.frame(
    x =c('Posarea_OnlyPME','Posarea_PME_T'),
    y = c(pos_area_ori_mmk[2],pos_area_multi_mmk[2]),
    variable =c('Posarea_OnlyPME','Posarea_PME_T'),
    type = c('(d)','(d)')
  )
  
  mmkdf = rbind(mmk245,mmk585)
  
  pbar = ggplot()+
    geom_bar(data = mmkdf,
             aes(x = x,y= y, fill = variable),
             stat ='identity',
             position = position_dodge2(0.7),width = 0.7)+
    theme_bw()+
    facet_wrap(~type,nrow = 2)+
    scale_fill_manual(values = cols)+
    theme(axis.text.y = element_text(angle = 90,hjust = 0.5),
          strip.text = element_blank(),
          panel.grid = element_blank())+
    theme(legend.position = 'none')+
    xlab('')+
    ylab("MMK trend of posarea TWS")
  
  
  
  
  
}
figs_compare_project_results_consider_temper<-function(
  
){
  #source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/calc_project_multi_weighted_cmip6_pme_in_ato3.R")
  #calc_project_multi_weighted_cmip6_pme_in_ato3()
  #source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/project_pos_area_by_model_withtemper.R")
  #pos_area_multiweight = project_pos_area_by_model_withtemper()
  #fwrite(pos_area_multiweight,'output/future_pos_tws_area/multiweight_pos_tws_area_ensemble.csv')
  
  input1 = 'output/future_pos_tws_area/pos_tws_area_ensemble_consider_temper.csv'
  input2 = 'output/future_pos_tws_area/pos_tws_area_ensemble.csv'
  pos_area_multiweight = as.data.frame(fread(input1))
  pos_area_ori = as.data.frame(fread(input2))
  
  pos_area_multiweight = pos_area_multiweight[3:81,]
  pos_area_ori = pos_area_ori[3:81,]
  
  yearfull = 2020:2098
  
  posarea245 = data.frame(
    date = yearfull,
    Posarea_MultiMeanPME = pos_area_ori[,1],
    Posarea_MultiMeanPME_T = pos_area_multiweight[,1]
  )
  posarea585 = data.frame(
    date = yearfull,
    Posarea_MultiMeanPME = pos_area_ori[,2],
    Posarea_MultiMeanPME_T = pos_area_multiweight[,2]
  )
  posarea245 = reshape2::melt(posarea245,'date')
  posarea585 = reshape2::melt(posarea585,'date')
  
  posarea245$type = '(a)'
  posarea585$type = '(c)'
  
  posareadf = rbind(posarea245,posarea585)
  
  cols = pal_lancet()(9)[c(1,7)]
  
  dfvline = data.frame(
    x = c(2020,2051,2082)
  )
  
  loc2051 = length(2020:2051)
  loc2082 = length(2020:2082)
  loc2098 = length(2020:2098)
  
  steadhigh_mean245 = data.frame(
    x = c(2030,2040),
    y = c(210,210)+2,
    value = c(mean(pos_area_ori[1:loc2051,1]),
              mean(pos_area_multiweight[1:loc2051,1])),
    variable = c('Posarea_MultiMeanPME','Posarea_MultiMeanPME_T'),
    type = '(a)'
  )
  steadhigh_mean585 = data.frame(
    x = c(2030,2040),
    y = c(210,210)+2,
    value = c(mean(pos_area_ori[1:loc2051,2]),
              mean(pos_area_multiweight[1:loc2051,2])),
    variable = c('Posarea_MultiMeanPME','Posarea_MultiMeanPME_T'),
    type = '(c)'
  )
  steadhigh_mean = rbind(steadhigh_mean245,steadhigh_mean585)
  steadhigh_mean$label = paste0('Mean: ',round(steadhigh_mean$value,2))
  
  dr245 = data.frame(
    x = c(2060,2075),
    y = c(210,210)+2,
    value = c(pos_area_ori[loc2082,1]-pos_area_ori[loc2051,1],
              pos_area_multiweight[loc2082,1] - pos_area_multiweight[loc2051,1]),
    variable = c('Posarea_MultiMeanPME','Posarea_MultiMeanPME_T'),
    type = '(a)'
  )
  
  dr585 = data.frame(
    x = c(2060,2075),
    y = c(210,210)+2,
    value = c(pos_area_ori[loc2082,2]-pos_area_ori[loc2051,2],
              pos_area_multiweight[loc2082,2] - pos_area_multiweight[loc2051,2]),
    variable = c('Posarea_MultiMeanPME','Posarea_MultiMeanPME_T'),
    type = '(c)'
  )
  dr = rbind(dr245,dr585)
  dr$label = paste0('Decline: ',round(dr$value,2))
  
  steadlow_mean245 = data.frame(
    x = c(2085),
    y = c(210,190)+2,
    value = c(mean(pos_area_ori[loc2082:loc2098,1]),
              mean(pos_area_multiweight[loc2082:loc2098,1])),
    variable = c('Posarea_MultiMeanPME','Posarea_MultiMeanPME_T'),
    type = '(a)'
  )
  steadlow_mean585 = data.frame(
    x = c(2085),
    y = c(210,190)+2,
    value = c(mean(pos_area_ori[loc2082:loc2098,2]),
              mean(pos_area_multiweight[loc2082:loc2098,2])),
    variable = c('Posarea_MultiMeanPME','Posarea_MultiMeanPME_T'),
    type = '(c)'
  )
  steadlow_mean = rbind(steadlow_mean245,steadlow_mean585)
  steadlow_mean$label = paste0('Mean: ',round(steadlow_mean$value,2))
  
  
  
  historical_mean = data.frame(
    x = 2067,
    y = 137.83+20,
    label = 'Historical mean: 137.83'
  )
  historical_min = data.frame(
    x = 2035,
    y = 73.38+5,
    label = 'Historical min: 73.38'
  )
  historical_label= rbind(historical_mean,historical_min)
  
  period_label = data.frame(
    x = c(2035,2066,2090),
    y = 10,
    label = c('Steadily high period \n 2020-2051(SHP)',
              'Decreasing period \n 2051-2082(DP)',
              'Steadily low period \n 2082-2098(SLP)')
  )
  
  figslabel = data.frame(x = 2022,
                         y = 235,
                         label = c('(a)','(b)'),
                         type = c('(a)','(c)'))
  blank_label = data.frame(
    x = 2035,
    y = 5,
    label = ''
  )
  fontsize =14
  text_theme = theme(
    legend.text = element_text(size = fontsize,color = 'black'),
    legend.title = element_text(size = fontsize,color = 'black'),
    axis.text = element_text(size = fontsize,color = 'black'),
    axis.title = element_text(size = fontsize,color = 'black')
  )
  pline = ggplot()+
    geom_text(data = blank_label,
              aes(x = x,y = y,label = label))+
    geom_vline(xintercept = c(2020,2051,2082,2098),
               size = 0.5,color = 'black')+
    geom_line(data = posareadf,
              aes(x = date,y = value,color = variable),
              size = 1.2)+
    geom_hline(yintercept = c(137.83,73.38),
               linetype = 'dashed',size = 0.5,color = 'black')+
    geom_text(data = steadhigh_mean,
              aes(x = x,y = y,label = label,color = variable),
              size= 4,hjust = 0.5,show.legend = F)+
    geom_text(data = dr,
              aes(x = x,y = y,label = label,color = variable),
              size= 4,hjust = 0.5,show.legend = F)+
    geom_text(data = steadlow_mean,
              aes(x = x,y = y,label = label,color = variable),
              size= 4,hjust = 0,show.legend = F)+
    geom_text(data = historical_label,
              aes(x = x,y = y,label = label),
              size= 4,hjust = 0.5,color = 'black')+
    geom_text(data = period_label,
              aes(x = x,y = y,label = label),
              size= 4,hjust = 0.5,color = 'black')+
    geom_text(data = figslabel,
              aes(x = x,y = y,label = label),
              size = 4,hjust = 0,color = 'black')+
    scale_color_manual(values = cols)+
    #ylim(40,240)+
    theme_bw()+
    facet_wrap(~type,nrow = 2,scales = 'free_y')+
    theme(axis.text.y = element_text(angle = 90,hjust = 0.5),
          strip.text = element_blank(),
          panel.grid = element_blank())+
    theme(legend.position = 'bottom')+
    text_theme+
    scale_y_continuous(breaks = c(10,73.38,
                                  137.83,200),
                       labels =c(10,73.38,
                                 137.83,200) )+
    scale_x_continuous(breaks = c(2020,2051,2082,2098))+
    guides(color = guide_legend(title = ''))+
    xlab('Time')+
    ylab("Positive TWS area (10 km )")
  
  output = 'main_plot/SI/figs_compare_project_results_consider_temper'
  dir.create(output)
  output = paste0(output,'/figs_covar_projectws_temper.png')
  
  png(output,
      height = 20,
      width = 25,
      units = 'cm',
      res = 800)
  print(pline)
  dev.off()
  
  break
  # pbar 
  source("/home/share/R_project/xinjiang_vapor/mmkTrend.R")
  calc_mmk <- function(x){
    x = mmkTrend(x)$Zc
    return(x)
  }
  pos_area_ori_mmk= apply(pos_area_ori,2,calc_mmk)
  pos_area_multi_mmk = apply(pos_area_multiweight,2,calc_mmk)
  
  mmk245 = data.frame(
    x = c('Posarea_MultiMeanPME','Posarea_MultiMeanPME_T'),
    y = c(pos_area_ori_mmk[1],pos_area_multi_mmk[1]),
    variable = c('Posarea_MultiMeanPME','Posarea_MultiMeanPME_T'),
    type = c('(b)','(b)')
  )
  mmk585 = data.frame(
    x =c('Posarea_MultiMeanPME','Posarea_MultiMeanPME_T'),
    y = c(pos_area_ori_mmk[2],pos_area_multi_mmk[2]),
    variable =c('Posarea_MultiMeanPME','Posarea_MultiMeanPME_T'),
    type = c('(d)','(d)')
  )
  
  mmkdf = rbind(mmk245,mmk585)
  
  pbar = ggplot()+
    geom_bar(data = mmkdf,
             aes(x = x,y= y, fill = variable),
             stat ='identity',
             position = position_dodge2(0.7),width = 0.7)+
    theme_bw()+
    facet_wrap(~type,nrow = 2)+
    scale_fill_manual(values = cols)+
    theme(axis.text.y = element_text(angle = 90,hjust = 0.5),
          strip.text = element_blank(),
          panel.grid = element_blank())+
    theme(legend.position = 'none')+
    xlab('')+
    ylab("MMK trend of posarea TWS")
  
  
  
  
  
}
figs_covar_pme_era5_cmip6_nato <- function(
  
){
  dir.create('output_proj_tws')
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/import_index_insource_tibet.R")
  trend_fun_index_cmip6_2003<-function(x){
    x = as.numeric(x)
    #x = x[loc2020:loc2050]
    x = x[1:174]
    xt = ts(x,start = c(2003,1),frequency = 12)
    xt = decompose(xt)$trend
    
    naid = which(is.na(xt))
    xt = xt[-naid]
    
    xt = (xt-mean(xt))/sd(xt)
    return(xt)
  }
  trend_fun_index_era5<-function(x){
    x = as.numeric(x)
    xt = ts(x,start = c(2003,1),frequency = 12)
    xt = decompose(xt)$trend
    
    naid = which(is.na(xt))
    xt = xt[-naid]
    return(xt)
  }
  standard_fun_index_era5 <-function(x){
    xs = (x - mean(x))/sd(x)
    return(xs)
  }
  standard_fun_index_tws <-function(x){
    xs = (x)/sd(x)
    return(xs)
  }
  
  pmeato1 = import_index_insource_tibet(var = 'pme_mean',region = 'ato')
  pmeio1 = import_index_insource_tibet(var = 'pme_mean',region = 'io')
  
  pmeato = pmeato1[1:174,]
  pmeio = pmeio1[1:174,]
  
  pmeato = apply(pmeato,2,trend_fun_index_era5)
  pmeio = apply(pmeio,2,trend_fun_index_era5)
  
  pmeato = apply(pmeato,2,standard_fun_index_era5)
  pmeio = apply(pmeio,2,standard_fun_index_era5)
  pmeato = pmeato[,2:3]
  pmeio = pmeio[,4]
  
  # import cmip6 data
  #############
  pmeato_ori3 = pmeato[,2]
  
  pmeato_cmip6 = import_index_insource_tibet(var = 'pme_cmip6',
                                             region = 'ato')
  # import cmip6 index
  pmeato256 = pmeato_cmip6[[1]]
  pmeato3_256 = pmeato256[[2]]
  
  pmeato585 = pmeato_cmip6[[2]]
  pmeato3_585 = pmeato585[[2]]
  
  models = colnames(pmeato3_256)
  
  #colnames(pmeato_ori3) = models
  models = c(models,'Ensemble')
  models <<- models
  #############
  
  pmeato3_256_s = apply(pmeato3_256,2,trend_fun_index_cmip6_2003)
  pmeato3_585_s = apply(pmeato3_585,2,trend_fun_index_cmip6_2003)
  
  
  cors_fun245 <- function(i){
    cors = cor(pmeato3_256_s[,i],pmeato_ori3)
    pvs = cor.test(pmeato3_256_s[,i],pmeato_ori3)$p.value
    
    ret = data.frame(
      cor = cors,
      pvs = pvs
    )
    return(ret)
  }
  cors_fun585<- function(i){
    cors = cor(pmeato3_585_s[,i],pmeato_ori3)
    pvs = cor.test(pmeato3_585_s[,i],pmeato_ori3)$p.value
    
    ret = data.frame(
      cor = cors,
      pvs = pvs
    )
    return(ret)
  }
  i = 1:8
  dfcor245 = do.call(rbind,lapply(i,cors_fun245))
  dfcor585= do.call(rbind,lapply(i,cors_fun585))
  
  date = seq(as.Date('2003-07-01'),
             as.Date('2016-12-01'),'1 month')
  dfline1 = data.frame(
    date = date,
    ERA5 = pmeato_ori3
  )
  dfline245 = data.frame(
    date = date,
    pmeato3_256_s
  )
  
  dfline585 = data.frame(
    date = date,
    pmeato3_585_s
  )
  
  dfline245 = reshape2::melt(dfline245,'date')
  dfline585 = reshape2::melt(dfline585,'date')
  dfline1 = reshape2::melt(dfline1,'date')
  dfline1$cols = 'ERA5'
  
  models = colnames(pmeato3_256_s)
  dfline245$type = rep(paste0('SSP245 ',models),each = 162)
  dfline585$type = rep(paste0('SSP585 ',models),each = 162)
  
  dfline245$cols = 'SSP245'
  dfline585$cols = 'SSP585'
  
  dfcor245$type = paste0('SSP245 ',models)
  dfcor585$type = paste0('SSP585 ', models)
  
  dfline = rbind(dfline245,dfline585)
  
  cols = ggsci::pal_lancet()(9)[c(1,4,7)]
  
  dfcor245$y = -3.2
  dfcor585$y = -3.2
  dfcor245$cols = 'SSP245'
  dfcor585$cols = 'SSP585'
  
  dfcors = rbind(dfcor245,dfcor585)
  dfcors$x = date[3]
  
  dfcors$label = paste0('cor: ',round(dfcors$cor,2),
                        '(',scientific(dfcors$pvs,2),')')
  fig_label = data.frame(
    x = date[3],
    y = 3.2,
    label = paste0('(',letters[1:16],')'),
    type = c(paste0('SSP245 ',models),
             paste0('SSP585 ', models))
  )
  
  fontsize = 14
  text_theme = theme(
    axis.text = element_text(size = fontsize,color = 'black'),
    axis.title = element_text(size = fontsize,color = 'black'),
    legend.text = element_text(size = fontsize,color = 'black'),
    legend.title = element_text(size = fontsize,color = 'black'),
    strip.text = element_text(size = fontsize,color = 'black')
  )
  
  p = ggplot()+
    geom_line(data = dfline1,aes(x = date,y = value,
                                color = cols),
              size = 1.3)+
    
    geom_line(data = dfline,aes(x = date,y = value,
                         color = cols),
              size = 1.3)+
    geom_text(data= dfcors,aes(x = x,y = y,label = label,
                               color = cols),
              size = 5,hjust = 0,show.legend = F)+
    geom_text(data= fig_label,aes(x = x,y = y,label = label),
              color = 'black',
              size = 5,hjust = 0)+
    scale_color_manual(values = cols)+
    guides(color = guide_legend(title = ''))+
    ylim(-3.5,3.5)+
    facet_wrap(~type,nrow = 4)+
    theme_bw()+
    text_theme+
    theme(legend.position = 'bottom')+
    xlab("Time")+
    ylab('Indices')
  
  
  output = 'main_plot/SI/figs_covar_pme_era5_cmip6_nato'  
  dir.create(output)
  output = paste0(output,'/covar_pme_era5_cmip6_ato.png')
  
  png(output,
      height = 25,
      width = 27,
      units = 'cm',
      res = 800)
  print(p)
  dev.off()
  
  
  
  
  
}
prepare_all_codes <- function(
  
){
  files1 = list.files(pattern = '*.R$',
                     full.names = T)
  
  tmp1 = 1
  for(i in 1:length(files1)){
    tmp = readLines(files1[i])
    tmp1 = c(tmp1,tmp)
  }
  tmp1 = tmp1[-1]
  
  writeLines(tmp1,'project_full_codes.R')
  
  
}
figs_covar_pmeato3_twssubs <- function(
  
){
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/calc_tws_in_bigsubs.R")
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/cor_analysis_twssubs_pme.R")
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/mmk_trend_tws_eurasia.R")
  library(ggrepel)
  # inputs
  input_pmeato = 'main_plot_data/fig2/stand_pmeato.csv'
  input_hsrtws = 'main_plot_data/fig2/stand_hsrtws.csv'
  input_twstp = 'main_plot_data/fig2/stand_twstp.csv'
  
  
  pmeato3 = as.data.frame(fread(input_pmeato))
  hsrtws = as.data.frame(fread(input_hsrtws))
  twstp = as.data.frame(fread(input_twstp))
  twstp = twstp[,c(1,2,4)]
  
  pmeato3 = pmeato3[,3]
  colnames(hsrtws) = paste0('HSR',1:12)
  colnames(twstp) = c('TPM1','TPM2','TPS')
  
  hsrtptws = cbind(hsrtws,twstp)
  
  pvs = 1
  cors = 1
  for(i in 1:ncol(hsrtptws)){
    tmpcor = max(ccf(hsrtptws[,i],pmeato3)$acf)
    tmppv = cor.test(hsrtptws[,i],pmeato3)$p.value
    cors = c(cors,tmpcor)
    pvs = c(pvs,tmppv)
  }
  pvs = pvs[-1]
  cors = cors[-1]
  
  pvs = sapply(pvs,scientific,2)
  cors = round(cors,2)
  
  dfcors = data.frame(
    x = date[5],
    y = -3,
    label = paste0('ccor: ',cors,'(',pvs,")"),
    type = c(paste0('HSR',1:12),'TPM1','TPM2','TPS')
  )
  
  
  date = seq(as.Date('2003-07-01'),
             as.Date('2016-12-01'),
             '1 month')
  
  dfpme = data.frame(
    date,pmeato3
  )
  dfline = data.frame(
    date,
    cbind(hsrtws,twstp)
  )
  
  dfpme = reshape2::melt(dfpme,'date')
  dfline = reshape2::melt(dfline,'date')
  
  dfline$type = dfline$variable
  dfline$col = 'TWS'
  dfpme$col = 'PME-NATO3'
  
  cols = pal_lancet()(9)[c(1,7)]
  cols = c('PME-NATO3'=cols[1],
           'TWS'=cols[2])
  
  fontsize = 14
  text_theme = theme(
    axis.text = element_text(size = fontsize,
                             color = 'black'),
    axis.title = element_text(size = fontsize,
                              color = 'black'),
    legend.text = element_text(size = fontsize,
                               color = 'black'),
    legend.title = element_text(size = fontsize,
                                color = 'black'),
    strip.text = element_text(size = fontsize,
                              color = 'black')
  )
  
  label_fig = data.frame(
    x = date[140],
    y = 2.5,
    label = paste0('(',letters[1:15],')'),
    type = c(paste0('HSR',1:12),'TPM1','TPM2','TPS')
    
  )
  
  p = ggplot()+
    geom_line(data= dfpme,
              aes(x = date,y = value,
                  color = col),
              size = 1.3)+
    geom_line(data = dfline,
              aes(x = date,y = value,
                  color = col),
              size = 1.3)+
    geom_text(data = label_fig,
              aes(x = x,y = y,label = label),
              size = 5,color = 'black',
              hjust = 0)+
    geom_text(data = dfcors,
              aes(x = x,y = y,label = label),
              size = 5,color = 'black',
              hjust = 0)+
    
    scale_color_manual(values = cols)+
    theme_bw()+
    text_theme+
    theme(legend.position = 'bottom')+
    guides(color = guide_legend(title = 'Indices',
                                title.position = 'left'))+
    facet_wrap(~type,nrow= 3)+
    xlab('Time')+
    ylab('Indices')
  
    
  output = 'main_plot/SI/figs_covar_pme_tws_hsrtp'
  dir.create(output)
  output = paste0(output,'/figs_covar.png')
  
  png(output,
      height = 24,
      width = 27,
      units = 'cm',
      res = 800)
  print(p)
  dev.off()
  
}
figs_covar_pmesubs_twssubs <- function(
  pmesubs, 
  twssubs
){
  # main function
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/figs_covar_pmeato_pme_across_eruasia.R")
  
  # cor analysis 
  cors = 1
  pvs = 1
  for(i in 1:3){
    tmp1 = cor(pmesubs[,i],twssubs[,i])
    tmp2 = cor.test(pmesubs[,i],twssubs[,i])$p.value
    cors = c(cors,tmp1)
    pvs = c(pvs,tmp2)
  }
  cors = cors[-1]
  pvs = pvs[-1]
  
  
  date = seq(as.Date('2003-07-01'),
             as.Date('2016-12-01'),
             '1 month')
  
  colnames(pmesubs) = paste0("SR",1:3)
  colnames(twssubs) = paste0('SR',1:3)
  
  dfpme = data.frame(
    date = date,
    pmesubs
  )
  dftws = data.frame(
    date = date,
    twssubs
  )
  
  dfpmem = reshape2::melt(dfpme,'date')
  dftwsm = reshape2::melt(dftws,'date')
  
  dfpmem$col = 'PME in SRs'
  dftwsm$col = 'TWS in SRs'
  
  
  dfline = rbind(dfpmem,dftwsm)
  fontsize = 14
  text_theme = theme(
    legend.text = element_text(size = fontsize,
                               color = 'black'),
    legend.title = element_text(size = fontsize,
                               color = 'black'),
    axis.text = element_text(size = fontsize,
                               color = 'black'),
    axis.title = element_text(size = fontsize,
                               color = 'black'),
    strip.text = element_blank(),
    strip.background = element_blank()
  )
  
  library(RColorBrewer)
  library(ggsci)
  cols = pal_lancet(alpha = 0.8)(9)[c(1,7)]
  
  labelfigs = data.frame(
    x = c(date[5]),
    y = 2.5,
    label = paste0('(',letters[2:4],')'),
    variable = paste0('SR',1:3)
  )
  
  library(scales)
  dfcors = data.frame(
    x = date[5],
    y = -3.3,
    cors = round(cors,2),
    pvs = round(pvs,2),
    variable = paste0('SR',1:3)
  )
  
  dfcors$label = paste0(
    'cor: ',dfcors$cors,'(p = ',
    dfcors$pvs,')'
  )
  
  
  p = ggplot()+
    geom_line(data = dfline,
              aes(x = date, y = value,
                  color = col),
              size = 1.3)+
    geom_text(data = labelfigs,
              aes(x = x,y = y,label = label),
              size = 5,color = 'black',
              hjust = 0)+
    geom_text(data = dfcors,
              aes(x = x ,y = y,
                  label = label),
              size = 5,color = 'black',
              hjust = 0)+
    scale_color_manual(values = cols)+
    guides(color = guide_legend(title = ''))+
    theme_bw()+
    text_theme+
    xlab('Time')+
    ylab('Indices')+
    facet_wrap(~variable,nrow = 1)+
    theme(legend.position = 'bottom')
  
  world = shp_management('world')
  world = crop(world,extent(-180,180,0,90))
  
  bigsubs = 'shp/big_scale_subs/'
  bigsubs = paste0(bigsubs,
                   'region',1:15,'.shp')
  bigsubs = lapply(bigsubs,shapefile)
  
  bigsubs1 = bigsubs[1:6]
  bigsubs2 = bigsubs[7:12]
  bigsubs3 = bigsubs[13:15]
  
  bigsubs1 = do.call('bind',bigsubs1)
  bigsubs2 = do.call('bind',bigsubs2)
  bigsubs3 = do.call('bind',bigsubs3)
  
  subs1 = as(extent(bigsubs1),'SpatialPolygons')
  subs2 = as(extent(bigsubs2),'SpatialPolygons')
  subs3 = as(extent(bigsubs3),'SpatialPolygons')
  
  subsli = list(subs1,subs2,subs3)
  subs = do.call('bind',
                 subsli)
  tibet = shp_management('tibet')
  
  world2 = crop(world,extent(-20,150,0,90))
  
  loc_center <- function(x){
    x = extent(x)
    cenlong = (x[1]+x[2])/2
    cenlat = (x[3]+x[4])/2
    
    retdf = data.frame(
      x = cenlong,
      y = cenlat
    )
    return(retdf)
  }
  dfsubs = lapply(subsli,loc_center)
  dfsubs  = do.call(rbind,dfsubs)
  dfsubs$label = paste0('SR',1:3)
  
  figsub_map2_label = data.frame(
    x = 145,
    y = 10,
    label = '(a)'
  )
  
  
  pmap2 = ggplot()+
    geom_polygon(data = world2,
                 aes(x = long,y = lat,
                     group = group),
                 color = 'black',
                 size = 0.5,
                 fill = 'transparent')+
    geom_polygon(data = tibet,
                 aes(x = long,y = lat,
                     group = group),
                 color = 'black',
                 size = 0.5,
                 fill = 'transparent')+
    geom_polygon(data = subs,
                 aes(x = long,y = lat,
                     group = group),
                 color = 'black',
                 size = 0.8,
                 fill = '#f2f2f3',
                 alpha = 0.75)+
    geom_text(data = dfsubs,
              aes(x = x,y = y,label = label),
              size = 5,
              color = 'black')+
    geom_text(data = figsub_map2_label,
              aes(x = x,y = y,label = label),
              size = 5,
              color = 'black')+
    scale_x_continuous(breaks = c(0,50,100,150),
                       labels = c('0°',paste0(c(50,100,150),'°E')))+
    scale_y_continuous(breaks = c(0,20,40,60,80),
                       labels = c('0°',paste0(c(20,40,60,80),'°N')))+
    theme_bw()+
    text_theme+
    theme(axis.text.y = element_text(angle = 90,hjust = 0.5))+
    xlab('Longitude')+
    ylab('Latitude')
  
  p2 = plot_grid(pmap2,
                 p,
                 rel_heights = c(1,1),
                 rel_widths = c(1,1),
                 ncol = 1)
  
  
  output = 'main_plot/SI/covar_pmesubs_twssubs'
  dir.create(output)
  output = paste0(output,'/figs_covarsubs2.png')
  png(output,
      height = 20,
      width = 25,
      units = 'cm',
      res = 800)
  print(p2)
  dev.off()
    
  
  
  
  
  
  
  
  
  
  
  
  
    
  
  
  
  # import subs 
  
  # i
  
  
  
  
}
figs_covar_snowcover_local_temperature <- function(
  
){
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/import_index_insource_tibet.R")
  snowcover = import_index_insource_tibet('snowcover')
  snowcover = snowcover[,1:2]
  
  input_temper = 'output/mean_temperature_tibet/mean_temper_box.csv'
  temper = as.data.frame(fread(input_temper))
  
  cor1 = round(cor(snowcover[,1],-1*temper[,1]),2)
  pv1 = scientific(cor.test(snowcover[,1],-1*temper[,1])$p.value,2)
  
  cor2 = round(cor(snowcover[,2],-1*temper[,2]),2)
  pv2 = scientific(cor.test(snowcover[,2],-1*temper[,2])$p.value,2)
  
  dfcor =data.frame(
    x = date[5],
    y = -2.5,
    label = paste0('cor:',c(cor1,cor2),'(',c(pv1,pv2),')'),
    type = c('(a)','(c)')
  )
  
  
  date = seq(as.Date('2003-07-01'),
                          as.Date('2016-12-01'),
                          '1 month')
  
  dfline1 = data.frame(
    date =date,
    Snowcover_TPM1 = snowcover[,1],
    Temperature_TPM1 = -1*temper[,1]
  )

  
  dfline2 = data.frame(
    date = date,
    Snowcover_TPM2 = snowcover[,2],
    Temperature_TPM2 = -1*temper[,2]
  )
  
  dfline1 = reshape2::melt(dfline1,'date')
  dfline2 = reshape2::melt(dfline2,'date')
  
  dfline1$col = c(rep(c('Snowcover','Negative Temperature'),each = 162))
  dfline2$col = c(rep(c('Snowcover','Negative Temperature'),each = 162))
  
  dfline1$type = '(a)'
  dfline2$type = '(c)'
  
  dfline = rbind(dfline1,dfline2)
  
  dfbar1 = data.frame(
    Temperature = -1*temper[,1],
    Snowcover = snowcover[,1]
  )
  
  dfbar2 = data.frame(
    Temperature = -1*temper[,2],
    Snowcover = snowcover[,2]
  )
  
  dfbar1 = reshape2::melt(dfbar1,'Temperature')
  dfbar2 = reshape2::melt(dfbar2,'Temperature')
  
  dfbar1$type = '(b)'
  dfbar2$type = '(d)'
  dfbar = rbind(dfbar1,dfbar2)
  
  library(RColorBrewer)
  library(ggsci)
  
  cols = pal_lancet()(9)[c(1,7)]
  fontsize = 14
  text_theme =theme(
    axis.text = element_text(size = fontsize,color = 'black'),
    axis.title = element_text(size = fontsize,color = 'black'),
    legend.text = element_text(size = fontsize,color = 'black'),
    legend.title = element_text(size = fontsize,color = 'black'),
    strip.text = element_blank()
  )
  
  linelabel = data.frame(
    x = date[5],
    y = 2.8,
    label = c('(a)','(e)'),
    type = c('(a)','(c)')
  )
  pline = ggplot()+
    geom_line(data = dfline,
              aes(x = date,y = value,color = col),
              size = 1.3)+
    geom_text(data = linelabel,
              aes(x = x,y = y,label = label),
              size = 5,
              color = 'black')+
    geom_text(data = dfcor,
              aes(x = x,y = y,label = label),
              size = 5,
              color = 'black',hjust= 0)+
    facet_wrap(~type,nrow = 2,scale = 'free_x')+
    scale_color_manual(values = cols)+
    theme_bw()+
    text_theme+
    theme(legend.position = 'none')+
    xlab('Time')+
    ylab('Indices')
  
  point_label = data.frame(
    x = -1*c(2.5,1.6),
    y = c(2,2),
    label = c('(b)','(f)'),
    type = c('(b)','(d)')
  )
  ppoint = ggplot()+
    geom_abline(slope = 1,intercept = 0)+
    geom_point(data = dfbar,
               aes(x = Temperature,y = value),
               size = 4,
               color = cols[1],
               shape = 1)+
    geom_text(data = point_label,
              aes(x = x,y = y,label = label),
              size = 5,
              color = 'black')+
    facet_wrap(~type,nrow = 2,
               scales = 'free_x')+
    
    theme_bw()+
    text_theme+
    theme(legend.position = 'none')+
    xlab('Negative Temperature')+
    ylab('Snowcover')
  
  library(cowplot)
  pcombine = plot_grid(
    pline,ppoint,
    nrow = 1,
    rel_heights = c(1,1),
    rel_widths = c(1,1)
  )
  
  pleg = pline+
    guides(color = guide_legend(title = ''))+
    theme(legend.position = 'bottom')
  
  library(ggpubr)
  pleg = as_ggplot(get_legend(pleg))
  
  pcom2 = plot_grid(
    pcombine,pleg,
    ncol = 1,
    rel_widths = c(1,1),
    rel_heights = c(10,1)
  )
  
  
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/figs_covar_tws_local_temperature.R")
  pcom3 = figs_covar_tws_local_temperature()
  
  pcom4 = plot_grid(pcom2,
                    pcom3,
                    nrow = 1,
                    rel_widths = c(1,1),
                    rel_heights = c(1,1)
                    )
  
  
  
  output = 'main_plot/SI/figs_covar_snowcover_tws_local_temper'
  dir.create(output)
  output = paste0(output,'/figs_sc_tws_local_temp.png')
  
  png(output,
      height = 18,
      width = 28,
      units = 'cm',
      res = 800)
  print(pcom4)
  dev.off()
  
  
  
  
  
  
  
  
}
figs_covar_swe_temper_snowmelt_mecha <- function(
  
){
  detect_changing_points<-function(date,pos_area,n=1){
    library(prophet)
    pos245 = data.frame(ds = date,
                        y = pos_area)
    p = prophet(pos245,
                n.changepoints = n,
                changepoint.range = 0.8)
    
    changeloc = which(as.character.Date(date) %in% as.character.Date(p$changepoints))
    return(changeloc)
  }
  
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/import_index_insource_tibet.R")
  swe = import_index_insource_tibet('snow_water_equi')
  swe = swe[,1:2]
  
  #swe = as.data.frame(fread('output/nasa_swe/swe_nasa.csv'))
  
  snowcover = import_index_insource_tibet('snowcover')
  snowcover = snowcover[,1:2]
  
  input_temper = 'output/mean_temperature_tibet/mean_temper_box.csv'
  temper = as.data.frame(fread(input_temper))
  
  calc_varying_rate <- function(x,loc1,loc2){
    x = as.numeric(x)
    x = (x[loc1]-x[loc2])/abs(x[loc2]) *100
    
    return(x)
  }
  
  
  
  
  date = seq(as.Date('2003-07-01'),
             as.Date('2016-12-01'),'1 month')
  
  cp1= which.min(temper[,1])
  cp2 = which.min(temper[,2])
  
  dfvar_temper1 =data.frame(
    x = c((1+cp1)/2,(cp1+162)/2),
    y = 3.2,
    label = rep(c(calc_varying_rate(temper[,1],cp1,1),
              calc_varying_rate(temper[,1],162,cp1)),2),
    type = rep(c('(a)','(c)'),each =2),
    variable = 'T'
  )
  
  dfvar_temper2 =data.frame(
    x = c((1+cp2)/2,(cp2+162)/2),
    y = 3.2,
    label = rep(c(calc_varying_rate(temper[,2],cp2,1),
                  calc_varying_rate(temper[,2],162,cp2)),2),
    type = rep(c('(b)','(d)'),each =2),
    variable = 'T'
  )
  
  dfvar_swe1 =data.frame(
    x = c((1+cp1)/2,(cp1+162)/2),
    y = 3.8,
    label = rep(c(calc_varying_rate(swe[,1],cp1,1),
                  calc_varying_rate(swe[,1],162,cp1)),2),
    type = '(a)',
    variable = 'SWE'
  )
  
  dfvar_swe2 =data.frame(
    x = c((1+cp2)/2,(cp2+162)/2),
    y = 3.8,
    label = rep(c(calc_varying_rate(swe[,2],cp2,1),
                  calc_varying_rate(swe[,2],162,cp2)),2),
    type = '(b)',
    variable = 'SWE'
  )
  
  dfvar_sc1 =data.frame(
    x = c((1+cp1)/2,(cp1+162)/2),
    y = 3.8,
    label = rep(c(calc_varying_rate(snowcover[,1],cp1,1),
                  calc_varying_rate(snowcover[,1],162,cp1)),2),
    type = '(c)',
    variable = 'Snowcover'
  )
  
  dfvar_sc2 =data.frame(
    x = c((1+cp2)/2,(cp2+162)/2),
    y = 3.8,
    label = rep(c(calc_varying_rate(snowcover[,2],cp2,1),
                  calc_varying_rate(snowcover[,2],162,cp2)),2),
    type = '(d)',
    variable = 'Snowcover'
  )
  dfvar = rbind(dfvar_temper1,dfvar_temper2,
                dfvar_swe1,dfvar_swe2,
                dfvar_sc1,dfvar_sc2)
  
  id = which(dfvar$label>0)
  dfvar$label = paste0(round(dfvar$label,2),'%')
  dfvar$label[id] = paste0('+',dfvar$label[id])
  
  df1 = data.frame(
    date = date,
    SWE = swe[,1],
    #Snowcover = snowcover[,1],
    T = temper[,1]
  )
  
  df2 = data.frame(date = date,
                   SWE = swe[,2],
                   #Snowcover = snowcover[,2],
                   T = temper[,2])
  df3 = data.frame(
    date = date,
    #SWE = swe[,1],
    Snowcover = snowcover[,1],
    T = temper[,1]
  )
  
  df4 = data.frame(date = date,
                   #SWE = swe[,2],
                   Snowcover = snowcover[,2],
                   T = temper[,2])
  
  
  df1 = reshape2::melt(df1,'date')
  df2 = reshape2::melt(df2,'date')
  df3 = reshape2::melt(df3,'date')
  df4 = reshape2::melt(df4,'date')
  
  
  df1$type = '(a)'
  df2$type = '(b)'
  df3$type = '(c)'
  df4$type = '(d)'
  
  df = rbind(df1,df2,df3,df4)
  
  cols = ggsci::pal_lancet()(9)[c(1,4,7)]
  cols = c('SWE'= cols[1],
           'Snowcover' = cols[2],
           'T' = cols[3])
  fontsize = 14
  text_theme = theme(
    axis.text = element_text(size = fontsize,color = 'black'),
    axis.title = element_text(size = fontsize,color = 'black'),
    legend.text = element_text(size = fontsize,color = 'black'),
    legend.title = element_text(size = fontsize,color = 'black'),
    strip.text = element_blank()
  )
  
  df_change_line = data.frame(
    x = date[c(cp1,cp2,cp1,cp2)],
    type = paste0('(',letters[1:4],')')
  )
  
  df_change_line2 = data.frame(
    x = date[rep(c(1,162),4)],
    type = rep(paste0('(',letters[1:4],')'),each = 2)
  )
  
  hline1 = data.frame(
    x = rep(date[c(1,cp1)],2),
    xend = rep(date[c(cp1,162)],2),
    y = 3.5,
    type = rep(c('(a)','(c)'),each = 2)
  )
  hline2 = data.frame(
    x = rep(date[c(1,cp2)],2),
    xend = rep(date[c(cp2,162)],2),
    y = 3.5,
    type = rep(c('(b)','(d)'),each = 2)
  )
  
  hline = rbind(hline1,hline2)
  vline1 = data.frame(
    x = rep(date[c(1,cp1,162)],2),
    y = 3.2,
    yend = 3.8,
    type = rep(c('(a)','(c)'),each = 3)
  )
  vline2 = data.frame(
    x = rep(date[c(1,cp2,162)],2),
    y = 3.2,
    yend = 3.8,
    type = rep(c('(b)','(d)'),each = 3)
  )
  vline = rbind(vline1,vline2)
  
  figs_label = data.frame(
    x = 5,
    y = 3.8,
    label = paste0('(',letters[1:4],')'),
    type = paste0('(',letters[1:4],')')
  )
  
  subdate = data.frame(
    x = c(cp1,cp2)+3,
    y = -2.5,
    label = substr(as.character(date[c(cp1,cp2)]),1,7),
    type = c('(a)','(b)','(c)','(d)')
  )
  p = ggplot()+
      geom_text(data = dfvar,
                aes(x = date[x],y = y,label = label,
                    color = variable),
                size = 4,show.legend = F)+
      geom_segment(data = vline,
                 aes(x = x,xend = x,y = y,yend = yend),
                 size =0.5,color = 'black',
                 linetype = 'solid')+
      geom_segment(data = hline,
                 aes(x = x,xend = xend,y = y,yend = y),
                 size =0.5,color = 'black',
                 linetype = 'solid',
                 arrow = arrow(angle = 20,
                               length =unit(0.3,'cm'),
                               type = 'closed'))+
      geom_segment(data = hline,
                   aes(x = xend,xend = x,y = y,yend = y),
                   size =0.5,color = 'black',
                   linetype = 'solid',
                   arrow = arrow(angle = 20,
                                 length =unit(0.3,'cm'),
                                 type = 'closed'))+
      geom_vline(data = df_change_line,
                  aes(xintercept = x),
                 size =0.5,color = 'black',
                 linetype = 'dashed')+
      geom_vline(data = df_change_line2,
               aes(xintercept = x),
               size =0.5,color = 'black',
               linetype = 'dashed')+
      geom_line(data = df,
                aes(x = date,y = value,
                    color = variable),
                size = 1.3)+
      geom_text(data = figs_label,
              aes(x = date[x],y = y,label = label),
              size = 4,color = 'black')+
      geom_text(data = subdate,
              aes(x = date[x],y = y,label = label),
              size = 4,color = 'black',hjust = 0)+
      scale_color_manual(values = cols)+
      theme_bw()+
      text_theme+
      theme(legend.position = 'bottom')+
      guides(color = guide_legend(title = ''))+
      facet_wrap(~type,ncol = 2)+
      xlab('Time')+
      ylab('Indices')
  
  output = 'main_plot/SI/figs_covar_swe_temper_snowmelt_mecha'
  dir.create(output)
  output = paste0(output,'/figs.png')
  
  png(output,
      height = 22,
      width = 25,
      units = 'cm',
      res = 800)
  print(p)
  dev.off()
    
  

  
  
  
  
}
figs_covar_temper_era5_cmip6_tibet <- function(
  
){
  era5_t = import_index_insource_tibet('era5_t_tibet')
  t = import_index_insource_tibet('t_cmip6',region = 'tibet')
  ssp245_tpm1 = t[[1]][[1]]
  ssp245_tpm2 = t[[1]][[2]]
  
  ssp585_tpm1 = t[[2]][[1]]
  ssp585_tpm2 = t[[2]][[2]]
  
  trend_fun_index_cmip6_2003<-function(x){
    x = as.numeric(x)
    #x = x[loc2020:loc2050]
    x = x[1:174]
    xt = ts(x,start = c(2003,1),frequency = 12)
    xt = decompose(xt)$trend
    
    naid = which(is.na(xt))
    xt = xt[-naid]
    xt = (xt-mean(xt))/sd(xt)
    
    return(xt)
  }
  ssp245_tpm1 = apply(ssp245_tpm1,2,trend_fun_index_cmip6_2003)
  ssp245_tpm2 = apply(ssp245_tpm2,2,trend_fun_index_cmip6_2003)
  ssp585_tpm1 = apply(ssp585_tpm1,2,trend_fun_index_cmip6_2003)
  ssp585_tpm2 = apply(ssp585_tpm2,2,trend_fun_index_cmip6_2003)
  
  ssp245_cor1 = 1
  ssp585_cor1 = 1
  ssp245_cor2 = 1
  ssp585_cor2 = 1
  ssp245_pvs1 = 1
  ssp585_pvs1 = 1
  ssp245_pvs2 = 1
  ssp585_pvs2 = 1
  
  for(i in 1:8){
    tmpssp245_cortpm1 = cor(era5_t[,1],ssp245_tpm1[,i])
    tmpssp585_cortpm1 = cor(era5_t[,1],ssp585_tpm1[,i])
    tmpssp245_cortpm2 = cor(era5_t[,1],ssp245_tpm2[,i])
    tmpssp585_cortpm2 = cor(era5_t[,1],ssp585_tpm2[,i])
    
    tmpssp245_pvstpm1 = cor.test(era5_t[,1],ssp245_tpm1[,i])$p.value
    tmpssp585_pvstpm1 = cor.test(era5_t[,1],ssp585_tpm1[,i])$p.value
    tmpssp245_pvstpm2 = cor.test(era5_t[,1],ssp245_tpm2[,i])$p.value
    tmpssp585_pvstpm2 = cor.test(era5_t[,1],ssp585_tpm2[,i])$p.value
    
    ssp245_cor1 = c(ssp245_cor1,tmpssp245_cortpm1)
    ssp585_cor1 = c(ssp585_cor1,tmpssp585_cortpm1)
    ssp245_cor2 = c(ssp245_cor2,tmpssp245_cortpm2)
    ssp585_cor2 = c(ssp585_cor2,tmpssp585_cortpm2)
    
    ssp245_pvs1 = c(ssp245_pvs1,tmpssp245_pvstpm1)
    ssp585_pvs1 = c(ssp585_pvs1,tmpssp585_pvstpm1)
    ssp245_pvs2 = c(ssp245_pvs2,tmpssp245_pvstpm2)
    ssp585_pvs2 = c(ssp585_pvs2,tmpssp585_pvstpm2)
    
  }
  ssp245_cor1 = ssp245_cor1[-1]
  ssp585_cor1 = ssp585_cor1[-1]
  ssp245_cor2 = ssp245_cor2[-1]
  ssp585_cor2 = ssp585_cor2[-1]
  ssp245_pvs1 = ssp245_pvs1[-1]
  ssp585_pvs1 = ssp585_pvs1[-1]
  ssp245_pvs2 = ssp245_pvs2[-1]
  ssp585_pvs2 = ssp585_pvs2[-1]
  
  
  
  models = colnames(ssp245_tpm1)
  date = seq(as.Date('2003-07-01'),
             as.Date('2016-12-01'),'1 month')
  
  df_era5_tpm1 = data.frame(
    date = date,
    ERA5 = era5_t[,1]
  )
  df_era5_tpm2 = data.frame(
    date = date,
    ERA5 = era5_t[,2]
  )
  library(scales)
  dfcor245 = data.frame(
    x = date[2],
    y = -2.9,
    label = c(paste0('ERA5-SSP245 cor:',round(ssp245_cor1,2),'(',
                     scientific(ssp245_pvs1,2),')'),
              paste0('ERA5-SSP245 cor:',round(ssp245_cor2,2),'(',
                     scientific(ssp245_pvs2,2),')')),
    type = c(paste0('TPM1 ',models),paste0('TPM2 ',models)),
    col = 'SSP245'
  )
  
  dfcor585 = data.frame(
    x = date[2],
    y = -3.5,
    label = c(paste0('ERA5-SSP585 cor:',round(ssp585_cor1,2),'(',
                     scientific(ssp585_pvs1,2),')'),
              paste0('ERA5-SSP585 cor:',round(ssp585_cor2,2),'(',
                     scientific(ssp585_pvs2,2),')')),
    type = c(paste0('TPM1 ',models),paste0('TPM2 ',models)),
    col = 'SSP585'
  )
  
  dfcor = rbind(dfcor245,dfcor585)
  
  df_era5_tpm1 = reshape2::melt(df_era5_tpm1,'date')
  df_era5_tpm2 = reshape2::melt(df_era5_tpm2,'date')
  
  df_era5_tpm1 = rbind(df_era5_tpm1,df_era5_tpm1,df_era5_tpm1,df_era5_tpm1,
                       df_era5_tpm1,df_era5_tpm1,df_era5_tpm1,df_era5_tpm1)
  df_era5_tpm2 = rbind(df_era5_tpm2,df_era5_tpm2,df_era5_tpm2,df_era5_tpm2,
                       df_era5_tpm2,df_era5_tpm2,df_era5_tpm2,df_era5_tpm2)
  
  df_era5_tpm1$type = rep(paste0('TPM1 ',models),each = 162)
  df_era5_tpm2$type = rep(paste0('TPM2 ',models),each = 162)

  df_era5_tpm = rbind(df_era5_tpm1,df_era5_tpm2)
  df_era5_tpm$col = df_era5_tpm$variable  
  # dfssp
  dfssp245_tpm1 = data.frame(
    date = date,
    ssp245_tpm1 
  )
  
  dfssp245_tpm2 = data.frame(
    date = date,
    ssp245_tpm2 
  )
  
  dfssp585_tpm1 = data.frame(
    date = date,
    ssp585_tpm1 
  )
  
  dfssp585_tpm2 = data.frame(
    date = date,
    ssp585_tpm2 
  )
  
  dfssp245_tpm1 = reshape2::melt(dfssp245_tpm1,'date')
  dfssp245_tpm2 = reshape2::melt(dfssp245_tpm2,'date')
  dfssp585_tpm1 = reshape2::melt(dfssp585_tpm1,'date')
  dfssp585_tpm2 = reshape2::melt(dfssp585_tpm2,'date')
  
  dfssp245_tpm1$type = rep(paste0('TPM1 ',models),each = 162)
  dfssp585_tpm1$type = rep(paste0('TPM1 ',models),each = 162)
  dfssp245_tpm2$type = rep(paste0('TPM2 ',models),each = 162)
  dfssp585_tpm2$type = rep(paste0('TPM2 ',models),each = 162)
  
  dfssp245_tpm = rbind(
    dfssp245_tpm1,
    dfssp245_tpm2
  )
  
  dfssp585_tpm = rbind(
    dfssp585_tpm1,
    dfssp585_tpm2
  )
  
  dfssp245_tpm$col = 'SSP245'
  dfssp585_tpm$col = 'SSP585'
  
  
  library(ggsci)
  cols = pal_lancet()(9)[c(1,4,7)]
  
  figlabel = data.frame(
    x =date[5],
    y = 3,
    label = paste0('(',letters[1:16],')'),
    type = c(paste0('TPM1 ',models),paste0('TPM2 ',models))
  )
  
  p = ggplot()+
    geom_line(data = df_era5_tpm,
              aes(x = date,y= value,color = col),
              size = 1.3)+
    geom_line(data= dfssp245_tpm,
              aes(x  =date,y = value,color = col),
              size = 1.3)+
    geom_line(data= dfssp585_tpm,
              aes(x  =date,y = value,color = col),
              size = 1.3)+
    geom_text(data = dfcor,
              aes(x =x,y= y,label = label,color = col),
              size = 4,hjust = 0,show.legend = F)+
    geom_text(data = figlabel,
              aes(x =x,y= y,label = label),
              size = 5,
              color = 'black')+
    scale_color_manual(values = cols)+
    theme_bw()+
    facet_wrap(~type,nrow = 4)+
    xlab("Time")+
    ylab("Indices")
  
  fontsize = 14
  text_theme = theme(
    axis.text = element_text(size = fontsize,color = 'black'),
    axis.title = element_text(size = fontsize,color = 'black'),
    legend.text = element_text(size = fontsize,color = 'black'),
    legend.title = element_text(size = fontsize,color = 'black'),
    strip.text = element_text(size = fontsize,color = 'black')
  )
  p = p+
    text_theme+
    theme(legend.position = 'bottom')+
    guides(color = guide_legend(title = ''))
  output = 'main_plot/SI/figs_covar_temper_era5_cmip6_tibet'
  dir.create(output)
  output = paste0(output,'/figs_covar_tibet_temper.png')
  
  png(output,
      height = 25,
      width = 27,
      units = 'cm',
      res = 800)
  print(p)
  dev.off()
}
figs_covar_tpm1_twssnoc_north_tibet_tws <- function(
  
){
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/import_index_insource_tibet.R")
  tws = import_index_insource_tibet('tws_tibet')
  snowcover = import_index_insource_tibet('snowcover')
  pme = import_index_insource_tibet('pme_mean','ato')
  temper = import_index_insource_tibet('era5_t_tibet')
  
  pme = pme[1:174,3]
  pme = as.numeric(pme)
  pme = ts(pme,start = c(2003,1),frequency = 12)
  pme = decompose(pme)$trend
  pme = pme[-which(is.na(pme))]
  pme = (pme- mean(pme))/sd(pme)
  
  
  tws = tws[,1:3]
  tpm1_tws = tws[,1]
  snowcover = snowcover[,1:2]
  
  
  date = seq(as.Date('2003-07-01'),as.Date('2016-12-01'),
             '1 month')
  
  df1 = data.frame(
    date = date,
    TPM1_TWS = tpm1_tws,
    NTP_TWS = tws[,3]
  )
  
  df2 = data.frame(
    date = date,
    TPM1_snowcover = snowcover[,1],
    NTP_TWS = tws[,3]
  )
  
  df3 = data.frame(
    date = date,
    TPM1_T = temper[,1],
    NTP_TWS = tws[,3]
  )
  
  df4 = data.frame(
    date = date,
    NATO3_PME = pme,
    NTP_TWS = tws[,3]
  )
  
  cor1 = cor(df1$TPM1_TWS,df1$NTP_TWS)
  pvs1 = cor.test(df1$TPM1_TWS,df1$NTP_TWS)$p.value
  
  cor2 = cor(df2$TPM1_snowcover,df2$NTP_TWS)
  pvs2 = cor.test(df2$TPM1_snowcover,df2$NTP_TWS)$p.value
  
  cor3 = cor(df3$TPM1_T,df3$NTP_TWS)
  pvs3 = cor.test(df3$TPM1_T,df3$NTP_TWS)$p.value
  
  cor4 = cor(df4$NATO3_PME,df4$NTP_TWS)
  pvs4 = cor.test(df4$NATO3_PME,df4$NTP_TWS)$p.value
  
  dfcor = data.frame(
    x = date[5],
    y = c(-5,-5,-3,-3),
    label = c(paste0('cor: ',round(cor1,2),'(',scientific(pvs1,2),')'),
              paste0('cor: ',round(cor2,2),'(',scientific(pvs2,2),')'),
              paste0('cor: ',round(cor3,2),'(',scientific(pvs3,2),')'),
              paste0('cor: ',round(cor4,2),'(',scientific(pvs4,2),')')),
    type = paste0('(',letters[1:4],')')
  )
  
  
  
  df1 = reshape2::melt(df1,'date')
  df2 = reshape2::melt(df2,'date')
  df3 = reshape2::melt(df3,'date')
  df4 = reshape2::melt(df4,'date')
  
  df1$type = '(a)'
  df2$type = '(b)'
  df3$type = '(c)'
  df4$type = '(d)'
  
  
  df = rbind(df1,df2,df3,df4)
  cols = ggsci::pal_lancet()(9)
  
  cols = c('TPM1_TWS' = cols[6],
           'TPM1_snowcover' = cols[1],
           'TPM1_T' = cols[5],
           'NATO3_PME' = cols[4],
           'NTP_TWS' = cols[7])
  
  figs_label = data.frame(
    x = date[5],
    y = 3,
    label = paste0('(',letters[2:5],')'),
    type = paste0('(',letters[1:4],')')
  )
  
  fontsize =14
  text_theme = theme(
    axis.text = element_text(size = fontsize,color = 'black'),
    axis.title = element_text(size = fontsize,color = 'black'),
    legend.text = element_text(size = fontsize,color = 'black'),
    legend.title = element_text(size = fontsize,color = 'black'),
    strip.text = element_blank()
  )
  
  
  
  pline = ggplot()+
    geom_line(data =df,aes(x = date,
                           y = value,
                           color = variable),
              size = 1.3)+
    geom_text(data = figs_label,
              aes(x = x,y = y,label = label),
              size = 4,color = 'black')+
    geom_text(data = dfcor,
              aes(x = x,y = y,label = label),
              size = 4,color = 'black',hjust = 0)+
    scale_color_manual(values = cols)+
    theme_bw()+
    text_theme+
    guides(color= guide_legend(title = ''))+
    facet_wrap(~type,nrow = 2,scales = 'free')+
    theme(legend.position = 'bottom')+
    xlab('Time')+
    ylab("Indices")
  
  # import tws t
  input_twstp = 'main_plot_data/fig2/stand_twstp.csv'
  twstp = as.data.frame(fread(input_twstp))
  twstp = twstp[,1:2]
  
  colnames(twstp) = c('TPM1','TPM2')
  
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/import_index_insource_tibet.R")
  snowcover = import_index_insource_tibet('snowcover')
  snowcover = snowcover[,1:2]
  
  colnames(snowcover) = c('TPM1','TPM2')
  
  cor1 = cor(twstp[,1],snowcover[,1])
  pv1 = cor.test(twstp[,1],snowcover[,1])$p.value
  
  cor2 = cor(twstp[,2],snowcover[,2])
  pv2 = cor.test(twstp[,2],snowcover[,2])$p.value
  
  
  date = seq(as.Date('2003-07-01'),
             as.Date('2016-12-01'),
             '1 month')
  dftws = data.frame(date =date,twstp)
  dfsnow = data.frame(date =date,snowcover)
  
  dftws = reshape2::melt(dftws,'date')
  dfsnow = reshape2::melt(dfsnow,'date')
  
  dfcor = data.frame(
    x = date[10],
    y = -2.5,
    cor = c(cor1,cor2),
    pv = c(pv1,pv2),
    variable = c('TPM1','TPM2')
  )
  
  figlab = data.frame(
    x = date[150],
    y = 2.2,
    label = paste0('(',letters[2:3],')'),
    variable = c('TPM1','TPM2')
  )
  
  dfcor$pv = scientific(dfcor$pv,2)
  dfcor$cor = round(dfcor$cor,2)
  dfcor$label = paste0('cor: ',dfcor$cor,
                       '(p:',dfcor$pv,')')
  
  
  dftws$col = 'TWS'
  dfsnow$col = 'Snowcover area'
  
  
  dfline = rbind(dftws,dfsnow)
  cols = pal_lancet()(9)[c(1,7)]
  cols = c('TWS'=cols[2],'Snowcover area'=cols[1])
  
  fontsize = 14
  text_theme = theme(
    legend.text = element_text(size = fontsize,
                               color = 'black'),
    legend.title =  element_text(size = fontsize,
                                 color = 'black'),
    axis.text =  element_text(size = fontsize,
                              color = 'black'),
    axis.title =  element_text(size = fontsize,
                               color = 'black'),
    strip.text =  element_text(size = fontsize,
                               color = 'black')
  )
  # pmap increasing mmk trends of tws tpm and snow cover
  tibet = shp_management('tibet')
  ex = extent(tibet)
  ex = extent(ex[1]-2,ex[2]+2,
              ex[3]-2,ex[4]+2)
  world = shp_management('world')
  tws = data_management('grace')
  tws = mask(tws,world)
  tws = crop(tws,ex)
  
  dftws = as.data.frame(tws,xy = T)
  naid = which(is.na(dftws[,3]))
  dftws  = dftws[-naid,]
  loctws = dftws[,1:2]
  colnames(loctws) = c('long','lat')
  dftws = dftws[,-c(1,2)]
  
  dftws = t(dftws)
  i = 1:ncol(dftws)
  dftws <<- dftws
  i <<-i 
  
  sub_calc_twsmmk <- function(i){
    tmp = as.numeric(dftws[,i])
    source('/home/share/R_project/xinjiang_vapor/mmkTrend.R')
    
    trend = mmkTrend(tmp)$Zc
    return(trend)
  }
  
  cl= makeCluster(10)
  clusterExport(cl,c('i','dftws'))
  system.time(rettws <- parLapply(cl,i,sub_calc_twsmmk))
  stopCluster(cl)
  
  rettws = do.call('c',rettws)
  
  dftrend = data.frame(
    loctws,
    TWS_trend = rettws
  )
  
  nanid = which(is.nan(dftrend$TWS_trend))
  if(length(nanid)>0){
    dftrend = dftrend[-nanid,]
  }
  
  dftrend$levels = cut(dftrend$TWS_trend,
                       breaks = c(-95,seq(-20,20,5)))
  nclas = length(unique(dftrend$levels))
  fils =  brewer.pal(nclas,'Spectral')
  
  world= shp_management('world')
  world = crop(world,ex)
  
  neg_shps = list.files('shp/cluster_tws_neg_shp_deter',
                        pattern = '*.shp$',full.names =T)
  neg_shps = lapply(neg_shps[1:3],shapefile)
  neg_shps = do.call(bind,neg_shps)
  
  label_tpm = data.frame(
    x = c(84,90,90,100),
    y = c(32,31,36,37),
    label = c('TPM1','TPM2','TPS','NTP')
  )
  
  label_pmap = data.frame(
    x = 68,
    y = 40,
    label = '(a)'
  )
  pmap = ggplot()+
    geom_tile(data = dftrend,
              aes(x = long,y = lat,
                  fill = levels))+
    geom_polygon(data = world,
                 aes(x = long,y = lat,group = group),
                 size = 0.5,
                 color = 'black',
                 fill = 'transparent')+
    geom_polygon(data = tibet,
                 aes(x = long,y = lat,group = group),
                 size = 0.5,
                 color = 'black',
                 fill = 'transparent')+
    geom_polygon(data = neg_shps,
                 aes(x = long,y = lat,group = group),
                 size = 0.5,
                 color = 'black',
                 fill = 'transparent')+
    geom_text_repel(data = label_tpm[1,],
                    aes(x = x,y = y,label = label),
                    size = 5,color = 'black',angle = -45,
                    bg.color = 'white',
                    bg.r =0.25,
                    force = F)+
    geom_text_repel(data = label_tpm[2,],
                    aes(x = x,y = y,label = label),
                    size = 5,color = 'black',angle = 35,
                    bg.color = 'white',
                    bg.r =0.25,
                    force = F)+
    geom_text_repel(data = label_tpm[3,],
                    aes(x = x,y = y,label = label),
                    size = 5,color = 'black',angle = 0,
                    bg.color = 'white',
                    bg.r =0.25,
                    force = F)+
    geom_text_repel(data = label_tpm[4,],
                    aes(x = x,y = y,label = label),
                    size = 5,color = 'black',angle = -30,
                    bg.color = 'white',
                    bg.r =0.25,
                    force = F)+
    geom_text(data = label_pmap,
              aes(x=x,y=y,label = label),
              size = 5,color = 'black')+
    scale_x_continuous(breaks = c(70,80,90,100),
                       labels = paste0(c(70,80,90,100),'°E'))+
    scale_y_continuous(breaks = c(20,30,40),
                       labels = paste0(c(20,30,40),'°N'))+
    scale_fill_manual(values = fils)+
    theme_bw()+
    theme(axis.text.y = element_text(angle = 90,hjust = 0.5,size = fontsize,
                                     color = 'black'),
          axis.text.x = element_text(size = fontsize,color = 'black'),
          axis.title = element_text(size = fontsize,color = 'black'))+
    xlab('Longitude')+
    ylab('Latitude')
  
  pmap= pmap + theme(
    legend.position = 'none'
  )
  
  pful = plot_grid(pmap,pline,
                   rel_widths = c(1,1),
                   rel_heights = c(1,2),
                   ncol = 1)
  
  
  
  output= 'main_plot/SI/figs_covar_tpm1_twssnoc_north_tibet_tws'
  dir.create(output)
  output = paste0(output,'/figs2.png')
  
  png(output,
      height = 25,
      width = 25,
      units = 'cm',
      res = 800)
  print(pful)
  dev.off()
  
  
  
  
}
figs_covar_tws_local_temperature <- function(
  
){
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/import_index_insource_tibet.R")
  tws = import_index_insource_tibet('tws_tibet')
  tws = tws[,1:2]
  
  
  input_temper = 'output/mean_temperature_tibet/mean_temper_box.csv'
  temper = as.data.frame(fread(input_temper))
  
  cor1 = round(cor(tws[,1],-1*temper[,1]),2)
  pv1 = scientific(cor.test(tws[,1],-1*temper[,1])$p.value,2)
  
  cor2 = round(cor(tws[,2],-1*temper[,2]),2)
  pv2 = scientific(cor.test(tws[,2],-1*temper[,2])$p.value,2)
  
  dfcor =data.frame(
    x = date[5],
    y = -6,
    label = paste0('cor:',c(cor1,cor2),'(',c(pv1,pv2),')'),
    type = c('(a)','(c)')
  )
  
  
  date = seq(as.Date('2003-07-01'),
             as.Date('2016-12-01'),
             '1 month')
  
  dfline1 = data.frame(
    date =date,
    TWS_TPM1 = tws[,1],
    Temperature_TPM1 = -1*temper[,1]
  )
  
  
  dfline2 = data.frame(
    date = date,
    TWS_TPM2 = tws[,2],
    Temperature_TPM2 = -1*temper[,2]
  )
  
  dfline1 = reshape2::melt(dfline1,'date')
  dfline2 = reshape2::melt(dfline2,'date')
  
  dfline1$col = c(rep(c('TWS','Negative Temperature'),each = 162))
  dfline2$col = c(rep(c('TWS','Negative Temperature'),each = 162))
  
  dfline1$type = '(a)'
  dfline2$type = '(c)'
  
  dfline = rbind(dfline1,dfline2)
  
  dfbar1 = data.frame(
    Temperature = -1*temper[,1],
    TWS = tws[,1]
  )
  
  dfbar2 = data.frame(
    Temperature = -1*temper[,2],
    TWS = tws[,2]
  )
  
  dfbar1 = reshape2::melt(dfbar1,'Temperature')
  dfbar2 = reshape2::melt(dfbar2,'Temperature')
  
  dfbar1$type = '(b)'
  dfbar2$type = '(d)'
  dfbar = rbind(dfbar1,dfbar2)
  
  library(RColorBrewer)
  library(ggsci)
  
  cols = pal_lancet()(9)[c(1,4)]
  fontsize = 14
  text_theme =theme(
    axis.text = element_text(size = fontsize,color = 'black'),
    axis.title = element_text(size = fontsize,color = 'black'),
    legend.text = element_text(size = fontsize,color = 'black'),
    legend.title = element_text(size = fontsize,color = 'black'),
    strip.text = element_blank()
  )
  
  linelabel = data.frame(
    x = date[5],
    y = 3,
    label = c('(c)','(g)'),
    type = c('(a)','(c)')
  )
  pline = ggplot()+
    geom_line(data = dfline,
              aes(x = date,y = value,color = col),
              size = 1.3)+
    geom_text(data = linelabel,
              aes(x = x,y = y,label = label),
              size = 5,
              color = 'black')+
    geom_text(data = dfcor,
              aes(x = x,y = y,label = label),
              size = 5,
              color = 'black',hjust= 0)+
    facet_wrap(~type,nrow = 2,scale = 'free_x')+
    scale_color_manual(values = cols)+
    theme_bw()+
    text_theme+
    theme(legend.position = 'none')+
    xlab('Time')+
    ylab('Indices')
  
  point_label = data.frame(
    x = -1*c(2.5,1.6),
    y = c(3,3),
    label = c('(d)','(h)'),
    type = c('(b)','(d)')
  )
  ppoint = ggplot()+
    geom_abline(slope = 1,intercept = 0)+
    geom_point(data = dfbar,
               aes(x = Temperature,y = value),
               size = 4,
               color = cols[1],
               shape = 1)+
    geom_text(data = point_label,
              aes(x = x,y = y,label = label),
              size = 5,
              color = 'black')+
    facet_wrap(~type,nrow = 2,
               scales = 'free_x')+
    
    theme_bw()+
    text_theme+
    theme(legend.position = 'none')+
    xlab('Negative Temperature')+
    ylab('TWS')
  
  library(cowplot)
  pcombine = plot_grid(
    pline,ppoint,
    nrow = 1,
    rel_heights = c(1,1),
    rel_widths = c(1,1)
  )
  
  pleg = pline+
    guides(color = guide_legend(title = ''))+
    theme(legend.position = 'bottom')
  
  library(ggpubr)
  pleg = as_ggplot(get_legend(pleg))
  
  pcom2 = plot_grid(
    pcombine,pleg,
    ncol = 1,
    rel_widths = c(1,1),
    rel_heights = c(10,1)
  )
  
  return(pcom2)
  output = 'main_plot/SI/figs_covar_tws_local_temper'
  dir.create(output)
  output = paste0(output,'/figs_tws_local_temp.png')
  
  png(output,
      height = 25,
      width = 25,
      units = 'cm',
      res = 800)
  print(pcom2)
  dev.off()
  
  
  
  
  
  
  
  
}
figs_covar_twstpm1_snowcover <- function(
  
){
  library(raster)
  library(data.table)
  library(ggplot2)
  library(ggrepel)
  library(ggsci)
  library(scales)
  library(doParallel)
  library(RColorBrewer)
  library(ggpubr)
  library(cowplot)
  
  # import tws t
  input_twstp = 'main_plot_data/fig2/stand_twstp.csv'
  twstp = as.data.frame(fread(input_twstp))
  twstp = twstp[,1:2]
  
  colnames(twstp) = c('TPM1','TPM2')
  
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/import_index_insource_tibet.R")
  snowcover = import_index_insource_tibet('snowcover')
  snowcover = snowcover[,1:2]
  
  colnames(snowcover) = c('TPM1','TPM2')
  
  cor1 = cor(twstp[,1],snowcover[,1])
  pv1 = cor.test(twstp[,1],snowcover[,1])$p.value
  
  cor2 = cor(twstp[,2],snowcover[,2])
  pv2 = cor.test(twstp[,2],snowcover[,2])$p.value
  
  
  date = seq(as.Date('2003-07-01'),
             as.Date('2016-12-01'),
             '1 month')
  dftws = data.frame(date =date,twstp)
  dfsnow = data.frame(date =date,snowcover)
  
  dftws = reshape2::melt(dftws,'date')
  dfsnow = reshape2::melt(dfsnow,'date')
  
  dfcor = data.frame(
    x = date[10],
    y = -2.5,
    cor = c(cor1,cor2),
    pv = c(pv1,pv2),
    variable = c('TPM1','TPM2')
  )
  
  figlab = data.frame(
    x = date[150],
    y = 2.2,
    label = paste0('(',letters[2:3],')'),
    variable = c('TPM1','TPM2')
  )
  
  dfcor$pv = scientific(dfcor$pv,2)
  dfcor$cor = round(dfcor$cor,2)
  dfcor$label = paste0('cor: ',dfcor$cor,
                       '(p:',dfcor$pv,')')
  
  
  dftws$col = 'TWS'
  dfsnow$col = 'Snowcover area'
  
  
  dfline = rbind(dftws,dfsnow)
  cols = pal_lancet()(9)[c(1,7)]
  cols = c('TWS'=cols[2],'Snowcover area'=cols[1])
  
  fontsize = 14
  text_theme = theme(
    legend.text = element_text(size = fontsize,
                               color = 'black'),
    legend.title =  element_text(size = fontsize,
                                 color = 'black'),
    axis.text =  element_text(size = fontsize,
                              color = 'black'),
    axis.title =  element_text(size = fontsize,
                               color = 'black'),
    strip.text =  element_text(size = fontsize,
                               color = 'black')
  )
  
  pline = ggplot()+
    geom_line(data = dfline,
              aes(x = date,y = value,color = col),
              size = 1.3)+
    geom_text(data = dfcor,
              aes(x = x,y = y,label = label),
              size =5,color = 'black',hjust = 0)+
    geom_text(data = figlab,
              aes(x =x,y = y,label = label),
              hjust = 0.5,size= 5,color = 'black')+
    theme_bw()+
    scale_color_manual(values = cols)+
    facet_wrap(~variable,nrow = 1)+
    text_theme+
    theme(legend.position = 'bottom')+
    guides(color = guide_legend(title = ''))+
    xlab('Time')+
    ylab('Indices')
  
  # pmap increasing mmk trends of tws tpm and snow cover
  tibet = shp_management('tibet')
  ex = extent(tibet)
  ex = extent(ex[1]-2,ex[2]+2,
              ex[3]-2,ex[4]+2)
  world = shp_management('world')
  tws = data_management('grace')
  tws = mask(tws,world)
  tws = crop(tws,ex)
  
  dftws = as.data.frame(tws,xy = T)
  naid = which(is.na(dftws[,3]))
  dftws  = dftws[-naid,]
  loctws = dftws[,1:2]
  colnames(loctws) = c('long','lat')
  dftws = dftws[,-c(1,2)]
  
  dftws = t(dftws)
  i = 1:ncol(dftws)
  dftws <<- dftws
  i <<-i 
  
  sub_calc_twsmmk <- function(i){
    tmp = as.numeric(dftws[,i])
    source('/home/share/R_project/xinjiang_vapor/mmkTrend.R')
    
    trend = mmkTrend(tmp)$Zc
    return(trend)
  }
  
  cl= makeCluster(10)
  clusterExport(cl,c('i','dftws'))
  system.time(rettws <- parLapply(cl,i,sub_calc_twsmmk))
  stopCluster(cl)
  
  rettws = do.call('c',rettws)
  
  dftrend = data.frame(
    loctws,
    TWS_trend = rettws
  )
  
  nanid = which(is.nan(dftrend$TWS_trend))
  if(length(nanid)>0){
    dftrend = dftrend[-nanid,]
  }
  
  dftrend$levels = cut(dftrend$TWS_trend,
                       breaks = c(-95,seq(-20,20,5)))
  nclas = length(unique(dftrend$levels))
  fils =  brewer.pal(nclas,'Spectral')
  
  world= shp_management('world')
  world = crop(world,ex)
  
  neg_shps = list.files('shp/cluster_tws_neg_shp_deter',
                        pattern = '*.shp$',full.names =T)
  neg_shps = lapply(neg_shps[1:2],shapefile)
  neg_shps = do.call(bind,neg_shps)
  
  label_tpm = data.frame(
    x = c(84,90,90),
    y = c(32,31,36),
    label = c('TPM1','TPM2','TPS')
  )
  
  label_pmap = data.frame(
    x = 68,
    y = 40,
    label = '(a)'
  )
  pmap = ggplot()+
    geom_tile(data = dftrend,
              aes(x = long,y = lat,
                  fill = levels))+
    geom_polygon(data = world,
                 aes(x = long,y = lat,group = group),
                 size = 0.5,
                 color = 'black',
                 fill = 'transparent')+
    geom_polygon(data = tibet,
                 aes(x = long,y = lat,group = group),
                 size = 0.5,
                 color = 'black',
                 fill = 'transparent')+
    geom_polygon(data = neg_shps,
                 aes(x = long,y = lat,group = group),
                 size = 0.5,
                 color = 'black',
                 fill = 'transparent')+
    geom_text_repel(data = label_tpm[1,],
              aes(x = x,y = y,label = label),
              size = 5,color = 'black',angle = -45,
              bg.color = 'white',
              bg.r =0.25,
              force = F)+
    geom_text_repel(data = label_tpm[2,],
              aes(x = x,y = y,label = label),
              size = 5,color = 'black',angle = 35,
              bg.color = 'white',
              bg.r =0.25,
              force = F)+
    geom_text_repel(data = label_tpm[3,],
                    aes(x = x,y = y,label = label),
                    size = 5,color = 'black',angle = 0,
                    bg.color = 'white',
                    bg.r =0.25,
                    force = F)+
    geom_text(data = label_pmap,
              aes(x=x,y=y,label = label),
              size = 5,color = 'black')+
    scale_x_continuous(breaks = c(70,80,90,100),
                       labels = paste0(c(70,80,90,100),'°E'))+
    scale_y_continuous(breaks = c(20,30,40),
                       labels = paste0(c(20,30,40),'°N'))+
    scale_fill_manual(values = fils)+
    theme_bw()+
    theme(axis.text.y = element_text(angle = 90,hjust = 0.5,size = fontsize,
                                     color = 'black'),
          axis.text.x = element_text(size = fontsize,color = 'black'),
          axis.title = element_text(size = fontsize,color = 'black'))+
    xlab('Longitude')+
    ylab('Latitude')
  
  pmap2 = pmap + theme(
    legend.position = 'bottom',
    legend.text = element_text(size = 14,color = 'black'),
    legend.title = element_text(size = 14,color = 'black')
  )
  
  pmapleg = as_ggplot(get_legend(pmap2))
  pmap = pmap + theme(legend.position = 'none')
  
  pline = pline + theme(axis.text.y = element_text(angle = 90,hjust = 0.5))
  p12 = plot_grid(
    pmap,pline,
    rel_widths = c(1,1),
    rel_heights = c(1,1),
    ncol = 1
  )
    
  output = 'main_plot/SI/covar_twstpm_snowcover'
  dir.create(output)
  output_leg = paste0(output,'/figs_leg.png')
  output = paste0(output,'/figs_covar_twstpm_snowcover_map.png')
  
  png(output,
      height = 20,
      width = 22,
      units = 'cm',
      res = 800)
  print(p12)
  dev.off()
  
  png(output_leg,
      height = 20,
      width = 22,
      units = 'cm',
      res = 800)
  print(pmapleg)
  dev.off()
  
  
  
  
}
figs_evaluate_pme_t_multi_mean <- function(
  
){
  # pme over ato3
  
  
  
  
}
figs_evaluate_projection_model_oftws_basedon_multi_meanpme3 <- function(
  
){
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/import_index_insource_tibet.R")
  trend_fun_index_cmip6<-function(x){
    x = as.numeric(x)
    loc2020 = length(2003:2020)*12-11
    loc2050 = length(2003:2099)*12
    x = x[loc2020:loc2050]
    xt = ts(x,start = c(2020,1),frequency = 12)
    xt = decompose(xt)$trend
    naid = which(is.na(xt))
    xt = xt[-naid]
    
    xt = (xt - mean(xt))/sd(xt)
    return(xt)
  }
  trend_fun_index_cmip6_2003<-function(x){
    x = as.numeric(x)
    #x = x[loc2020:loc2050]
    xt = ts(x,start = c(2003,1),frequency = 12)
    xt = decompose(xt)$trend
    
    naid = which(is.na(xt))
    xt = xt[-naid]
    
    return(xt)
  }
  trend_fun_index_era5<-function(x){
    x = as.numeric(x)
    xt = ts(x,start = c(2003,1),frequency = 12)
    xt = decompose(xt)$trend
    
    naid = which(is.na(xt))
    xt = xt[-naid]
    return(xt)
  }
  standard_fun_index_era5 <-function(x){
    xs = (x - mean(x))/sd(x)
    return(xs)
  }
  standard_fun_index_tws <-function(x){
    xs = (x)/sd(x)
    return(xs)
  }
  
  
  #twsdf = import_index_insource_tibet(var = 'tws_tibet')  
  #meatws = apply(twsdf,2,mean)
  #sdtws = apply(twsdf,2,sd)
  
  #twsdf = apply(twsdf,2,standard_fun_index_tws)
  #twsdf = twsdf[,1:2]
  
  
  # input and choose pmes based on the relationships
  #pmeato1 = import_index_insource_tibet(var = 'pme_mean',region = 'ato')
  #pmeio1 = import_index_insource_tibet(var = 'pme_mean',region = 'io')
  
  #pmeato = pmeato1[1:174,]
  #pmeio = pmeio1[1:174,]
  
  #pmeato = apply(pmeato,2,trend_fun_index_era5)
  #mean_pmeato3 = mean(pmeato[,3])
  #sd_pmeato3 = sd(pmeato[,3])
  
  #pmeio = apply(pmeio,2,trend_fun_index_era5)
  #pmeato = apply(pmeato,2,standard_fun_index_era5)
  #pmeio = apply(pmeio,2,standard_fun_index_era5)
  
  #pmeato = pmeato[,2:3]
  #pmeio = pmeio[,4]
  
  # import cmip6 data
  #############
  #pmeato_ori3 = pmeato[,2]
  
  #df1 = data.frame(
  #  tws = twsdf[,1],
  #  pmeato3 = pmeato_ori3
  #)
  #df2 = data.frame(
  #  tws = twsdf[,2],
  #  pmeato3 = pmeato_ori3
  #)
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/ret_value_for_rfmodel.R")
  #ret_value_for_rfmodel(df1,tpm= 'tpm1')
  #ret_value_for_rfmodel(df2,tpm = 'tpm2')
  
  input = 'output/validation_rf_model_history'
  input1 = paste0(input,'/tpm1_valid_test_tws_train.csv')
  input2 = paste0(input,'/tpm1_valid_train_tws_test.csv')
  input3 = paste0(input,'/tpm1_valid_train_tws_inorder.csv')
  
  input4 = paste0(input,'/tpm2_valid_test_tws_train.csv')
  input5 = paste0(input,'/tpm2_valid_train_tws_test.csv')
  input6 = paste0(input,'/tpm2_valid_train_tws_inorder.csv')
  
  testdf1 = as.data.frame(fread(input1))
  traindf1 = as.data.frame(fread(input2))
  inorderful1 = as.data.frame(fread(input3))
  testdf2 = as.data.frame(fread(input4))
  traindf2 = as.data.frame(fread(input5))
  inorderful2= as.data.frame(fread(input6))
  
  colnames(traindf1) = c("GRACE-TWS",'Projected-TWS')
  colnames(testdf1) = c("GRACE-TWS",'Projected-TWS')
  colnames(inorderful1) = c("GRACE-TWS",'Projected-TWS')
  colnames(traindf2) = c("GRACE-TWS",'Projected-TWS')
  colnames(testdf2) = c("GRACE-TWS",'Projected-TWS')
  colnames(inorderful2) = c("GRACE-TWS",'Projected-TWS')
  
  date = seq(as.Date('2003-07-01'),as.Date('2016-12-01'),'1 month')
  
  fuldf1 = data.frame(
    
    inorderful1
  )
  
  fuldf2 = data.frame(
   
    inorderful2
  )
  
  
  fuldf1$type = 'Projected TWS in TPM1 by sequential full data'
  fuldf2$type = 'Projected TWS in TPM2 by sequential full data'
  
  traindf1$type = 'Train TWS in TPM1 by 70% random sample'
  traindf2$type = 'Train TWS in TPM2 by 70% random sample'
  testdf1$type = 'Test TWS in TPM1 by 30% random sample'
  testdf2$type = 'Test TWS in TPM2 by 30% random sample'
  
  figslabel1 = data.frame(x = -3,y = 1,label = c('(a)','(b)'),
                          type = c('Train TWS in TPM1 by 70% random sample',
                                   'Train TWS in TPM2 by 70% random sample'))
  
  figslabel2 = data.frame(x = -3,y = 1,label = c('(c)','(d)'),
                          type = c('Test TWS in TPM1 by 30% random sample',
                                   'Test TWS in TPM2 by 30% random sample'))
  figslabel3 = data.frame(x = -3,y = 1,label = c('(e)','(f)'),
                          type = c('Projected TWS in TPM1 by sequential full data',
                                   'Projected TWS in TPM2 by sequential full data'))
  
  cor1 = cor(traindf1$`GRACE-TWS`,traindf1$`Projected-TWS`)
  pvs1 = cor.test(traindf1$`GRACE-TWS`,traindf1$`Projected-TWS`)$p.value
  cor2 = cor(traindf2$`GRACE-TWS`,traindf2$`Projected-TWS`)
  pvs2 = cor.test(traindf2$`GRACE-TWS`,traindf2$`Projected-TWS`)$p.value
  
  cortrain = data.frame(
    x= 0,y = -2,
    label = c(paste0('cor: ',round(cor1,2),'(',scientific(pvs1,2),')'),
              paste0('cor: ',round(cor2,2),'(',scientific(pvs2,2),')'))
  )
  
  cor1 = cor(testdf1$`GRACE-TWS`,testdf1$`Projected-TWS`)
  pvs1 = cor.test(testdf1$`GRACE-TWS`,testdf1$`Projected-TWS`)$p.value
  cor2 = cor(testdf2$`GRACE-TWS`,testdf2$`Projected-TWS`)
  pvs2 = cor.test(testdf2$`GRACE-TWS`,testdf2$`Projected-TWS`)$p.value
  
  cortest = data.frame(
    x= 0,y = -2,
    label = c(paste0('cor: ',round(cor1,2),'(',scientific(pvs1,2),')'),
              paste0('cor: ',round(cor2,2),'(',scientific(pvs2,2),')'))
  )
  
  cor1 = cor(inorderful1$`GRACE-TWS`,inorderful1$`Projected-TWS`)
  pvs1 = cor.test(inorderful1$`GRACE-TWS`,inorderful1$`Projected-TWS`)$p.value
  cor2 = cor(inorderful2$`GRACE-TWS`,inorderful2$`Projected-TWS`)
  pvs2 = cor.test(inorderful2$`GRACE-TWS`,inorderful2$`Projected-TWS`)$p.value
  
  corinful = data.frame(
    x= 0,y = -2,
    label = c(paste0('cor: ',round(cor1,2),'(',scientific(pvs1,2),')'),
              paste0('cor: ',round(cor2,2),'(',scientific(pvs2,2),')'))
  )
  
  cortrain$type = c('Train TWS in TPM1 by 70% random sample',
                    'Train TWS in TPM2 by 70% random sample')
  cortest$type = c('Test TWS in TPM1 by 30% random sample',
                    'Test TWS in TPM2 by 30% random sample')
  corinful$type = c('Projected TWS in TPM1 by sequential full data',
                    'Projected TWS in TPM2 by sequential full data')
  
  
  fontsize = 14
  text_theme = theme(
    axis.title = element_text(size = fontsize,color = 'black'),
    axis.text = element_text(size = fontsize,color = 'black'),
    strip.text = element_text(size = fontsize,color = 'black'),
    legend.text = element_text(size = fontsize,color = 'black'),
    legend.title = element_text(size = fontsize,color = 'black')
  )
    
  library(ggsci)
  cols = pal_lancet()(9)[c(1,7)]
  p1 = ggplot()+
    geom_abline(slope = 1,intercept = 0,
                color = 'black',size = 0.5)+
    geom_point(data = traindf1,
              aes(x = traindf1$`GRACE-TWS`,
                  y = traindf1$`Projected-TWS`),
              color = cols[1],
              size = 3,shape = 1)+
    geom_point(data = traindf2,
               aes(x = traindf2$`GRACE-TWS`,
                   y = traindf2$`Projected-TWS`),
               color = cols[1],
               size = 3,shape = 1)+
    
    geom_text(data = figslabel1,
              aes(x = x,y = y,label = label),
              size = 4,color = 'black')+
    geom_text(data = cortrain,
              aes(x = x,y = y,label = label),
              size = 4,color = 'black',hjust = 0)+
    scale_color_manual(values = cols)+
    facet_wrap(~type,nrow = 1)+
    theme_bw()+
    text_theme+
    xlab('GRACE-TWS')+
    ylab('Projected-TWS')
  
  p2 = ggplot()+
    geom_abline(slope = 1,intercept = 0,
                color = 'black',size = 0.5)+
    geom_point(data = testdf1,
               aes(x = testdf1$`GRACE-TWS`,
                   y = testdf1$`Projected-TWS`),
               color = cols[1],
               size = 3,shape = 1)+
    geom_point(data = testdf2,
               aes(x = testdf2$`GRACE-TWS`,
                   y = testdf2$`Projected-TWS`),
               color = cols[1],
               size = 3,shape = 1)+
    geom_text(data = cortest,
              aes(x = x,y = y,label = label),
              size = 4,color = 'black',hjust = 0)+
    geom_text(data = figslabel2,
              aes(x = x,y = y,label = label),
              size = 4,color = 'black')+
    scale_color_manual(values = cols)+
    facet_wrap(~type,nrow = 1)+
    theme_bw()+
    text_theme+
    xlab('GRACE-TWS')+
    ylab('Projected-TWS')
  
  p3 = ggplot()+
    geom_abline(slope = 1,intercept = 0,
                color = 'black',size = 0.5)+
    geom_point(data = fuldf1,
              aes(x = fuldf1$GRACE.TWS, y= fuldf1$Projected.TWS),
              size =3,color = cols[1],shape = 1)+
    geom_point(data = fuldf2,
              aes(x = fuldf1$GRACE.TWS, y= fuldf1$Projected.TWS),
              size =3,color = cols[1],shape = 1)+
    geom_text(data = corinful,
              aes(x = x,y = y,label = label),
              size = 4,color = 'black',hjust = 0)+
    geom_text(data = figslabel3,
              aes(x = x,y = y,label = label),
              size = 4,color = 'black')+
    theme_bw()+
    text_theme+
    scale_color_manual(values = cols)+
    facet_wrap(~type,nrow = 1)+
    xlab("GRACE-TWS")+
    ylab('Projected-TWS')
  
 
  p123 = plot_grid(
    p1,p2,p3,ncol = 1,
    rel_widths = c(1,1,1),
    rel_heights = c(1,1,1)
  )
  
  output = 'main_plot/SI/figs_evaluate_projection_model_oftws_basedon_multi_meanpme3'
  dir.create(output)
  output = paste0(output,'/figs.png')
  png(output,
      height = 25,
      width =25,
      units = 'cm',
      res = 800)
  print(p123)
  dev.off()
  
}
figs_evaluate_projection_model_oftws_basedon_withtemper <- function(
  
){
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/import_index_insource_tibet.R")
  trend_fun_index_cmip6<-function(x){
    x = as.numeric(x)
    loc2020 = length(2003:2020)*12-11
    loc2050 = length(2003:2099)*12
    x = x[loc2020:loc2050]
    xt = ts(x,start = c(2020,1),frequency = 12)
    xt = decompose(xt)$trend
    naid = which(is.na(xt))
    xt = xt[-naid]
    
    xt = (xt - mean(xt))/sd(xt)
    return(xt)
  }
  trend_fun_index_cmip6_2003<-function(x){
    x = as.numeric(x)
    #x = x[loc2020:loc2050]
    xt = ts(x,start = c(2003,1),frequency = 12)
    xt = decompose(xt)$trend
    
    naid = which(is.na(xt))
    xt = xt[-naid]
    
    return(xt)
  }
  trend_fun_index_era5<-function(x){
    x = as.numeric(x)
    xt = ts(x,start = c(2003,1),frequency = 12)
    xt = decompose(xt)$trend
    
    naid = which(is.na(xt))
    xt = xt[-naid]
    return(xt)
  }
  standard_fun_index_era5 <-function(x){
    xs = (x - mean(x))/sd(x)
    return(xs)
  }
  standard_fun_index_tws <-function(x){
    xs = (x)/sd(x)
    return(xs)
  }
  
  
  #twsdf = import_index_insource_tibet(var = 'tws_tibet')  
  #meatws = apply(twsdf,2,mean)
  #sdtws = apply(twsdf,2,sd)
  
  #twsdf = apply(twsdf,2,standard_fun_index_tws)
  #twsdf = twsdf[,1:2]
  
  
  # input and choose pmes based on the relationships
  #pmeato1 = import_index_insource_tibet(var = 'pme_mean',region = 'ato')
  #pmeio1 = import_index_insource_tibet(var = 'pme_mean',region = 'io')
  
  #pmeato = pmeato1[1:174,]
  #pmeio = pmeio1[1:174,]
  
  #pmeato = apply(pmeato,2,trend_fun_index_era5)
  #mean_pmeato3 = mean(pmeato[,3])
  #sd_pmeato3 = sd(pmeato[,3])
  
  #pmeio = apply(pmeio,2,trend_fun_index_era5)
  #pmeato = apply(pmeato,2,standard_fun_index_era5)
  #pmeio = apply(pmeio,2,standard_fun_index_era5)
  
  #pmeato = pmeato[,2:3]
  #pmeio = pmeio[,4]
  
  # import cmip6 data
  #############
  #pmeato_ori3 = pmeato[,2]
  # input temperature filed function
  era5_t = import_index_insource_tibet('era5_t_tibet')
  
  #df1 = data.frame(
  #  tws = twsdf[,1],
  #  pmeato3 = pmeato_ori3
  #)
  #df2 = data.frame(
  #  tws = twsdf[,2],
  #  pmeato3 = pmeato_ori3
  #)
  
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/ret_value_for_rfmodel.R")
  #ret_value_for_rfmodel(df1,tpm= 'tpm1')
  #ret_value_for_rfmodel(df2,tpm = 'tpm2')
  
  input = 'output/validation_rf_model_history'
  input1 = paste0(input,'/tpm1_valid_test_tws_train.csv')
  input2 = paste0(input,'/tpm1_valid_train_tws_test.csv')
  input3 = paste0(input,'/tpm1_valid_train_tws_inorder.csv')
  
  input4 = paste0(input,'/tpm2_valid_test_tws_train.csv')
  input5 = paste0(input,'/tpm2_valid_train_tws_test.csv')
  input6 = paste0(input,'/tpm2_valid_train_tws_inorder.csv')
  
  testdf1 = as.data.frame(fread(input1))
  traindf1 = as.data.frame(fread(input2))
  inorderful1 = as.data.frame(fread(input3))
  testdf2 = as.data.frame(fread(input4))
  traindf2 = as.data.frame(fread(input5))
  inorderful2= as.data.frame(fread(input6))
  
  colnames(traindf1) = c("GRACE-TWS",'Projected-TWS')
  colnames(testdf1) = c("GRACE-TWS",'Projected-TWS')
  colnames(inorderful1) = c("GRACE-TWS",'Projected-TWS')
  colnames(traindf2) = c("GRACE-TWS",'Projected-TWS')
  colnames(testdf2) = c("GRACE-TWS",'Projected-TWS')
  colnames(inorderful2) = c("GRACE-TWS",'Projected-TWS')
  
  date = seq(as.Date('2003-07-01'),as.Date('2016-12-01'),'1 month')
  
  fuldf1 = data.frame(
    
    inorderful1
  )
  
  fuldf2 = data.frame(
    
    inorderful2
  )
  
  
  fuldf1$type = 'Projected TWS in TPM1 by sequential full data'
  fuldf2$type = 'Projected TWS in TPM2 by sequential full data'
  
  traindf1$type = 'Train TWS in TPM1 by 70% random sample'
  traindf2$type = 'Train TWS in TPM2 by 70% random sample'
  testdf1$type = 'Test TWS in TPM1 by 30% random sample'
  testdf2$type = 'Test TWS in TPM2 by 30% random sample'
  
  figslabel1 = data.frame(x = -3,y = 1,label = c('(a)','(b)'),
                          type = c('Train TWS in TPM1 by 70% random sample',
                                   'Train TWS in TPM2 by 70% random sample'))
  
  figslabel2 = data.frame(x = -3,y = 1,label = c('(c)','(d)'),
                          type = c('Test TWS in TPM1 by 30% random sample',
                                   'Test TWS in TPM2 by 30% random sample'))
  figslabel3 = data.frame(x = -3,y = 1,label = c('(e)','(f)'),
                          type = c('Projected TWS in TPM1 by sequential full data',
                                   'Projected TWS in TPM2 by sequential full data'))
  
  cor1 = cor(traindf1$`GRACE-TWS`,traindf1$`Projected-TWS`)
  pvs1 = cor.test(traindf1$`GRACE-TWS`,traindf1$`Projected-TWS`)$p.value
  cor2 = cor(traindf2$`GRACE-TWS`,traindf2$`Projected-TWS`)
  pvs2 = cor.test(traindf2$`GRACE-TWS`,traindf2$`Projected-TWS`)$p.value
  
  cortrain = data.frame(
    x= 0,y = -2,
    label = c(paste0('cor: ',round(cor1,2),'(',scientific(pvs1,2),')'),
              paste0('cor: ',round(cor2,2),'(',scientific(pvs2,2),')'))
  )
  
  cor1 = cor(testdf1$`GRACE-TWS`,testdf1$`Projected-TWS`)
  pvs1 = cor.test(testdf1$`GRACE-TWS`,testdf1$`Projected-TWS`)$p.value
  cor2 = cor(testdf2$`GRACE-TWS`,testdf2$`Projected-TWS`)
  pvs2 = cor.test(testdf2$`GRACE-TWS`,testdf2$`Projected-TWS`)$p.value
  
  cortest = data.frame(
    x= 0,y = -2,
    label = c(paste0('cor: ',round(cor1,2),'(',scientific(pvs1,2),')'),
              paste0('cor: ',round(cor2,2),'(',scientific(pvs2,2),')'))
  )
  
  cor1 = cor(inorderful1$`GRACE-TWS`,inorderful1$`Projected-TWS`)
  pvs1 = cor.test(inorderful1$`GRACE-TWS`,inorderful1$`Projected-TWS`)$p.value
  cor2 = cor(inorderful2$`GRACE-TWS`,inorderful2$`Projected-TWS`)
  pvs2 = cor.test(inorderful2$`GRACE-TWS`,inorderful2$`Projected-TWS`)$p.value
  
  corinful = data.frame(
    x= 0,y = -2,
    label = c(paste0('cor: ',round(cor1,2),'(',scientific(pvs1,2),')'),
              paste0('cor: ',round(cor2,2),'(',scientific(pvs2,2),')'))
  )
  
  cortrain$type = c('Train TWS in TPM1 by 70% random sample',
                    'Train TWS in TPM2 by 70% random sample')
  cortest$type = c('Test TWS in TPM1 by 30% random sample',
                   'Test TWS in TPM2 by 30% random sample')
  corinful$type = c('Projected TWS in TPM1 by sequential full data',
                    'Projected TWS in TPM2 by sequential full data')
  
  
  fontsize = 14
  text_theme = theme(
    axis.title = element_text(size = fontsize,color = 'black'),
    axis.text = element_text(size = fontsize,color = 'black'),
    strip.text = element_text(size = fontsize,color = 'black'),
    legend.text = element_text(size = fontsize,color = 'black'),
    legend.title = element_text(size = fontsize,color = 'black')
  )
  
  library(ggsci)
  cols = pal_lancet()(9)[c(1,7)]
  p1 = ggplot()+
    geom_abline(slope = 1,intercept = 0,
                color = 'black',size = 0.5)+
    geom_point(data = traindf1,
               aes(x = traindf1$`GRACE-TWS`,
                   y = traindf1$`Projected-TWS`),
               color = cols[1],
               size = 3,shape = 1)+
    geom_point(data = traindf2,
               aes(x = traindf2$`GRACE-TWS`,
                   y = traindf2$`Projected-TWS`),
               color = cols[1],
               size = 3,shape = 1)+
    
    geom_text(data = figslabel1,
              aes(x = x,y = y,label = label),
              size = 4,color = 'black')+
    geom_text(data = cortrain,
              aes(x = x,y = y,label = label),
              size = 4,color = 'black',hjust = 0)+
    scale_color_manual(values = cols)+
    facet_wrap(~type,nrow = 1)+
    theme_bw()+
    text_theme+
    xlab('GRACE-TWS')+
    ylab('Projected-TWS')
  
  p2 = ggplot()+
    geom_abline(slope = 1,intercept = 0,
                color = 'black',size = 0.5)+
    geom_point(data = testdf1,
               aes(x = testdf1$`GRACE-TWS`,
                   y = testdf1$`Projected-TWS`),
               color = cols[1],
               size = 3,shape = 1)+
    geom_point(data = testdf2,
               aes(x = testdf2$`GRACE-TWS`,
                   y = testdf2$`Projected-TWS`),
               color = cols[1],
               size = 3,shape = 1)+
    geom_text(data = cortest,
              aes(x = x,y = y,label = label),
              size = 4,color = 'black',hjust = 0)+
    geom_text(data = figslabel2,
              aes(x = x,y = y,label = label),
              size = 4,color = 'black')+
    scale_color_manual(values = cols)+
    facet_wrap(~type,nrow = 1)+
    theme_bw()+
    text_theme+
    xlab('GRACE-TWS')+
    ylab('Projected-TWS')
  
  p3 = ggplot()+
    geom_abline(slope = 1,intercept = 0,
                color = 'black',size = 0.5)+
    geom_point(data = fuldf1,
               aes(x = fuldf1$GRACE.TWS, y= fuldf1$Projected.TWS),
               size =3,color = cols[1],shape = 1)+
    geom_point(data = fuldf2,
               aes(x = fuldf1$GRACE.TWS, y= fuldf1$Projected.TWS),
               size =3,color = cols[1],shape = 1)+
    geom_text(data = corinful,
              aes(x = x,y = y,label = label),
              size = 4,color = 'black',hjust = 0)+
    geom_text(data = figslabel3,
              aes(x = x,y = y,label = label),
              size = 4,color = 'black')+
    theme_bw()+
    text_theme+
    scale_color_manual(values = cols)+
    facet_wrap(~type,nrow = 1)+
    xlab("GRACE-TWS")+
    ylab('Projected-TWS')
  
  
  p123 = plot_grid(
    p1,p2,p3,ncol = 1,
    rel_widths = c(1,1,1),
    rel_heights = c(1,1,1)
  )
  
  output = 'main_plot/SI/figs_evaluate_projection_model_oftws_basedon_multi_meanpme3'
  dir.create(output)
  output = paste0(output,'/figs.png')
  png(output,
      height = 25,
      width =25,
      units = 'cm',
      res = 800)
  print(p123)
  dev.off()
  
}
figs_evaluate_projection_model_oftws_basedon_withtemper <- function(
  
){
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/import_index_insource_tibet.R")
  trend_fun_index_cmip6<-function(x){
    x = as.numeric(x)
    loc2020 = length(2003:2020)*12-11
    loc2050 = length(2003:2099)*12
    x = x[loc2020:loc2050]
    xt = ts(x,start = c(2020,1),frequency = 12)
    xt = decompose(xt)$trend
    naid = which(is.na(xt))
    xt = xt[-naid]
    
    xt = (xt - mean(xt))/sd(xt)
    return(xt)
  }
  trend_fun_index_cmip6_2003<-function(x){
    x = as.numeric(x)
    #x = x[loc2020:loc2050]
    xt = ts(x,start = c(2003,1),frequency = 12)
    xt = decompose(xt)$trend
    
    naid = which(is.na(xt))
    xt = xt[-naid]
    
    return(xt)
  }
  trend_fun_index_era5<-function(x){
    x = as.numeric(x)
    xt = ts(x,start = c(2003,1),frequency = 12)
    xt = decompose(xt)$trend
    
    naid = which(is.na(xt))
    xt = xt[-naid]
    return(xt)
  }
  standard_fun_index_era5 <-function(x){
    xs = (x - mean(x))/sd(x)
    return(xs)
  }
  standard_fun_index_tws <-function(x){
    xs = (x)/sd(x)
    return(xs)
  }
  
  
  twsdf = import_index_insource_tibet(var = 'tws_tibet')  
  meatws = apply(twsdf,2,mean)
  sdtws = apply(twsdf,2,sd)
  
  twsdf = apply(twsdf,2,standard_fun_index_tws)
  twsdf = twsdf[,1:2]
  
  
  # input and choose pmes based on the relationships
  pmeato1 = import_index_insource_tibet(var = 'pme_mean',region = 'ato')
  pmeio1 = import_index_insource_tibet(var = 'pme_mean',region = 'io')
  
  pmeato = pmeato1[1:174,]
  pmeio = pmeio1[1:174,]
  
  pmeato = apply(pmeato,2,trend_fun_index_era5)
  mean_pmeato3 = mean(pmeato[,3])
  sd_pmeato3 = sd(pmeato[,3])
  
  pmeio = apply(pmeio,2,trend_fun_index_era5)
  pmeato = apply(pmeato,2,standard_fun_index_era5)
  pmeio = apply(pmeio,2,standard_fun_index_era5)
  
  pmeato = pmeato[,2:3]
  pmeio = pmeio[,4]
  
  # import cmip6 data
  #############
  pmeato_ori3 = pmeato[,2]
  # input temperature filed function
  era5_t = import_index_insource_tibet('era5_t_tibet')
  
  df1 = data.frame(
    tws = twsdf[,1],
    pmeato3 = pmeato_ori3,
    era5_t = era5_t[,1]
  )
  df2 = data.frame(
    tws = twsdf[,2],
    pmeato3 = pmeato_ori3,
    era5_t = era5_t[,2]
  )
  
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/ret_value_for_rfmodel_withtemper.R")
  ret_value_for_rfmodel_withtemper(df1,tpm= 'tpm1')
  ret_value_for_rfmodel_withtemper(df2,tpm = 'tpm2')
  
  input = 'output/validation_rf_model_withtemper_history'
  input1 = paste0(input,'/tpm1_valid_test_tws_train.csv')
  input2 = paste0(input,'/tpm1_valid_train_tws_test.csv')
  input3 = paste0(input,'/tpm1_valid_train_tws_inorder.csv')
  
  input4 = paste0(input,'/tpm2_valid_test_tws_train.csv')
  input5 = paste0(input,'/tpm2_valid_train_tws_test.csv')
  input6 = paste0(input,'/tpm2_valid_train_tws_inorder.csv')
  
  testdf1 = as.data.frame(fread(input1))
  traindf1 = as.data.frame(fread(input2))
  inorderful1 = as.data.frame(fread(input3))
  testdf2 = as.data.frame(fread(input4))
  traindf2 = as.data.frame(fread(input5))
  inorderful2= as.data.frame(fread(input6))
  
  colnames(traindf1) = c("GRACE-TWS",'Projected-TWS')
  colnames(testdf1) = c("GRACE-TWS",'Projected-TWS')
  colnames(inorderful1) = c("GRACE-TWS",'Projected-TWS')
  colnames(traindf2) = c("GRACE-TWS",'Projected-TWS')
  colnames(testdf2) = c("GRACE-TWS",'Projected-TWS')
  colnames(inorderful2) = c("GRACE-TWS",'Projected-TWS')
  
  date = seq(as.Date('2003-07-01'),as.Date('2016-12-01'),'1 month')
  
  fuldf1 = data.frame(
    
    inorderful1
  )
  
  fuldf2 = data.frame(
    
    inorderful2
  )
  
  
  fuldf1$type = 'Projected TWS in TPM1 by sequential full data'
  fuldf2$type = 'Projected TWS in TPM2 by sequential full data'
  
  traindf1$type = 'Train TWS in TPM1 by 70% random sample'
  traindf2$type = 'Train TWS in TPM2 by 70% random sample'
  testdf1$type = 'Test TWS in TPM1 by 30% random sample'
  testdf2$type = 'Test TWS in TPM2 by 30% random sample'
  
  figslabel1 = data.frame(x = -3,y = 1,label = c('(a)','(b)'),
                          type = c('Train TWS in TPM1 by 70% random sample',
                                   'Train TWS in TPM2 by 70% random sample'))
  
  figslabel2 = data.frame(x = -3,y = 1,label = c('(c)','(d)'),
                          type = c('Test TWS in TPM1 by 30% random sample',
                                   'Test TWS in TPM2 by 30% random sample'))
  figslabel3 = data.frame(x = -3,y = 1,label = c('(e)','(f)'),
                          type = c('Projected TWS in TPM1 by sequential full data',
                                   'Projected TWS in TPM2 by sequential full data'))
  
  cor1 = cor(traindf1$`GRACE-TWS`,traindf1$`Projected-TWS`)
  pvs1 = cor.test(traindf1$`GRACE-TWS`,traindf1$`Projected-TWS`)$p.value
  cor2 = cor(traindf2$`GRACE-TWS`,traindf2$`Projected-TWS`)
  pvs2 = cor.test(traindf2$`GRACE-TWS`,traindf2$`Projected-TWS`)$p.value
  
  cortrain = data.frame(
    x= 0,y = -2,
    label = c(paste0('cor: ',round(cor1,2),'(',scientific(pvs1,2),')'),
              paste0('cor: ',round(cor2,2),'(',scientific(pvs2,2),')'))
  )
  
  cor1 = cor(testdf1$`GRACE-TWS`,testdf1$`Projected-TWS`)
  pvs1 = cor.test(testdf1$`GRACE-TWS`,testdf1$`Projected-TWS`)$p.value
  cor2 = cor(testdf2$`GRACE-TWS`,testdf2$`Projected-TWS`)
  pvs2 = cor.test(testdf2$`GRACE-TWS`,testdf2$`Projected-TWS`)$p.value
  
  cortest = data.frame(
    x= 0,y = -2,
    label = c(paste0('cor: ',round(cor1,2),'(',scientific(pvs1,2),')'),
              paste0('cor: ',round(cor2,2),'(',scientific(pvs2,2),')'))
  )
  
  cor1 = cor(inorderful1$`GRACE-TWS`,inorderful1$`Projected-TWS`)
  pvs1 = cor.test(inorderful1$`GRACE-TWS`,inorderful1$`Projected-TWS`)$p.value
  cor2 = cor(inorderful2$`GRACE-TWS`,inorderful2$`Projected-TWS`)
  pvs2 = cor.test(inorderful2$`GRACE-TWS`,inorderful2$`Projected-TWS`)$p.value
  
  corinful = data.frame(
    x= 0,y = -2,
    label = c(paste0('cor: ',round(cor1,2),'(',scientific(pvs1,2),')'),
              paste0('cor: ',round(cor2,2),'(',scientific(pvs2,2),')'))
  )
  
  cortrain$type = c('Train TWS in TPM1 by 70% random sample',
                    'Train TWS in TPM2 by 70% random sample')
  cortest$type = c('Test TWS in TPM1 by 30% random sample',
                   'Test TWS in TPM2 by 30% random sample')
  corinful$type = c('Projected TWS in TPM1 by sequential full data',
                    'Projected TWS in TPM2 by sequential full data')
  
  
  fontsize = 14
  text_theme = theme(
    axis.title = element_text(size = fontsize,color = 'black'),
    axis.text = element_text(size = fontsize,color = 'black'),
    strip.text = element_text(size = fontsize,color = 'black'),
    legend.text = element_text(size = fontsize,color = 'black'),
    legend.title = element_text(size = fontsize,color = 'black')
  )
  
  library(ggsci)
  cols = pal_lancet()(9)[c(1,7)]
  p1 = ggplot()+
    geom_abline(slope = 1,intercept = 0,
                color = 'black',size = 0.5)+
    geom_point(data = traindf1,
               aes(x = traindf1$`GRACE-TWS`,
                   y = traindf1$`Projected-TWS`),
               color = cols[1],
               size = 3,shape = 1)+
    geom_point(data = traindf2,
               aes(x = traindf2$`GRACE-TWS`,
                   y = traindf2$`Projected-TWS`),
               color = cols[1],
               size = 3,shape = 1)+
    
    geom_text(data = figslabel1,
              aes(x = x,y = y,label = label),
              size = 4,color = 'black')+
    geom_text(data = cortrain,
              aes(x = x,y = y,label = label),
              size = 4,color = 'black',hjust = 0)+
    scale_color_manual(values = cols)+
    facet_wrap(~type,nrow = 1)+
    theme_bw()+
    text_theme+
    xlab('GRACE-TWS')+
    ylab('Projected-TWS')
  
  p2 = ggplot()+
    geom_abline(slope = 1,intercept = 0,
                color = 'black',size = 0.5)+
    geom_point(data = testdf1,
               aes(x = testdf1$`GRACE-TWS`,
                   y = testdf1$`Projected-TWS`),
               color = cols[1],
               size = 3,shape = 1)+
    geom_point(data = testdf2,
               aes(x = testdf2$`GRACE-TWS`,
                   y = testdf2$`Projected-TWS`),
               color = cols[1],
               size = 3,shape = 1)+
    geom_text(data = cortest,
              aes(x = x,y = y,label = label),
              size = 4,color = 'black',hjust = 0)+
    geom_text(data = figslabel2,
              aes(x = x,y = y,label = label),
              size = 4,color = 'black')+
    scale_color_manual(values = cols)+
    facet_wrap(~type,nrow = 1)+
    theme_bw()+
    text_theme+
    xlab('GRACE-TWS')+
    ylab('Projected-TWS')
  
  p3 = ggplot()+
    geom_abline(slope = 1,intercept = 0,
                color = 'black',size = 0.5)+
    geom_point(data = fuldf1,
               aes(x = fuldf1$GRACE.TWS, y= fuldf1$Projected.TWS),
               size =3,color = cols[1],shape = 1)+
    geom_point(data = fuldf2,
               aes(x = fuldf1$GRACE.TWS, y= fuldf1$Projected.TWS),
               size =3,color = cols[1],shape = 1)+
    geom_text(data = corinful,
              aes(x = x,y = y,label = label),
              size = 4,color = 'black',hjust = 0)+
    geom_text(data = figslabel3,
              aes(x = x,y = y,label = label),
              size = 4,color = 'black')+
    theme_bw()+
    text_theme+
    scale_color_manual(values = cols)+
    facet_wrap(~type,nrow = 1)+
    xlab("GRACE-TWS")+
    ylab('Projected-TWS')
  
  
  p123 = plot_grid(
    p1,p2,p3,ncol = 1,
    rel_widths = c(1,1,1),
    rel_heights = c(1,1,1)
  )
  
  output = 'main_plot/SI/figs_evaluate_projection_model_oftws_basedon_pme3_withtemper'
  dir.create(output)
  output = paste0(output,'/figs.png')
  png(output,
      height = 25,
      width =25,
      units = 'cm',
      res = 800)
  print(p123)
  dev.off()
  
}
figs_explain_why_remove_model3and7 <- function(
  
){
  
  
  
}
figs_illustrate_north_move_model <- function(
  
){
  
  tibet = shp_management('tibet')
  
  
  
  
  
  
  
  
  
  
  
  
}
figs_mca_data_prepare<- function(
  
){
  # mask pme 
  source("/home/share/R_project/xinjiang_vapor/data_management.R")
  source("/home/share/R_project/xinjiang_vapor/shp_management.R")
  global_pr = data_management('era5_pr_include_ocean')
  global_eva = data_management('era5_e_include_ocean')
  
  global_pme = global_pr - global_eva
  
  library(raster)
  ato = shapefile('/media/sdb1/shp/ocean_diso/ato.shp')
  io = shapefile('/media/sdb1/shp/ocean_diso/io.shp')
  
  pmeato = mask(crop(global_pme,ato),ato)
  pmeio = mask(crop(global_pme,io),io)
  
  pmeato = as.data.frame(pmeato,xy = T)
  pmeio = as.data.frame(pmeio,xy = T)
  
  naid = which(is.na(pmeato[,3]))
  pmeato = pmeato[-naid,]
  naid = which(is.na(pmeio[,3]))
  pmeio = pmeio[-naid,]
  
  pmedf = rbind(pmeato,pmeio)
  
  output = '/media/sdb5/Vapor_projcts/Vapor_tibet/pme_ato_rastdf'
  dir.create(output)
  output = paste0(output,'/pmedf.csv')
  
  library(data.table)
  fwrite(pmedf,output)
  
}
figs_multi_weight_temepr_intpm_basedon_ocean_link <- function(
  
){
  trend_fun_index_cmip6_2003<-function(x){
    x = as.numeric(x)
    #x = x[loc2020:loc2050]
    x = x[1:174]
    xt = ts(x,start = c(2003,1),frequency = 12)
    xt = decompose(xt)$trend
    
    naid = which(is.na(xt))
    xt = xt[-naid]
    xt = (xt-mean(xt))/sd(xt)
    
    return(xt)
  }
  era5_t = import_index_insource_tibet('era5_t_tibet')
  t = import_index_insource_tibet('t_cmip6',region = 'ato')
  ssp245_ato1 = t[[1]][[1]]
  ssp245_ato3 = t[[1]][[2]]
  ssp585_ato1 = t[[2]][[1]]
  ssp585_ato3 = t[[2]][[2]]
  
  ssp245_ato1 = apply(ssp245_ato1,2,trend_fun_index_cmip6_2003)
  ssp245_ato3 = apply(ssp245_ato3,2,trend_fun_index_cmip6_2003)
  ssp585_ato1 = apply(ssp585_ato1,2,trend_fun_index_cmip6_2003)
  ssp585_ato3 = apply(ssp585_ato3,2,trend_fun_index_cmip6_2003)
  
  ssp245_ato = cbind(ssp245_ato1,ssp245_ato3)
  ssp585_ato = cbind(ssp585_ato1,ssp585_ato3)
  
  aim1 = era5_t[,1]
  model1 = lm(aim1~ssp245_ato)
  model2 = lm(aim1~ssp585_ato)
  
  aim2 = era5_t[,2]
  t = import_index_insource_tibet('t_cmip6',region = 'io')
  ssp245_io1 = t[[1]][[1]]
  ssp245_io2 = t[[1]][[2]]
  ssp245_io3 = t[[1]][[3]]
  ssp245_io4 = t[[1]][[4]]
  
  ssp585_io1 = t[[2]][[1]]
  ssp585_io2 = t[[2]][[2]]
  ssp585_io3 = t[[2]][[3]]
  ssp585_io4 = t[[2]][[4]]
  
  ssp245_io1 = apply(ssp245_io1,2,trend_fun_index_cmip6_2003)
  ssp245_io2 = apply(ssp245_io2,2,trend_fun_index_cmip6_2003)
  ssp245_io3 = apply(ssp245_io3,2,trend_fun_index_cmip6_2003)
  ssp245_io4 = apply(ssp245_io4,2,trend_fun_index_cmip6_2003)
  
  ssp585_io1 = apply(ssp585_io1,2,trend_fun_index_cmip6_2003)
  ssp585_io2 = apply(ssp585_io2,2,trend_fun_index_cmip6_2003)
  ssp585_io3 = apply(ssp585_io3,2,trend_fun_index_cmip6_2003)
  ssp585_io4 = apply(ssp585_io4,2,trend_fun_index_cmip6_2003)
  
  ssp245_tio = cbind(ssp245_io1,ssp245_io2,ssp245_io3,
                     ssp245_io4)
  ssp585_tio = cbind(ssp585_io1,ssp585_io2,ssp585_io3,
                     ssp585_io4)
  
  model3 = lm(aim2~ssp245_tio)
  model4 = lm(aim2~ssp585_tio)
  
  
  simu245_tpm1 = model1$fitted.values
  simu585_tpm1 = model2$fitted.values
  simu245_tpm2 = model3$fitted.values
  simu585_tpm2 = model4$fitted.values
  
  cor1 = cor(simu245_tpm1,era5_t[,1])
  cor2 = cor(simu585_tpm1,era5_t[,1])
  cor3 = cor(simu245_tpm2,era5_t[,2])
  cor4 = cor(simu585_tpm2,era5_t[,2])
  
  
  pvs1 = cor.test(simu245_tpm1,era5_t[,1])$p.value
  pvs2 = cor.test(simu585_tpm1,era5_t[,1])$p.value
  pvs3 = cor.test(simu245_tpm2,era5_t[,2])$p.value
  pvs4 = cor.test(simu585_tpm2,era5_t[,2])$p.value
  
  
  
  date = seq(as.Date('2003-07-01'),
             as.Date('2016-12-01'),'1 month')
  
  dfcor1 = data.frame(
    x = date[5],
    y = c(-2.6,-3.5),
    label = c(paste0('Simu_SSP245 cor: ',
                     round(cor1,2),
                     '(',scientific(pvs1,2),')'),
              paste0('Simu_SSP585 cor: ',
                     round(cor2,2),
                     '(',scientific(pvs2,2),')')),
    variable = c('Simu_SSP245',
                 'Simu_SSP585'),
    type = 'Projected T in TPM1 based on NATO CMIP6 T'
  )
  
  dfcor2 = data.frame(
    x = date[5],
    y = c(-2.6,-3.5),
    label = c(paste0('Simu_SSP245 cor: ',
                     round(cor3,2),
                     '(',scientific(pvs3,2),')'),
              paste0('Simu_SSP585 cor: ',
                     round(cor4,2),
                     '(',scientific(pvs4,2),')')),
    variable = c('Simu_SSP245',
                 'Simu_SSP585'),
    type = 'Projected T in TPM2 based on IO CMIP6 T'
  )
  
  dfcor = rbind(dfcor1,dfcor2)
  
  
  df1 = data.frame(
    date = date,
    ERA5 = era5_t[,1],
    Simu_SSP245 = simu245_tpm1,
    Simu_SSP585 = simu585_tpm1
  )
  df2 = data.frame(
    date = date,
    ERA5 = era5_t[,2],
    Simu_SSP245 = simu245_tpm2,
    Simu_SSP585 = simu585_tpm2
  )
  
  df1 = reshape2::melt(df1,'date')
  df2 = reshape2::melt(df2,'date')
  
  df1$type = "Projected T in TPM1 based on NATO CMIP6 T"
  df2$type = 'Projected T in TPM2 based on IO CMIP6 T'
  
  df = rbind(df1,df2)
  
  figlabel = data.frame(
    x = date[5],
    y = 3,
    label = c('(c)','(d)'),
    type = c("Projected T in TPM1 based on NATO CMIP6 T","Projected T in TPM2 based on IO CMIP6 T")
  )
  
  p = ggplot()+
    geom_line(data = df,
              aes(x = date,y = value,
                  color = variable),
              size = 1.3)+
    geom_text(data = figlabel,
              aes(x = x,y =y,label=label),
              size = 5,
              color = 'black',
              hjust = 0)+
    geom_text(data = dfcor,
              aes(x = x,y =y,label=label,
                  color = variable),
              size = 4,show.legend = F,
              hjust = 0)+
    scale_color_manual(values = cols)+
    guides(color = guide_legend(title = ''))+
    facet_wrap(~type,nrow = 1)+
    theme_bw()+
    xlab('Time')+
    ylab('Indices')
  
  fontsize = 14
  text_theme = theme(
    axis.text = element_text(size = fontsize,color = 'black'),
    axis.title = element_text(size = fontsize,color = 'black'),
    legend.text = element_text(size = fontsize,color = 'black'),
    legend.title = element_text(size = fontsize,color = 'black'),
    strip.text = element_text(size = fontsize,color = 'black')
  )
  p = p+
    text_theme+
    theme(legend.position = 'bottom')
  
  return(p)
  
}
figs_north_move_model_verify_2020_2021 <- function(
  
){
  #source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/generate_proj_bordershps_hist.R")
  #generate_proj_bordershps_hist()
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/figs_north_move_model_verify_2020_2021.R")
  #cal_overarea_proj_real2020_2021()
  
  tibet = shp_management('tibet')
  input_histtws = 'output/evalute_proj_north_border_2020_2021/rast_tws.csv'
  tws = as.data.frame(fread(input_histtws))
  
  
  years = 2020:2021
  input_projborder = 'output/evalute_proj_north_border_2020_2021/'
  input_proj245 = paste0(input_projborder,'/proj_border_ssp245_',years)
  input_proj585 = paste0(input_projborder,'/proj_border_ssp585_',years)
  
  i = 1:length(years)
  import_proj_border_df245 <- function(i){
    tmp = as.data.frame(fread(input_proj245[i]))
    tmp$variable = paste0('SSP245 Year ',years[i])
    tmp$group = paste0(years[i],'_',1:nrow(tmp))
    tmp$col = 'SSP245'
    return(tmp)
  }
  import_proj_border_df585 <- function(i){
    tmp = as.data.frame(fread(input_proj585[i]))
    tmp$variable = paste0('SSP585 Year ',years[i])
    tmp$group = paste0(years[i],'_',1:nrow(tmp))
    tmp$col = 'SSP585'
    return(tmp)
  }
  
  proj_border245 = do.call('rbind',lapply(i,import_proj_border_df245))
  proj_border585 = do.call('rbind',lapply(i,import_proj_border_df585))
  
  proj_border = rbind(proj_border245,
                      proj_border585)
  
  
  negtws = tws
  negtws$levels = cut(negtws$value,
                      breaks =c(-911,seq(-400,0,50)))
  negtws1 = negtws
  negtws2 = negtws
  
  negtws1$variable[which(negtws1$variable == 'y2020')]= 'SSP245 Year 2020'
  negtws1$variable[which(negtws1$variable == 'y2021')] = 'SSP245 Year 2021'
  negtws2$variable[which(negtws2$variable == 'y2020')]= 'SSP585 Year 2020'
  negtws2$variable[which(negtws2$variable == 'y2021')] = 'SSP585 Year 2021'
  
  negtws = rbind(negtws1,negtws2)
  
  library(RColorBrewer)
  fils = colorRampPalette(brewer.pal(9,'Spectral'))(9)
  
  fontsize = 14
  text_theme = theme(
    axis.title = element_text(size = fontsize,color = 'black'),
    axis.text =  element_text(size = fontsize,color = 'black'),
    legend.text =  element_text(size = fontsize,color = 'black'),
    legend.title =  element_text(size = fontsize,color = 'black'),
    strip.text =  element_text(size = fontsize,color = 'black')
  )
  figslabels = data.frame(
    x = 62,
    y = 40,
    label = paste0('(',letters[1:4],')'),
    variable = c(paste0('SSP245 Year ',2020:2021),
                 paste0('SSP585 Year ',2020:2021))
  )
  
  futreal_border = lapply(list.files('output/neg_shps_tws_2020_2021',
                                     full.names = T,
                                     pattern = '*.shp$'),
                          shapefile)
  
  futreal_border1 = fortify(futreal_border[[1]])
  futreal_border2 = fortify(futreal_border[[2]])
  
  futreal_border3 = futreal_border1
  futreal_border4 = futreal_border2
  
  futreal_border1$variable = 'SSP245 Year 2020'
  futreal_border3$variable = 'SSP585 Year 2020'
  futreal_border2$variable = 'SSP245 Year 2021'
  futreal_border4$variable = 'SSP585 Year 2021'
  
  futproj_border = lapply(list.files('output/evalute_proj_north_border_shp_2020_2021',
                                     full.names = T,pattern = '*.shp$'),
                          shapefile)
  futproj_border1 = fortify(futproj_border[[1]])
  futproj_border2 = fortify(futproj_border[[2]])
  futproj_border3 = fortify(futproj_border[[3]])
  futproj_border4 = fortify(futproj_border[[4]])
  
  futproj_border1$variable = 'SSP245 Year 2020'
  futproj_border2$variable = 'SSP585 Year 2020'
  futproj_border3$variable = 'SSP245 Year 2021'
  futproj_border4$variable = 'SSP585 Year 2021'
  
  futproj_border1$col = 'SSP245'
  futproj_border2$col = 'SSP585'
  futproj_border3$col = 'SSP245'
  futproj_border4$col = 'SSP585'
  
  futproj_border = rbind(futproj_border1,
                         futproj_border2,
                         futproj_border3,
                         futproj_border4)
  
  
  futreal_border= rbind(futreal_border1,
                        futreal_border2,
                        futreal_border3,
                        futreal_border4)
  futreal_border$col = 'Observation'
  
  cols = pal_lancet()(9)
  cols = colorRampPalette(cols)(20)
  cols = cols[c(1,15,15)]
  linetype =c(1,1,2)
  p1 = ggplot()+
    geom_tile(data = negtws,
              aes(x = long,y = lat,fill = levels),
              alpha = 0.5)+
    geom_polygon(data = tibet,
                 aes(x = long,y = lat,group = group),
                 size = 0.5,color = 'black',
                 fill = 'transparent')+
    geom_polygon(data = futreal_border,
                 aes(x = long,y = lat,group = group,
                     color = col,
                     linetype = col),
                 size = 1.5,
                 fill = 'transparent')+
    geom_polygon(data = futproj_border,
                 aes(x = long,y = lat,group = group,
                     color = col,
                     linetype = col),
                 size = 1.5,
                 fill = 'transparent')+
    geom_text(data = figslabels,
              aes(x = x,y = y,label =label),
              size = 5,
              color = 'black',hjust =0)+
    scale_fill_manual(values = fils)+
    scale_color_manual(values = cols)+
    scale_linetype_manual(values = linetype)+
    facet_wrap(~variable,nrow = 2)+
    theme_bw()+
    text_theme+
    theme(axis.text.y = element_text(angle = 90,
                                     hjust = 0.5))+
    theme(legend.position = 'bottom',
          panel.grid = element_blank())+
    guides(fill = guide_legend(title = 'Annual sum of TWS',
                               title.position = 'top',
                               nrow = 2),
           color = guide_legend(title = 'Projection border',
                                title.position = 'top',
                                nrow = 2),
           linetype = guide_legend(title = 'Projection border',
                                   title.position = 'top',
                                   nrow = 2))+
    scale_x_continuous(breaks = c(70,80,90,100),
                       labels = paste0(c(70,80,90,100),'°E'))+
    scale_y_continuous(breaks = c(30,35,40),
                     labels = paste0(c(30,35,40),'°N'))+
  
    xlab('Longitude')+
    ylab("Latitude")
  
  
  
  input_overarea = 'output/verifiy_northmove_model_2020_2021_overratio/overarea.csv'
  overarea = as.data.frame(fread(input_overarea))
  
  labeldf = data.frame(
    x =65,
    y = 27,
    label = paste0('Overlapping area (10 km )\n',round(overarea$overarea,2),'(',
                   round(overarea$overarea_ratio,2),'%)'),
    variable= c("SSP245 Year 2020",
                'SSP245 Year 2021',
                'SSP585 Year 2020',
                'SSP585 Year 2021')
  )
  
  p2 = p1 + 
    geom_text(data = labeldf,
              aes(x = x,y = y,label = label),
              size= 4,hjust =0,color = 'black')
  
  output = 'main_plot/SI/figs_north_move_model_verify_2020_2021'
  dir.create(output)
  output = paste0(output,'/figs.png')
  
  png(output,
      height = 25,
      width = 28,
      units = 'cm',
      res = 800)
  print(p2)
  dev.off()
  
  
  
  
  
  
}
figs_north_move_model_verify <- function(
  
){
  #source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/generate_proj_bordershps_hist.R")
  #generate_proj_bordershps_hist()
  
  input_histtws = 'output/figs_twsann_sum/twsdf.csv'
  tws = as.data.frame(fread(input_histtws))
  tws = cbind(tws[,1:2],tws[,9:16])
  tws = reshape2::melt(tws,c('long','lat'))
  
  negshps_by_year = lapply(list.files('/media/sdb5/Vapor_projcts/Vapor_tibet/shp/twsneg_border',
                                      full.names = T,
                                      pattern = '*.shp$'),
                           shapefile)
  
  negshps_hist = negshps_by_year[7:14]
  
  
  years = 2009:2016
  input_projborder = 'output/northward_model_evaluate_hist/'
  input_projborder = paste0(input_projborder,'/proj_north_',years,'.csv')
  
  i = 1:length(years)
  import_proj_border_df <- function(i){
    tmp = as.data.frame(fread(input_projborder[i]))
    tmp$variable = paste0('Year',years[i])
    return(tmp)
  }
  
  proj_border_df = do.call('rbind',lapply(i,import_proj_border_df))
  
  fortify_hist_border<- function(i){
    tmp = fortify(negshps_hist[[i]])
    tmp$variable = paste0('Year',years[i])
    return(tmp)
  }
  hist_border_df = do.call('rbind',lapply(i,fortify_hist_border))
  
  proj_border = lapply(list.files('output/hist_proj_border',
                                  full.names = T,
                                  pattern = '*.shp$'),
                       shapefile)
  fortify_proj_border <- function(i){
    tmp = fortify(proj_border[[i]])
    tmp$variable = paste0('Year',years[i])
    return(tmp)
  }
  
  proj_border_df = do.call('rbind',lapply(i,
                                          fortify_proj_border))
  
  
  
  
  negtws = tws[which(tws$value<=0),]
  negtws$levels = cut(negtws$value,
                      breaks =c(-409,-200,
                                -100,-80,-60,-40,-20,0))
  library(RColorBrewer)
  fils = colorRampPalette(brewer.pal(9,'Spectral'))(7)
  
  cols = pal_lancet()(9)[c(1,7)]
  linetype = c(1,2)
  
  hist_border_df$col = 'Observation'
  proj_border_df$col = 'Projection'
    
  fontsize = 14
  text_theme = theme(
    axis.title = element_text(size = fontsize,color = 'black'),
    axis.text =  element_text(size = fontsize,color = 'black'),
    legend.text =  element_text(size = fontsize,color = 'black'),
    legend.title =  element_text(size = fontsize,color = 'black'),
    strip.text =  element_text(size = fontsize,color = 'black')
  )
  figslabels = data.frame(
   x = 70,
   y = 27.5,
   label = paste0('(',letters[2:9],')'),
   variable = paste0('Year',2009:2016)
  )
  
  p1 = ggplot()+
    geom_tile(data = negtws,
              aes(x = long,y = lat,fill = levels),
              alpha = 0.5 )+
    geom_polygon(data = tibet,
                 aes(x = long,y = lat,group = group),
                 size = 0.5,color = 'black',
                 fill = 'transparent')+
    geom_polygon(data = hist_border_df,
                 aes(x = long,y = lat,group = group,
                     color= col,
                     linetype = col),
                 size = 1.5,
                 fill = 'transparent')+
    geom_polygon(data = proj_border_df,
                 aes(x = long,y = lat,group = group,
                     color= col,
                     linetype = col),
                 size = 1.5,
                 fill = 'transparent')+
    geom_text(data = figslabels,
              aes(x = x,y = y,label =label),
              size = 5,
              color = 'black')+
    scale_fill_manual(values = fils)+
    scale_color_manual(values = cols)+
    facet_wrap(~variable,nrow = 2)+
    theme_bw()+
    text_theme+
    theme(axis.text.y = element_text(angle = 90,
                                     hjust = 0.5))+
    theme(legend.position = 'bottom',
          panel.grid = element_blank())+
    guides(fill = guide_legend(title = 'Annual sum of TWS',
                               title.position = 'top',
                               nrow = 2),
           color = guide_legend(title = 'Projection border',
                                title.position = 'top',
                                nrow = 1),
           linetype = guide_legend(title = 'Projection border',
                                   title.position = 'top',
                                   nrow = 1))+
    scale_x_continuous(breaks = c(70,80,90,100),
                       labels = paste0(c(70,80,90,100),'°E'))+
    scale_y_continuous(breaks = c(30,35,40),
                       labels = paste0(c(30,35,40),'°N'))+
    
    xlab('Longitude')+
    ylab("Latitude")
  
  
  output = 'main_plot/SI/figs_north_move_model_verify'
  dir.create(output)
  output = paste0(output,'/figs3.png')
  
  
  
  input_overarea = 'output/verifiy_northmove_model_hist_overratio/overarea.csv'
  overarea = as.data.frame(fread(input_overarea))
  
  bardf = data.frame(
    Year = 2009:2016,
    Overlapping_area = overarea$overarea,
    label = paste0(round(overarea$overarea,2),'\n',
                   round(overarea$overarea_ratio,2),'%')
  )
  
  fil2 = ggsci::pal_lancet(alpha = 0.8)(9)[1]
  library(ggrepel)
  
  figlabela = data.frame(
    x = 2009,
    y = 215,
    label = '(a)'
  )
  p2 = ggplot()+
    geom_bar(data = bardf,
             aes(x = Year,y = Overlapping_area),
             fill = fil2,
             position = position_dodge2(0.75),
             stat = 'identity',
             width = 0.75)+
    geom_text(data = figlabela,
              aes(x = x,y = y,label = label),
              size = 5,color= 'black',
              nudge_x = -0.5)+
    geom_text_repel(data = bardf,
              aes(x = Year,y = Overlapping_area,
                  label = label),
              size = 5,
              color = 'black',
              bg.color = 'white',
              force = F,
              bg.r = 0.15)+
    scale_x_continuous(breaks = seq(2009,2016,3))+
    theme_bw()+
    text_theme+
    theme(axis.text.y = element_text(angle = 90,hjust = 0.5))+
    
    xlab("Time")+
    ylab("Overlapping area (10 km )")
    
  p12 = plot_grid(p2,p1,
                  ncol = 1,
                  rel_widths = c(1,1),
                  rel_heights = c(0.5,1))
  
  png(output,
      height = 25,
      width = 27,
      units = 'cm',
      res = 800)
  print(p12)
  dev.off()
  
  
  
  
    
    
}
figs_posarea_project_result_multi_weight_model <- function(
  
){
  
}
figs_posarea_tws_intpms <- function(
  
){
  standard_fun_index_tws <-function(x){
    xs = x/sd(x)
    return(xs)
  }
  stand_fun2<-function(x){
    x = x/sd(x)
    return(x)
  }
  stand_fun_cmip6<-function(x){
    x = x/sds
    return(x)
  }
  stand_fun_snow <- function(x){
    x = (x-mean(x))/sd(x)
    return(x)
  }
  
  pos_area = as.data.frame(fread('output/pos_area/pos_area.csv'))
  pos_area = as.numeric(pos_area[,1])
  pos_area = pos_area / 10000
  #mean_pos = mean(pos_area)
  #sdpos = sd(pos_area)
  
  #pos_area = (pos_area-mean_pos)/(sdpos)
  
  twsdf = import_index_insource_tibet(var = 'tws_tibet')  
  twsdf = apply(twsdf,2,standard_fun_index_tws)
  twsdf = twsdf[,1:2]
  
  
  colnames(twsdf) = c('region1','region2')
  
  to_annual<-function(x){
    x = c(rep(NA,6),x)
    xm = matrix(x,nrow = 12)
    xa = apply(xm,2,sum,na.rm = T)
    return(xa)
  }
  
  twsann = apply(twsdf,2,to_annual)
  twsann = apply(twsann,2,stand_fun2)
  
  trainid = 1:round(0.8*14)
  testid = 8:14
  
  train = data.frame(
    pos_area = pos_area[trainid],
    twsann[trainid,])
  test = data.frame(
    pos_area = pos_area[testid],
    twsann[testid,])
 
  model = lm(pos_area ~., data = train)
  
  proj_test = predict(model,test)
  proj_train = predict(model,train)
  
  date = 2003:2016
  
  df1 = data.frame(
    date = date[trainid],
    PosareaTWS = train$pos_area,
    Project_PosareaTWS = proj_train
  )
  
  df2 = data.frame(
    date = date[testid],
    PosareaTWS = test$pos_area,
    Project_PosareaTWS = proj_test
  )
  
  
  cor1 = cor(df1$PosareaTWS,df1$Project_PosareaTWS)
  pvs1 = cor.test(df1$PosareaTWS,df1$Project_PosareaTWS)$p.value
  cor2 = cor(df2$PosareaTWS,df2$Project_PosareaTWS)
  pvs2 = cor.test(df2$PosareaTWS,df2$Project_PosareaTWS)$p.value
  
  dfcor1 = data.frame(
    x = c(2007,2010),
    y = c(225,70),
    label = c(paste0('cor: ',round(cor1,2),'(',scientific(pvs1,2),')'),
              paste0('cor: ',round(cor2,2),'(',scientific(pvs2,2),')')),
    type = c('Training period: 2003-2013',
             'Validation period: 2010-2016')
  )
  
  
  
  df1 = reshape2::melt(df1,'date')
  df2 = reshape2::melt(df2,'date')

  df1$type = 'Training period: 2003-2013'
  df2$type = 'Validation period: 2010-2016'
  
  df = rbind(df1,df2)

  cols = ggsci::pal_lancet()(9)[c(1,7)]
  
  figlabels = data.frame(
    x = c(2004,2016),
    y = c(250,175),
    label = c('(a)','(b)'),
    type = c('Training period: 2003-2013',
             'Validation period: 2010-2016')
  )
  
  fontsize = 14
  text_theme= theme(
    axis.text = element_text(size = fontsize,
                             color = 'black'),
    axis.title = element_text(size = fontsize,
                              color = 'black'),
    legend.text =  element_text(size = fontsize,
                                color = 'black'),
    legend.title =  element_text(size = fontsize,
                                 color = 'black')
  )
  
  p = ggplot()+
    geom_line(data = df,aes(x =date,y = value,
                            color = variable),
              size = 1.3)+
    geom_text(data = figlabels,
              aes(x = x,y  =y,label = label),
              size =4,color = 'black')+
    geom_text(data = dfcor1,
              aes(x = x,y  =y,label = label),
              size =4,color = 'black',hjust = 0)+
    theme_bw()+
    text_theme+
    theme(legend.position = 'bottom')+
    guides(color = guide_legend(title = ''))+
    scale_color_manual(values = cols)+
    facet_wrap(~type,nrow = 1,scales = 'free')+
    scale_x_continuous(breaks = c(2003,2006,2010,2013,2016))+
    xlab('Time')+
    ylab("Postive TWS area in TP (10 km )")
  
  
  output = 'main_plot/SI/figs_posarea_tws_intpms'
  dir.create(output)
  output = paste0(output,'/figs.png')
  
  png(output,
      height = 12,
      width = 22,
      units = 'cm',
      res = 800)
  print(p)
  dev.off()
  
  
  
  
  
  
  
   
}
figs_posarea_tws_intpms2 <- function(
  
){
  standard_fun_index_tws <-function(x){
    xs = x/sd(x)
    return(xs)
  }
  stand_fun2<-function(x){
    x = x/sd(x)
    return(x)
  }
  stand_fun_cmip6<-function(x){
    x = x/sds
    return(x)
  }
  stand_fun_snow <- function(x){
    x = (x-mean(x))/sd(x)
    return(x)
  }
  
  pos_area = as.data.frame(fread('output/pos_area/pos_area.csv'))
  pos_area = as.numeric(pos_area[,1])
  pos_area = pos_area / 10000
  #mean_pos = mean(pos_area)
  #sdpos = sd(pos_area)
  
  #pos_area = (pos_area-mean_pos)/(sdpos)
  
  twsdf = import_index_insource_tibet(var = 'tws_tibet')  
  twsdf = apply(twsdf,2,standard_fun_index_tws)
  twsdf = twsdf[,1:2]
  
  
  snow = import_index_insource_tibet('snowcover')
  snow = snow[,1:2]
  
  colnames(twsdf) = c('tws1','tws2')
  colnames(snow) = c('snow1','snow2')
  
  
  to_annual<-function(x){
    x = c(rep(NA,6),x)
    xm = matrix(x,nrow = 12)
    xa = apply(xm,2,sum,na.rm = T)
    return(xa)
  }
  
  twsann = apply(twsdf,2,to_annual)
  twsann = apply(twsann,2,stand_fun2)
  
  snowann = apply(snow,2,to_annual)
  snowann = apply(snowann,2,stand_fun_snow)
  
  trainid = 1:round(0.8*14)
  testid = 8:14
  
  train = data.frame(
    pos_area = pos_area[trainid],
    twsann[trainid,],
    snowann[trainid,])
  test = data.frame(
    pos_area = pos_area[testid],
    twsann[testid,],
    snowann[testid,])
  
  model = lm(pos_area ~., data = train)
  
  proj_test = predict(model,test)
  proj_train = predict(model,train)
  
  date = 2003:2016
  
  df1 = data.frame(
    date = date[trainid],
    PosareaTWS = train$pos_area,
    Project_PosareaTWS = proj_train
  )
  
  df2 = data.frame(
    date = date[testid],
    PosareaTWS = test$pos_area,
    Project_PosareaTWS = proj_test
  )
  
  
  cor1 = cor(df1$PosareaTWS,df1$Project_PosareaTWS)
  pvs1 = cor.test(df1$PosareaTWS,df1$Project_PosareaTWS)$p.value
  cor2 = cor(df2$PosareaTWS,df2$Project_PosareaTWS)
  pvs2 = cor.test(df2$PosareaTWS,df2$Project_PosareaTWS)$p.value
  
  library(scales)
  dfcor1 = data.frame(
    x = c(2007,2010),
    y = c(225,70),
    label = c(paste0('cor: ',round(cor1,2),'(',scientific(pvs1,2),')'),
              paste0('cor: ',round(cor2,2),'(',scientific(pvs2,2),')')),
    type = c('Training period: 2003-2013',
             'Validation period: 2010-2016')
  )
  
  
  
  df1 = reshape2::melt(df1,'date')
  df2 = reshape2::melt(df2,'date')
  
  df1$type = 'Training period: 2003-2013'
  df2$type = 'Validation period: 2010-2016'
  
  df = rbind(df1,df2)
  
  cols = ggsci::pal_lancet()(9)[c(1,7)]
  
  figlabels = data.frame(
    x = c(2004,2016),
    y = c(250,175),
    label = c('(a)','(b)'),
    type = c('Training period: 2003-2013',
             'Validation period: 2010-2016')
  )
  
  fontsize = 14
  text_theme= theme(
    axis.text = element_text(size = fontsize,
                             color = 'black'),
    axis.title = element_text(size = fontsize,
                              color = 'black'),
    legend.text =  element_text(size = fontsize,
                                color = 'black'),
    legend.title =  element_text(size = fontsize,
                                 color = 'black')
  )
  
  p = ggplot()+
    geom_line(data = df,aes(x =date,y = value,
                            color = variable),
              size = 1.3)+
    geom_text(data = figlabels,
              aes(x = x,y  =y,label = label),
              size =4,color = 'black')+
    geom_text(data = dfcor1,
              aes(x = x,y  =y,label = label),
              size =4,color = 'black',hjust = 0)+
    theme_bw()+
    text_theme+
    theme(legend.position = 'bottom')+
    guides(color = guide_legend(title = ''))+
    scale_color_manual(values = cols)+
    facet_wrap(~type,nrow = 1,scales = 'free')+
    scale_x_continuous(breaks = c(2003,2006,2010,2013,2016))+
    xlab('Time')+
    ylab("Postive TWS area in TP (10 km )")
  
  
  output = 'main_plot/SI/figs_posarea_tws_intpms'
  dir.create(output)
  output = paste0(output,'/figs2.png')
  
  png(output,
      height = 12,
      width = 22,
      units = 'cm',
      res = 800)
  print(p)
  dev.off()
  
  
  
  
  
  
  
  
}
figs_projeted_fut_temporal_t_tpm12 <- function(
  
){
  files = list.files('output/multi_weighted_cmip6_t_in_tpm12',
                     full.names = T)
  
  proj_tpm1_245 = read.csv(files[1],header = T)
  proj_tpm1_585 = read.csv(files[2],header = T)
  proj_tpm2_245 = read.csv(files[3],header = T)
  proj_tpm2_585 = read.csv(files[4],header = T)
  
  proj_tpm1_245 = proj_tpm1_245[199:1152,]
  proj_tpm1_585 = proj_tpm1_585[199:1152,]
  proj_tpm2_245 = proj_tpm2_245[199:1152,]
  proj_tpm2_585 = proj_tpm2_585[199:1152,]
  
  
  date = seq(as.Date('2020-01-01'),
             as.Date('2099-06-01'),
             '1 month')
  
  df1 = data.frame(
    date = date,
    SSP245 = proj_tpm1_245[,2],
    SSP585 = proj_tpm1_585[,2]
  )
  
  df2 = data.frame(
    date = date,
    SSP245 = proj_tpm2_245[,2],
    SSP585 = proj_tpm2_585[,2]
  )
  
  df1 = reshape2::melt(df1,'date')
  df2 = reshape2::melt(df2,'date')
  
  df1$type = 'Projected T in TPM1 during 2020-2099'
  df2$type = 'Projected T in TPM2 during 2020-2099'
  
  df = rbind(df1,df2)
  library(ggsci)
  cols = pal_lancet()(9)[c(4,7)]
  
  figslabel = data.frame(
    x = date[5],
    y = 2,
    label = c("(a)",'(b)'),
    type = c('Projected T in TPM1 during 2020-2099',
             'Projected T in TPM2 during 2020-2099')
  )
  p = ggplot()+
    geom_line(data = df,
              aes(x = date,y = value,color = variable),
              size = 1.3)+
    geom_text(data = figslabel,
              aes(x = x,y = y,label = label),
              size = 5,
              color = 'black')+
    scale_color_manual(values = cols)+
    facet_wrap(~type,nrow = 1)+
    theme_bw()+
    guides(color = guide_legend(title = ''))+
    xlab('Time')+
    ylab('Indices')
  
  fontsize = 14 
  text_theme = theme(
    axis.text = element_text(size = fontsize,color = 'black'),
    axis.title = element_text(size = fontsize,color = 'black'),
    legend.text = element_text(size = fontsize,color = 'black'),
    legend.title = element_text(size = fontsize,color = 'black'),
    strip.text = element_text(size = fontsize,color = 'black')
  )
  
  p = p+ text_theme+
    theme(legend.position = 'bottom')
  
  output = 'main_plot/SI/figs_projeted_fut_temporal_t_tpm12'
  dir.create(output)
  output_main = paste0(output,'/figs_projeted_fut_temporal_t_tpm12.png')
  
  png(output_main,
      height = 12,
      width = 25,
      units = 'cm',
      res = 800)
  print(p)
  dev.off()
  
  
  
  
  
}
figs_souther_intercept_scheme<-function(
  
){
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/calc_tws_in_bigsubs.R")
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/cor_analysis_twssubs_pme.R")
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/mmk_trend_tws_eurasia.R")
  library(ggrepel)
  # inputs
  input_pmeato = 'main_plot_data/fig2/stand_pmeato.csv'
  input_hsrtws = 'main_plot_data/fig2/stand_hsrtws.csv'
  input_twstp = 'main_plot_data/fig2/stand_twstp.csv'
  
  
  pmeato = as.data.frame(fread(input_pmeato))
  hsrtws = as.data.frame(fread(input_hsrtws))
  twstp = as.data.frame(fread(input_twstp))
  twstp = twstp[,c(1,2,4)]
  
  pmeato3 = pmeato[,3]
  
  colnames(hsrtws) = paste0('HSR',1:12)
  colnames(twstp) = c('TWS_TP_Moun1','TWS_TP_Moun2',
                      'TWS_TP_Surface')
  
  date = seq(as.Date('2003-01-01'),
             as.Date('2017-06-01'),
             '1 month')
  date = date[-c(1:6,169:174)]
  
  hsrtws1 = data.frame(
    Time = date,
    hsrtws[,1:6]
  )
  
  hsrtws2 = data.frame(
    Time = date,
    hsrtws[,7:12]
  )
  
  df1 = data.frame(
    Time = date,
    twstp,
    PME_NATO3 = pmeato3
  )
  
  df1m = reshape2::melt(df1,
                        'Time')
  colnames(df1m) = c('Time','linecol','value')
  
  
  hsrtws1m = reshape2::melt(hsrtws1,'Time')
  hsrtws2m = reshape2::melt(hsrtws2,'Time')
  
  hsrtws_mean = apply(cbind(hsrtws1[,2:7],
                            hsrtws2[,2:7]),1,mean)
  hsrtws_max = apply(cbind(hsrtws1[,2:7],
                           hsrtws2[,2:7]),1,max)
  hsrtws_min = apply(cbind(hsrtws1[,2:7],
                           hsrtws2[,2:7]),1,min)
  
  dfhsrtws_mean = data.frame(
    Time = hsrtws1$Time,
    HSRTWS_mean = hsrtws_mean
  )
  dfhsrtws_maxmin = data.frame(
    Time = hsrtws1$Time,
    HSRTWS_max = hsrtws_max,
    HSRTWS_min = hsrtws_min
  )
  
  dfhsrtws_mean$linecol = 'TWS_HSR_mean'
  
  colnames(hsrtws1m) = c('Time','linecol','value')
  colnames(hsrtws2m) = c('Time','linecol','value')
  hsrtws1m$type = hsrtws1m$linecol
  hsrtws2m$type = hsrtws2m$linecol
  
  library(ggsci)
  linecol = pal_lancet()(9)
  linecol = colorRampPalette(linecol)(20)
  
  hsrtws1m$linecol = "TWS_HSR"
  hsrtws2m$linecol = 'TWS_HSR'
  
  linecol = c('TWS_TP_Moun1'=linecol[8],
              'TWS_TP_Moun2'=linecol[9],
              'TWS_TP_Surface'=linecol[15], 
              'PME_NATO3' = linecol[1],
              'TWS_HSR_mean' = linecol[7])  
  linesize = c('TWS_TP_Moun1'= 1.3,
               'TWS_TP_Moun2'=1.3,
               'TWS_TP_Surface'=1.3, 
               'PME_NATO3' = 1.3,
               'TWS_HSR_mean' = 1.3)
  
  cal_varying_rate <- function(x){
    len = length(x)
    x = (x[len]-x[1])/x[1] *100
    return(x)
  }
  ret_first_point <- function(x){
    len = length(x)
    x=  x[1]
    return(x)
  }
  ret_last_point <- function(x){
    len = length(x)
    x=  x[len]
    return(x)
  }
  
  vr_tws_hsr = cal_varying_rate(dfhsrtws_mean[,2])
  vr_tws_tp = apply(twstp,2,cal_varying_rate)
  vr_tws_tp[3] = abs(vr_tws_tp[3])
  
  ftws_hsr = ret_first_point(dfhsrtws_mean[,2])
  ftws_tp = apply(twstp,2,ret_first_point)
  ltws_hsr = ret_last_point(dfhsrtws_mean[,2])
  ltws_tp = apply(twstp,2,ret_last_point)
  
  
  dfpstat1 = data.frame(
    region = c('HSRs','TPM1','TPM2',
               'TPS'),
    regionid = c(1,3,5,7),
    firstp = c(ftws_hsr,ftws_tp),
    lastp = c(ltws_hsr,ltws_tp),
    linecol = c('TWS_HSR_mean','TWS_TP_Moun1',
                'TWS_TP_Moun2','TWS_TP_Surface')
  )
  
  
  
  dfpstat = data.frame(
    region = c('HSRs','TPM1','TPM2',
               'TPS'),
    regionid = c(1,3,5,7),
    vrate = c(vr_tws_hsr,vr_tws_tp),
    linecol = c('TWS_HSR_mean','TWS_TP_Moun1',
                'TWS_TP_Moun2','TWS_TP_Surface')
  )
  
  seg1h = data.frame(
    x = rep(c(1,3,5,7) - 0.5,2),
    xend = rep(c(1,3,5,7) + 0.5,2),
    y = c(dfpstat1$firstp,dfpstat1$lastp)
  )
  seg1v = data.frame(
    x = c(1,3,5,7),
    y = dfpstat1$firstp,
    yend = dfpstat1$lastp
  )
  
  label_vrate = data.frame(
    x = c(1,3,5,7)- 0.4,
    y = (dfpstat1$firstp + dfpstat1$lastp)/2,
    label = round(dfpstat$vrate,2)
  )
  label_vrate$label = paste0(
    label_vrate$label,'%'
  )
  label_vrate$label[4] = paste0('+',label_vrate$label[4]) 
  
  ppoint = ggplot()+
    geom_segment(data = seg1h,
                 aes(x = x,xend = xend,y = y,
                     yend = y),size= 0.5,
                 color = 'black')+
    geom_segment(data = seg1v,
                 aes(x = x,xend = x,y = y,
                     yend = yend),size= 0.5,
                 color = 'black',
                 arrow = arrow(20,
                               unit(0.5,'cm'),
                               type = 'open'))+
    geom_point(data = dfpstat1,
               aes(x = regionid,
                   y = firstp,color = linecol),
               size = 2.5,shape = 16)+
    geom_point(data = dfpstat1,
               aes(x = regionid,
                   y = firstp,color = linecol),
               size = 4,shape = 1)+
    geom_point(data = dfpstat1,
               aes(x = regionid,
                   y = lastp,color = linecol),
               size = 2.5,shape = 16)+
    geom_point(data = dfpstat1,
               aes(x = regionid,
                   y = lastp,color = linecol),
               size = 4,shape = 1)+
    scale_color_manual(values = linecol)+
    scale_x_continuous(breaks = c(1,3,5,7),
                       labels = dfpstat$region,
                       limits = c(0,8))+
    geom_text(data = label_vrate,
              aes(x = x,y = y,label = label),
              size = 5,angle= 90)+
    theme_bw()+
    theme(legend.position = 'none')
  
  
  
  pline1 = ggplot()+
    geom_ribbon(data = dfhsrtws_maxmin,
                aes(x = Time,ymin = HSRTWS_min,
                    ymax = HSRTWS_max),
                fill = linecol[5],
                alpha = 0.2)+
    geom_line(data = df1m[which(df1m$linecol == 'PME_NATO3'),],
              aes(x = Time,y= value,col = linecol,
                  size= linecol))+
    geom_line(data = dfhsrtws_mean,
              aes(x = Time,y = HSRTWS_mean,
                  col = linecol,
                  size = linecol))+
    scale_color_manual(values = linecol)+
    scale_size_manual(values =linesize)+
    theme_bw()
  
  plinetp = ggplot()+
    geom_line(data = df1m,
              aes(x = Time,y= value,col = linecol,
                  size = linecol))+
    scale_color_manual(values = linecol)+
    scale_size_manual(values = linesize)+
    theme_bw()
  
  # mmktrends across eurasia
  
  negmmk = as.data.frame(
    fread('main_plot_data/fig2/negmmk_eurasia.csv')
  )
  colnames(negmmk) = c('long','lat','TWS_MMK')
  
  negmmk$levels = cut(negmmk$TWS_MMK,
                      breaks = c(-557,seq(-25,0,2.5)))
  nclass = length(unique(negmmk$levels))
  library(RColorBrewer)
  filmmk = colorRampPalette(
    brewer.pal(9,'Spectral')[1:5]
  )(nclass*5)
  filmmk = filmmk[seq(1,nclass*4,4)]
  
  pmemmk = as.data.frame(
    fread('main_plot_data/fig2/negmmk_nato_trend.csv')
  )
  
  pmemmk$levels = cut(pmemmk$mmk,
                      breaks =c(-83,seq(-20,2,2)))
  nclass2 = length(unique(pmemmk$levels))
  filpme = colorRampPalette(
    brewer.pal(9,'Spectral')
  )(nclass2*4)
  
  filpme = filpme[seq(1,nclass2*2,2)]
  
  
  
  world = shp_management('world')
  world = crop(world,extent(-180,180,0,90))
  tibet = shp_management('tibet')
  
  neg_shps = 'shp/cluster_tws_neg_shp_deter'
  neg_shps = list.files(neg_shps,full.names = T,
                        pattern = '*.shp$')
  neg_shps = lapply(neg_shps,shapefile)   
  neg_shps = neg_shps[c(1,2)]
  neg_shps = do.call('bind',neg_shps)
  
  # input subs 
  bigsubs = 'shp/big_scale_subs/'
  hsrid = as.data.frame(fread('main_plot_data/fig2/HSRid.csv'))
  hsrid = as.numeric(hsrid$HSRid)
  
  bigsubs = paste0(bigsubs,
                   'region',1:15,'.shp')
  bigsubs = bigsubs[-14]
  bigsubs = bigsubs[hsrid]
  bigsubs = lapply(bigsubs,shapefile)
  
  bigsubs_set = bigsubs[1:12]
  bigsubs_set = do.call('bind',bigsubs_set)
  i = 1:length(bigsubs)
  loc_center_subs <- function(i){
    tmp = bigsubs[[i]]
    ex = extent(tmp)
    cenlong = (ex[1]+ex[2])/2
    cenlat = (ex[3]+ ex[4])/2
    label = paste0('(',letters[i+6],')')
    
    retdf = data.frame(
      long = cenlong,
      lat = cenlat,
      label = label
    )
    return(retdf)
    
    
  }
  
  subslabel = do.call(rbind,
                      lapply(i,loc_center_subs))
  
  subslabel_set = subslabel[8:12,]
  
  bigsubs = do.call('bind',bigsubs)
  
  seg_leg = data.frame(
    x = 130+10,
    xend = 170+10,
    y = 20,
    xlabel = 150+10,
    ylabel = 10,
    label = 'Water Vapor \n Trajectory'
  )
  
  library(ggsci)
  col_traj = pal_material('blue')(9)
  col_traj = colorRampPalette(col_traj)(9*3)
  col_traj = col_traj[seq(2,9*3,2)][4:12]
  
  library(ggnewscale)
  pmap = ggplot()+
    geom_polygon(data = world,
                 aes(x = long,y = lat,group = group),
                 color = 'black',
                 size = 0.5,
                 fill = 'grey90',
                 alpha = 0.7)+
    geom_tile(data = negmmk,
              aes(x = long,y = lat,
                  fill = levels))+
    geom_polygon(data = tibet,
                 aes(x = long,y = lat,group = group),
                 color = 'black',
                 size = 0.5,
                 fill = 'transparent')+
    geom_polygon(data = neg_shps,
                 aes(x = long,y = lat,group = group),
                 color = 'black',
                 size = 0.5,
                 fill = 'transparent')+
    
    scale_x_continuous(breaks = c(-105,-20,105),
                       labels = c(paste0(c(105,20),'°W'),
                                  #0,
                                  paste0(105,'°E')))+
    
    scale_y_continuous(breaks = c(0,30,60,90),
                       labels = c(0,paste0(c(30,60,90),'°N')))+
    scale_fill_manual(values = filmmk,
                      guide = guide_legend(
                        title= 'TWS_MMK_Trend',
                        title.position = 'top',
                        nrow = 2,order=1
                      ))+
    theme_void()
  
  pmap = pmap + 
    new_scale_fill()+
    geom_tile(data =pmemmk,
              aes(x = long,y = lat,
                  fill = levels))+
    scale_fill_manual(values = filpme,
                      guide = guide_legend(
                        title = 'PME_NATO_MMK_Trend',
                        title.position = 'top',
                        nrow = 2,order = 2
                      ))
  
  fontsize = 14
  text_theme = theme(
    legend.text = element_text(size = fontsize,
                               color = 'black'),
    legend.title =  element_text(size = fontsize,
                                 color = 'black'),
    axis.text =  element_text(size = fontsize,
                              color = 'black'),
    axis.title =  element_text(size = fontsize,
                               color = 'black'),
    strip.text =  element_text(size = fontsize,
                               color = 'black')
  )
  pmap = pmap + 
    text_theme+
    xlab('Longitude')+
    ylab('Latitude')+
    theme(legend.position = 'bottom')
  
  cur_df = as.data.frame(
    fread('/home/share/R_project/xinjiang_vapor/analysis_output/fig4/current_df.csv')
  )
  
  idless50 = which(cur_df$lat <= 50 &
                     cur_df$lat >= 10)
  cur_df = cur_df[idless50,]
  
  idbig1 = which(cur_df$u>0 &
                   cur_df$v >0)
  idbig2 = which(cur_df$u<0 &
                   cur_df$v >0)
  idbig3 = which(cur_df$u>0 &
                   cur_df$v <0)
  
  
  cur_df1 = cur_df[idbig1,]
  cur_df2 = cur_df[idbig2,]
  cur_df3 = cur_df[idbig3,]
  
  cur_df3 = cur_df3[
    which(cur_df3$long > -20 &
            cur_df3$lat <= 40 &
            cur_df3$lat >=30),
  ]
  
  cid1 = seq(1,nrow(cur_df1),40)
  cid2 = seq(1,nrow(cur_df2),200)
  cid3 = seq(1,nrow(cur_df3),30)
  
  cur_df1 = cur_df1[cid1,]
  cur_df2 = cur_df2[cid2,]
  cur_df3 = cur_df3[cid3,]
  
  
  cols_cur = c('#2988AE','#30376E','#4169E1')
  
  # import traj 
  trajdf = as.data.frame(
    fread('whole_time_traj/whole_time_traj.csv')
  )
  trajdf$region[which(is.na(trajdf$region))] = 'NA'
  
  pmap2leg = pmap 
  
  
  #col_traj = brewer.pal(9,'Spectral')
  
  pmap2 = pmap + 
    theme_void()+
    theme(legend.position = 'none')
  
  output = 'main_plot/SI/figs_southern_intercept_scheme'
  dir.create(output)
  output_leg = paste0(output,'/figs_trend3_leg.png')
  
  output = paste0(output,'/figs_trend3.png')
  
  png(output,
      height = 18,
      width = 27,
      units = 'cm',
      res = 800)
  print(pmap2)
  dev.off()
  
  png(output_leg,
      height = 18,
      width = 40,
      units = 'cm',
      res = 800)
  print(pmap2leg)
  dev.off()
  
  
  output = 'main_plot/SI/figs_southern_intercept_scheme'
  dir.create(output)
  output = paste0(output,'/figs_trend4_without_back.svg')
  
  ggsave(output,plot = pmap2,width = 27,
         height = 18,units = 'cm',dpi = 800)
  
  
  
}
figs_study_regions <- function(
  
){
  neg_shps = list.files('shp/cluster_tws_neg_shp_deter',
                        pattern = '*.shp$',full.names =T)
  neg_shps = lapply(neg_shps[1:3],shapefile)
  tpm1 = neg_shps[[1]]
  tpm2 = neg_shps[[2]]
  ntp = neg_shps[[3]]
  
  neg_shps = do.call(bind,neg_shps)
  tibet = shp_management('tibet')
  ctp = tibet - neg_shps
  hma = shp_management('HMA')
  mounts = stack('Data/res_global_mountains/res_05_highmounts.nc')
  hma = mask(crop(mounts,hma),hma)
  
  ex1 = extent(hma)

  hmar = raster(ncol = 448,nrow = 223)
  extent(hmar) = extent(hma)
  hma2 = resample(hma,hmar)
  
  #hma1 = rasterToPolygons(hma,fun = function(x){x>=30})
  hma  =as.data.frame(hma2,xy = T)
  colnames(hma) = c('long','lat','mount')
  naid = which(is.na(hma$mount))
  hma = hma[-naid,]
  
  ex = extent(tibet)
  cen_tibet = cbind(
    long = (ex[1]+ex[2])/2,
    lat = (ex[3]+ex[4])/2
  )
  ex_tibet= extent(hma)
  
  #hma = fortify(hma)
  tibet = fortify(tibet)
  tpm1 = fortify(tpm1)
  tpm2 = fortify(tpm2)
  ntp = fortify(ntp)
  ctp = fortify(ctp)
  
  hma$fill = "High Mountain Asia (HMA)"
  tpm1$fill = 'Southwest HMA'
  tpm2$fill = 'Southeast HMA'
  ntp$fill = 'North Tibet Plateau'
  ctp$fill = 'Central Tibet Plateau (TP)'
  
  fills = c("High Mountain Asia (HMA)"='#86719F',
            'High Mountains in Southwest Tibet Plateau' ='#AF4B4B',
            'High Mountains in Southeast Tibet Plateau' ='#E9A968',
            'North Tibet Plateau' ='#D4A2A0',
            'Central Tibet Plateau'='#A5C9E0')#FEF7D0
  
  
  p2map = get_googlemap(center = c(cen_tibet[1],
                                   cen_tibet[2]),
                        zoom = 3,
                        maptype = 'terrain',
                        color = 'bw',
                        language = 'en-En',
                        style=c(feature=c("administrative.country",
                                          "administrative.city"),
                                element="labels",
                                visibility="off"))
  
  fontsize = 14
  text_theme = theme(
    axis.text = element_text(size = fontsize,color = 'black'),
    axis.title = element_text(size= fontsize,color = 'black'),
    legend.text =  element_text(size = fontsize,color = 'black'),
    legend.title =  element_text(size = fontsize,color = 'black')
  )
  
  
  p = ggmap(p2map,alpha = 1)+
    geom_tile(data = hma,
                 aes(x = long,y = lat,fill = fill),
                 alpha = 0.5,
                 color = 'transparent')+
    geom_polygon(data = tpm1,
                 aes(x = long,y = lat,group =group),
                 fill = 'transparent',
                 color = 'black',
                 size = 1)+
    geom_polygon(data = tpm2,
                 aes(x = long,y = lat,group =group),
                 fill = 'transparent',
                 color = 'black',
                 size = 1)+
    geom_polygon(data = ntp,
                 aes(x = long,y = lat,group =group),
                 fill = 'transparent',
                 color = 'black',
                 size = 1)+
    geom_polygon(data = ctp,
                 aes(x = long,y = lat,group =group),
                 fill = 'transparent',
                 color = 'black',
                 size = 1)+
    scale_x_continuous(breaks = seq(60,100,20),
                       labels = paste0(seq(60,100,20),
                                       '°E'),
                       limits = c(ex_tibet[1]-1,ex_tibet[2]+1))+
    scale_y_continuous(breaks = c(25,34,45),
                       labels = paste0(c(25,35,45),
                                       '°N'),
                       limits = c(ex_tibet[3]-1,ex_tibet[4]+1))+
    scale_fill_manual(values = fills)+
    theme_bw()+
    text_theme+
    theme(axis.text.y = element_text(angle = 90,hjust = 0.5),
          panel.grid = element_blank(),
          panel.background = element_blank())+
    xlab('Longitude')+
    ylab('Latitude')
  
  p = p+theme(
    legend.position = 'bottom'
  )+guides(
    fill = guide_legend(title = 'Study regions',
                        title.position = 'top')
  )
  #p = p+coord_fixed(1.3)
  
  
  output = 'main_plot/figs_study_regions'
  dir.create(output)
  output = paste0(output,'/fig3.png')
  
  
  
  png(output,
      height = 22,
      width = 28.6,
      units = 'cm',
      res = 800)
  print(p)
  dev.off()
  
  
  
  
  
  
}
figs_temperature_link_ocean_tpm <- function(
  
){
  # input temperature in tibet
  library(data.table)
  input_temp_tibet= 'output/mean_temperature_tibet/mean_temper_box.csv'
  input_temp_ato  = 'output/mean_temperature_ato/mean_temper_box.csv'
  input_temp_io = 'output/mean_temperature_io/mean_temper_box.csv'
  
  temp_tibet = as.data.frame(fread(input_temp_tibet))
  temp_ato = as.data.frame(fread(input_temp_ato))
  temp_io = as.data.frame(fread(input_temp_io))
  
  date = seq(as.Date('2003-07-01'),
             as.Date('2016-12-01'),'1 month')
  
  dfline1 = data.frame(
    date = date,
    Temperature_TPM1 = temp_tibet[,1],
    Temperature_NATO1 = temp_ato[,1]
  )
  
  dfline2 = data.frame(
    date = date,
    Temperature_TPM2 = temp_tibet[,2],
    Temperature_IO2 = temp_io[,2]
  )
  
  cor1 = cor(dfline1$Temperature_TPM1,
             dfline1$Temperature_NATO1)
  cor2 = cor(dfline2$Temperature_TPM2,
             dfline2$Temperature_IO2)
  pvs1 = cor.test(dfline1$Temperature_TPM1,
                  dfline1$Temperature_NATO1)$p.value
  pvs2 = cor.test(dfline2$Temperature_TPM2,
                  dfline2$Temperature_IO2)$p.value
  
  dfcor1 = data.frame(
    x = date[20],
    y = 2.5,
    label = c(paste0('cor: ',round(cor1,2),
                     '(',scientific(pvs1,2),')'),
              paste0('cor: ',round(cor2,2),
                     '(',scientific(pvs2,2),')')),
    type = c('(a)','(b)')
  )  
  
  
  dfline1  = reshape2::melt(dfline1,'date')
  dfline2 = reshape2::melt(dfline2,'date')
  
  dfline1$col = rep(c('Temperature_TPM1','Temperature_NATO1'),
                    each = 162)
  dfline2$col = rep(c('Temperature_TPM2','Temperature_IO2'),
                    each = 162)
  dfline1$type = '(a)'
  dfline2$type = '(b)'
  
  dfline = rbind(dfline1,dfline2)
  
  library(RColorBrewer)
  library(ggsci)
  cols = pal_lancet()(9)
  cols= colorRampPalette(cols)(20)
  
  cols = c('Temperature_TPM1' = cols[8],
           'Temperature_TPM2' = cols[9],
           'Temperature_NATO1' = cols[14],
           'Temperature_IO2' = cols[16])
  
  fontsize = 14
  text_theme = theme(
    axis.title = element_text(size = fontsize,color = 'black'),
    axis.text =  element_text(size = fontsize,color = 'black'),
    legend.text =  element_text(size = fontsize,color = 'black'),
    legend.title =  element_text(size = fontsize,color = 'black'),
    strip.text =  element_blank()
  )
  
  figslabel =data.frame(
    x = date[5],
    y = 2.8,
    label = c('(c)','(d)'),
    type = c('(a)','(b)')
  )
  
  pline = ggplot()+
    geom_line(data = dfline,
              aes(x = date,y = value,
                  color = variable),
              size = 1.3)+
    geom_text(data= figslabel,
              aes(x= x,y = y,label= label),
              size = 4,color = 'black')+
    geom_text(data= dfcor1,
              aes(x= x,y = y,label= label),
              size = 4,color = 'black',hjust = 0)+
    theme_bw()+
    scale_color_manual(values = cols)+
    facet_wrap(~type,nrow = 1)+
    theme(legend.position = 'bottom')+
    guides(color = guide_legend(title = '',nrow = 2))+
    text_theme+
    xlab("Time")+
    ylab("Temperature in TPM")

  # import mca analysis result
  input = 'output/mca_temperature_ocean_land'
  input_te_land = paste0(input,'/ajs_full_mat.csv')
  input_te_oce = paste0(input,'/bjs_full_mat.csv')
  input_se_land = paste0(input,'/modu.csv')
  input_se_oce = paste0(input,'/modv.csv')
  input_land_loc = paste0(input,'/eura_loc.csv')
  input_oce_loc = paste0(input,'/atoio_loc.csv')
  explain_covar = paste0(input,'/explained covariance.csv')
    
  teland = as.data.frame(fread(input_te_land))
  teoce = as.data.frame(fread(input_te_oce))
  seland= as.data.frame(fread(input_se_land))
  seoce = as.data.frame(fread(input_se_oce))
  landloc = as.data.frame(fread(input_land_loc))
  oceloc = as.data.frame(fread(input_oce_loc))
  exco = read.csv(explain_covar,header = T)
  
  dfte = data.frame(
    date = date,
    T_ocean = as.numeric(teoce[1,]),
    T_land = as.numeric(teland[1,])
  )
  
  dfte = reshape2::melt(dfte,'date')
  
  dfseland = seland[which(seland$variable == 'Model_left1'),]
  dfseoce = seoce[which(seoce$variable == 'Model_right1'),]
  
  dfse = rbind(dfseland,dfseoce)
  dfse$levels = cut(dfse$value,
                    breaks = c(-0.006,-0.003,0,
                               0.003,0.006))
  
  dfse$type = 'Spatial Mode 1: T in ocean and land'
  dfte$type = paste0('Temporal Mode 1 (',round(exco[1,2],2),'%)')
  
  world = shp_management('world')
  world = crop(world,extent(-180,180,0,90))
  world = fortify(world)
  world$type = 'Spatial Mode 1: T in ocean and land'
  
  cors = cor(as.numeric(teland[1,]),
             as.numeric(teoce[1,]))
  pvs = cor.test(as.numeric(teland[1,]),
                 as.numeric(teoce[1,]))$p.value
  
  dfcor= data.frame(
    x = date[90],
    y = 500,
    label = paste0('cor: ',round(cors,2),'(',
                   scientific(pvs,2,),')'),
    type = paste0('Temporal Mode 1 (',round(exco[1,2],2),'%)')
    
  )
  
  figslabelp2 = data.frame(
    x = date[5],
    y = 500,
    label = '(b)',
    type =  paste0('Temporal Mode 1 (',round(exco[1,2],2),'%)')
    
  )
  lines = ggsci::pal_lancet()(9)[c(1,7)]
  p2 = ggplot()+
    geom_line(data = dfte,
              aes(x = date,y = value,color = variable),
              size = 1.3)+
    geom_text(data = dfcor,
              aes(x =x,y = y,
                  label = label),
              size = 4,color = 'black',
              hjust = 0)+
    geom_text(data = figslabelp2,
              aes(x =x,y = y,
                  label = label),
              size = 4,color = 'black',
              hjust = 0.5)+
    scale_color_manual(values = lines)+
    #facet_wrap(~type,nrow = 1)+
    theme_bw()+
    text_theme+
    theme(axis.text.y = element_text(angle = 90,
                                     hjust = 0.5))+
    theme(strip.text = element_text(size = fontsize,
                                    color = 'black'))+
    theme(legend.position = 'none')+
    ylab("Time coefficients (27.66%)")+
    xlab('Time')
  
  fils = colorRampPalette(brewer.pal(9,'Spectral'))(4)
  tibet = shp_management('tibet')
  cluster_ato = shp_management('cluster_ato')[[1]]
  cluster_io = shp_management('cluster_io')[[2]]
  neg_shps = shp_management('neg_shps')
  figslabel3 = data.frame(
    x = -170,
    y = 80,
    label= '(a)'
  )
  
  id_center_loc <- function(x){
    x= extent(x)
    cenlon = (x[1]+x[2])/2
    cenlat = (x[3]+x[4])/2
    ret = data.frame(long = cenlon,
                     lat = cenlat)
    return(ret)
  }
  
  cen_ato = id_center_loc(cluster_ato)
  cen_io = id_center_loc(cluster_io)
  
  cen_label = rbind(cen_ato,
                    cen_io)
  cen_label$label = c("NATO1",'IO2')
  p3 = ggplot()+
    geom_tile(data = dfse,
              aes(x = long,y= lat,fill = levels))+
    geom_polygon(data = world,
                 aes(x= long,y = lat,group = group),
                 size =0.3,color = 'black',
                 fill = 'transparent')+
    geom_polygon(data = tibet,
                 aes(x= long,y = lat,group = group),
                 size =0.3,color = 'black',
                 fill = 'transparent')+
    geom_polygon(data = cluster_ato,
                 aes(x= long,y = lat,group = group),
                 size =0.3,color = 'black',
                 fill = 'transparent')+
    geom_polygon(data = cluster_io,
                 aes(x= long,y = lat,group = group),
                 size =0.3,color = 'black',
                 fill = 'transparent')+
    geom_polygon(data = neg_shps,
                 aes(x= long,y = lat,group = group),
                 size =0.3,color = 'black',
                 fill = 'transparent')+
    geom_text(data = figslabel3,
              aes(x = x,y= y,label = label),
              size =4,color = 'black')+
    geom_text_repel(data =cen_label,
                    aes(x = long,y = lat,label = label
                        ),
                    color = 'black',
                    bg.color = 'white',
                    force = F,
                    bg.r = 0.15)+
    scale_fill_manual(values = fils)+
    theme_bw()+
    theme(panel.grid = element_blank())+
    text_theme+
    theme(axis.text.y = element_text(angle = 90,hjust = 0.5))+
    scale_x_continuous(breaks = c(-100,0,100),
                       labels = c('100°W','0°','100°E'))+
    scale_y_continuous(breaks = seq(0,80,40),
                       labels = paste0(seq(0,80,40),'°N'))+
    theme(legend.position = 'none')+
    guides(fill = guide_legend(title = 'Spatial coefficient'))+
    facet_wrap(~type,nrow =1)+
    xlab("Longitude")+
    ylab("Latitude")
    
  p23 = plot_grid(p2,pline1,
                  nrow  = 1,
                  rel_widths = c(1,1.8),
                  rel_heights = c(1,1)) 
  pline1 = pline+
    theme(legend.position = 'none')
  p123 = plot_grid(p3,p23,
                   ncol  = 1,
                   rel_widths = c(1,1),
                   rel_heights = c(1,0.7)) 
  
  output = 'main_plot/SI/figs_temperature_link_ocean_tpm'
  dir.create(output)
  output = paste0(output,'/figs.png')
  
  png(output,
      height = 22,
      width = 25,
      units = 'cm',
      res = 800
      )
  print(p123)
  dev.off()
  
  p1leg = p3+theme(
    legend.position = 'bottom'
  )
  
  p2leg = p2+theme(
    legend.position = 'bottom'
  )  
  
  p3leg = pline + 
    theme(legend.position = 'bottom')
  
  library(ggpubr)
  p1leg = as_ggplot(get_legend(p1leg))
  p2leg = as_ggplot(get_legend(p2leg))
  p3leg = as_ggplot(get_legend(p3leg))
  
  output_leg1 = 'main_plot/SI/figs_temperature_link_ocean_tpm/leg1.png'
  output_leg2 = 'main_plot/SI/figs_temperature_link_ocean_tpm/leg2.png'
  output_leg3 = 'main_plot/SI/figs_temperature_link_ocean_tpm/leg3.png'
  
  png(output_leg1,
      height = 22,
      width = 25,
      units = 'cm',res = 800)
  print(p1leg)
  dev.off()
  
  
  png(output_leg2,
      height = 22,
      width = 25,
      units = 'cm',res = 800)
  print(p2leg)
  dev.off()
  
  
  png(output_leg3,
      height = 22,
      width = 25,
      units = 'cm',res = 800)
  print(p3leg)
  dev.off()
  
  
  
}
figs_train_and_project_tpm_tibet_withlocal <- function(
  
){
  
  trend_fun_index_cmip6<-function(x){
    x = as.numeric(x)
    loc2020 = length(2003:2020)*12-11
    loc2050 = length(2003:2099)*12
    x = x[loc2020:loc2050]
    xt = ts(x,start = c(2020,1),frequency = 12)
    xt = decompose(xt)$trend
    naid = which(is.na(xt))
    xt = xt[-naid]
    
    xt = (xt - mean(xt))/sd(xt)
    return(xt)
  }
  
  trend_fun_index_cmip6_2003<-function(x){
    x = as.numeric(x)
    #x = x[loc2020:loc2050]
    x = x[1:174]
    xt = ts(x,start = c(2003,1),frequency = 12)
    xt = decompose(xt)$trend
    
    naid = which(is.na(xt))
    xt = xt[-naid]
    xt = (xt-mean(xt))/sd(xt)
    
    return(xt)
  }
  era5_t = import_index_insource_tibet('era5_t_tibet')
  
  set.seed(1234)
  full_id = 1:162
  train_id = unique(round(runif(1380,1,162)))[1:138]
  test_id = full_id[-train_id]
  #train_id = 1:162
  
  t = import_index_insource_tibet('t_cmip6',region = 'ato')
  ssp245_ato1 = t[[1]][[1]]
  ssp245_ato3 = t[[1]][[2]]
  ssp585_ato1 = t[[2]][[1]]
  ssp585_ato3 = t[[2]][[2]]
  
  histssp245_ato1 = apply(ssp245_ato1,2,trend_fun_index_cmip6_2003)
  histssp245_ato3 = apply(ssp245_ato3,2,trend_fun_index_cmip6_2003)
  histssp585_ato1 = apply(ssp585_ato1,2,trend_fun_index_cmip6_2003)
  histssp585_ato3 = apply(ssp585_ato3,2,trend_fun_index_cmip6_2003)
  
  fut245_ato1 = apply(ssp245_ato1,2,trend_fun_index_cmip6)
  fut245_ato3 = apply(ssp245_ato3,2,trend_fun_index_cmip6)
  fut585_ato1 = apply(ssp585_ato1,2,trend_fun_index_cmip6)
  fut585_ato3 = apply(ssp585_ato3,2,trend_fun_index_cmip6)
  
  train245_ato1 = histssp245_ato1[train_id,]
  train245_ato3 = histssp245_ato3[train_id,]
  train585_ato1 = histssp585_ato1[train_id,]
  train585_ato3 = histssp585_ato3[train_id,]
  
  test245_ato1 = histssp245_ato1[test_id,]
  test245_ato3 = histssp245_ato3[test_id,]
  test585_ato1 = histssp585_ato1[test_id,]
  test585_ato3 = histssp585_ato3[test_id,]
  
  
  ssp245_ato = cbind(train245_ato1,train245_ato3)
  ssp585_ato = cbind(train585_ato1,train585_ato3)
  test245_ato = cbind(test245_ato1,test245_ato3)
  test585_ato = cbind(test585_ato1,test585_ato3)
  fut245_ato = cbind(fut245_ato1,fut245_ato3)
  fut585_ato = cbind(fut585_ato1,fut585_ato3)
  hist245_ato = cbind(histssp245_ato1,histssp245_ato3)
  hist585_ato = cbind(histssp585_ato1,histssp585_ato3)
  
  
  
  aim1 = era5_t[,1]
  trainaim1 = aim1[train_id]
  testaim1 = aim1[test_id]
  
  model1 = lm(trainaim1~ssp245_ato)
  model2 = lm(trainaim1~ssp585_ato)
  
  sum_model1 = summary(model1)$coefficients
  sum_model2 = summary(model2)$coefficients
  
  id1 = as.numeric(which(sum_model1[,4]<0.05)-1)
  id2 = as.numeric(which(sum_model2[,4]<0.05)-1)
  
  ssp245_ato = ssp245_ato[,id1] 
  ssp585_ato = ssp585_ato[,id2] 
  
  model1 = lm(trainaim1~ssp245_ato)
  model2 = lm(trainaim1~ssp585_ato)
  
  coeff1 = as.numeric(model1$coefficients)
  coeff2 = as.numeric(model2$coefficients)
  
  ssp245_ato = cbind(inte =1,ssp245_ato)
  ssp585_ato = cbind(inte =1,ssp585_ato)
  test245_ato = cbind(inte = 1,test245_ato[,id1])
  test585_ato = cbind(inte = 1,test585_ato[,id2])
  fut245_ato = cbind(inte = 1,fut245_ato[,id1])
  fut585_ato = cbind(inte = 1,fut585_ato[,id2])
  hist245_ato = cbind(inte = 1,hist245_ato[,id1])
  hist585_ato = cbind(inte = 1,hist585_ato[,id2])
  
  
  proj_train_tpm1_245 = as.numeric(coeff1 %*% t(ssp245_ato))
  proj_train_tpm1_585 = as.numeric(coeff2 %*% t(ssp585_ato))
  proj_test_tpm1_245 = as.numeric(coeff1 %*% t(test245_ato))
  proj_test_tpm1_585 = as.numeric(coeff2 %*% t(test585_ato))
  proj_fut_tpm1_245 = as.numeric(coeff1 %*% t(fut245_ato))
  proj_fut_tpm1_585 = as.numeric(coeff2 %*% t(fut585_ato))
  hist_inorder_tpm1_245 = as.numeric(coeff1 %*% t(hist245_ato))
  hist_inorder_tpm1_585 = as.numeric(coeff2 %*% t(hist585_ato))
  
  output ='output/multi_weighted_cmip6_t_in_tpm12'
  dir.create(output)
  output1_245 = paste0(output,'/proj_fut_tpm1_245.csv')
  output1_585 = paste0(output,'/proj_fut_tpm1_585.csv')
  
  write.csv(proj_fut_tpm1_245,output1_245)
  write.csv(proj_fut_tpm1_585,output1_585)
  
  
  
  ful1 = c(hist_inorder_tpm1_245,
           proj_fut_tpm1_245)
  
  
  
  #
  aim2 = era5_t[,2]
  t = import_index_insource_tibet('t_cmip6',region = 'io')
  ssp245_io1 = t[[1]][[1]]
  ssp245_io2 = t[[1]][[2]]
  ssp245_io3 = t[[1]][[3]]
  ssp245_io4 = t[[1]][[4]]
  
  ssp585_io1 = t[[2]][[1]]
  ssp585_io2 = t[[2]][[2]]
  ssp585_io3 = t[[2]][[3]]
  ssp585_io4 = t[[2]][[4]]
  
  histssp245_io1 = apply(ssp245_io1,2,trend_fun_index_cmip6_2003)
  histssp245_io2 = apply(ssp245_io2,2,trend_fun_index_cmip6_2003)
  histssp245_io3 = apply(ssp245_io3,2,trend_fun_index_cmip6_2003)
  histssp245_io4 = apply(ssp245_io4,2,trend_fun_index_cmip6_2003)
  
  histssp585_io1 = apply(ssp585_io1,2,trend_fun_index_cmip6_2003)
  histssp585_io2 = apply(ssp585_io2,2,trend_fun_index_cmip6_2003)
  histssp585_io3 = apply(ssp585_io3,2,trend_fun_index_cmip6_2003)
  histssp585_io4 = apply(ssp585_io4,2,trend_fun_index_cmip6_2003)
  
  fut245_io1 = apply(ssp245_io1,2,trend_fun_index_cmip6)
  fut245_io2 = apply(ssp245_io2,2,trend_fun_index_cmip6)
  fut245_io3 = apply(ssp245_io3,2,trend_fun_index_cmip6)
  fut245_io4 = apply(ssp245_io4,2,trend_fun_index_cmip6)
  fut585_io1 = apply(ssp585_io1,2,trend_fun_index_cmip6)
  fut585_io2 = apply(ssp585_io2,2,trend_fun_index_cmip6)
  fut585_io3 = apply(ssp585_io3,2,trend_fun_index_cmip6)
  fut585_io4 = apply(ssp585_io4,2,trend_fun_index_cmip6)
  
  histssp245_tio = cbind(histssp245_io1,histssp245_io2,histssp245_io3,
                         histssp245_io4)
  histssp585_tio = cbind(histssp585_io1,histssp585_io2,histssp585_io3,
                         histssp585_io4)
  fut245_tio = cbind(fut245_io1,fut245_io2,fut245_io3,fut245_io4)
  fut585_tio = cbind(fut585_io1,fut585_io2,fut585_io3,fut585_io4)
  
  train245_tio = histssp245_tio[train_id,]
  train585_tio = histssp585_tio[train_id,]
  test245_tio = histssp245_tio[test_id,]
  test585_tio = histssp585_tio[test_id,]
  
  fut245_tio = cbind(fut245_io1,fut245_io2,fut245_io3,fut245_io4)
  fut585_tio = cbind(fut585_io1,fut585_io2,fut585_io3,fut585_io4)
  
  trainaim2 = as.numeric(aim2[train_id])
  testaim2 = as.numeric(aim2[test_id])
  print(dim(train245_tio))
  print(length(aim2))
  
  model3 = lm(trainaim2~train245_tio)
  model4 = lm(trainaim2~train585_tio)
  
  coeff3 = as.numeric(model3$coefficients)
  coeff4 = as.numeric(model4$coefficients)
  
  train245_tio = cbind(inte = 1,train245_tio)
  test245_tio = cbind(inte = 1,test245_tio)
  train585_tio = cbind(inte = 1,train585_tio)
  test585_tio = cbind(inte = 1,test585_tio)
  fut245_tio = cbind(inte = 1,fut245_tio)
  fut585_tio = cbind(inte = 1,fut585_tio)
  histssp245_tio = cbind(inte = 1,histssp245_tio)
  histssp585_tio = cbind(inte = 1,histssp585_tio)
  
  proj_train_tpm2_245 = as.numeric(coeff3 %*% t(train245_tio))
  proj_train_tpm2_585 = as.numeric(coeff4 %*% t(train585_tio))
  proj_test_tpm2_245 = as.numeric(coeff3 %*% t(test245_tio))
  proj_test_tpm2_585 = as.numeric(coeff4 %*% t(test585_tio))
  proj_fut_tpm2_245 = as.numeric(coeff3 %*% t(fut245_tio))
  proj_fut_tpm2_585 = as.numeric(coeff4 %*% t(fut585_tio))
  proj_histiorder_tpm2_245 = as.numeric(coeff3 %*% t(histssp245_tio))
  proj_histiorder_tpm2_585 = as.numeric(coeff4 %*% t(histssp585_tio))
  
  output2_245 = paste0(output,'/proj_fut_tpm2_245.csv')
  output2_585 = paste0(output,'/proj_fut_tpm2_585.csv')
  
  write.csv(proj_fut_tpm2_245,output2_245)
  write.csv(proj_fut_tpm2_585,output2_585)
  
  df_train1 = data.frame(
    ERA5 = trainaim1,
    Simu_SSP245 = proj_train_tpm1_245
  )
  
  df_train2 = data.frame(
    ERA5 = trainaim1,
    Simu_SSP585 = proj_train_tpm1_585
  )
  
  df_train3 = data.frame(
    ERA5 = trainaim2,
    Simu_SSP245 = proj_train_tpm2_245
  )
  
  df_train4 = data.frame(
    ERA5 = trainaim2,
    Simu_SSP585 = proj_train_tpm2_585
  )
  
  df_train1 = reshape2::melt(df_train1,'ERA5')
  df_train2 = reshape2::melt(df_train2,'ERA5')
  df_train3 = reshape2::melt(df_train3,'ERA5')
  df_train4 = reshape2::melt(df_train4,'ERA5')
  
  df_train1$type = "Projected T in TPM1 by 85% train sample"
  df_train2$type = 'Projected T in TPM1 by 85% train sample'
  df_train3$type = 'Projected T in TPM2 by 85% train sample'
  df_train4$type = 'Projected T in TPM2 by 85% train sample'
  
  df_train = rbind(df_train1,df_train2,
                   df_train3,df_train4)
  
  cols = pal_lancet()(9)[c(4,7)]
  p1 = ggplot()+
    geom_point(data = df_train,
               aes(x = ERA5,y = value,color = variable),
               size = 2,shape = 1)+
    geom_abline(intercept = 0,slope = 1)+
    scale_color_manual(values = cols)+
    facet_wrap(~type,nrow = 1,scales = 'free')+
    theme_bw()+
    guides(color = guide_legend(title = ''))+
    xlab('ERA5')+
    ylab('Indices')
  
  
  
  df_test1 = data.frame(
    ERA5 = testaim1,
    Simu_SSP245 = proj_test_tpm1_245
  )
  
  df_test2 = data.frame(
    ERA5 = testaim1,
    Simu_SSP585 = proj_test_tpm1_585
  )
  
  df_test3 = data.frame(
    ERA5 = testaim2,
    Simu_SSP245 = proj_test_tpm2_245
  )
  
  df_test4 = data.frame(
    ERA5 = testaim2,
    Simu_SSP585 = proj_test_tpm2_585
  )
  
  df_test1 = reshape2::melt(df_test1,'ERA5')
  df_test2 = reshape2::melt(df_test2,'ERA5')
  df_test3 = reshape2::melt(df_test3,'ERA5')
  df_test4 = reshape2::melt(df_test4,'ERA5')
  
  df_test1$type = "Projected T in TPM1 by 15% test sample"
  df_test2$type = 'Projected T in TPM1 by 15% test sample'
  df_test3$type = 'Projected T in TPM2 by 15% test sample'
  df_test4$type = 'Projected T in TPM2 by 15% test sample'
  
  df_test = rbind(df_test1,df_test2,
                  df_test3,df_test4)
  
  cols = pal_lancet()(9)[c(4,7)]
  p2 = ggplot()+
    geom_point(data = df_test,
               aes(x = ERA5,y = value,color = variable),
               size = 2,shape = 1)+
    geom_abline(intercept = 0,slope = 1)+
    scale_color_manual(values = cols)+
    facet_wrap(~type,nrow = 1,scales = 'free')+
    theme_bw()+
    guides(color = guide_legend(title = ''))+
    xlab('ERA5')+
    ylab('Indices')
  
  date = seq(as.Date('2003-07-01'),
             as.Date('2016-12-01'),
             '1 month')
  
  df_full1 = data.frame(
    date = date,
    ERA5 = aim1,
    Simu_SSP245 = hist_inorder_tpm1_245
  )
  
  df_full2 = data.frame(
    date = date,
    ERA5 = aim1,
    Simu_SSP585 = hist_inorder_tpm1_585
  )
  
  df_full3 = data.frame(
    date = date,
    ERA5 = aim2,
    Simu_SSP245 = proj_histiorder_tpm2_245
  )
  
  df_full4 = data.frame(
    date = date,
    ERA5 = aim2,
    Simu_SSP585 = proj_histiorder_tpm2_585
  )
  
  df_full1 = reshape2::melt(df_full1,'date')
  df_full2 = reshape2::melt(df_full2,'date')
  df_full3 = reshape2::melt(df_full3,'date')
  df_full4 = reshape2::melt(df_full4,'date')
  
  df_full1$type = "Projected T in TPM1 by full sequential data"
  df_full2$type = 'Projected T in TPM1 by full sequential data'
  df_full3$type = 'Projected T in TPM2 by full sequential data'
  df_full4$type = 'Projected T in TPM2 by full sequential data'
  
  df_full = rbind(df_full1,df_full2,
                  df_full3,df_full4)
  
  cols = pal_lancet()(9)[c(1,4,7)]
  
  p3 = ggplot()+
    geom_line(data = df_full,
              aes(x = date,y = value,color = variable),
              size = 1.3)+
    scale_color_manual(values = cols)+
    facet_wrap(~type,nrow = 1,scales = 'free')+
    theme_bw()+
    guides(color = guide_legend(title = ''))+
    xlab('Time')+
    ylab('Indices')
  
  fontsize = 14 
  text_theme = theme(
    axis.text = element_text(size = fontsize,color = 'black'),
    axis.title = element_text(size = fontsize,color = 'black'),
    legend.text = element_text(size = fontsize,color = 'black'),
    legend.title = element_text(size = fontsize,color = 'black'),
    strip.text = element_text(size = fontsize,color = 'black')
  )
  
  p1 = p1 + text_theme
  p2 = p2 + text_theme
  p3 = p3 + text_theme
  
  legp = as_ggplot(get_legend(p1+theme(legend.position = 'bottom')))
  legl = as_ggplot(get_legend(p3+theme(legend.position = 'bottom')))
  p1 = p1 + theme(legend.position = 'none')
  p2 = p2 + theme(legend.position = 'none')
  p3 = p3 + theme(legend.position = 'none')
  
  figlabel1 = data.frame(x = -2,y = 2,label = c('(a)','(b)'),
                         type = c("Projected T in TPM1 by 85% train sample",
                                  'Projected T in TPM2 by 85% train sample'))
  figlabel2 = data.frame(x = c(-1.5,-2),y = c(2,1),label = c('(c)','(d)'),
                         type = c("Projected T in TPM1 by 15% test sample",
                                  'Projected T in TPM2 by 15% test sample'))
  figlabel3 = data.frame(x = date[3],y = 3,label = c('(e)','(f)'),
                         type = c('Projected T in TPM1 by full sequential data',
                                  'Projected T in TPM2 by full sequential data'))  
  
  p1 = p1 + 
    geom_text(data = figlabel1,
              aes(x = x,y=y,label = label),
              size = 5,
              color = 'black')
  
  p2= p2 + 
    geom_text(data = figlabel2,
              aes(x = x,y=y,label = label),
              size = 5,
              color = 'black')
  
  p3 = p3 + 
    geom_text(data = figlabel3,
              aes(x = x,y=y,label = label),
              size = 5,
              color = 'black')
  
  cor1 = cor(proj_train_tpm1_245,trainaim1)
  cor2 = cor(proj_train_tpm1_585,trainaim1)
  cor3 = cor(proj_train_tpm2_245,trainaim2)
  cor4 = cor(proj_train_tpm2_585,trainaim2)
  
  pvs1 = cor.test(proj_train_tpm1_245,trainaim1)$p.value
  pvs2 = cor.test(proj_train_tpm1_585,trainaim1)$p.value
  pvs3 = cor.test(proj_train_tpm2_245,trainaim2)$p.value
  pvs4 = cor.test(proj_train_tpm2_585,trainaim2)$p.value
  
  dfcor1 = data.frame(
    x = c(0,0,-1,-1),
    y = c(-1.2,-2.0,-1.5,-2.3),
    label = c(paste0('SSP245 cor: ',round(cor1,2),
                     '(',scientific(pvs1,2),')'),
              paste0('SSP585 cor: ',round(cor2,2),
                     '(',scientific(pvs2,2),')'),
              paste0('SSP245 cor: ',round(cor3,2),
                     '(',scientific(pvs3,2),')'),
              paste0('SSP585 cor: ',round(cor4,2),
                     '(',scientific(pvs4,2),')')),
    type = c('Projected T in TPM1 by 85% train sample',
             'Projected T in TPM1 by 85% train sample',
             'Projected T in TPM2 by 85% train sample',
             'Projected T in TPM2 by 85% train sample'),
    variable = rep(c("Simu_SSP245",'Simu_SSP585'),2)
  )
  
  p1 = p1 + 
    geom_text(data = dfcor1,aes(x = x,y= y,label = label,
                                color = variable),
              size = 4,hjust = 0)
  cor5 = cor(proj_test_tpm1_245,testaim1)
  cor6 = cor(proj_test_tpm1_585,testaim1)
  cor7 = cor(proj_test_tpm2_245,testaim2)
  cor8 = cor(proj_test_tpm2_585,testaim2)
  
  pvs5 = cor.test(proj_test_tpm1_245,testaim1)$p.value
  pvs6 = cor.test(proj_test_tpm1_585,testaim1)$p.value
  pvs7 = cor.test(proj_test_tpm2_245,testaim2)$p.value
  pvs8 = cor.test(proj_test_tpm2_585,testaim2)$p.value
  
  dfcor2 = data.frame(
    x = c(-1,-1,-1.5,-1.5),
    y = c(-1.5,-2.0,-2,-2.5),
    label = c(paste0('SSP245 cor: ',round(cor5,2),
                     '(',scientific(pvs5,2),')'),
              paste0('SSP585 cor: ',round(cor6,2),
                     '(',scientific(pvs6,2),')'),
              paste0('SSP245 cor: ',round(cor7,2),
                     '(',scientific(pvs7,2),')'),
              paste0('SSP585 cor: ',round(cor8,2),
                     '(',scientific(pvs8,2),')')),
    type = c('Projected T in TPM1 by 15% test sample',
             'Projected T in TPM1 by 15% test sample',
             'Projected T in TPM2 by 15% test sample',
             'Projected T in TPM2 by 15% test sample'),
    variable = rep(c("Simu_SSP245",'Simu_SSP585'),2)
  )
  
  p2 = p2 + 
    geom_text(data = dfcor2,aes(x = x,y= y,label = label,
                                color = variable),
              size = 4,hjust = 0)
  
  cor9 = cor(hist_inorder_tpm1_245,aim1)
  cor10 = cor(hist_inorder_tpm1_585,aim1)
  cor11 = cor(proj_histiorder_tpm2_245,aim2)
  cor12 = cor(proj_histiorder_tpm2_585,aim2)
  
  pvs9 = cor.test(hist_inorder_tpm1_245,aim1)$p.value
  pvs10 = cor.test(hist_inorder_tpm1_585,aim1)$p.value
  pvs11 = cor.test(proj_histiorder_tpm2_245,aim2)$p.value
  pvs12 = cor.test(proj_histiorder_tpm2_585,aim2)$p.value
  
  dfcor3 = data.frame(
    x = date[5],
    y = c(-2.5,-3,-2.5,-3),
    label = c(paste0('SSP245 cor: ',round(cor9,2),
                     '(',scientific(pvs9,2),')'),
              paste0('SSP585 cor: ',round(cor10,2),
                     '(',scientific(pvs10,2),')'),
              paste0('SSP245 cor: ',round(cor11,2),
                     '(',scientific(pvs11,2),')'),
              paste0('SSP585 cor: ',round(cor12,2),
                     '(',scientific(pvs12,2),')')),
    type = c('Projected T in TPM1 by full sequential data',
             'Projected T in TPM1 by full sequential data',
             'Projected T in TPM2 by full sequential data',
             'Projected T in TPM2 by full sequential data'),
    variable = rep(c("Simu_SSP245",'Simu_SSP585'),2)
  )
  
  p3 = p3 + 
    geom_text(data = dfcor3,aes(x = x,y= y,label = label,
                                color = variable),
              size = 4,hjust = 0)
  
  library(cowplot)
  
  p123 = plot_grid(p1,p2,p3,
                   rel_heights = c(1,1,1),
                   rel_widths = c(1,1,1),
                   ncol = 1)
  
  p123 = plot_grid(p123,legl,
                   rel_heights = c(10,1),
                   rel_widths = c(1,1),
                   ncol = 1)
  output = 'main_plot/SI/figs_train_test_and_project_tpm_tibet'
  dir.create(output)
  output_main = paste0(output,'/figs_train_test_ful_project_tpm_tibet.png')
  output_leg = paste0(output,'/figs_point_leg.png')
  
  png(output_main,
      height = 25,
      width = 25,
      units = 'cm',
      res = 800)
  print(p123)
  dev.off()
  
  png(output_leg,
      height = 25,
      width = 25,
      units = 'cm',
      res = 800)
  print(legp)
  dev.off()
  
  
  
}
figs_train_and_project_tpm_tibet <- function(
  
){
  trend_fun_index_cmip6<-function(x){
    x = as.numeric(x)
    #loc2020 = length(2003:2020)*12-11
    #loc2050 = length(2003:2099)*12
    #x = x[loc2020:loc2050]
    xt = ts(x,start = c(2003,1),frequency = 12)
    xt = decompose(xt)$trend
    naid = which(is.na(xt))
    xt = xt[-naid]
    
    xt = (xt - mean(xt))/sd(xt)
    return(xt)
  }
  
  aim2 = era5_t[,2]
  t = import_index_insource_tibet('t_cmip6',region = 'io')
  ssp245_io1 = t[[1]][[1]]
  ssp245_io2 = t[[1]][[2]]
  ssp245_io3 = t[[1]][[3]]
  ssp245_io4 = t[[1]][[4]]
  
  ssp585_io1 = t[[2]][[1]]
  ssp585_io2 = t[[2]][[2]]
  ssp585_io3 = t[[2]][[3]]
  ssp585_io4 = t[[2]][[4]]
  
  
  histssp245_io1 = apply(ssp245_io1,2,trend_fun_index_cmip6_2003)
  histssp245_io2 = apply(ssp245_io2,2,trend_fun_index_cmip6_2003)
  histssp245_io3 = apply(ssp245_io3,2,trend_fun_index_cmip6_2003)
  histssp245_io4 = apply(ssp245_io4,2,trend_fun_index_cmip6_2003)
  
  histssp585_io1 = apply(ssp585_io1,2,trend_fun_index_cmip6_2003)
  histssp585_io2 = apply(ssp585_io2,2,trend_fun_index_cmip6_2003)
  histssp585_io3 = apply(ssp585_io3,2,trend_fun_index_cmip6_2003)
  histssp585_io4 = apply(ssp585_io4,2,trend_fun_index_cmip6_2003)
  
  fut245_io1 = apply(ssp245_io1,2,trend_fun_index_cmip6)
  fut245_io2 = apply(ssp245_io2,2,trend_fun_index_cmip6)
  fut245_io3 = apply(ssp245_io3,2,trend_fun_index_cmip6)
  fut245_io4 = apply(ssp245_io4,2,trend_fun_index_cmip6)
  fut585_io1 = apply(ssp585_io1,2,trend_fun_index_cmip6)
  fut585_io2 = apply(ssp585_io2,2,trend_fun_index_cmip6)
  fut585_io3 = apply(ssp585_io3,2,trend_fun_index_cmip6)
  fut585_io4 = apply(ssp585_io4,2,trend_fun_index_cmip6)
  

  trend_fun_index_cmip6_2003<-function(x){
    x = as.numeric(x)
    #x = x[loc2020:loc2050]
    x = x[1:174]
    xt = ts(x,start = c(2003,1),frequency = 12)
    xt = decompose(xt)$trend
    
    naid = which(is.na(xt))
    xt = xt[-naid]
    xt = (xt-mean(xt))/sd(xt)
    
    return(xt)
  }
  era5_t = import_index_insource_tibet('era5_t_tibet')
  
  set.seed(1234)
  full_id = 1:162
  train_id = unique(round(runif(1380,1,162)))[1:138]
  test_id = full_id[-train_id]
  #train_id = 1:162
  
  t = import_index_insource_tibet('t_cmip6',region = 'ato')
  ssp245_ato1 = t[[1]][[1]]
  ssp245_ato3 = t[[1]][[2]]
  ssp585_ato1 = t[[2]][[1]]
  ssp585_ato3 = t[[2]][[2]]
  
  histssp245_ato1 = apply(ssp245_ato1,2,trend_fun_index_cmip6_2003)
  histssp245_ato3 = apply(ssp245_ato3,2,trend_fun_index_cmip6_2003)
  histssp585_ato1 = apply(ssp585_ato1,2,trend_fun_index_cmip6_2003)
  histssp585_ato3 = apply(ssp585_ato3,2,trend_fun_index_cmip6_2003)
  
  fut245_ato1 = apply(ssp245_ato1,2,trend_fun_index_cmip6)
  fut245_ato3 = apply(ssp245_ato3,2,trend_fun_index_cmip6)
  fut585_ato1 = apply(ssp585_ato1,2,trend_fun_index_cmip6)
  fut585_ato3 = apply(ssp585_ato3,2,trend_fun_index_cmip6)
  
  train245_ato1 = histssp245_ato1[train_id,]
  train245_ato3 = histssp245_ato3[train_id,]
  train585_ato1 = histssp585_ato1[train_id,]
  train585_ato3 = histssp585_ato3[train_id,]
  
  test245_ato1 = histssp245_ato1[test_id,]
  test245_ato3 = histssp245_ato3[test_id,]
  test585_ato1 = histssp585_ato1[test_id,]
  test585_ato3 = histssp585_ato3[test_id,]
  
  t = import_index_insource_tibet('t_cmip6',region = 'tibet')
  ssp245_tpm1 = t[[1]][[1]]
  ssp245_tpm2 = t[[1]][[2]]
  
  ssp585_tpm1 = t[[2]][[1]]
  ssp585_tpm2 = t[[2]][[2]]

  histssp245_tpm1 = apply(ssp245_tpm1,2,trend_fun_index_cmip6_2003)
  histssp245_tpm2 = apply(ssp245_tpm2,2,trend_fun_index_cmip6_2003)
  histssp585_tpm1 = apply(ssp585_tpm1,2,trend_fun_index_cmip6_2003)
  histssp585_tpm2 = apply(ssp585_tpm2,2,trend_fun_index_cmip6_2003)
  
  fut245_tpm1 = apply(ssp245_tpm1,2,trend_fun_index_cmip6)
  fut245_tpm2 = apply(ssp245_tpm2,2,trend_fun_index_cmip6)
  fut585_tpm1 = apply(ssp585_tpm1,2,trend_fun_index_cmip6)
  fut585_tpm2 = apply(ssp585_tpm2,2,trend_fun_index_cmip6)
  
  outputtpm = 'output/cmip6_fut_tpm'
  dir.create(outputtpm)
  outputtpm_ssp245 = paste0(outputtpm,'/ssp245_tpm.csv')
  outputtpm_ssp585 = paste0(outputtpm,'/ssp585_tpm.csv')
  
  ret245 = cbind(fut245_tpm1,fut245_tpm2)
  ret585 = cbind(fut585_tpm1,fut585_tpm2)
  fwrite(ret245,outputtpm_ssp245)
  fwrite(ret585,outputtpm_ssp585)
  
  train245_tpm1 = histssp245_tpm1[train_id,]
  train585_tpm1 = histssp585_tpm1[train_id,]
  train245_tpm2 = histssp245_tpm2[train_id,]
  train585_tpm2 = histssp585_tpm2[train_id,]
  test245_tpm1 = histssp245_tpm1[test_id,]
  test585_tpm1 = histssp585_tpm1[test_id,]
  test245_tpm2 = histssp245_tpm2[test_id,]
  test585_tpm2 = histssp585_tpm2[test_id,]
  
  
  ssp245_atotpm1 = cbind(train245_ato1,
                         histssp245_io2[train_id,],
                         train245_tpm1)
  ssp585_atotpm1 = cbind(train585_ato1,
                         histssp585_io2[train_id,],
                         train585_tpm1)
  test245_atotpm1 = cbind(test245_ato1,
                          histssp245_io2[test_id,],
                          test245_tpm1)
  test585_atotpm1 = cbind(test585_ato1,
                          histssp585_io2[test_id,],
                          test585_tpm1)
  fut245_atotpm1 = cbind(fut245_ato1,
                         fut245_io2,
                         fut245_tpm1)
  fut585_atotpm1 = cbind(fut585_ato1,
                         fut585_io2,
                          fut585_tpm1)
  hist245_atotpm1 = cbind(histssp245_ato1,
                          histssp245_io2,
                          histssp245_tpm1)
  hist585_atotpm1 = cbind(histssp585_ato1,
                          histssp585_io2,
                          histssp585_tpm1)
  
  aim1 = era5_t[,1]
  trainaim1 = aim1[train_id]
  testaim1 = aim1[test_id]
  
  model1 = lm(trainaim1~ssp245_atotpm1)
  model2 = lm(trainaim1~ssp585_atotpm1)
  
  sum_model1 = summary(model1)$coefficients
  sum_model2 = summary(model2)$coefficients
  
  id1 = as.numeric(which(sum_model1[,4]<0.05)-1)
  id2 = as.numeric(which(sum_model2[,4]<0.05)-1)
  
  
  ssp245_atotpm1 = ssp245_atotpm1[,id1] 
  ssp585_atotpm1 = ssp585_atotpm1[,id2] 
  
  model1 = lm(trainaim1~ssp245_atotpm1)
  model2 = lm(trainaim1~ssp585_atotpm1)
  
  coeff1 = as.numeric(model1$coefficients)
  coeff2 = as.numeric(model2$coefficients)
  
  ssp245_atotpm1 = cbind(inte =1,ssp245_atotpm1)
  ssp585_atotpm1 = cbind(inte =1,ssp585_atotpm1)
  test245_atotpm1 = cbind(inte = 1,test245_atotpm1[,id1])
  test585_atotpm1 = cbind(inte = 1,test585_atotpm1[,id2])
  fut245_atotpm1 = cbind(inte = 1,fut245_atotpm1[,id1])
  fut585_atotpm1 = cbind(inte = 1,fut585_atotpm1[,id2])
  hist245_atotpm1 = cbind(inte = 1,hist245_atotpm1[,id1])
  hist585_atotpm1 = cbind(inte = 1,hist585_atotpm1[,id2])
  
    
  proj_train_tpm1_245 = as.numeric(coeff1 %*% t(ssp245_atotpm1))
  proj_train_tpm1_585 = as.numeric(coeff2 %*% t(ssp585_atotpm1))
  proj_test_tpm1_245 = as.numeric(coeff1 %*% t(test245_atotpm1))
  proj_test_tpm1_585 = as.numeric(coeff2 %*% t(test585_atotpm1))
  proj_fut_tpm1_245 = as.numeric(coeff1 %*% t(fut245_atotpm1))
  proj_fut_tpm1_585 = as.numeric(coeff2 %*% t(fut585_atotpm1))
  hist_inorder_tpm1_245 = as.numeric(coeff1 %*% t(hist245_atotpm1))
  hist_inorder_tpm1_585 = as.numeric(coeff2 %*% t(hist585_atotpm1))
  
  stand_fun<-function(x){
    x = (x-mean(x))/sd(x)
  }
  
  proj_fut_tpm1_245 = stand_fun(proj_fut_tpm1_245)
  proj_fut_tpm1_585 = stand_fun(proj_fut_tpm1_585)
  
  
  
  output ='output/multi_weighted_cmip6_t_in_tpm12'
  dir.create(output)
  output1_245 = paste0(output,'/proj_fut_tpm1_245.csv')
  output1_585 = paste0(output,'/proj_fut_tpm1_585.csv')
  
  
  write.csv(proj_fut_tpm1_245,output1_245)
  write.csv(proj_fut_tpm1_585,output1_585)
  
  
  
  ful1 = c(hist_inorder_tpm1_245,
           proj_fut_tpm1_245)
  
  
  
  #
  
  
  histssp245_tio = cbind(histssp245_io1,histssp245_io2,histssp245_io3,
                     histssp245_io4)
  histssp585_tio = cbind(histssp585_io1,histssp585_io2,histssp585_io3,
                     histssp585_io4)
  fut245_tio = cbind(fut245_io1,fut245_io2,fut245_io3,fut245_io4)
  fut585_tio = cbind(fut585_io1,fut585_io2,fut585_io3,fut585_io4)
  
  train245_tio = histssp245_tio[train_id,]
  train585_tio = histssp585_tio[train_id,]
  test245_tio = histssp245_tio[test_id,]
  test585_tio = histssp585_tio[test_id,]
  
  
  train245_tio = cbind(train245_tpm2,histssp245_io2[train_id,])
  train585_tio = cbind(train585_tpm2,histssp585_io2[train_id,])
  test245_tio = cbind(test245_tpm2,histssp245_io2[test_id,])
  test585_tio = cbind(test585_tpm2,histssp585_io2[test_id,])
  fut245_tio = cbind(fut245_tpm2,fut245_io2)
  fut585_tio = cbind(fut585_tpm2,fut585_io2)
  histssp245_tio = cbind(histssp245_tpm2,histssp245_io2)
  histssp585_tio = cbind(histssp585_tpm2,histssp585_io2)
  
  trainaim2 = as.numeric(aim2[train_id])
  testaim2 = as.numeric(aim2[test_id])
  print(dim(train245_tio))
  print(length(aim2))
  
  model3 = lm(trainaim2~train245_tio)
  model4 = lm(trainaim2~train585_tio)
  
  sum3 = summary(model3)$coefficient
  sum4 = summary(model4)$coefficient
  
  id3 = as.numeric(which(sum3[,4]<0.05))-1
  id4 = as.numeric(which(sum4[,4]<0.05))-1
  
  train245_tio = train245_tio[,id3]
  train585_tio = train585_tio[,id4]
  
  model3 = lm(trainaim2~train245_tio)
  model4 = lm(trainaim2~train585_tio)
  
  coeff3 = as.numeric(model3$coefficients)
  coeff4 = as.numeric(model4$coefficients)
  
  train245_tio = cbind(inte = 1,train245_tio)
  test245_tio = cbind(inte = 1,test245_tio[,id3])
  train585_tio = cbind(inte = 1,train585_tio)
  test585_tio = cbind(inte = 1,test585_tio[,id4])
  fut245_tio = cbind(inte = 1,fut245_tio[,id3])
  fut585_tio = cbind(inte = 1,fut585_tio[,id4])
  histssp245_tio = cbind(inte = 1,histssp245_tio[,id3])
  histssp585_tio = cbind(inte = 1,histssp585_tio[,id4])
  
  proj_train_tpm2_245 = as.numeric(coeff3 %*% t(train245_tio))
  proj_train_tpm2_585 = as.numeric(coeff4 %*% t(train585_tio))
  proj_test_tpm2_245 = as.numeric(coeff3 %*% t(test245_tio))
  proj_test_tpm2_585 = as.numeric(coeff4 %*% t(test585_tio))
  proj_fut_tpm2_245 = as.numeric(coeff3 %*% t(fut245_tio))
  proj_fut_tpm2_585 = as.numeric(coeff4 %*% t(fut585_tio))
  proj_histiorder_tpm2_245 = as.numeric(coeff3 %*% t(histssp245_tio))
  proj_histiorder_tpm2_585 = as.numeric(coeff4 %*% t(histssp585_tio))
  
  stand_fun<-function(x){
    x = (x-mean(x))/sd(x)
  }
  
  proj_fut_tpm2_245 = stand_fun(proj_fut_tpm2_245)
  proj_fut_tpm2_585 = stand_fun(proj_fut_tpm2_585)
  
  output2_245 = paste0(output,'/proj_fut_tpm2_245.csv')
  output2_585 = paste0(output,'/proj_fut_tpm2_585.csv')
  
  write.csv(proj_fut_tpm2_245,output2_245)
  write.csv(proj_fut_tpm2_585,output2_585)
  
  df_train1 = data.frame(
    ERA5 = trainaim1,
    Simu_SSP245 = proj_train_tpm1_245
  )
  
  df_train2 = data.frame(
    ERA5 = trainaim1,
    Simu_SSP585 = proj_train_tpm1_585
  )
  
  df_train3 = data.frame(
    ERA5 = trainaim2,
    Simu_SSP245 = proj_train_tpm2_245
  )
  
  df_train4 = data.frame(
    ERA5 = trainaim2,
    Simu_SSP585 = proj_train_tpm2_585
  )
  
  df_train1 = reshape2::melt(df_train1,'ERA5')
  df_train2 = reshape2::melt(df_train2,'ERA5')
  df_train3 = reshape2::melt(df_train3,'ERA5')
  df_train4 = reshape2::melt(df_train4,'ERA5')
  
  df_train1$type = "Projected T in TPM1 by 85% train sample"
  df_train2$type = 'Projected T in TPM1 by 85% train sample'
  df_train3$type = 'Projected T in TPM2 by 85% train sample'
  df_train4$type = 'Projected T in TPM2 by 85% train sample'
  
  df_train = rbind(df_train1,df_train2,
                   df_train3,df_train4)
  
  cols = pal_lancet()(9)[c(4,7)]
  p1 = ggplot()+
    geom_point(data = df_train,
              aes(x = ERA5,y = value,color = variable),
              size = 2,shape = 1)+
    geom_abline(intercept = 0,slope = 1)+
    scale_color_manual(values = cols)+
    facet_wrap(~type,nrow = 1,scales = 'free')+
    theme_bw()+
    guides(color = guide_legend(title = ''))+
    xlab('ERA5')+
    ylab('Indices')
  
  
  
  df_test1 = data.frame(
    ERA5 = testaim1,
    Simu_SSP245 = proj_test_tpm1_245
  )
  
  df_test2 = data.frame(
    ERA5 = testaim1,
    Simu_SSP585 = proj_test_tpm1_585
  )
  
  df_test3 = data.frame(
    ERA5 = testaim2,
    Simu_SSP245 = proj_test_tpm2_245
  )
  
  df_test4 = data.frame(
    ERA5 = testaim2,
    Simu_SSP585 = proj_test_tpm2_585
  )
  
  df_test1 = reshape2::melt(df_test1,'ERA5')
  df_test2 = reshape2::melt(df_test2,'ERA5')
  df_test3 = reshape2::melt(df_test3,'ERA5')
  df_test4 = reshape2::melt(df_test4,'ERA5')
  
  df_test1$type = "Projected T in TPM1 by 15% test sample"
  df_test2$type = 'Projected T in TPM1 by 15% test sample'
  df_test3$type = 'Projected T in TPM2 by 15% test sample'
  df_test4$type = 'Projected T in TPM2 by 15% test sample'
  
  df_test = rbind(df_test1,df_test2,
                  df_test3,df_test4)
  
  cols = pal_lancet()(9)[c(4,7)]
  p2 = ggplot()+
    geom_point(data = df_test,
               aes(x = ERA5,y = value,color = variable),
               size = 2,shape = 1)+
    geom_abline(intercept = 0,slope = 1)+
    scale_color_manual(values = cols)+
    facet_wrap(~type,nrow = 1,scales = 'free')+
    theme_bw()+
    guides(color = guide_legend(title = ''))+
    xlab('ERA5')+
    ylab('Indices')
  
  date = seq(as.Date('2003-07-01'),
             as.Date('2016-12-01'),
             '1 month')
  
  df_full1 = data.frame(
    date = date,
    ERA5 = aim1,
    Simu_SSP245 = hist_inorder_tpm1_245
  )
  
  df_full2 = data.frame(
    date = date,
    ERA5 = aim1,
    Simu_SSP585 = hist_inorder_tpm1_585
  )
  
  df_full3 = data.frame(
    date = date,
    ERA5 = aim2,
    Simu_SSP245 = proj_histiorder_tpm2_245
  )
  
  df_full4 = data.frame(
    date = date,
    ERA5 = aim2,
    Simu_SSP585 = proj_histiorder_tpm2_585
  )
  
  df_full1 = reshape2::melt(df_full1,'date')
  df_full2 = reshape2::melt(df_full2,'date')
  df_full3 = reshape2::melt(df_full3,'date')
  df_full4 = reshape2::melt(df_full4,'date')
  
  df_full1$type = "Projected T in TPM1 by full sequential data"
  df_full2$type = 'Projected T in TPM1 by full sequential data'
  df_full3$type = 'Projected T in TPM2 by full sequential data'
  df_full4$type = 'Projected T in TPM2 by full sequential data'
  
  df_full = rbind(df_full1,df_full2,
                  df_full3,df_full4)
  
  cols = pal_lancet()(9)[c(1,4,7)]
  
  p3 = ggplot()+
    geom_line(data = df_full,
              aes(x = date,y = value,color = variable),
              size = 1.3)+
    scale_color_manual(values = cols)+
    facet_wrap(~type,nrow = 1,scales = 'free')+
    theme_bw()+
    guides(color = guide_legend(title = ''))+
    xlab('Time')+
    ylab('Indices')
  
  fontsize = 14 
  text_theme = theme(
    axis.text = element_text(size = fontsize,color = 'black'),
    axis.title = element_text(size = fontsize,color = 'black'),
    legend.text = element_text(size = fontsize,color = 'black'),
    legend.title = element_text(size = fontsize,color = 'black'),
    strip.text = element_text(size = fontsize,color = 'black')
  )
  
  p1 = p1 + text_theme
  p2 = p2 + text_theme
  p3 = p3 + text_theme
  
  legp = as_ggplot(get_legend(p1+theme(legend.position = 'bottom')))
  legl = as_ggplot(get_legend(p3+theme(legend.position = 'bottom')))
  p1 = p1 + theme(legend.position = 'none')
  p2 = p2 + theme(legend.position = 'none')
  p3 = p3 + theme(legend.position = 'none')
  
  figlabel1 = data.frame(x = -2,y = 2,label = c('(a)','(b)'),
                        type = c("Projected T in TPM1 by 85% train sample",
                                 'Projected T in TPM2 by 85% train sample'))
  figlabel2 = data.frame(x = c(-1.5,-2),y = c(2,1),label = c('(c)','(d)'),
                         type = c("Projected T in TPM1 by 15% test sample",
                                  'Projected T in TPM2 by 15% test sample'))
  figlabel3 = data.frame(x = date[3],y = 3,label = c('(e)','(f)'),
                         type = c('Projected T in TPM1 by full sequential data',
                                  'Projected T in TPM2 by full sequential data'))  
  
  p1 = p1 + 
    geom_text(data = figlabel1,
              aes(x = x,y=y,label = label),
              size = 5,
              color = 'black')
  
  p2= p2 + 
    geom_text(data = figlabel2,
              aes(x = x,y=y,label = label),
              size = 5,
              color = 'black')
  
  p3 = p3 + 
    geom_text(data = figlabel3,
              aes(x = x,y=y,label = label),
              size = 5,
              color = 'black')
  
  cor1 = cor(proj_train_tpm1_245,trainaim1)
  cor2 = cor(proj_train_tpm1_585,trainaim1)
  cor3 = cor(proj_train_tpm2_245,trainaim2)
  cor4 = cor(proj_train_tpm2_585,trainaim2)
  
  pvs1 = cor.test(proj_train_tpm1_245,trainaim1)$p.value
  pvs2 = cor.test(proj_train_tpm1_585,trainaim1)$p.value
  pvs3 = cor.test(proj_train_tpm2_245,trainaim2)$p.value
  pvs4 = cor.test(proj_train_tpm2_585,trainaim2)$p.value
  
  dfcor1 = data.frame(
    x = c(0,0,-1,-1),
    y = c(-1.2,-2.0,-1.5,-2.3),
    label = c(paste0('SSP245 cor: ',round(cor1,2),
                     '(',scientific(pvs1,2),')'),
              paste0('SSP585 cor: ',round(cor2,2),
                     '(',scientific(pvs2,2),')'),
              paste0('SSP245 cor: ',round(cor3,2),
                     '(',scientific(pvs3,2),')'),
              paste0('SSP585 cor: ',round(cor4,2),
                     '(',scientific(pvs4,2),')')),
    type = c('Projected T in TPM1 by 85% train sample',
             'Projected T in TPM1 by 85% train sample',
             'Projected T in TPM2 by 85% train sample',
             'Projected T in TPM2 by 85% train sample'),
    variable = rep(c("Simu_SSP245",'Simu_SSP585'),2)
  )
  
  p1 = p1 + 
    geom_text(data = dfcor1,aes(x = x,y= y,label = label,
                                color = variable),
              size = 4,hjust = 0)
  cor5 = cor(proj_test_tpm1_245,testaim1)
  cor6 = cor(proj_test_tpm1_585,testaim1)
  cor7 = cor(proj_test_tpm2_245,testaim2)
  cor8 = cor(proj_test_tpm2_585,testaim2)
  
  pvs5 = cor.test(proj_test_tpm1_245,testaim1)$p.value
  pvs6 = cor.test(proj_test_tpm1_585,testaim1)$p.value
  pvs7 = cor.test(proj_test_tpm2_245,testaim2)$p.value
  pvs8 = cor.test(proj_test_tpm2_585,testaim2)$p.value
  
  dfcor2 = data.frame(
    x = c(-1,-1,-1.5,-1.5),
    y = c(-1.5,-2.0,-2,-2.5),
    label = c(paste0('SSP245 cor: ',round(cor5,2),
                     '(',scientific(pvs5,2),')'),
              paste0('SSP585 cor: ',round(cor6,2),
                     '(',scientific(pvs6,2),')'),
              paste0('SSP245 cor: ',round(cor7,2),
                     '(',scientific(pvs7,2),')'),
              paste0('SSP585 cor: ',round(cor8,2),
                     '(',scientific(pvs8,2),')')),
    type = c('Projected T in TPM1 by 15% test sample',
             'Projected T in TPM1 by 15% test sample',
             'Projected T in TPM2 by 15% test sample',
             'Projected T in TPM2 by 15% test sample'),
    variable = rep(c("Simu_SSP245",'Simu_SSP585'),2)
  )
  
  p2 = p2 + 
    geom_text(data = dfcor2,aes(x = x,y= y,label = label,
                                color = variable),
              size = 4,hjust = 0)
  
  cor9 = cor(hist_inorder_tpm1_245,aim1)
  cor10 = cor(hist_inorder_tpm1_585,aim1)
  cor11 = cor(proj_histiorder_tpm2_245,aim2)
  cor12 = cor(proj_histiorder_tpm2_585,aim2)
  
  pvs9 = cor.test(hist_inorder_tpm1_245,aim1)$p.value
  pvs10 = cor.test(hist_inorder_tpm1_585,aim1)$p.value
  pvs11 = cor.test(proj_histiorder_tpm2_245,aim2)$p.value
  pvs12 = cor.test(proj_histiorder_tpm2_585,aim2)$p.value
  
  dfcor3 = data.frame(
    x = date[5],
    y = c(-2.5,-3,-2.5,-3),
    label = c(paste0('SSP245 cor: ',round(cor9,2),
                     '(',scientific(pvs9,2),')'),
              paste0('SSP585 cor: ',round(cor10,2),
                     '(',scientific(pvs10,2),')'),
              paste0('SSP245 cor: ',round(cor11,2),
                     '(',scientific(pvs11,2),')'),
              paste0('SSP585 cor: ',round(cor12,2),
                     '(',scientific(pvs12,2),')')),
    type = c('Projected T in TPM1 by full sequential data',
             'Projected T in TPM1 by full sequential data',
             'Projected T in TPM2 by full sequential data',
             'Projected T in TPM2 by full sequential data'),
    variable = rep(c("Simu_SSP245",'Simu_SSP585'),2)
  )
  
  p3 = p3 + 
    geom_text(data = dfcor3,aes(x = x,y= y,label = label,
                                color = variable),
              size = 4,hjust = 0)
  
  library(cowplot)
  
  p123 = plot_grid(p1,p2,p3,
                   rel_heights = c(1,1,1),
                   rel_widths = c(1,1,1),
                   ncol = 1)
  
  p123 = plot_grid(p123,legl,
                   rel_heights = c(10,1),
                   rel_widths = c(1,1),
                   ncol = 1)
  output = 'main_plot/SI/figs_train_test_and_project_tpm_tibet'
  dir.create(output)
  output_main = paste0(output,'/figs_train_test_ful_project_tpm_tibet.png')
  output_leg = paste0(output,'/figs_point_leg.png')
  
  png(output_main,
      height = 25,
      width = 25,
      units = 'cm',
      res = 800)
  print(p123)
  dev.off()
  
  png(output_leg,
      height = 25,
      width = 25,
      units = 'cm',
      res = 800)
  print(legp)
  dev.off()
  
  
  
}
figs_trend_pme_tws <- function(
  
){
  
  negmmk = as.data.frame(
    fread('main_plot_data/fig2/negmmk_eurasia.csv')
  )
  colnames(negmmk) = c('long','lat','TWS_MMK')
  
  negmmk$levels = cut(negmmk$TWS_MMK,
                      breaks = c(-557,seq(-25,0,2.5)))
  nclass = length(unique(negmmk$levels))
  library(RColorBrewer)
  filmmk = colorRampPalette(
    brewer.pal(9,'Spectral')[1:5]
  )(nclass*5)
  filmmk = filmmk[seq(1,nclass*4,4)]
  
  pmemmk = as.data.frame(
    fread('main_plot_data/fig2/negmmk_nato_trend.csv')
  )
  mmkio = as.data.frame(fread('output/pme_mmkio/pmemmkio.csv'))
  colnames(mmkio) = c('long','lat','mmk')
  
  naidio= which(is.na(mmkio$mmk))
  mmkio = mmkio[-naidio,]
  negidio = which(mmkio$mmk <=0)
  mmkio = mmkio[negidio,]
  
  pmemmk = rbind(pmemmk,mmkio)
  
  pmemmk$levels = cut(pmemmk$mmk,
                      breaks =c(-83,seq(-20,2,2)))
  nclass2 = length(unique(pmemmk$levels))
  filpme = colorRampPalette(
    brewer.pal(9,'Spectral')
  )(nclass2*4)
  
  filpme = filpme[seq(1,nclass2*2,2)]
  
  world = shp_management('world')
  world = crop(world,extent(-180,180,0,90))
  tibet = shp_management('tibet')
  
  neg_shps = 'shp/cluster_tws_neg_shp_deter'
  neg_shps = list.files(neg_shps,full.names = T,
                        pattern = '*.shp$')
  neg_shps = lapply(neg_shps,shapefile)   
  neg_shps = neg_shps[c(1,2)]
  neg_shps = do.call('bind',neg_shps)
  
  bigsubs = 'shp/big_scale_subs/'
  hsrid = as.data.frame(fread('main_plot_data/fig2/HSRid.csv'))
  hsrid = as.numeric(hsrid$HSRid)
  
  bigsubs = paste0(bigsubs,
                   'region',1:15,'.shp')
  bigsubs = bigsubs[-14]
  
  bigsubs = lapply(bigsubs,shapefile)
  
  bigsubs = do.call('bind',bigsubs)
  library(ggnewscale)
  
  trajdf = as.data.frame(
    fread('whole_time_traj/whole_time_traj.csv')
  )
  trajdf$region[which(is.na(trajdf$region))] = 'NA'
  
  figlabels = data.frame(
    x = -150,
    y = 80,
    label = '(d)'
  )
  pmap = ggplot()+
    geom_polygon(data = world,
                 aes(x = long,y = lat,group = group),
                 color = 'black',
                 size = 0.5,
                 fill = 'transparent')+
    geom_tile(data = negmmk,
              aes(x = long,y = lat,
                  fill = levels))+
    geom_polygon(data = tibet,
                 aes(x = long,y = lat,group = group),
                 color = 'black',
                 size = 0.5,
                 fill = 'transparent')+
    geom_polygon(data = neg_shps,
                 aes(x = long,y = lat,group = group),
                 color = 'black',
                 size = 0.5,
                 fill = 'transparent')+
    scale_fill_manual(values = filmmk,
                      guide = guide_legend(
                        title= 'TWS_MMK_Trend',
                        title.position = 'top',
                        nrow = 3,order=1
                      ))+
    geom_text(data = figlabels,
              aes(x = x,y= y,label = label),
              size = 4,color ='black')+
    theme_bw()+
    theme(axis.text.y = element_text(angle = 90,hjust = 0.5))+
    new_scale_fill()+
    geom_tile(data =pmemmk,
              aes(x = long,y = lat,
                  fill = levels))+
    scale_fill_manual(values = filpme,
                      guide = guide_legend(
                        title = 'PME_NATO_MMK_Trend',
                        title.position = 'top',
                        nrow = 3,order = 2
                      ))+
    theme(legend.position = 'none')
    
  fontsize = 14
  text_theme = theme(
    legend.text = element_text(size =fontsize,
                               color = 'black'),
    legend.title = element_text(size =fontsize,
                                color = 'black'),
    axis.text = element_text(size =fontsize,
                             color = 'black'),
    axis.title = element_text(size =fontsize,
                              color = 'black')
    )
  
  pmap = pmap  + text_theme
  
  cur_df = as.data.frame(
    fread('/home/share/R_project/xinjiang_vapor/analysis_output/fig4/current_df.csv')
  )
  
  idless50 = which(cur_df$lat <= 50 &
                     cur_df$lat >= 10)
  cur_df = cur_df[idless50,]
  
  idbig1 = which(cur_df$u>0 &
                   cur_df$v >0)
  idbig2 = which(cur_df$u<0 &
                   cur_df$v >0)
  idbig3 = which(cur_df$u>0 &
                   cur_df$v <0)
  
  
  cur_df1 = cur_df[idbig1,]
  cur_df2 = cur_df[idbig2,]
  cur_df3 = cur_df[idbig3,]
  
  cur_df3 = cur_df3[
    which(cur_df3$long > -20 &
            cur_df3$lat <= 40 &
            cur_df3$lat >=30),
  ]
  
  cid1 = seq(1,nrow(cur_df1),40)
  cid2 = seq(1,nrow(cur_df2),200)
  cid3 = seq(1,nrow(cur_df3),30)
  
  cur_df1 = cur_df1[cid1,]
  cur_df2 = cur_df2[cid2,]
  cur_df3 = cur_df3[cid3,]
  
  
  cols_cur = c('#2988AE','#30376E','#4169E1')
  
  library(ggsci)
  col_traj = pal_material('blue')(9)
  col_traj = colorRampPalette(col_traj)(9*3)
  col_traj = col_traj[seq(2,9*3,2)][4:12]
  
  pmap = pmap + 
    geom_path(data = trajdf,
              aes(x = long,y= lat,
                  group = routeid,
                  color = region),
              size = 0.7,
              arrow = arrow(20,
                            unit(0.15,'inches'),
                            type ='open'),
              show.legend = F)+
    geom_segment(data = cur_df1,
                 aes(x = long,y = lat,
                     xend = long+u,
                     yend = lat+v),
                 arrow = arrow(angle = 20,unit(0.15,'cm'),
                               type = 'open'),
                 color = cols_cur[1])+
    geom_segment(data = cur_df2,
                 aes(x = long,y = lat,
                     xend = long+u,
                     yend = lat+v),
                 arrow = arrow(angle = 20,unit(0.2,'cm'),
                               type = 'open'),
                 color = cols_cur[2])+ 
    geom_segment(data = cur_df3,
                 aes(x = long,y = lat,
                     xend = long+u,
                     yend = lat+v),
                 arrow = arrow(angle = 20,unit(0.2,'cm'),
                               type = 'open'),
                 color = cols_cur[3])+
    scale_color_manual(values = col_traj)+
    scale_x_continuous(breaks = c(-100,0,100),
                       labels = paste0(c(100,0,100),c('°W','°','°E')))+
    scale_y_continuous(breaks = c(0,20,40,60,80),
                       labels = paste0(c(0,20,40,60,80),c('°',rep('°N',4))))+
    xlab('Longitude')+
    ylab('Latitude')
    
  
  return(pmap)
  
  
  
  
}
figs_tws_annual_mean_by_year <- function(
  
){
  
}
figs_tws_annual_twsevo_tibet <- function(
  
){
  library(doParallel)
  library(data.table)
  world = shp_management('world')
  world = crop(world,extent(-180,180,0,90))
  
  tws = data_management('grace')
  tibet = shp_management('tibet')
  world = shp_management('world')
  ex = extent(tibet)
  inputsubs = paste0('shp/big_scale_subs/','region',1:15,'.shp')
  bigsubs = lapply(inputsubs,shapefile)
  bigsubs = do.call('bind',bigsubs)
  ex = extent(tibet)
  tws = mask(tws,world)
  tws = mask(tws,tibet)
  
  twsdf = as.data.frame(tws,xy = T)
  #colnames(twsdf) = c('long','lat','tws')
  
  naid = which(is.na(twsdf[,3]))
  if(length(naid)!=0){
    twsdf = twsdf[-naid,]
  }
  
  long = twsdf[,1]
  lat = twsdf[,2]
  twsdf = twsdf[,-c(1,2)]
  
  sub_calc_ann_sum <-function(i){
    source('/home/share/R_project/xinjiang_vapor/mmkTrend.R')
    x = as.numeric(twsdf[i,])
    #x = trend_fun(x)
    x = x[-c(169:174)]
    xm = matrix(x,nrow = 12)
    xm = apply(xm,2,sum,na.rm = T)
    return(xm)
    
  }
  
  i = 1:nrow(twsdf)
  i <<- i
  twsdf<<-twsdf
  cl = makeCluster(10)
  clusterExport(cl,c('i','twsdf'))
  twsannsum = parLapply(cl,i,sub_calc_ann_sum)
  stopCluster(cl)
  
  twsannsum = do.call('rbind',twsannsum)
  colnames(twsannsum) =paste0('Year',2003:2016)
  twsdf = data.frame(long = long,lat = lat,twsannsum)
  dir.create('output/figs_twsann_sum')
  #fwrite(twsdf,'output/figs_twsann_sum/twsdf.csv')
  
  twsdfm = reshape2::melt(twsdf,c('long','lat'))
  
  cuts = c(-409,-200,-150,-100,-50,seq(-20,20,2),50,100,150,205)
  
  twsdfm$levels = cut(twsdfm$value,
                      breaks = cuts)
  
  nclass = length(unique(twsdfm$levels))
  library(RColorBrewer)
  
  fils = colorRampPalette(
    brewer.pal(9,'Spectral')
  )(nclass*3)
  
  fils = fils[seq(1,nclass*3,3)]
  
  neg_shps = list.files('shp/cluster_tws_neg_shp_deter',
                        pattern = '*.shp$',full.names =T)
  neg_shps = lapply(neg_shps[1:2],shapefile)
  neg_shps = do.call(bind,neg_shps)
  
  twsdfm1 = twsdfm[which(twsdfm$variable %in% 
                     c(paste0('Year',2003:2008))),]
  twsdfm2 = twsdfm[-which(twsdfm$variable %in% 
                           c(paste0('Year',2003:2008))),]
  label1 = data.frame(
    x = 70,y = 28,
    label = paste('(',letters[1:6],')'),
    variable = paste0('Year',2003:2008)
  )
  label2 = data.frame(
    x = 70,y = 28,
    label = paste('(',letters[7:14],')'),
    variable = paste0('Year',2009:2016)
  )
  pmap1 = ggplot()+
    geom_tile(data = twsdfm1,
              aes(x = long,y = lat,
                  fill = levels))+
    geom_polygon(data = tibet,
                 aes(x =long,y = lat,
                     group = group),
                 size = 0.5,
                 color = 'black',
                 fill = 'transparent')+
    geom_polygon(data = neg_shps,
                 aes(x = long,y = lat,
                     group = group),
                 size = 0.5,
                 color = 'black',
                 fill = 'transparent')+
    geom_text(data = label1,aes(x = x,y = y,label = label),
              size =4,color = 'black')+
    scale_x_continuous(breaks = c(70,85,100),
                       label = paste0(c(70,85,100),'°E'))+
    scale_y_continuous(breaks = c(30,40),
                       label = paste0(c(30,40),'°N'))+
    scale_fill_manual(values = fils)+
    theme_bw()+
    theme(panel.grid = element_blank(),
          legend.position = 'none')+
    facet_wrap(~variable,nrow = 2)+
    xlab('Longitude')+
    ylab('Latitude')
  
  pmap2 = ggplot()+
    geom_tile(data = twsdfm2,
              aes(x = long,y = lat,
                  fill = levels))+
    geom_polygon(data = tibet,
                 aes(x =long,y = lat,
                     group = group),
                 size = 0.5,
                 color = 'black',
                 fill = 'transparent')+
    geom_polygon(data = neg_shps,
                 aes(x = long,y = lat,
                     group = group),
                 size = 0.5,
                 color = 'black',
                 fill = 'transparent')+
    geom_text(data = label2,aes(x = x,y = y,label = label),
              size =4,color = 'black')+
    scale_fill_manual(values = fils)+
    scale_x_continuous(breaks = c(70,85,100),
                       label = paste0(c(70,85,100),'°E'))+
    scale_y_continuous(breaks = c(30,40),
                       label = paste0(c(30,40),'°N'))+
    theme_bw()+
    theme(legend.position = 'bottom')+
    theme(panel.grid = element_blank())+
    facet_wrap(~variable,nrow = 2)+
    xlab('Longitude')+
    ylab('Latitude')
  
  pos_area = as.data.frame(fread('output/pos_area/pos_area.csv'))
  pos_area = as.numeric(pos_area[,1])
  pos_area1 = pos_area / 10000
  
  
  negshps_by_year = lapply(list.files('/media/sdb5/Vapor_projcts/Vapor_tibet/shp/twsneg_border',
                                      full.names = T,
                                      pattern = '*.shp$'),
                           shapefile)
  tibet = shp_management('tibet')
  yearname = paste0('Year',2003:2016)
  col_border = pal_lancet(alpha = 0.8)(9)
  col_border = colorRampPalette(col_border)(12)
  
  for(i in 1:6){
    tmp = negshps_by_year[[i]]
    tmp = fortify(tmp)
    tmp$variable = yearname[i]
    
    pmap1 = pmap1 + 
      geom_polygon(data = tmp,
                   aes(x = long,y = lat,group = group),
                   size  = 1.5,
                   color = col_border[9],
                   fill = 'transparent')
  }
  for(i in 7:14){
    tmp = negshps_by_year[[i]]
    tmp = fortify(tmp)
    tmp$variable = yearname[i]
    
    pmap2 = pmap2 + 
      geom_polygon(data = tmp,
                   aes(x = long,y = lat,group = group),
                   size  = 1.5,
                   color = col_border[9],
                   fill = 'transparent')
  }
  
  fontsize = 14
  text_theme = theme(
    axis.text = element_text(size =fontsize,color = 'black'),
    axis.title = element_text(size =fontsize,color = 'black'),
    legend.text = element_text(size =fontsize,color = 'black'),
    legend.title = element_text(size =fontsize,color = 'black'),
    strip.text = element_text(size =fontsize,color = 'black')
  )
  pmap1 = pmap1+text_theme+
    theme(axis.text.y = element_text(angle = 90,hjust = 0.5))
  pmap2 = pmap2+text_theme+
    guides(fill = guide_legend(nrow = 4,title = 'Annual sum of TWS',
                               title.position = 'top'))+
    theme(axis.text.y = element_text(angle = 90,hjust = 0.5))
  
  library(ggpubr)
  leg2 = as_ggplot(get_legend(pmap2))
  pmap2 = pmap2+theme(legend.position = 'none')
  
  pmap12 = plot_grid(pmap1,pmap2,ncol = 1,
                     rel_widths = c(1,1),
                     rel_heights = c(1,1))
  
  tibet_area = area(tibet)/10^10
  neg_area = tibet_area - pos_area1
  
  year = 2003:2016

  linedf = data.frame(
    Year = year,
    Negative_TWS_area = neg_area,
    Positive_TWS_area = pos_area1
  )  
  linedf = reshape2::melt(linedf,"Year")
  
  cols  = pal_lancet()(9)[c(1,7)]
  cols = c('Negative_TWS_area'= cols[1],
           'Positive_TWS_area' = cols[2])
  figsline = data.frame(x = 2003,y = 250,
                        label = '(o)')
  linedf$value[which(linedf$variable == 'Negative_TWS_area')] = 
    linedf$value[which(linedf$variable == 'Negative_TWS_area')] *-1
  
  id= order(linedf$Year,decreasing = T)
  
  linedf = linedf[id,]
  
  pbar = ggplot()+
    geom_bar(data = linedf,
              aes(y = value,x = factor(Year,levels = c(2016:2003)),
                  fill = variable),
              position = position_stack(0.7),
              stat = 'identity',
              width = 0.7,
              alpha = 0.7)+
    geom_text_repel(data = linedf,
              aes(x = factor(Year,levels = c(2016:2003)),
                  y = value+5,label = round(abs(linedf$value),2)),
              size = 4,color = 'black',bg.color = 'white',
              bg.r =0.25,
              force = F)+
    geom_text(data = figsline,
              aes(x = as.factor(x),y = y,label = label),
              size = 4,color = 'black')+
    scale_fill_manual(values = cols)+
    #scale_x_continuous()
    scale_x_discrete(breaks =as.factor(rev(seq(2003,2016,4))))+
    scale_y_continuous(breaks= c(-200,-100,0,100,200),
                       labels = c(200,100,0,100,200))+
    theme_bw()+
    text_theme+
    coord_flip()+
    theme(axis.text.y = element_text(angle = 90,hjust = 0.5))+
    theme(legend.position = 'none')+
    xlab('Year')+
    ylab("Area (10 km )")
  
  
  pful = plot_grid(pmap12,pbar,
                   nrow = 1,rel_widths = c(10,4),
                   rel_heights = c(1,1))
    
  legbar = as_ggplot(get_legend(pbar+theme(legend.position = 'bottom')+
                                  guides(fill = guide_legend(nrow = 2,
                                                             title = ''))))
 
  
  output = 'main_plot/SI/figs_tws_annual_twsevo_tibet'
  dir.create(output)
  output_main = paste0(output,'/main_figs.png')
  output_leg1 = paste0(output,'/leg1.png')
  output_leg2 = paste0(output,'/leg2.png')
  
  png(output_main,
      height = 25,
      width = 25,
      units = 'cm',
      res = 800)
  print(pful)
  dev.off()
  
  png(output_leg1,
      height = 25,
      width = 25,
      units = 'cm',
      res = 800)
  print(leg2)
  dev.off()
  
  png(output_leg2,
      height = 25,
      width = 25,
      units = 'cm',
      res = 800)
  print(legbar)
  dev.off()
  
}
figs2_monthly_contribution_tibet_noloss<-function(
  
){
  input_contr_by_sou = 'main_plot_data/fig1/contr_in_source_variance_new.csv'
  contr_by_sou = as.data.frame(fread(input_contr_by_sou))
  
  input_contr_nolos = 'main_plot_data/fig1/contr_rate_noloss.csv'
  contr_nolos = as.data.frame(fread(input_contr_nolos))
  
  sou_names = contr_by_sou[,1]
  sou_new = contr_nolos$sou_names
  
  contr_nolos1 = contr_nolos[1:9,]
  contr_nolos2 = contr_nolos[10:12,]
  contr_nolos = rbind(contr_nolos1,
                      contr_nolos[13,],
                      contr_nolos2)
  
  contr_by_sou = contr_nolos
  
  sou_names[13] = 'NAM'
  sou_names[2] = 'NATO'
  contr_by_sou = contr_by_sou[,-1]
  
  contr_by_sou[10,]= abs(contr_by_sou[10,])
  
  monthly_mean <- function(x){
    xm = matrix(x,nrow = 12)
    xm = apply(xm,1,mean,na.rm= T)
    return(xm)
  }
  monthly_median <- function(x){
    xm = matrix(x,nrow = 12)
    xm = apply(xm,1,median,na.rm= T)
    return(xm)
  }
  monthly_max <- function(x){
    xm = matrix(x,nrow = 12)
    xm = apply(xm,1,max,na.rm= T)
    return(xm)
  }
  monthly_min <- function(x){
    xm = matrix(x,nrow = 12)
    xm = apply(xm,1,min,na.rm= T)
    return(xm)
  }
  monthly_q25 <- function(x){
    xm = matrix(x,nrow = 12)
    xm = apply(xm,1,quantile,
               na.rm= T,
               probs = 0.25)
    return(xm)
  }
  monthly_q75 <- function(x){
    xm = matrix(x,nrow = 12)
    xm = apply(xm,1,quantile,
               na.rm= T,
               probs = 0.75)
    return(xm)
  }
  
  mean_box = apply(contr_by_sou,1,monthly_mean)
  min_box = apply(contr_by_sou,1,monthly_min)
  max_box = apply(contr_by_sou,1,monthly_max)
  q25_box = apply(contr_by_sou,1,monthly_q25)
  q75_box = apply(contr_by_sou,1,monthly_q75)
  
  colnames(mean_box) = toupper(sou_names)
  colnames(min_box) = toupper(sou_names)
  colnames(max_box) = toupper(sou_names)
  colnames(q25_box) = toupper(sou_names)
  colnames(q75_box) = toupper(sou_names)
  
  date = toupper(month.abb)
  #date = 1:12
  dfmean = data.frame(
    date,
    mean_box
  )
  
  dfmin = data.frame(
    date = date,
    min_box
  )
  
  dfmax =data.frame(
    date   = date,
    max_box
  )
  
  df25 = data.frame(
    date = date,
    q25_box
  )
  
  df75 = data.frame(
    date = date,
    q75_box
  )
  
  
  dfmean = reshape2::melt(dfmean,'date')
  dfmin = reshape2::melt(dfmin,'date')
  dfmax = reshape2::melt(dfmax,'date')
  df25 = reshape2::melt(df25,'date')
  df75 = reshape2::melt(df75,'date')
  
  
  
  dfmaxmin = data.frame(
    date = dfmin$date,
    variable = dfmin$variable,
    max = dfmax$value,
    min = dfmin$value,
    y25 = df25$value,
    y75 = df75$value,
    mean = dfmean$value
  )
  
  cols = colorRampPalette(
    brewer.pal(9,'Set1')
  )(13)
  cols = colorRampPalette(
    pal_npg()(9)
  )(13)
  
  idsort = order(apply(contr_by_sou,1,mean,
                       na.rm = T),
                 decreasing = T)
  mean_contr = sort(apply(contr_by_sou,1,mean,
                          na.rm = T),
                    decreasing = T)
  sous = toupper(sou_names)[idsort]
  
  sous1 = sous[1:4]
  sous2 = sous[5:13]
  
  dfg1 = dfmaxmin[which(dfmaxmin$variable
                        %in% sous1),]
  dfg2 = dfmaxmin[which(dfmaxmin$variable
                        %in% sous2),]
  
  dfmaxmin$variable = factor(dfmaxmin$variable,
                             levels = sous)
  
  dfg1$variable = factor(dfg1$variable,
                         levels = sous1)
  dfg2$variable = factor(dfg2$variable,
                         levels = sous2)
  dates1 = date[1:5]
  dates2 = date[6:12]
  
  dfg1$date = factor(dfg1$date,
                     levels = date)
  dfg2$date = factor(dfg2$date,
                     levels = date)
  library(ggsci)
  pmonth1 = ggplot()+
    geom_boxplot(data = dfg1,
                 aes(x = date,
                     ymin = min, 
                     lower = y25, 
                     middle = mean, 
                     upper = y75, 
                     ymax = max,
                     fill = variable),
                 stat = "identity")+
    scale_fill_manual(values = cols[c(1,3,4,2)])+
    scale_x_discrete(breaks = date[seq(1,12,3)])+
    facet_wrap(~variable,nrow = 1)+
    theme_bw()
  library(ggsci)
  pmonth2 = ggplot()+
    geom_boxplot(data = dfg2,
                 aes(x = date,
                     ymin = min, 
                     lower = y25, 
                     middle = mean, 
                     upper = y75, 
                     ymax = max,
                     fill = variable),
                 stat = "identity")+
    scale_fill_manual(values = cols[c(6,9,5,10,
                                      7,11,8,12,13)])+
    scale_x_discrete(breaks = date[seq(1,12,3)])+
    facet_wrap(~variable,nrow = 2,
               scales = 'free')+
    theme_bw()
  
  pmonth3 = ggplot()+
    geom_boxplot(data = dfmaxmin,
                 aes(x = date,
                     ymin = min, 
                     lower = y25, 
                     middle = mean, 
                     upper = y75, 
                     ymax = max,
                     fill = variable),
                 stat = "identity")+
    scale_fill_manual(values = c(cols[c(1,3,4,2,6,9,5,10,
                                        7,11,8,12,13)]),
                      guide = guide_legend(
                        title = 'Water vapor source region',
                        title.position = 'top',
                        ncol = 2
                      ))+
    scale_x_discrete(breaks = date[seq(1,12,3)])+
    facet_wrap(~variable,nrow = 2,
               scales = 'free')+
    theme_bw()
  
  fontsize = 12
  ##########
  text_theme_set = theme(
    axis.text = element_text(
      color = 'black',
      size = fontsize),
    axis.title = element_text(face = 'bold',
                              color = 'black',
                              size = fontsize),
    legend.text = element_text(
      color = 'black',
      size = fontsize),
    legend.title = element_text(
      color = 'black',
      size = fontsize),
    legend.position = 'none',
    strip.text = element_text(
      color = 'black',
      size = fontsize)
  )
  ##########
  
  dftext1 = data.frame(
    x = rep('JAN',4),
    y = rep(68,4),
    label = paste0('(',letters[1:4],')'),
    variable = sous1
  )
  dftext2 = data.frame(
    x = rep('JAN',9),
    y = c(25,27,13,7.8,12.5,
          5.25,4.3,2.3,3)*1.1,
    label = paste0('(',letters[5:13],')'),
    variable = sous2
  )
  
  mean_contr = as.numeric(mean_contr)
  mean_contr = round(mean_contr,2)
  dftext3 = data.frame(
    x = rep('MAR',4),
    y = rep(68,4),
    label = paste0("MCR: ",mean_contr[1:4],'%'),
    variable = sous1
  )
  
  dftext4 = data.frame(
    #x = rep('APR',9),
    x = c('MAR','MAR','MAR','MAR','MAR',
          'MAR','MAR','MAR','MAR'),
    y = c(25,27,13,7.8,12.5,
          5.25,4.3,2.3,3)*1.1,
    label = paste0("MCR: ",mean_contr[5:13],'%'),
    variable = sous2
  )
  pmonth1 = pmonth1+text_theme_set
  pmonth2 = pmonth2+text_theme_set
  pmonth3 = pmonth3+text_theme_set
  
  pmonth1 = pmonth1+
    geom_text(data = dftext1,
              aes(x = x,y = y,label = label),
              size = 4,
              color = 'black',
              hjust = 0)+
    geom_text(data = dftext3,
              aes(x = x,y = y,label = label),
              size = 4,
              color = 'black',
              hjust = 0)
  pmonth2 = pmonth2+
    geom_text(data = dftext2,
              aes(x = x,y = y,label = label),
              size = 4,
              color = 'black',
              hjust =0)+
    geom_text(data = dftext4,
              aes(x = x,y = y,label = label),
              size = 4,
              color = 'black',
              hjust = 0)
  
  
  comb_set = theme(
    legend.position = 'none',
    axis.title = element_blank(),
    strip.text = element_blank()
  )
  
  pmonth1 = pmonth1+comb_set
  pmonth2 = pmonth2+comb_set
  
  pmon = plot_grid(
    pmonth1,
    pmonth2,
    ncol =1,
    align = 'lr',
    axis = 'hv',
    rel_widths = c(1,1),
    rel_heights = c(1,2)
  )
  
  plegend = as_ggplot(
    get_legend(pmonth3+
                 theme(legend.position = 'bottom'))
  )
  
  plegend = plegend+
    theme(plot.margin = unit(c(0,0,0,0),'cm'))
  
  pmon_leg = ggdraw()+
    draw_plot(pmon)+
    draw_plot(plegend,
              x = 0.85,
              y = 0.2,
              width = 0.5,
              height = 0.5)
  
  #pmon_leg = plot_grid(
  #  pmon,
  #  plegend,
  #  ncol = 1,
  #  rel_heights = c(10,1),
  #  rel_widths = c(1,1)
  #)
  
  output = 'main_plot/SI/monthly_contribution_noloss/'
  dir.create(output)
  outputleg = paste0(output,'figs3_leg.png')
  output = paste0(output,'figs3.png')
  
  png(output,
      height = 22,
      width = 26,
      units = 'cm',
      res = 800)
  print(pmon)
  dev.off()
  
  png(outputleg,
      height = 22,
      width = 26,
      units = 'cm',
      res = 800)
  print(plegend)
  dev.off()
  
  
}




figs2_monthly_contribution_tibet<-function(
  
){
  
  input_contr_by_sou = 'main_plot_data/fig1/contr_in_source_variance_new.csv'
  contr_by_sou = as.data.frame(fread(input_contr_by_sou))
  
  sou_names = contr_by_sou[,1]
  sou_names[13] = 'NAM'
  sou_names[2] = 'NATO'
  contr_by_sou = contr_by_sou[,-1]
  
  contr_by_sou[10,]= abs(contr_by_sou[10,])
  
  monthly_mean <- function(x){
    xm = matrix(x,nrow = 12)
    xm = apply(xm,1,mean,na.rm= T)
    return(xm)
  }
  monthly_median <- function(x){
    xm = matrix(x,nrow = 12)
    xm = apply(xm,1,median,na.rm= T)
    return(xm)
  }
  monthly_max <- function(x){
    xm = matrix(x,nrow = 12)
    xm = apply(xm,1,max,na.rm= T)
    return(xm)
  }
  monthly_min <- function(x){
    xm = matrix(x,nrow = 12)
    xm = apply(xm,1,min,na.rm= T)
    return(xm)
  }
  monthly_q25 <- function(x){
    xm = matrix(x,nrow = 12)
    xm = apply(xm,1,quantile,
               na.rm= T,
               probs = 0.25)
    return(xm)
  }
  monthly_q75 <- function(x){
    xm = matrix(x,nrow = 12)
    xm = apply(xm,1,quantile,
               na.rm= T,
               probs = 0.75)
    return(xm)
  }
  
  mean_box = apply(contr_by_sou,1,monthly_mean)
  min_box = apply(contr_by_sou,1,monthly_min)
  max_box = apply(contr_by_sou,1,monthly_max)
  q25_box = apply(contr_by_sou,1,monthly_q25)
  q75_box = apply(contr_by_sou,1,monthly_q75)
  
  colnames(mean_box) = toupper(sou_names)
  colnames(min_box) = toupper(sou_names)
  colnames(max_box) = toupper(sou_names)
  colnames(q25_box) = toupper(sou_names)
  colnames(q75_box) = toupper(sou_names)
  
  date = toupper(month.abb)
  #date = 1:12
  dfmean = data.frame(
    date,
    mean_box
  )
  
  dfmin = data.frame(
    date = date,
    min_box
  )
  
  dfmax =data.frame(
    date   = date,
    max_box
  )
  
  df25 = data.frame(
    date = date,
    q25_box
  )
  
  df75 = data.frame(
    date = date,
    q75_box
  )
  
  
  dfmean = reshape2::melt(dfmean,'date')
  dfmin = reshape2::melt(dfmin,'date')
  dfmax = reshape2::melt(dfmax,'date')
  df25 = reshape2::melt(df25,'date')
  df75 = reshape2::melt(df75,'date')
  
  
  
  dfmaxmin = data.frame(
    date = dfmin$date,
    variable = dfmin$variable,
    max = dfmax$value,
    min = dfmin$value,
    y25 = df25$value,
    y75 = df75$value,
    mean = dfmean$value
  )
  
  cols = colorRampPalette(
    brewer.pal(9,'Set1')
  )(13)
  cols = colorRampPalette(
    pal_npg()(9)
  )(13)
  
  idsort = order(apply(contr_by_sou,1,mean,
                       na.rm = T),
                 decreasing = T)
  mean_contr = sort(apply(contr_by_sou,1,mean,
                          na.rm = T),
                    decreasing = T)
  sous = toupper(sou_names)[idsort]
  
  sous1 = sous[1:4]
  sous2 = sous[5:13]
  
  dfg1 = dfmaxmin[which(dfmaxmin$variable
                        %in% sous1),]
  dfg2 = dfmaxmin[which(dfmaxmin$variable
                        %in% sous2),]
  
  dfmaxmin$variable = factor(dfmaxmin$variable,
                             levels = sous)
  
  dfg1$variable = factor(dfg1$variable,
                         levels = sous1)
  dfg2$variable = factor(dfg2$variable,
                         levels = sous2)
  dates1 = date[1:5]
  dates2 = date[6:12]
  
  dfg1$date = factor(dfg1$date,
                     levels = date)
  dfg2$date = factor(dfg2$date,
                     levels = date)
  library(ggsci)
  pmonth1 = ggplot()+
    geom_boxplot(data = dfg1,
                 aes(x = date,
                     ymin = min, 
                     lower = y25, 
                     middle = mean, 
                     upper = y75, 
                     ymax = max,
                     fill = variable),
                 stat = "identity")+
    scale_fill_manual(values = cols[1:4])+
    scale_x_discrete(breaks = date[seq(1,12,3)])+
    facet_wrap(~variable,nrow = 1)+
    theme_bw()
  library(ggsci)
  pmonth2 = ggplot()+
    geom_boxplot(data = dfg2,
                 aes(x = date,
                     ymin = min, 
                     lower = y25, 
                     middle = mean, 
                     upper = y75, 
                     ymax = max,
                     fill = variable),
                 stat = "identity")+
    scale_fill_manual(values = cols[5:13])+
    scale_x_discrete(breaks = date[seq(1,12,3)])+
    facet_wrap(~variable,nrow = 2,
               scales = 'free')+
    theme_bw()
  
  pmonth3 = ggplot()+
    geom_boxplot(data = dfmaxmin,
                 aes(x = date,
                     ymin = min, 
                     lower = y25, 
                     middle = mean, 
                     upper = y75, 
                     ymax = max,
                     fill = variable),
                 stat = "identity")+
    scale_fill_manual(values = cols,
                      guide = guide_legend(
                        title = 'Water vapor source region',
                        title.position = 'top',
                        ncol = 2
                      ))+
    scale_x_discrete(breaks = date[seq(1,12,3)])+
    facet_wrap(~variable,nrow = 2,
               scales = 'free')+
    theme_bw()
  
  fontsize = 12
  ##########
  text_theme_set = theme(
    axis.text = element_text(
      color = 'black',
      size = fontsize),
    axis.title = element_text(face = 'bold',
                              color = 'black',
                              size = fontsize),
    legend.text = element_text(
      color = 'black',
      size = fontsize),
    legend.title = element_text(
      color = 'black',
      size = fontsize),
    legend.position = 'none',
    strip.text = element_text(
      color = 'black',
      size = fontsize)
  )
  ##########
  
  dftext1 = data.frame(
    x = rep('JAN',4),
    y = rep(68,4),
    label = paste0('(',letters[1:4],')'),
    variable = sous1
  )
  dftext2 = data.frame(
    x = rep('JAN',9),
    y = c(6.75,4.5,10,3,5,
          3,2,1.25,0.27),
    label = paste0('(',letters[5:13],')'),
    variable = sous2
  )
  
  mean_contr = as.numeric(mean_contr)
  mean_contr = round(mean_contr,2)
  dftext3 = data.frame(
    x = rep('MAR',4),
    y = rep(68,4),
    label = paste0("MCR: ",mean_contr[1:4],'%'),
    variable = sous1
  )
  
  dftext4 = data.frame(
    #x = rep('APR',9),
    x = c('MAR','MAY','MAR','MAR','MAR',
          'MAR','MAR','MAR','MAR'),
    y = c(6.75,4.5,10,3,5,
          3,2,1.25,0.27),
    label = paste0("MCR: ",mean_contr[5:13],'%'),
    variable = sous2
  )
  pmonth1 = pmonth1+text_theme_set
  pmonth2 = pmonth2+text_theme_set
  pmonth3 = pmonth3+text_theme_set
  
  pmonth1 = pmonth1+
    geom_text(data = dftext1,
              aes(x = x,y = y,label = label),
              size = 4,
              color = 'black',
              hjust = 0)+
    geom_text(data = dftext3,
              aes(x = x,y = y,label = label),
              size = 4,
              color = 'black',
              hjust = 0)
  pmonth2 = pmonth2+
    geom_text(data = dftext2,
              aes(x = x,y = y,label = label),
              size = 4,
              color = 'black',
              hjust =0)+
    geom_text(data = dftext4,
              aes(x = x,y = y,label = label),
              size = 4,
              color = 'black',
              hjust = 0)
  
  
  comb_set = theme(
    legend.position = 'none',
    axis.title = element_blank(),
    strip.text = element_blank()
  )
  
  pmonth1 = pmonth1+comb_set
  pmonth2 = pmonth2+comb_set
  
  pmon = plot_grid(
    pmonth1,
    pmonth2,
    ncol =1,
    align = 'lr',
    axis = 'hv',
    rel_widths = c(1,1),
    rel_heights = c(1,2)
  )
  
  plegend = as_ggplot(
    get_legend(pmonth3+
                 theme(legend.position = 'bottom'))
  )
  
  plegend = plegend+
    theme(plot.margin = unit(c(0,0,0,0),'cm'))
  
  pmon_leg = ggdraw()+
    draw_plot(pmon)+
    draw_plot(plegend,
              x = 0.85,
              y = 0.2,
              width = 0.5,
              height = 0.5)
  
  #pmon_leg = plot_grid(
  #  pmon,
  #  plegend,
  #  ncol = 1,
  #  rel_heights = c(10,1),
  #  rel_widths = c(1,1)
  #)
  
  output = 'main_plot/SI/monthly_contribution/'
  dir.create(output)
  outputleg = paste0(output,'figs2_leg.png')
  output = paste0(output,'figs2.png')
  
  png(output,
      height = 22,
      width = 26,
      units = 'cm',
      res = 800)
  print(pmon)
  dev.off()
  
  png(outputleg,
      height = 22,
      width = 26,
      units = 'cm',
      res = 800)
  print(plegend)
  dev.off()
  
  
}




figs4_covar_cor_pmeato_pmesubs<-function
(pmeato,pmesubs){
  
  pmeato = pmeato[,1:4]
  
  cors = 1
  pvs = 1
  for(i in 1:ncol(pmeato)){
    tmp1 = 1
    tmppv1 = 1
    for(j in 1:ncol(pmesubs)){
      tmp2 = cor(pmeato[,i],pmesubs[,j])
      tmp1 = c(tmp1,tmp2)
      
      tmp2pv = cor.test(pmeato[,i],
                        pmesubs[,j])$p.value
      tmppv1 = c(tmppv1,tmp2pv)
    }
    tmp1 = tmp1[-1]
    tmppv1 = tmppv1[-1]
    
    pvs = cbind(pvs,tmppv1)
    cors = cbind(cors,tmp1)
  }
  cors = cors[,-1]
  pvs = pvs[,-1]
  
  as_sci_format <- function(x){
    x = scales::scientific(x,2)
    return(x)
  }
  
  pvscis = apply(pvs,2,as_sci_format)
  
  cors = apply(cors,2,round,2)
  colnames(cors) = paste0('NATO',1:4)
  colnames(pvs) = paste0('NATO',1:4)
  
  dfcors = data.frame(
    region = paste0('SR',1:3),
    regid = 1:3+162+1000,
    cors
  )
  dfpvs = data.frame(
    region = paste0('SR',1:3),
    regid = 1:3+162+1000,
    pvs
  )
  
  dfcors = reshape2::melt(dfcors,c(
    'region','regid'
  ))
  dfpvs = reshape2::melt(dfpvs,c(
    'region','regid'
  ))
  
  dfcors$pv = dfpvs$value
  dfcors$pvlabel = '**'
  lesid1 = which(dfcors$pv <=0.05 &
                  dfcors$pv >0.01)
  larid = which(dfcors$pv > 0.05)
  
  dfcors$pvlabel[lesid1] = '*'
  dfcors$pvlabel[larid] = ''
  
  dfcors$type = rep(c('(d)','(h)','(l)','(p)'),
               each = 3)
  
  dfcors$xlabel = paste0('(',c(letters[1:3],
                    letters[5:7],
                    letters[9:11],
                    letters[13:15]),')')

  
  # line plot 
  colnames(pmeato) = paste0('NATO',1:4)
  colnames(pmesubs) = paste0('Large sub-region',1:3)
  date = seq(as.Date('2003-07-01'),
             as.Date('2016-12-01'),
             '1 month')
  datelabel = as.character(date)
  datelabel = sapply(datelabel,substr,1,4)
  datelabel =as.character(datelabel)
  
  date = 1:162
  dfpme1 = data.frame(
    date = date,
    NATO1 = pmeato[,1]
  )
  dfpme2 = data.frame(
    date = date,
    NATO2 = pmeato[,2]
  )
  dfpme3 = data.frame(
    date = date,
    NATO3 = pmeato[,3]
  )
  dfpme4 = data.frame(
    date = date,
    NATO4 = pmeato[,4]
  )
  
  dfpme1 = reshape2::melt(dfpme1,'date')
  dfpme2 = reshape2::melt(dfpme2,'date')
  dfpme3 = reshape2::melt(dfpme3,'date')
  dfpme4 = reshape2::melt(dfpme4,'date')
  
  dfpme1 = rbind(dfpme1,dfpme1,dfpme1)
  dfpme2 = rbind(dfpme2,dfpme2,dfpme2)
  dfpme3 = rbind(dfpme3,dfpme3,dfpme3)
  dfpme4 = rbind(dfpme4,dfpme4,dfpme4)
  
  dfpme1$type = rep(c('(a) NATO1 vs Large-subregion 1',
                      '(b) NATO1 vs Large-subregion 2',
                      '(c) NATO1 vs Large-subregion 3'),
                    each = 162)
  dfpme2$type = rep(c('(e) NATO2 vs Large-subregion 1',
                      '(f) NATO2 vs Large-subregion 2',
                      '(g) NATO2 vs Large-subregion 3'),
                    each = 162)
  dfpme3$type = rep(c('(i) NATO3 vs Large-subregion 1',
                      '(j) NATO3 vs Large-subregion 2',
                      '(k) NATO3 vs Large-subregion 3'),
                    each = 162)
  dfpme4$type = rep(c('(m) NATO4 vs Large-subregion 1',
                      '(n) NATO4 vs Large-subregion 2',
                      '(o) NATO4 vs Large-subregion 3'),
                    each = 162)
  
  dfpmes = rbind(dfpme1,
                 dfpme2,
                 dfpme3,
                 dfpme4)
  
  dfpmesubs= data.frame(
    date = date,
    pmesubs
  )
  dfpmesubs = reshape2::melt(dfpmesubs,
                             'date')
  
  dfpmesubs1 = dfpmesubs
  dfpmesubs2 = dfpmesubs
  dfpmesubs3 = dfpmesubs
  dfpmesubs4 = dfpmesubs
  
  dfpmesubs1$type = rep(c('(a) NATO1 vs Large-subregion 1',
                          '(b) NATO1 vs Large-subregion 2',
                          '(c) NATO1 vs Large-subregion 3'),
                        each = 162)
  
  dfpmesubs2$type =  rep(c('(e) NATO2 vs Large-subregion 1',
                           '(f) NATO2 vs Large-subregion 2',
                           '(g) NATO2 vs Large-subregion 3'),
                         each = 162)
  
  dfpmesubs3$type = rep(c('(i) NATO3 vs Large-subregion 1',
                      '(j) NATO3 vs Large-subregion 2',
                      '(k) NATO3 vs Large-subregion 3'),
                    each = 162)
  dfpmesubs4$type = rep(c('(m) NATO4 vs Large-subregion 1',
                      '(n) NATO4 vs Large-subregion 2',
                      '(o) NATO4 vs Large-subregion 3'),
                    each = 162)
  
  dfpmesubs1$col = rep(c('PME in SR1','PME in SR2',
                     'PME in SR3'),each =162)
  dfpmesubs2$col = rep(c('PME in SR1','PME in SR2',
                         'PME in SR3'),each =162)
  dfpmesubs3$col = rep(c('PME in SR1','PME in SR2',
                         'PME in SR3'),each =162)
  dfpmesubs4$col = rep(c('PME in SR1','PME in SR2',
                         'PME in SR3'),each =162)
  
  dfpmesubs = rbind(dfpmesubs1,
                    dfpmesubs2,
                    dfpmesubs3,
                    dfpmesubs4)
  dfpmes$col = 'PME in NATOs'
  
  
  dfline = rbind(dfpmes,dfpmesubs)
  library(ggplot2)
  library(ggsci)
  fontsize = 14
  text_theme = theme(
    legend.text = element_text(
      size =fontsize,color = 'black'
    ),
    legend.title = element_text(
      size =fontsize,color = 'black'
    ),
    axis.text = element_text(
      size =fontsize,color = 'black'
    ),
    axis.title = element_text(
      size =fontsize,color = 'black'
    ),
    strip.text = element_blank()
  )
  library(RColorBrewer)
  cols = pal_lancet(alpha = 0.85)(9)[c(7)]
  fils = pal_npg(alpha = 1)(9)[2:4]
  
  cols = c(cols,fils)
  
  dfcors$ys = dfcors$value + 1000
  figline = data.frame(
    x = date[3],
    y = -2,
    label = paste0('(',letters[c(3:14)],')'),
    type = unique(dfpmes$type)
  )
  
  figbar = data.frame(
    x = 1163,
    y = 0.25,
    label = paste0('(',letters[c(6,10,14,18)],')'),
    type = unique(dfcors$type)
  )
  
  pline = ggplot()+
    geom_line(data = dfline,
              aes(x = date,y = value,
                  color = col),
              size = 1.3)+
    geom_text(data = figline,
              aes(x = x,y = y,label = label),
              size = 5,
              color = 'black')+
    scale_color_manual(values = cols)+
    scale_x_continuous(breaks = c(seq(1,162,60)),
                       labels = c(datelabel[seq(1,162,60)]))+
    scale_y_continuous(breaks = seq(-2,2,2))+
    theme_bw()+
    guides(color = guide_legend(title = ''))+
    text_theme+
    theme(
      legend.position = 'bottom',
      strip.background = element_blank())+
    facet_wrap(~type,nrow = 4)+
    xlab("Time")+
    ylab('Indices')
    
  
  pbar = ggplot()+
    geom_bar(data = dfcors,
             aes(x = regid,y = value,
                 fill = region),
             width = 0.5,
             stat = 'identity',
             position = position_dodge2(0.75))+
    geom_text(data = dfcors,
              aes(x = regid,y = value*0.65,
                  label = pvlabel),
              size = 5,
              color = 'white',
              position = position_dodge2(0.75))+    
    geom_text(data = figbar,
              aes(x = x,y = y,label = label),
              size = 5,
              color = 'black')+
    scale_fill_manual(values = fils)+
    scale_x_continuous(breaks = c(163:165+1000),
                       labels = c(paste0('SR',1:3)))+
    scale_y_continuous(breaks = c(-0.35,0,0.25))+
    theme_bw()+
    text_theme+
    guides(fill = guide_legend(title = 'Sub-regions',
                               title.position = 'top'))+
    theme(
      legend.position = 'bottom',
      strip.background = element_blank())+
    facet_wrap(~type,ncol = 1)+
    xlab("Regions")+
    ylab('Correlation coefficient')
  
  world = shp_management('world')
  world = crop(world,extent(-180,180,0,90))
  
  bigsubs = 'shp/big_scale_subs/'
  bigsubs = paste0(bigsubs,
                   'region',1:15,'.shp')
  bigsubs = lapply(bigsubs,shapefile)
  
  bigsubs1 = bigsubs[1:6]
  bigsubs2 = bigsubs[7:12]
  bigsubs3 = bigsubs[13:15]
  
  bigsubs1 = do.call('bind',bigsubs1)
  bigsubs2 = do.call('bind',bigsubs2)
  bigsubs3 = do.call('bind',bigsubs3)
  
  subs1 = as(extent(bigsubs1),'SpatialPolygons')
  subs2 = as(extent(bigsubs2),'SpatialPolygons')
  subs3 = as(extent(bigsubs3),'SpatialPolygons')
  
  subsli = list(subs1,subs2,subs3)
  subs = do.call('bind',
                 subsli)
  tibet = shp_management('tibet')
  natosli = shp_management('cluster_ato')
  natos = do.call('bind',natosli)
  
  world1 = crop(world,c(extent(natos)[1],
                        extent(natos)[2],
                        0,90))
  world2 = crop(world,extent(-20,180,0,90))
  
  loc_center <- function(x){
    x = extent(x)
    cenlong = (x[1]+x[2])/2
    cenlat = (x[3]+x[4])/2
    
    retdf = data.frame(
      x = cenlong,
      y = cenlat
    )
    return(retdf)
  }
  dfsubs = lapply(subsli,loc_center)
  dfnato = lapply(natosli,loc_center)
  
  dfsubs  = do.call(rbind,dfsubs)
  dfnato = do.call(rbind,dfnato)
  
  dfsubs$label = paste0('SR',1:3)
  dfnato$label = paste0('NATO',1:4)
  
  figsub_map1_label = data.frame(
    x = -120,
    y = 10,
    label = '(a)'
  )
  
  figsub_map2_label = data.frame(
    x = 175,
    y = 10,
    label = '(b)'
  )
  
  pmap1 = ggplot()+
    geom_polygon(data = world1,
                 aes(x = long,y = lat,
                     group = group),
                 color = 'black',
                 size = 0.5,
                 fill = 'transparent')+
    geom_polygon(data = natos,
                 aes(x = long,y = lat,
                     group = group),
                 color = 'black',
                 size = 0.8,
                 fill = '#f2f2f3',
                 alpha = 0.75)+
    geom_text(data = dfnato,
              aes(x = x,y = y,label = label),
              size = 5,
              color = 'black')+
    geom_text(data = figsub_map1_label,
              aes(x = x,y = y,label = label),
              size = 5,
              color = 'black')+
    scale_x_continuous(breaks = c(-100,-50,0),
                       labels = c(paste0(c(100,50),'°W'),'0°'))+
    scale_y_continuous(breaks = c(0,40,80),
                       labels = c('0°',paste0(c(40,80),'°N')))+
    theme_bw()+
    text_theme+
    theme(axis.text.y = element_text(angle = 90,hjust = 0.5))+
    xlab('Longitude')+
    ylab('Latitude')
  
  pmap2 = ggplot()+
    geom_polygon(data = world2,
                 aes(x = long,y = lat,
                     group = group),
                 color = 'black',
                 size = 0.5,
                 fill = 'transparent')+
    geom_polygon(data = tibet,
                 aes(x = long,y = lat,
                     group = group),
                 color = 'black',
                 size = 0.5,
                 fill = 'transparent')+
    geom_polygon(data = subs,
                 aes(x = long,y = lat,
                     group = group),
                 color = 'black',
                 size = 0.8,
                 fill = '#f2f2f3',
                 alpha = 0.75)+
    geom_text(data = dfsubs,
              aes(x = x,y = y,label = label),
              size = 5,
              color = 'black')+
    geom_text(data = figsub_map2_label,
              aes(x = x,y = y,label = label),
              size = 5,
              color = 'black')+
    scale_x_continuous(breaks = c(0,50,100,150),
                       labels = c('0°',paste0(c(50,100,150),'°E')))+
    scale_y_continuous(breaks = c(0,40,80),
                       labels = c('0°',paste0(c(40,80),'°N')))+
    theme_bw()+
    text_theme+
    theme(axis.text.y = element_text(angle = 90,hjust = 0.5))+
    xlab('Longitude')+
    ylab('Latitude')
    
  
  pmap = plot_grid(
    pmap1,pmap2,nrow = 1,
    rel_widths = c(2,3),
    rel_heights = c(1,1)
  )  
  
  
  library(cowplot)
  plinebar = plot_grid(
    pline,pbar,rel_widths = c(3,1.2),
    rel_heights = c(1,1),nrow = 1
  )
  
  
  pmapline =plot_grid(
    pmap,pline,
    rel_widths = c(1,1),
    rel_heights = c(2,4),
    ncol = 1,
    align = 'l',
    axis = 'v'
  )
  
  output = 'main_plot/SI/covar_cor_pmeato_pmesubs'
  dir.create(output)
  output2 = paste0(output,'/dfcors.csv')
  output = paste0(output,'/fig_pmeato_pmesubs3.png')
  
  png(output,
      width = 25,
      height = 25,
      units = 'cm',
      res = 800)
  print(pmapline)
  dev.off()
 
  #fwrite(dfcors,output2)
  
  
  
  
}
figs4_covar_cor_pmeato_twssubs<-function
(pmeato,twssubs){
  
  pmeato = pmeato[,1:4]
  
  cors = 1
  pvs = 1
  for(i in 1:ncol(pmeato)){
    tmp1 = 1
    tmppv1 = 1
    for(j in 1:ncol(twssubs)){
      tmp2 = cor(pmeato[,i],twssubs[,j])
      tmp1 = c(tmp1,tmp2)
      
      tmp2pv = cor.test(pmeato[,i],
                        twssubs[,j])$p.value
      tmppv1 = c(tmppv1,tmp2pv)
    }
    tmp1 = tmp1[-1]
    tmppv1 = tmppv1[-1]
    
    pvs = cbind(pvs,tmppv1)
    cors = cbind(cors,tmp1)
  }
  cors = cors[,-1]
  pvs = pvs[,-1]
  
  as_sci_format <- function(x){
    x = scales::scientific(x,2)
    return(x)
  }
  
  pvscis = apply(pvs,2,as_sci_format)
  
  cors = apply(cors,2,round,2)
  colnames(cors) = paste0('NATO',1:4)
  colnames(pvs) = paste0('NATO',1:4)
  
  dfcors = data.frame(
    region = paste0('SR',1:3),
    regid = 1:3+162+1000,
    cors
  )
  dfpvs = data.frame(
    region = paste0('SR',1:3),
    regid = 1:3+162+1000,
    pvs
  )
  
  dfcors = reshape2::melt(dfcors,c(
    'region','regid'
  ))
  dfpvs = reshape2::melt(dfpvs,c(
    'region','regid'
  ))
  
  dfcors$pv = dfpvs$value
  dfcors$pvlabel = '**'
  lesid1 = which(dfcors$pv <=0.05 &
                   dfcors$pv >0.01)
  larid = which(dfcors$pv > 0.05)
  
  dfcors$pvlabel[lesid1] = '*'
  dfcors$pvlabel[larid] = ''
  
  dfcors$type = rep(c('(d)','(h)','(l)','(p)'),
                    each = 3)
  
  dfcors$xlabel = paste0('(',c(letters[1:3],
                               letters[5:7],
                               letters[9:11],
                               letters[13:15]),')')
  
  
  # line plot 
  colnames(pmeato) = paste0('NATO',1:4)
  colnames(twssubs) = paste0('Large sub-region',1:3)
  date = seq(as.Date('2003-07-01'),
             as.Date('2016-12-01'),
             '1 month')
  datelabel = as.character(date)
  datelabel = sapply(datelabel,substr,1,4)
  datelabel =as.character(datelabel)
  
  date = 1:162
  dfpme1 = data.frame(
    date = date,
    NATO1 = pmeato[,1]
  )
  dfpme2 = data.frame(
    date = date,
    NATO2 = pmeato[,2]
  )
  dfpme3 = data.frame(
    date = date,
    NATO3 = pmeato[,3]
  )
  dfpme4 = data.frame(
    date = date,
    NATO4 = pmeato[,4]
  )
  
  dfpme1 = reshape2::melt(dfpme1,'date')
  dfpme2 = reshape2::melt(dfpme2,'date')
  dfpme3 = reshape2::melt(dfpme3,'date')
  dfpme4 = reshape2::melt(dfpme4,'date')
  
  dfpme1 = rbind(dfpme1,dfpme1,dfpme1)
  dfpme2 = rbind(dfpme2,dfpme2,dfpme2)
  dfpme3 = rbind(dfpme3,dfpme3,dfpme3)
  dfpme4 = rbind(dfpme4,dfpme4,dfpme4)
  
  dfpme1$type = rep(c('(a) NATO1 vs Large-subregion 1',
                      '(b) NATO1 vs Large-subregion 2',
                      '(c) NATO1 vs Large-subregion 3'),
                    each = 162)
  dfpme2$type = rep(c('(e) NATO2 vs Large-subregion 1',
                      '(f) NATO2 vs Large-subregion 2',
                      '(g) NATO2 vs Large-subregion 3'),
                    each = 162)
  dfpme3$type = rep(c('(i) NATO3 vs Large-subregion 1',
                      '(j) NATO3 vs Large-subregion 2',
                      '(k) NATO3 vs Large-subregion 3'),
                    each = 162)
  dfpme4$type = rep(c('(m) NATO4 vs Large-subregion 1',
                      '(n) NATO4 vs Large-subregion 2',
                      '(o) NATO4 vs Large-subregion 3'),
                    each = 162)
  
  dfpmes = rbind(dfpme1,
                 dfpme2,
                 dfpme3,
                 dfpme4)
  
  dftwssubs= data.frame(
    date = date,
    twssubs
  )
  dftwssubs = reshape2::melt(dftwssubs,
                             'date')
  
  dftwssubs1 = dftwssubs
  dftwssubs2 = dftwssubs
  dftwssubs3 = dftwssubs
  dftwssubs4 = dftwssubs
  
  dftwssubs1$type = rep(c('(a) NATO1 vs Large-subregion 1',
                          '(b) NATO1 vs Large-subregion 2',
                          '(c) NATO1 vs Large-subregion 3'),
                        each = 162)
  
  dftwssubs2$type =  rep(c('(e) NATO2 vs Large-subregion 1',
                           '(f) NATO2 vs Large-subregion 2',
                           '(g) NATO2 vs Large-subregion 3'),
                         each = 162)
  
  dftwssubs3$type = rep(c('(i) NATO3 vs Large-subregion 1',
                          '(j) NATO3 vs Large-subregion 2',
                          '(k) NATO3 vs Large-subregion 3'),
                        each = 162)
  dftwssubs4$type = rep(c('(m) NATO4 vs Large-subregion 1',
                          '(n) NATO4 vs Large-subregion 2',
                          '(o) NATO4 vs Large-subregion 3'),
                        each = 162)
  
  dftwssubs1$col = rep(c('TWS in SR1','TWS in SR2',
                         'TWS in SR3'),each =162)
  dftwssubs2$col = rep(c('TWS in SR1','TWS in SR2',
                         'TWS in SR3'),each =162)
  dftwssubs3$col = rep(c('TWS in SR1','TWS in SR2',
                         'TWS in SR3'),each =162)
  dftwssubs4$col = rep(c('TWS in SR1','TWS in SR2',
                         'TWS in SR3'),each =162)
  
  dftwssubs = rbind(dftwssubs1,
                    dftwssubs2,
                    dftwssubs3,
                    dftwssubs4)
  dfpmes$col = 'PME in NATOs'
  
  
  dfline = rbind(dfpmes,dftwssubs)
  library(ggplot2)
  library(ggsci)
  fontsize = 14
  text_theme = theme(
    legend.text = element_text(
      size =fontsize,color = 'black'
    ),
    legend.title = element_text(
      size =fontsize,color = 'black'
    ),
    axis.text = element_text(
      size =fontsize,color = 'black'
    ),
    axis.title = element_text(
      size =fontsize,color = 'black'
    ),
    strip.text = element_blank()
  )
  library(RColorBrewer)
  cols = pal_lancet(alpha = 0.85)(9)[c(7)]
  #fils = pal_npg(alpha = 1)(9)[2:4]
  fils = brewer.pal(9,'Spectral')[2:4]
  
  cols = c(cols,fils)
  
  dfcors$ys = dfcors$value + 1000
  figline = data.frame(
    x = date[3],
    y = -2.5,
    label = paste0('(',letters[c(3:14)],')'),
    type = unique(dfpmes$type)
  )
  
  figbar = data.frame(
    x = 1163,
    y = 0.25,
    label = paste0('(',letters[c(6,10,14,18)],')'),
    type = unique(dfcors$type)
  )
  
  pline = ggplot()+
    geom_line(data = dfline,
              aes(x = date,y = value,
                  color = col),
              size = 1.3)+
    geom_text(data = figline,
              aes(x = x,y = y,label = label),
              size = 5,
              color = 'black')+
    scale_color_manual(values = cols)+
    scale_x_continuous(breaks = c(seq(1,162,60)),
                       labels = c(datelabel[seq(1,162,60)]))+
    scale_y_continuous(breaks = seq(-2,2,2),limits = c(-3,3))+
    theme_bw()+
    guides(color = guide_legend(title = ''))+
    text_theme+
    theme(
      legend.position = 'bottom',
      strip.background = element_blank())+
    facet_wrap(~type,nrow = 4,scales = 'free_y')+
    xlab("Time")+
    ylab('Indices')
  
  
  pbar = ggplot()+
    geom_bar(data = dfcors,
             aes(x = regid,y = value,
                 fill = region),
             width = 0.5,
             stat = 'identity',
             position = position_dodge2(0.75))+
    geom_text(data = dfcors,
              aes(x = regid,y = value*0.65,
                  label = pvlabel),
              size = 5,
              color = 'white',
              position = position_dodge2(0.75))+    
    geom_text(data = figbar,
              aes(x = x,y = y,label = label),
              size = 5,
              color = 'black')+
    scale_fill_manual(values = fils)+
    scale_x_continuous(breaks = c(163:165+1000),
                       labels = c(paste0('SR',1:3)))+
    scale_y_continuous(breaks = c(-0.35,0,0.25))+
    theme_bw()+
    text_theme+
    guides(fill = guide_legend(title = 'Sub-regions',
                               title.position = 'top'))+
    theme(
      legend.position = 'bottom',
      strip.background = element_blank())+
    facet_wrap(~type,ncol = 1)+
    xlab("Regions")+
    ylab('Correlation coefficient')
  
  world = shp_management('world')
  world = crop(world,extent(-180,180,0,90))
  
  bigsubs = 'shp/big_scale_subs/'
  bigsubs = paste0(bigsubs,
                   'region',1:15,'.shp')
  bigsubs = lapply(bigsubs,shapefile)
  
  bigsubs1 = bigsubs[1:6]
  bigsubs2 = bigsubs[7:12]
  bigsubs3 = bigsubs[13:15]
  
  bigsubs1 = do.call('bind',bigsubs1)
  bigsubs2 = do.call('bind',bigsubs2)
  bigsubs3 = do.call('bind',bigsubs3)
  
  subs1 = as(extent(bigsubs1),'SpatialPolygons')
  subs2 = as(extent(bigsubs2),'SpatialPolygons')
  subs3 = as(extent(bigsubs3),'SpatialPolygons')
  
  subsli = list(subs1,subs2,subs3)
  subs = do.call('bind',
                 subsli)
  tibet = shp_management('tibet')
  natosli = shp_management('cluster_ato')
  natos = do.call('bind',natosli)
  
  world1 = crop(world,c(extent(natos)[1],
                        extent(natos)[2],
                        0,90))
  world2 = crop(world,extent(-20,180,0,90))
  
  loc_center <- function(x){
    x = extent(x)
    cenlong = (x[1]+x[2])/2
    cenlat = (x[3]+x[4])/2
    
    retdf = data.frame(
      x = cenlong,
      y = cenlat
    )
    return(retdf)
  }
  dfsubs = lapply(subsli,loc_center)
  dfnato = lapply(natosli,loc_center)
  
  dfsubs  = do.call(rbind,dfsubs)
  dfnato = do.call(rbind,dfnato)
  
  dfsubs$label = paste0('SR',1:3)
  dfnato$label = paste0('NATO',1:4)
  
  figsub_map1_label = data.frame(
    x = -120,
    y = 10,
    label = '(a)'
  )
  
  figsub_map2_label = data.frame(
    x = 175,
    y = 10,
    label = '(b)'
  )
  
  pmap1 = ggplot()+
    geom_polygon(data = world1,
                 aes(x = long,y = lat,
                     group = group),
                 color = 'black',
                 size = 0.5,
                 fill = 'transparent')+
    geom_polygon(data = natos,
                 aes(x = long,y = lat,
                     group = group),
                 color = 'black',
                 size = 0.8,
                 fill = '#f2f2f3',
                 alpha = 0.75)+
    geom_text(data = dfnato,
              aes(x = x,y = y,label = label),
              size = 5,
              color = 'black')+
    geom_text(data = figsub_map1_label,
              aes(x = x,y = y,label = label),
              size = 5,
              color = 'black')+
    scale_x_continuous(breaks = c(-100,-50,0),
                       labels = c(paste0(c(100,50),'°W'),'0°'))+
    scale_y_continuous(breaks = c(0,40,80),
                       labels = c('0°',paste0(c(40,80),'°N')))+
    theme_bw()+
    text_theme+
    theme(axis.text.y = element_text(angle = 90,hjust = 0.5))+
    xlab('Longitude')+
    ylab('Latitude')
  
  pmap2 = ggplot()+
    geom_polygon(data = world2,
                 aes(x = long,y = lat,
                     group = group),
                 color = 'black',
                 size = 0.5,
                 fill = 'transparent')+
    geom_polygon(data = tibet,
                 aes(x = long,y = lat,
                     group = group),
                 color = 'black',
                 size = 0.5,
                 fill = 'transparent')+
    geom_polygon(data = subs,
                 aes(x = long,y = lat,
                     group = group),
                 color = 'black',
                 size = 0.8,
                 fill = '#f2f2f3',
                 alpha = 0.75)+
    geom_text(data = dfsubs,
              aes(x = x,y = y,label = label),
              size = 5,
              color = 'black')+
    geom_text(data = figsub_map2_label,
              aes(x = x,y = y,label = label),
              size = 5,
              color = 'black')+
    scale_x_continuous(breaks = c(0,50,100,150),
                       labels = c('0°',paste0(c(50,100,150),'°E')))+
    scale_y_continuous(breaks = c(0,40,80),
                       labels = c('0°',paste0(c(40,80),'°N')))+
    theme_bw()+
    text_theme+
    theme(axis.text.y = element_text(angle = 90,hjust = 0.5))+
    xlab('Longitude')+
    ylab('Latitude')
  
  
  pmap = plot_grid(
    pmap1,pmap2,nrow = 1,
    rel_widths = c(2,3),
    rel_heights = c(1,1)
  )  
  
  
  library(cowplot)
  plinebar = plot_grid(
    pline,pbar,rel_widths = c(3,1.2),
    rel_heights = c(1,1),nrow = 1
  )
  
  
  pmapline =plot_grid(
    pmap,pline,
    rel_widths = c(1,1),
    rel_heights = c(2,4),
    ncol = 1,
    align = 'l',
    axis = 'v'
  )
  
  output = 'main_plot/SI/covar_cor_pmeato_twssubs'
  dir.create(output)
  output2 = paste0(output,'/dfcors.csv')
  output = paste0(output,'/fig_pmeato_twssubs3.png')
  
  png(output,
      width = 25,
      height = 25,
      units = 'cm',
      res = 800)
  print(pmapline)
  dev.off()
  
  #fwrite(dfcors,output2)
  
  
  
  
  
}
figs4_covar_cor_pmeio_pmesubs<-function
(pmeio,pmesubs){
  
  pmeio = pmeio[,1:4]
  
  cors = 1
  pvs = 1
  for(i in 1:ncol(pmeio)){
    tmp1 = 1
    tmppv1 = 1
    for(j in 1:ncol(pmesubs)){
      tmp2 = cor(pmeio[,i],pmesubs[,j])
      tmp1 = c(tmp1,tmp2)
      
      tmp2pv = cor.test(pmeio[,i],
                        pmesubs[,j])$p.value
      tmppv1 = c(tmppv1,tmp2pv)
    }
    tmp1 = tmp1[-1]
    tmppv1 = tmppv1[-1]
    
    pvs = cbind(pvs,tmppv1)
    cors = cbind(cors,tmp1)
  }
  cors = cors[,-1]
  pvs = pvs[,-1]
  
  as_sci_format <- function(x){
    x = scales::scientific(x,2)
    return(x)
  }
  
  pvscis = apply(pvs,2,as_sci_format)
  
  cors = apply(cors,2,round,2)
  colnames(cors) = paste0('IO',1:4)
  colnames(pvs) = paste0('IO',1:4)
  
  dfcors = data.frame(
    region = paste0('SR',1:3),
    regid = 1:3+162+1000,
    cors
  )
  dfpvs = data.frame(
    region = paste0('SR',1:3),
    regid = 1:3+162+1000,
    pvs
  )
  
  dfcors = reshape2::melt(dfcors,c(
    'region','regid'
  ))
  dfpvs = reshape2::melt(dfpvs,c(
    'region','regid'
  ))
  
  dfcors$pv = dfpvs$value
  dfcors$pvlabel = '**'
  lesid1 = which(dfcors$pv <=0.05 &
                   dfcors$pv >0.01)
  larid = which(dfcors$pv > 0.05)
  
  dfcors$pvlabel[lesid1] = '*'
  dfcors$pvlabel[larid] = ''
  
  dfcors$type = rep(c('(d)','(h)','(l)','(p)'),
                    each = 3)
  
  dfcors$xlabel = paste0('(',c(letters[1:3],
                               letters[5:7],
                               letters[9:11],
                               letters[13:15]),')')
  
  
  # line plot 
  colnames(pmeio) = paste0('IO',1:4)
  colnames(pmesubs) = paste0('Large sub-region',1:3)
  date = seq(as.Date('2003-07-01'),
             as.Date('2016-12-01'),
             '1 month')
  datelabel = as.character(date)
  datelabel = sapply(datelabel,substr,1,4)
  datelabel =as.character(datelabel)
  
  date = 1:162
  dfpme1 = data.frame(
    date = date,
    IO1 = pmeio[,1]
  )
  dfpme2 = data.frame(
    date = date,
    IO2 = pmeio[,2]
  )
  dfpme3 = data.frame(
    date = date,
    IO3 = pmeio[,3]
  )
  dfpme4 = data.frame(
    date = date,
    IO4 = pmeio[,4]
  )
  
  dfpme1 = reshape2::melt(dfpme1,'date')
  dfpme2 = reshape2::melt(dfpme2,'date')
  dfpme3 = reshape2::melt(dfpme3,'date')
  dfpme4 = reshape2::melt(dfpme4,'date')
  
  dfpme1 = rbind(dfpme1,dfpme1,dfpme1)
  dfpme2 = rbind(dfpme2,dfpme2,dfpme2)
  dfpme3 = rbind(dfpme3,dfpme3,dfpme3)
  dfpme4 = rbind(dfpme4,dfpme4,dfpme4)
  
  dfpme1$type = rep(c('(a) IO1 vs Large-subregion 1',
                      '(b) IO1 vs Large-subregion 2',
                      '(c) IO1 vs Large-subregion 3'),
                    each = 162)
  dfpme2$type = rep(c('(e) IO2 vs Large-subregion 1',
                      '(f) IO2 vs Large-subregion 2',
                      '(g) IO2 vs Large-subregion 3'),
                    each = 162)
  dfpme3$type = rep(c('(i) IO3 vs Large-subregion 1',
                      '(j) IO3 vs Large-subregion 2',
                      '(k) IO3 vs Large-subregion 3'),
                    each = 162)
  dfpme4$type = rep(c('(m) IO4 vs Large-subregion 1',
                      '(n) IO4 vs Large-subregion 2',
                      '(o) IO4 vs Large-subregion 3'),
                    each = 162)
  
  dfpmes = rbind(dfpme1,
                 dfpme2,
                 dfpme3,
                 dfpme4)
  
  dfpmesubs= data.frame(
    date = date,
    pmesubs
  )
  dfpmesubs = reshape2::melt(dfpmesubs,
                             'date')
  
  dfpmesubs1 = dfpmesubs
  dfpmesubs2 = dfpmesubs
  dfpmesubs3 = dfpmesubs
  dfpmesubs4 = dfpmesubs
  
  dfpmesubs1$type = rep(c('(a) IO1 vs Large-subregion 1',
                          '(b) IO1 vs Large-subregion 2',
                          '(c) IO1 vs Large-subregion 3'),
                        each = 162)
  
  dfpmesubs2$type =  rep(c('(e) IO2 vs Large-subregion 1',
                           '(f) IO2 vs Large-subregion 2',
                           '(g) IO2 vs Large-subregion 3'),
                         each = 162)
  
  dfpmesubs3$type = rep(c('(i) IO3 vs Large-subregion 1',
                          '(j) IO3 vs Large-subregion 2',
                          '(k) IO3 vs Large-subregion 3'),
                        each = 162)
  dfpmesubs4$type = rep(c('(m) IO4 vs Large-subregion 1',
                          '(n) IO4 vs Large-subregion 2',
                          '(o) IO4 vs Large-subregion 3'),
                        each = 162)
  
  dfpmesubs1$col = rep(c('PME in SR1','PME in SR2',
                         'PME in SR3'),each =162)
  dfpmesubs2$col = rep(c('PME in SR1','PME in SR2',
                         'PME in SR3'),each =162)
  dfpmesubs3$col = rep(c('PME in SR1','PME in SR2',
                         'PME in SR3'),each =162)
  dfpmesubs4$col = rep(c('PME in SR1','PME in SR2',
                         'PME in SR3'),each =162)
  
  dfpmesubs = rbind(dfpmesubs1,
                    dfpmesubs2,
                    dfpmesubs3,
                    dfpmesubs4)
  dfpmes$col = 'PME in IOs'
  
  
  dfline = rbind(dfpmes,dfpmesubs)
  library(ggplot2)
  library(ggsci)
  fontsize = 14
  text_theme = theme(
    legend.text = element_text(
      size =fontsize,color = 'black'
    ),
    legend.title = element_text(
      size =fontsize,color = 'black'
    ),
    axis.text = element_text(
      size =fontsize,color = 'black'
    ),
    axis.title = element_text(
      size =fontsize,color = 'black'
    ),
    strip.text = element_blank()
  )
  library(RColorBrewer)
  cols = pal_lancet(alpha = 0.85)(9)[c(7)]
  fils = pal_npg(alpha = 1)(9)[2:4]
  
  cols = c(cols,fils)
  
  dfcors$ys = dfcors$value + 1000
  figline = data.frame(
    x = date[4],
    y = -2,
    label = paste0('(',letters[c(3:14)],')'),
    type = unique(dfpmes$type)
  )
  
  figbar = data.frame(
    x = 1163,
    y = 0.25,
    label = paste0('(',letters[c(6,10,14,18)],')'),
    type = unique(dfcors$type)
  )
  
  pline = ggplot()+
    geom_line(data = dfline,
              aes(x = date,y = value,
                  color = col),
              size = 1.3)+
    geom_text(data = figline,
              aes(x = x,y = y,label = label),
              size = 5,
              color = 'black')+
    scale_color_manual(values = cols)+
    scale_x_continuous(breaks = c(seq(1,162,60)),
                       labels = c(datelabel[seq(1,162,60)]))+
    scale_y_continuous(breaks = seq(-2,2,2))+
    theme_bw()+
    guides(color = guide_legend(title = ''))+
    text_theme+
    theme(
      legend.position = 'bottom',
      strip.background = element_blank())+
    facet_wrap(~type,nrow = 4)+
    xlab("Time")+
    ylab('Indices')
  
  
  pbar = ggplot()+
    geom_bar(data = dfcors,
             aes(x = regid,y = value,
                 fill = region),
             width = 0.5,
             stat = 'identity',
             position = position_dodge2(0.75))+
    geom_text(data = dfcors,
              aes(x = regid,y = value*0.65,
                  label = pvlabel),
              size = 5,
              color = 'white',
              position = position_dodge2(0.75))+    
    geom_text(data = figbar,
              aes(x = x,y = y,label = label),
              size = 5,
              color = 'black')+
    scale_fill_manual(values = fils)+
    scale_x_continuous(breaks = c(163:165+1000),
                       labels = c(paste0('SR',1:3)))+
    scale_y_continuous(breaks = c(-0.35,0,0.25))+
    theme_bw()+
    text_theme+
    guides(fill = guide_legend(title = 'Sub-regions',
                               title.position = 'top'))+
    theme(
      legend.position = 'bottom',
      strip.background = element_blank())+
    facet_wrap(~type,ncol = 1)+
    xlab("Regions")+
    ylab('Correlation coefficient')
  
  world = shp_management('world')
  world = crop(world,extent(-180,180,0,90))
  
  bigsubs = 'shp/big_scale_subs/'
  bigsubs = paste0(bigsubs,
                   'region',1:15,'.shp')
  bigsubs = lapply(bigsubs,shapefile)
  
  bigsubs1 = bigsubs[1:6]
  bigsubs2 = bigsubs[7:12]
  bigsubs3 = bigsubs[13:15]
  
  bigsubs1 = do.call('bind',bigsubs1)
  bigsubs2 = do.call('bind',bigsubs2)
  bigsubs3 = do.call('bind',bigsubs3)
  
  subs1 = as(extent(bigsubs1),'SpatialPolygons')
  subs2 = as(extent(bigsubs2),'SpatialPolygons')
  subs3 = as(extent(bigsubs3),'SpatialPolygons')
  
  subsli = list(subs1,subs2,subs3)
  subs = do.call('bind',
                 subsli)
  tibet = shp_management('tibet')
  IOsli = shp_management('cluster_io')
  IOs = do.call('bind',IOsli)
  
  world1 = crop(world,extent(IOs))
  world2 = crop(world,extent(-20,180,0,90))
  
  loc_center <- function(x){
    x = extent(x)
    cenlong = (x[1]+x[2])/2
    cenlat = (x[3]+x[4])/2
    
    retdf = data.frame(
      x = cenlong,
      y = cenlat
    )
    return(retdf)
  }
  dfsubs = lapply(subsli,loc_center)
  dfIO = lapply(IOsli,loc_center)
  
  dfsubs  = do.call(rbind,dfsubs)
  dfIO = do.call(rbind,dfIO)
  
  dfsubs$label = paste0('SR',1:3)
  dfIO$label = paste0('IO',1:4)
  
  figsub_map1_label = data.frame(
    x = 45,
    y = 5,
    label = '(a)'
  )
  
  figsub_map2_label = data.frame(
    x = 175,
    y = 10,
    label = '(b)'
  )
  
  pmap1 = ggplot()+
    geom_polygon(data = world1,
                 aes(x = long,y = lat,
                     group = group),
                 color = 'black',
                 size = 0.5,
                 fill = 'transparent')+
    geom_polygon(data = IOs,
                 aes(x = long,y = lat,
                     group = group),
                 color = 'black',
                 size = 0.8,
                 fill = '#f2f2f3',
                 alpha = 0.75,
                 face = 'bold')+
    geom_text(data = dfIO,
              aes(x = x,y = y,label = label),
              size = 5,
              color = 'black')+
    geom_text(data = figsub_map1_label,
              aes(x = x,y = y,label = label),
              size = 5,
              color = 'black')+
    scale_x_continuous(breaks = c(40,60,80,100),
                       labels = paste0(c(40,60,80,100),'°E'))+
    scale_y_continuous(breaks = c(0,10,20,30),
                       labels = c('0°',paste0(c(10,20,30),'°N')))+
    theme_bw()+
    text_theme+
    theme(axis.text.y = element_text(angle = 90,hjust = 0.5))+
    xlab('Longitude')+
    ylab('Latitude')
  
  pmap2 = ggplot()+
    geom_polygon(data = world2,
                 aes(x = long,y = lat,
                     group = group),
                 color = 'black',
                 size = 0.5,
                 fill = 'transparent')+
    geom_polygon(data = tibet,
                 aes(x = long,y = lat,
                     group = group),
                 color = 'black',
                 size = 0.5,
                 fill = 'transparent')+
    geom_polygon(data = subs,
                 aes(x = long,y = lat,
                     group = group),
                 color = 'black',
                 size = 0.8,
                 fill = '#f2f2f3',
                 alpha = 0.75,
                 face = 'bold')+
    geom_text(data = dfsubs,
              aes(x = x,y = y,label = label),
              size = 5,
              color = 'black')+
    geom_text(data = figsub_map2_label,
              aes(x = x,y = y,label = label),
              size = 5,
              color = 'black')+
    scale_x_continuous(breaks = c(0,50,100,150),
                       labels = c('0°',paste0(c(50,100,150),'°E')))+
    scale_y_continuous(breaks = c(0,40,80),
                       labels = c('0°',paste0(c(40,80),'°N')))+
    theme_bw()+
    text_theme+
    theme(axis.text.y = element_text(angle = 90,hjust = 0.5))+
    xlab('Longitude')+
    ylab('Latitude')
  
  
  pmap = plot_grid(
    pmap1,pmap2,nrow = 1,
    rel_widths = c(2,3),
    rel_heights = c(1,1)
  )  
  
  
  library(cowplot)
  plinebar = plot_grid(
    pline,pbar,rel_widths = c(3,1.2),
    rel_heights = c(1,1),nrow = 1
  )
  
  
  pmapline =plot_grid(
    pmap,pline,
    rel_widths = c(1,1),
    rel_heights = c(2,4),
    ncol = 1,
    align = 'l',
    axis = 'v'
  )
  
  output = 'main_plot/SI/covar_cor_pmeio_pmesubs'
  dir.create(output)
  output2 = paste0(output,'/dfcors.csv')
  output = paste0(output,'/fig_pmeio_pmetws3.png')
  
  png(output,
      width = 25,
      height = 25,
      units = 'cm',
      res = 800)
  print(pmapline)
  dev.off()
  
  #fwrite(dfcors,output2)
  
  
  
}
figs4_covar_cor_pmeio_twssubs<-function
(pmeio,twssubs){
  
  pmeio = pmeio[,1:4]
  
  cors = 1
  pvs = 1
  for(i in 1:ncol(pmeio)){
    tmp1 = 1
    tmppv1 = 1
    for(j in 1:ncol(twssubs)){
      tmp2 = cor(pmeio[,i],twssubs[,j])
      tmp1 = c(tmp1,tmp2)
      
      tmp2pv = cor.test(pmeio[,i],
                        twssubs[,j])$p.value
      tmppv1 = c(tmppv1,tmp2pv)
    }
    tmp1 = tmp1[-1]
    tmppv1 = tmppv1[-1]
    
    pvs = cbind(pvs,tmppv1)
    cors = cbind(cors,tmp1)
  }
  cors = cors[,-1]
  pvs = pvs[,-1]
  
  as_sci_format <- function(x){
    x = scales::scientific(x,2)
    return(x)
  }
  
  pvscis = apply(pvs,2,as_sci_format)
  
  cors = apply(cors,2,round,2)
  colnames(cors) = paste0('IO',1:4)
  colnames(pvs) = paste0('IO',1:4)
  
  dfcors = data.frame(
    region = paste0('SR',1:3),
    regid = 1:3+162+1000,
    cors
  )
  dfpvs = data.frame(
    region = paste0('SR',1:3),
    regid = 1:3+162+1000,
    pvs
  )
  
  dfcors = reshape2::melt(dfcors,c(
    'region','regid'
  ))
  dfpvs = reshape2::melt(dfpvs,c(
    'region','regid'
  ))
  
  dfcors$pv = dfpvs$value
  dfcors$pvlabel = '**'
  lesid1 = which(dfcors$pv <=0.05 &
                   dfcors$pv >0.01)
  larid = which(dfcors$pv > 0.05)
  
  dfcors$pvlabel[lesid1] = '*'
  dfcors$pvlabel[larid] = ''
  
  dfcors$type = rep(c('(d)','(h)','(l)','(p)'),
                    each = 3)
  
  dfcors$xlabel = paste0('(',c(letters[1:3],
                               letters[5:7],
                               letters[9:11],
                               letters[13:15]),')')
  
  
  # line plot 
  colnames(pmeio) = paste0('IO',1:4)
  colnames(twssubs) = paste0('Large sub-region',1:3)
  date = seq(as.Date('2003-07-01'),
             as.Date('2016-12-01'),
             '1 month')
  datelabel = as.character(date)
  datelabel = sapply(datelabel,substr,1,4)
  datelabel =as.character(datelabel)
  
  date = 1:162
  dfpme1 = data.frame(
    date = date,
    IO1 = pmeio[,1]
  )
  dfpme2 = data.frame(
    date = date,
    IO2 = pmeio[,2]
  )
  dfpme3 = data.frame(
    date = date,
    IO3 = pmeio[,3]
  )
  dfpme4 = data.frame(
    date = date,
    IO4 = pmeio[,4]
  )
  
  dfpme1 = reshape2::melt(dfpme1,'date')
  dfpme2 = reshape2::melt(dfpme2,'date')
  dfpme3 = reshape2::melt(dfpme3,'date')
  dfpme4 = reshape2::melt(dfpme4,'date')
  
  dfpme1 = rbind(dfpme1,dfpme1,dfpme1)
  dfpme2 = rbind(dfpme2,dfpme2,dfpme2)
  dfpme3 = rbind(dfpme3,dfpme3,dfpme3)
  dfpme4 = rbind(dfpme4,dfpme4,dfpme4)
  
  dfpme1$type = rep(c('(a) IO1 vs Large-subregion 1',
                      '(b) IO1 vs Large-subregion 2',
                      '(c) IO1 vs Large-subregion 3'),
                    each = 162)
  dfpme2$type = rep(c('(e) IO2 vs Large-subregion 1',
                      '(f) IO2 vs Large-subregion 2',
                      '(g) IO2 vs Large-subregion 3'),
                    each = 162)
  dfpme3$type = rep(c('(i) IO3 vs Large-subregion 1',
                      '(j) IO3 vs Large-subregion 2',
                      '(k) IO3 vs Large-subregion 3'),
                    each = 162)
  dfpme4$type = rep(c('(m) IO4 vs Large-subregion 1',
                      '(n) IO4 vs Large-subregion 2',
                      '(o) IO4 vs Large-subregion 3'),
                    each = 162)
  
  dfpmes = rbind(dfpme1,
                 dfpme2,
                 dfpme3,
                 dfpme4)
  
  dftwssubs= data.frame(
    date = date,
    twssubs
  )
  dftwssubs = reshape2::melt(dftwssubs,
                             'date')
  
  dftwssubs1 = dftwssubs
  dftwssubs2 = dftwssubs
  dftwssubs3 = dftwssubs
  dftwssubs4 = dftwssubs
  
  dftwssubs1$type = rep(c('(a) IO1 vs Large-subregion 1',
                          '(b) IO1 vs Large-subregion 2',
                          '(c) IO1 vs Large-subregion 3'),
                        each = 162)
  
  dftwssubs2$type =  rep(c('(e) IO2 vs Large-subregion 1',
                           '(f) IO2 vs Large-subregion 2',
                           '(g) IO2 vs Large-subregion 3'),
                         each = 162)
  
  dftwssubs3$type = rep(c('(i) IO3 vs Large-subregion 1',
                          '(j) IO3 vs Large-subregion 2',
                          '(k) IO3 vs Large-subregion 3'),
                        each = 162)
  dftwssubs4$type = rep(c('(m) IO4 vs Large-subregion 1',
                          '(n) IO4 vs Large-subregion 2',
                          '(o) IO4 vs Large-subregion 3'),
                        each = 162)
  
  dftwssubs1$col = rep(c('TWS in SR1','TWS in SR2',
                         'TWS in SR3'),each =162)
  dftwssubs2$col = rep(c('TWS in SR1','TWS in SR2',
                         'TWS in SR3'),each =162)
  dftwssubs3$col = rep(c('TWS in SR1','TWS in SR2',
                         'TWS in SR3'),each =162)
  dftwssubs4$col = rep(c('TWS in SR1','TWS in SR2',
                         'TWS in SR3'),each =162)
  
  dftwssubs = rbind(dftwssubs1,
                    dftwssubs2,
                    dftwssubs3,
                    dftwssubs4)
  dfpmes$col = 'PME in IOs'
  
  
  dfline = rbind(dfpmes,dftwssubs)
  library(ggplot2)
  library(ggsci)
  fontsize = 14
  text_theme = theme(
    legend.text = element_text(
      size =fontsize,color = 'black'
    ),
    legend.title = element_text(
      size =fontsize,color = 'black'
    ),
    axis.text = element_text(
      size =fontsize,color = 'black'
    ),
    axis.title = element_text(
      size =fontsize,color = 'black'
    ),
    strip.text = element_blank()
  )
  library(RColorBrewer)
  cols = pal_lancet(alpha = 0.85)(9)[c(7)]
  #fils = pal_npg(alpha = 1)(9)[2:4]
  fils = brewer.pal(9,'Spectral')[2:4]
  
  cols = c(cols,fils)
  
  dfcors$ys = dfcors$value + 1000
  figline = data.frame(
    x = date[4],
    y = -2.5,
    label = paste0('(',letters[c(3:14)],')'),
    type = unique(dfpmes$type)
  )
  
  figbar = data.frame(
    x = 1163,
    y = 0.25,
    label = paste0('(',letters[c(6,10,14,18)],')'),
    type = unique(dfcors$type)
  )
  
  pline = ggplot()+
    geom_line(data = dfline,
              aes(x = date,y = value,
                  color = col),
              size = 1.3)+
    geom_text(data = figline,
              aes(x = x,y = y,label = label),
              size = 5,
              color = 'black')+
    scale_color_manual(values = cols)+
    scale_x_continuous(breaks = c(seq(1,162,60)),
                       labels = c(datelabel[seq(1,162,60)]))+
    scale_y_continuous(breaks = seq(-2,2,2),limits = c(-3,3))+
    theme_bw()+
    guides(color = guide_legend(title = ''))+
    text_theme+
    theme(
      legend.position = 'bottom',
      strip.background = element_blank())+
    facet_wrap(~type,nrow = 4,scale = 'free_y')+
    xlab("Time")+
    ylab('Indices')
  
  
  pbar = ggplot()+
    geom_bar(data = dfcors,
             aes(x = regid,y = value,
                 fill = region),
             width = 0.5,
             stat = 'identity',
             position = position_dodge2(0.75))+
    geom_text(data = dfcors,
              aes(x = regid,y = value*0.65,
                  label = pvlabel),
              size = 5,
              color = 'white',
              position = position_dodge2(0.75))+    
    geom_text(data = figbar,
              aes(x = x,y = y,label = label),
              size = 5,
              color = 'black')+
    scale_fill_manual(values = fils)+
    scale_x_continuous(breaks = c(163:165+1000),
                       labels = c(paste0('SR',1:3)))+
    scale_y_continuous(breaks = c(-0.35,0,0.25))+
    theme_bw()+
    text_theme+
    guides(fill = guide_legend(title = 'Sub-regions',
                               title.position = 'top'))+
    theme(
      legend.position = 'bottom',
      strip.background = element_blank())+
    facet_wrap(~type,ncol = 1)+
    xlab("Regions")+
    ylab('Correlation coefficient')
  
  world = shp_management('world')
  world = crop(world,extent(-180,180,0,90))
  
  bigsubs = 'shp/big_scale_subs/'
  bigsubs = paste0(bigsubs,
                   'region',1:15,'.shp')
  bigsubs = lapply(bigsubs,shapefile)
  
  bigsubs1 = bigsubs[1:6]
  bigsubs2 = bigsubs[7:12]
  bigsubs3 = bigsubs[13:15]
  
  bigsubs1 = do.call('bind',bigsubs1)
  bigsubs2 = do.call('bind',bigsubs2)
  bigsubs3 = do.call('bind',bigsubs3)
  
  subs1 = as(extent(bigsubs1),'SpatialPolygons')
  subs2 = as(extent(bigsubs2),'SpatialPolygons')
  subs3 = as(extent(bigsubs3),'SpatialPolygons')
  
  subsli = list(subs1,subs2,subs3)
  subs = do.call('bind',
                 subsli)
  tibet = shp_management('tibet')
  IOsli = shp_management('cluster_io')
  IOs = do.call('bind',IOsli)
  
  world1 = crop(world,extent(IOs))
  world2 = crop(world,extent(-20,180,0,90))
  
  loc_center <- function(x){
    x = extent(x)
    cenlong = (x[1]+x[2])/2
    cenlat = (x[3]+x[4])/2
    
    retdf = data.frame(
      x = cenlong,
      y = cenlat
    )
    return(retdf)
  }
  dfsubs = lapply(subsli,loc_center)
  dfIO = lapply(IOsli,loc_center)
  
  dfsubs  = do.call(rbind,dfsubs)
  dfIO = do.call(rbind,dfIO)
  
  dfsubs$label = paste0('SR',1:3)
  dfIO$label = paste0('IO',1:4)
  
  figsub_map1_label = data.frame(
    x = 45,
    y = 5,
    label = '(a)'
  )
  
  figsub_map2_label = data.frame(
    x = 175,
    y = 10,
    label = '(b)'
  )
  
  pmap1 = ggplot()+
    geom_polygon(data = world1,
                 aes(x = long,y = lat,
                     group = group),
                 color = 'black',
                 size = 0.5,
                 fill = 'transparent')+
    geom_polygon(data = IOs,
                 aes(x = long,y = lat,
                     group = group),
                 color = 'black',
                 size = 0.8,
                 fill = '#f2f2f3',
                 alpha = 0.75,
                 face = 'bold')+
    geom_text(data = dfIO,
              aes(x = x,y = y,label = label),
              size = 5,
              color = 'black')+
    geom_text(data = figsub_map1_label,
              aes(x = x,y = y,label = label),
              size = 5,
              color = 'black')+
    scale_x_continuous(breaks = c(40,60,80,100),
                       labels = paste0(c(40,60,80,100),'°E'))+
    scale_y_continuous(breaks = c(0,10,20,30),
                       labels = c('0°',paste0(c(10,20,30),'°N')))+
    theme_bw()+
    text_theme+
    theme(axis.text.y = element_text(angle = 90,hjust = 0.5))+
    xlab('Longitude')+
    ylab('Latitude')
  
  pmap2 = ggplot()+
    geom_polygon(data = world2,
                 aes(x = long,y = lat,
                     group = group),
                 color = 'black',
                 size = 0.5,
                 fill = 'transparent')+
    geom_polygon(data = tibet,
                 aes(x = long,y = lat,
                     group = group),
                 color = 'black',
                 size = 0.5,
                 fill = 'transparent')+
    geom_polygon(data = subs,
                 aes(x = long,y = lat,
                     group = group),
                 color = 'black',
                 size = 0.8,
                 fill = '#f2f2f3',
                 alpha = 0.75,
                 face = 'bold')+
    geom_text(data = dfsubs,
              aes(x = x,y = y,label = label),
              size = 5,
              color = 'black')+
    geom_text(data = figsub_map2_label,
              aes(x = x,y = y,label = label),
              size = 5,
              color = 'black')+
    scale_x_continuous(breaks = c(0,50,100,150),
                       labels = c('0°',paste0(c(50,100,150),'°E')))+
    scale_y_continuous(breaks = c(0,40,80),
                       labels = c('0°',paste0(c(40,80),'°N')))+
    theme_bw()+
    text_theme+
    theme(axis.text.y = element_text(angle = 90,hjust = 0.5))+
    xlab('Longitude')+
    ylab('Latitude')
  
  
  pmap = plot_grid(
    pmap1,pmap2,nrow = 1,
    rel_widths = c(2,3),
    rel_heights = c(1,1)
  )  
  
  
  library(cowplot)
  plinebar = plot_grid(
    pline,pbar,rel_widths = c(3,1.2),
    rel_heights = c(1,1),nrow = 1
  )
  
  
  pmapline =plot_grid(
    pmap,pline,
    rel_widths = c(1,1),
    rel_heights = c(2,4),
    ncol = 1,
    align = 'l',
    axis = 'v'
  )
  
  output = 'main_plot/SI/covar_cor_pmeio_twssubs'
  dir.create(output)
  output2 = paste0(output,'/dfcors.csv')
  output = paste0(output,'/fig_pmeio_pmetws3.png')
  
  png(output,
      width = 25,
      height = 25,
      units = 'cm',
      res = 800)
  print(pmapline)
  dev.off()
  
  #$fwrite(dfcors,output2)
  
  
}
filter_cmip6_data_to_date_2099 <- function(
  attrs = 'E'
){
  input_file = '/media/root/Shen_drive1/CMIP6_reorder'
  
  #attr = c('E','Pr','T')
  
  input_file = paste0(input_file,'/',attrs)
  
  input_his = paste0(input_file,'/historical')
  input_ssp245 = paste0(input_file,'/ssp245')
  input_ssp585 = paste0(input_file,'/ssp585')
  
  
  hist_files = list.files(input_his)
  hist_files_full = list.files(input_his,full.names = T)
  
  ssp245_files = list.files(input_ssp245)
  ssp245_files_full = list.files(input_ssp245,full.names = T)
  
  ssp585_files = list.files(input_ssp585)
  ssp585_files_full = list.files(input_ssp585,full.names = T)
  
  i = 1:length(hist_files)
  
  #declare global variables
  i <<- i 
  hist_files <<- hist_files
  hist_files_full <<- hist_files_full
  ssp245_files <<- ssp245_files
  ssp245_files_full <<- ssp245_files_full
  ssp585_files <<- ssp585_files
  ssp585_files_full <<- ssp585_files_full
  
  dir.create('/media/root/Shen_drive1/CMIP6_2003_2099')
  output = paste0('/media/root/Shen_drive1/CMIP6_2003_2099',
                  '/',attrs)
  dir.create(output)
  
  output_his = paste0(output,'/hist')
  output_ssp245 = paste0(output,'/ssp245')
  output_ssp585 = paste0(output,'/ssp585')
  
  dir.create(output_his)
  dir.create(output_ssp245)
  dir.create(output_ssp585)
  
  output_his <<- output_his
  output_ssp245 <<- output_ssp245
  output_ssp585 <<- output_ssp585
  
  sub_filter_his <- function(i){
    library(raster)
    library(ncdf4)
    
    tmp = hist_files[i]
    tmpmode = strsplit(tmp,'_')[[1]][1]
    tmpname = strsplit(tmp,'_')[[1]][2]
    startdate = as.numeric(substr(strsplit(tmp,'_')[[1]][3],1,4))
    enddate = as.numeric(substr(strsplit(tmp,'_')[[1]][4],1,4))
    
    tmpfull = hist_files_full[i]
    tmps = stack(tmpfull)
    
    aim = length(startdate:2003)*12-11
    dim = dim(tmps)[3]
    
    tmps = tmps[[aim:dim]]
    
    output_name = paste0(tmpmode,'_',tmpname,'_','200301','_',enddate,'.nc')
    output_tmps = paste0(output_his,'/',output_name)
    
    writeRaster(tmps,output_tmps,format='CDF',overwrite = T)
    
  }
  
  sub_filter_ssp245 <- function(i){
    library(raster)
    library(ncdf4)
    
    tmp = ssp245_files[i]
    tmpmode = strsplit(tmp,'_')[[1]][1]
    tmpname = strsplit(tmp,'_')[[1]][2]
    startdate = as.numeric(substr(strsplit(tmp,'_')[[1]][3],1,4))
    enddate = as.numeric(substr(strsplit(tmp,'_')[[1]][4],1,4))
    
    tmpfull = ssp245_files_full[i]
    tmps = stack(tmpfull)
    
    aim = length(startdate:2099)*12
    tmps = tmps[[1:aim]]
    
    output_name = paste0(tmpmode,'_',tmpname,'_',startdate,'_',2099,'.nc')
    output_tmps = paste0(output_ssp245,'/',output_name)
    
    writeRaster(tmps,output_tmps,format='CDF',overwrite = T)
    
  }
  
  sub_filter_ssp585 <- function(i){
    library(raster)
    library(ncdf4)
    
    tmp = ssp585_files[i]
    tmpmode = strsplit(tmp,'_')[[1]][1]
    tmpname = strsplit(tmp,'_')[[1]][2]
    startdate = as.numeric(substr(strsplit(tmp,'_')[[1]][3],1,4))
    enddate = as.numeric(substr(strsplit(tmp,'_')[[1]][4],1,4))
    
    tmpfull = ssp585_files_full[i]
    tmps = stack(tmpfull)
    
    aim = length(startdate:2099)*12
    
    tmps = tmps[[1:aim]]
    
    output_name = paste0(tmpmode,'_',tmpname,'_',startdate,'_',2099,'.nc')
    output_tmps = paste0(output_ssp585,'/',output_name)
    
    writeRaster(tmps,output_tmps,format='CDF',overwrite = T)
    
  }
  
  
  
  library(doParallel)
  cl = makeCluster(8)
  clusterExport(cl,c("hist_files","hist_files_full",'i','output_his'))
  system.time(parLapply(cl,i,sub_filter_his))
  stopCluster(cl)
  
  cl = makeCluster(8)
  clusterExport(cl,c("ssp245_files","ssp245_files_full",'i','output_ssp245'))
  system.time(parLapply(cl,i,sub_filter_ssp245))
  stopCluster(cl)
  
  
  cl = makeCluster(8)
  clusterExport(cl,c("ssp585_files","ssp585_files_full",'i','output_ssp585'))
  system.time(parLapply(cl,i,sub_filter_ssp585))
  stopCluster(cl)
  
  print(paste0('pass','_',attrs))
  
}
final_projection_pos_area_in_tibet <-function(
  
){
  library(raster)
  library(data.table)
  library(ggplot2)
  
  setwd('/media/sdb5/Vapor_projcts/Vapor_tibet')
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/project_pos_area_by_model.R")
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/project_tws_in_south_tp12_by_trainonhist_random.R")
  
  project_pos_area_by_model()
  
}
generate_proj_bordershps_hist <- function(
  
){
  
  negshps_by_year = lapply(list.files('/media/sdb5/Vapor_projcts/Vapor_tibet/shp/twsneg_border',
                                      full.names = T,
                                      pattern = '*.shp$'),
                           shapefile)
  
  negshps_hist = negshps_by_year[7:14]
  
  years = 2009:2016
  input = 'output/northward_model_evaluate_hist/'
  dir.create(input)
  input = paste0(input,'/proj_north_',years,'.csv')
  
  tibet = shp_management('tibet')
  
  tibet_points = fortify(tibet)[,1:2]
  colnames(tibet_points) = c('long','lat')
  
  ratio_box = 1
  overarea_box = 1
  output_shp = 'output/hist_proj_border'
  dir.create(output_shp)
  output_shp = paste0(output_shp,
                      '/proj_hist_border_',years,'.shp')
  for(i in 1:length(years)){
    tmpborder = as.data.frame(fread(input[i]))
    firtp = as.matrix(tmpborder[1,])
    lastp = as.matrix(tmpborder[nrow(tmpborder),])
    
    tppoints = as.matrix(tibet_points)
    firstdis = pointDistance(firtp,tppoints,
                             lonlat = T)
    lastdis = pointDistance(lastp,tppoints,lonlat = T)
    firstdisid = which.min(firstdis)
    lastdisid = which.min(lastdis)
    
    
    tppoints1 = tppoints[1:2,]
    tppoints2 = tppoints[lastdisid:nrow(tppoints),]
    
    tmpshppoints = rbind(tppoints1,tmpborder,tppoints2)
    tmpshppoints = as.data.frame(tmpshppoints)
    
    coordinates(tmpshppoints) = ~long+lat
  
    poly = Polygon(tmpshppoints)
    polys = Polygons(list(poly),1)
    spolys = SpatialPolygons(list(polys))
    
    plot(spolys)
    shapefile(spolys,output_shp[i],overwrite = T)
    
    crs(spolys) = crs('+proj=longlat +datum=WGS84 +no_defs')
    
    tmpreal_border = negshps_hist[[i]]
    crs(tmpreal_border) = crs(spolys)
    cond = gIntersects(spolys,tmpreal_border)
    
    if(cond){
      cond2 = try(over_area <-rgeos::gIntersection(spgeom1 =spolys,
                                                   spgeom2 = tmpreal_border),
                  silent = T)
      if(class(cond2) == 'try-error'){
        a1 = tmpreal_border - spolys
        ar2 = area(tmpreal_border) - area(a1)
        over_area = ar2 /10^10
        overratio = over_area/(area(tmpreal_border)/10^10)
        overratio = overratio *100
      }else{
        over_area = area(over_area)/10^10
        overratio = over_area / (area(tmpreal_border)/10^10)
        overratio = overratio *100
      }
      
    }
    
    ratio_box = c(ratio_box,overratio)
    overarea_box = c(overarea_box,over_area)
    print(overratio)
    print(i)
  }
  ratio_box = ratio_box[-1]
  overarea_box = overarea_box[-1]
  
  retdf = data.frame(
    overarea = overarea_box,
    overarea_ratio = ratio_box
  )  
  
  output = 'output/verifiy_northmove_model_hist_overratio'
  dir.create(output)
  output = paste0(output,'/overarea.csv')
  
  fwrite(retdf,output)
  
}
generate_subs_in_io <-function(
  
){
  io = shp_management('ocean','io')
  
  pio = ggplot()+
    geom_polygon(data = io,
                 aes(x=long,y = lat,group = group),
                 fill = 'transparent',
                 color = 'black',size = 1)+
    geom_vline(xintercept = 74.2)+
    theme_bw()
  
  exio = extent(io)
  io1 = extent(exio[1]-1,74.2,0,15)
  io2 = extent(exio[1]-1,74.2,15,exio[4]+0.5)
  io3 = extent(74.2,exio[2]+1,0,15)
  io4 = extent(74.2,exio[2]+1,15,exio[4]+0.5)
  
  library(rgeos)
  library(rgdal)
  io1 = as(io1,'SpatialPolygons')
  io2 = as(io2,'SpatialPolygons')
  io3 = as(io3,'SpatialPolygons')
  io4 = as(io4,'SpatialPolygons')
  
  pio = ggplot()+
    geom_polygon(data = io,
                 aes(x=long,y = lat,group = group),
                 fill = 'transparent',
                 color = 'black',size = 1)+
    geom_polygon(data = io1,
                 aes(x=long,y = lat,group = group),
                 fill = 'transparent',
                 color = 'black',size = 1)+
    geom_polygon(data = io2,
                 aes(x=long,y = lat,group = group),
                 fill = 'transparent',
                 color = 'black',size = 1)+
    #geom_vline(xintercept = 74.2)+
    theme_bw()
  
  output_path = 'shp/cluster_io/'
  output_path = paste0(output_path,'/region',1:4)
  
  shapefile(io1,output_path[1],overwrite = T)
  shapefile(io2,output_path[2],overwrite = T)
  shapefile(io3,output_path[3],overwrite = T)
  shapefile(io4,output_path[4],overwrite = T)
  
}
generate_test_box_surround_tibet <-function(
  
){
  tibet = shp_management('tibet')
  world = shp_management('world')
  
  world = crop(world,extent(-180,180,0,90))
  ex = extent(tibet)
  
 
  
  
  minlong = seq(-20,105,25)
  maxlong = minlong[-1]
  minlong = minlong[-length(minlong)]
  
  minlat = seq(20,50,10)
  maxlat = minlat[-1]
  minlat = minlat[-4]
  
  
  shp2 = list()
  for(i in 1:length(minlong)){
    for(j in 1:length(minlat)){
      tmpminlong = minlong[i]
      tmpmaxlong = maxlong[i]
      tmpminlat = minlat[j]
      tmpmaxlat = maxlat[j]
      
      tmpex = extent(tmpminlong,tmpmaxlong,
                     tmpminlat,tmpmaxlat)
      tmpbox = as(tmpex,'SpatialPolygons')
      shp2 = c(shp2,list(tmpbox))
    }
  }
  
  shp_combine = do.call('bind',shp2)
  
  
  output_shp = paste0('shp/big_scale_subs/','region',1:15)
  
  for(i in 1:15){
    shapefile(shp2[[i]],output_shp[i],overwrite = T)
  }
  
  
  p = ggplot()+
    geom_polygon(data = world,aes(x = long,y = lat,group = group),
                 size = 1,color = 'black',fill = 'transparent')+
    
    geom_polygon(data = tibet,aes(x = long,y = lat,group = group),
                 size = 1,color = 'black',fill = 'transparent')+
    geom_polygon(data = shp_combine,aes(x = long,y = lat,group = group),
                 size = 1,color = 'black',fill = 'transparent')+
    geom_vline(xintercept = ex[2])+
    geom_vline(xintercept = -20)+
    geom_hline(yintercept = 20)+
    geom_hline(yintercept = 50)+
    geom_path(data= path,
              aes(x = long,y = lat,group = factor(routeid),
                  color = region),
              size = 1,
              arrow = arrow(angle=30,length=unit(0.11,"inches"),
                            type="closed"))+
    theme_bw()
  
  
  
  
}
geom_relief <- function(mapping = NULL, data = NULL,
                        stat = "identity", position = "identity",
                        ...,
                        raster = TRUE,
                        interpolate = TRUE,
                        na.rm = FALSE,
                        show.legend = NA,
                        inherit.aes = TRUE) {
  ggplot2::layer(
    data = data,
    mapping = mapping,
    stat = stat,
    geom = GeomRelief,
    position = position,
    show.legend = show.legend,
    inherit.aes = inherit.aes,
    params = list(
      raster = raster,
      interpolate = interpolate,
      na.rm = na.rm,
      ...
    )
  )
}

GeomRelief <- ggplot2::ggproto("GeomRelief", GeomTile,
                               required_aes = c("x", "y", "z"),
                               default_aes = ggplot2::aes(color = NA, fill = "grey35", size = 0.5, linetype = 1,
                                                          alpha = NA, light = "white", dark = "gray20", sun.angle = 60),
                               draw_panel = function(data, panel_scales, coord, raster, interpolate) {
                                 if (!coord$is_linear()) {
                                   stop("non lineal coordinates are not implemented in GeomRelief", call. = FALSE)
                                 } else {
                                   coords <- as.data.table(coord$transform(data, panel_scales))
                                   
                                   # This is the only part that's actually new. The rest is essentially 
                                   # copy-pasted from geom_raster and geom_tile
                                   coords[, sun.angle := (sun.angle + 90)*pi/180]
                                   coords[, dx := .derv(z, x), by = y]
                                   coords[, dy := .derv(z, y), by = x]
                                   coords[, shade := (cos(atan2(-dy, -dx) - sun.angle) + 1)/2]
                                   coords[is.na(shade), shade := 0]
                                   coords[, fill := .rgb2hex(colorRamp(c(dark, light), space = "Lab")(shade)),
                                          by = .(dark, light)]
                                   
                                   # From geom_raster and geom_tile
                                   if (raster == TRUE){
                                     if (!inherits(coord, "CoordCartesian")) {
                                       stop("geom_raster only works with Cartesian coordinates", call. = FALSE)
                                     }
                                     # Convert vector of data to raster
                                     x_pos <- as.integer((coords$x - min(coords$x)) / resolution(coords$x, FALSE))
                                     y_pos <- as.integer((coords$y - min(coords$y)) / resolution(coords$y, FALSE))
                                     
                                     nrow <- max(y_pos) + 1
                                     ncol <- max(x_pos) + 1
                                     
                                     raster <- matrix(NA_character_, nrow = nrow, ncol = ncol)
                                     raster[cbind(nrow - y_pos, x_pos + 1)] <- alpha(coords$fill, coords$alpha)
                                     
                                     # Figure out dimensions of raster on plot
                                     x_rng <- c(min(coords$xmin, na.rm = TRUE), max(coords$xmax, na.rm = TRUE))
                                     y_rng <- c(min(coords$ymin, na.rm = TRUE), max(coords$ymax, na.rm = TRUE))
                                     
                                     grid::rasterGrob(raster,
                                                      x = mean(x_rng), y = mean(y_rng),
                                                      width = diff(x_rng), height = diff(y_rng),
                                                      default.units = "native", interpolate = interpolate
                                     )
                                     
                                   } else {
                                     ggplot2:::ggname("geom_rect", grid::rectGrob(
                                       coords$xmin, coords$ymax,
                                       width = coords$xmax - coords$xmin,
                                       height = coords$ymax - coords$ymin,
                                       default.units = "native",
                                       just = c("left", "top"),
                                       gp = grid::gpar(
                                         col = coords$fill,
                                         fill = alpha(coords$fill, coords$alpha),
                                         lwd = coords$size * .pt,
                                         lty = coords$linetype,
                                         lineend = "butt"
                                       )
                                     ))
                                     
                                   }
                                 }
                               }
)

rect_to_poly <- function(xmin, xmax, ymin, ymax) {
  data.frame(
    y = c(ymax, ymax, ymin, ymin, ymax),
    x = c(xmin, xmax, xmax, xmin, xmin)
  )
}

.rgb2hex <- function(array) {
  rgb(array[, 1], array[, 2], array[, 3], maxColorValue = 255)
}


.derv <- function(x, y, order = 1, cyclical = FALSE, fill = FALSE) {
  N <- length(x)
  d <- y[2] - y[1]
  if (order >= 3) {
    dxdy <- .derv(.derv(x, y, order = 2, cyclical = cyclical, fill = fill),
                  y, order = order - 2, cyclical = cyclical, fill = fill)
  } else {
    if (order == 1) {
      dxdy <- (x[c(2:N, 1)] - x[c(N, 1:(N-1))])/(2*d)
    } else if (order == 2) {
      dxdy <- (x[c(2:N, 1)] + x[c(N, 1:(N-1))] - 2*x)/d^2
    }
    if (!cyclical) {
      if (!fill) {
        dxdy[c(1, N)] <- NA
      }
      if (fill) {
        dxdy[1] <- (-11/6*x[1] + 3*x[2] - 3/2*x[3] + 1/3*x[4])/d
        dxdy[N] <- (11/6*x[N] - 3*x[N-1] + 3/2*x[N-2] - 1/3*x[N-3])/d
      }
    }
    
  }
  return(dxdy)
}
get_the_border_value_basedpoints <-function(
  rast,pointsdf
){
  
  rastdf = as.data.frame(rast,xy = T)
  naid = which(is.na(rastdf[,3]))
  rastdf = rastdf[-naid,]
  
  locs = rastdf[,1:2]
  
  i = 1:nrow(locs)
  locs <<- locs
  
  locs_pols = pointsdf
  locs_pols <<- locs_pols
  calc_distance_by_points<-function(i){
    tmp = locs[i,]
    dis = min(pointDistance(tmp,locs_pols,lonlat = T))
    return(dis)
  }
  
  d = lapply(i, calc_distance_by_points)
  d = do.call('c',d)
  
  res = res(rast)
  res1 = res * 111 * 7 * 1000
  
  outter_id = which(d <= res1[1])
  
  retdf = rastdf[outter_id,]
  locs = retdf[,1:2]
  i = 1:nrow(locs)
  
  border = 'shp/project_negs_border/border.shp'
  border = shapefile(border)
  border = fortify(border)
  border = border[,1:2]
  
  filter_points_by_dist<-function(i){
    tmp = locs[i,]
    dis = min(pointDistance(tmp,border,lonlat = T))
    return(dis)
  }
  
  filterid = do.call(c,lapply(i,filter_points_by_dist))
  
  res2 = res * 111 * 1 * 1000
  
  filterid = which(filterid <= res2[1])
  retdf = retdf[filterid,]
  output = 'output/proj_negborder_df'
  dir.create(output)
  output = paste0(output,'/proj_negborder_df.csv')
  #fwrite(retdf,output)
  
  return(retdf)
  
  
  
  
  
}
get_the_border_value <-function(
  rast,polygon
){
 
  rastdf = as.data.frame(rast,xy = T)
  naid = which(is.na(rastdf[,3]))
  rastdf = rastdf[-naid,]
  
  locs = rastdf[,1:2]
  
  i = 1:nrow(locs)
  locs <<- locs
  
  pols = fortify(polygon)
  locs_pols = pols[,1:2]
  locs_pols <<- locs_pols
  calc_distance_by_points<-function(i){
    tmp = locs[i,]
    dis = min(pointDistance(tmp,locs_pols,lonlat = T))
    return(dis)
  }
  
  d = lapply(i, calc_distance_by_points)
  d = do.call('c',d)
  
  res = res(rast)
  res1 = res * 111 *1000
  
  outter_id = which(d <= res1[1])
  
  retdf = rastdf[outter_id,]
  
  
  return(retdf)
  
  
  
  
   
}
gldas_snow_in_tibet <-function(
  
){
  setwd('/media/sdb5/Vapor_projcts/Vapor_tibet')
  
  tibet = shp_management('tibet')
  #snow = data_management('gldas_snow')
  snow = data_management('snow_cover')
  extent(snow) = extent(-180,180,extent(snow)[3],
                        extent(snow)[4])
  snow = mask(crop(snow,tibet),tibet)
  snow = snow[[1:174]]
  pre_process<-function(x){
    xi = x <=100
    xi = xi *x
    return(xi)
  }
  
  snow = as.list(snow)
  snow = lapply(snow,pre_process)
  snow = stack(snow)
  
  cluster = list.files('shp/cluster_tws_neg_shp_deter/',
                       pattern = '*.shp$',
                       full.names = T)
  cluster = lapply(cluster,shapefile)
  
  
  
  sub_calc_snow <-function(i){
    tmpshp = cluster[[i]]
    tmpsnow = mask(crop(snow,tmpshp),tmpshp)
    tmpsnow = as.list(tmpsnow)
    
    calc_snow_coverage <- function(x){
      area = 0.05*111*0.05*111*x/100
      return(area)
    }
    
    tmpsnow = lapply(tmpsnow,calc_snow_coverage)
    
    tmpsnow = lapply(tmpsnow,cellStats,stat = 'sum',
                     na.rm = T)
    tmpsnow = do.call('c',tmpsnow)
    
    snowcover_rate = tmpsnow * 10 ^6 / area(tmpshp)
    
    trend_stand <-function(x){
      x = ts(x,start = c(2003,1),frequency = 12)
      x = decompose(x)$trend
      naid = which(is.na(x))
      x = x[-naid]
      x = (x - mean(x))/sd(x)
      return(x)
    }
    tmpsnow = trend_stand(tmpsnow)
    return(tmpsnow)
  }
  
  i = 1:3
  i<<- i
  cluster <<- cluster
  snow <<- snow
  
  snow_in_cluster = lapply(i,sub_calc_snow)
  snow_in_cluster = do.call('cbind',snow_in_cluster)
  
  output = 'output/snow_cover_intibet'
  dir.create(output)
  output = paste0(output,'/snow_cover_intibe.csv')
  
  fwrite(snow_in_cluster,output)
  
}
gldas_snow_whole_in_tibet <-function(
  
){
  setwd('/media/sdb5/Vapor_projcts/Vapor_tibet')
  
  tibet = shp_management('tibet')
  #snow = data_management('gldas_snow')
  snow = data_management('snow_cover')
  extent(snow) = extent(-180,180,extent(snow)[3],
                        extent(snow)[4])
  snow = mask(crop(snow,tibet),tibet)
  snow = snow[[1:174]]
  pre_process<-function(x){
    xi = x <=100
    xi = xi *x
    return(xi)
  }
  
  snow = as.list(snow)
  snow = lapply(snow,pre_process)
  snow = stack(snow)
  
  cluster = list.files('shp/cluster_tws_neg_shp_deter/',
                       pattern = '*.shp$',
                       full.names = T)
  cluster = lapply(cluster,shapefile)
  
  
  
  sub_calc_snow <-function(i){
    tmpshp = cluster[[i]]
    tmpsnow = mask(crop(snow,tmpshp),tmpshp)
    tmpsnow = as.list(tmpsnow)
    
    calc_snow_coverage <- function(x){
      area = 0.05*111*0.05*111*x/100
      return(area)
    }
    
    tmpsnow = lapply(tmpsnow,calc_snow_coverage)
    
    tmpsnow = lapply(tmpsnow,cellStats,stat = 'sum',
                     na.rm = T)
    tmpsnow = do.call('c',tmpsnow)
    
    snowcover_rate = tmpsnow * 10 ^6 / area(tmpshp)
    
    trend_stand <-function(x){
      #x = ts(x,start = c(2003,1),frequency = 12)
      #x = decompose(x)$trend
      #n#aid = which(is.na(x))
      #x = x[-naid]
      x = (x - mean(x))/sd(x)
      return(x)
    }
    tmpsnow = trend_stand(tmpsnow)
    return(tmpsnow)
  }
  
  i = 1:3
  i<<- i
  cluster <<- cluster
  snow <<- snow
  
  snow_in_cluster = lapply(i,sub_calc_snow)
  snow_in_cluster = do.call('cbind',snow_in_cluster)
  
  output = 'output/snow_cover_intibet_full'
  dir.create(output)
  output = paste0(output,'/snowfull_cover_intibet.csv')
  
  fwrite(snow_in_cluster,output)
  
}
import_hist_twsdf <- function(
  year = 2009
){
  input_histtws = 'output/figs_twsann_sum/twsdf.csv'
  tws = as.data.frame(fread(input_histtws))
  
  years = 2003:2016
  id = which(years == year)+2
  
  ret = tws[,c(1,2,id)]
  colnames(ret) = c('long','lat','tws')
  
  negid = which(ret$tws <=0)
  ret = ret[negid,]
  return(ret)
}
import_historical_twsneg_area <-function(
  
){
  output_shp = dir.create('shp/twsneg_border')
  output_shp = paste0('shp/twsneg_border/')
  output_shp = paste0(output_shp,type, '.shp')
  
  i = 1:length(output_shp)
  shps = lapply(output_shp,shapefile)
  
  his_neg = 1
  for(i in 1:length(output_shp)){
    tmp = area(shps[[i]])/10^10
    his_neg =c(his_neg,tmp)
  }
  his_neg = his_neg[-1]
  return(his_neg)
  
}
import_index_insource_tibet<-function(
  var = 'pme',
  region = 'io'
){
  base = '/media/sdb5/Vapor_projcts/Vapor_tibet'
  setwd(base)
  if(var == 'pme'){
    input = 'Data/era5_pme_sum/'
    input = paste0(input,region)
    input = list.files(input,full.names = T)
    df = as.data.frame(fread(input))
  }else if(var == 'era5_t_tibet'){
    input = 'output/mean_temperature_tibet'
    input = list.files(input,full.names = T)
    df = as.data.frame(fread(input))
  }else if(var == 'era5_t_ato'){
    input = 'output/mean_temperature_ato'
    input = list.files(input,full.names = T)
    df = as.data.frame(fread(input))
  }else if(var == 'era5_t_io'){
    input = 'output/mean_temperature_io'
    input = list.files(input,full.names = T)
    df = as.data.frame(fread(input))
  }else if(var == 'pme_mean'){
    input = 'Data/era5_pme_mean/'
    input = paste0(input,region)
    input = list.files(input,full.names = T)
    df = as.data.frame(fread(input))
  }else if(var == 'pr'){
    input = 'Data/era5_pr_sum/'
    input = paste0(input,region)
    input = list.files(input,full.names = T)
    df = as.data.frame(fread(input))
  }else if(var == 'pr_mean'){
    input = 'Data/era5_pr_mean/'
    input = paste0(input,region)
    input = list.files(input,full.names = T)
    df = as.data.frame(fread(input))
  }else if(var == 'eva'){
    input = 'Data/era5_eva_sum/'
    input = paste0(input,region)
    input = list.files(input,full.names = T)
    df = as.data.frame(fread(input))
  }else if(var == 'eva_mean'){
    input = 'Data/era5_eva_mean/'
    input = paste0(input,region)
    input = list.files(input,full.names = T)
    df = as.data.frame(fread(input))
  }else if(var == 'snowcover'){
    input = 'output/snow_cover_intibet/snow_cover_intibe.csv'
    #input = paste0(base,'/',input)
    df = as.data.frame(fread(input))
  }else if(var == 'snowcover_full'){
    input = 'output/snow_cover_intibet_full/snowfull_cover_intibet.csv'
    #input = paste0(base,'/',input)
    df = as.data.frame(fread(input))
  }else if(var == 'delterep'){
    input = 'output/delter_ep_intibet/delter_ep_intibet.csv'
    df = as.data.frame(fread(input))
  }else if(var == 'tws_tibet'){
    input = 'output/tws_trend_df/tws_trend_df.csv'
    df = as.data.frame(fread(input))
  }else if(var == 'tws_tibet_full'){
    input = 'output/tws_full_df/tws_full_df.csv'
    df = as.data.frame(fread(input))
  }else if(var == 'pme_cmip6'){
    input = 'output/cmip6_pmesum_in_source/'
    input = paste0(input,'/',region)
    input = list.files(input,full.names = T)
    
    read_fun256<-function(i){
      tmpinput = list.files(input[i],full.names = T)
      
      files256 = as.data.frame(fread(tmpinput[1]))
      
      #files256_ense = apply(files256,1,mean,
      #                      na.rm = T)
      return(files256)
    }
    
    read_fun585<-function(i){
      tmpinput = list.files(input[i],full.names = T)
      
      files585 = as.data.frame(fread(tmpinput[2]))
      #files585_ense = apply(files585,1,mean,
      #                      na.rm = T)
      
      return(files585)
    }
  
    if(region == 'ato'){
      i = 2:3
    }else if(region =='io'){
      i = 4
    }
    pme256 = lapply(i,read_fun256)
    pme585 = lapply(i,read_fun585)

    return(list(pme256,pme585))
  }else if(var == 'pme_cmip6_mean'){
    input = 'output/cmip6_pmemean_in_source/'
    input = paste0(input,'/',region)
    input = list.files(input,full.names = T)
    
    read_fun256<-function(i){
      tmpinput = list.files(input[i],full.names = T)
      
      files256 = as.data.frame(fread(tmpinput[1]))
      
      #files256_ense = apply(files256,1,mean,
      #                      na.rm = T)
      return(files256)
    }
    
    read_fun585<-function(i){
      tmpinput = list.files(input[i],full.names = T)
      
      files585 = as.data.frame(fread(tmpinput[2]))
      #files585_ense = apply(files585,1,mean,
      #                      na.rm = T)
      
      return(files585)
    }
    
    if(region == 'ato'){
      i = 2:3
    }else if(region =='io'){
      i = 4
    }
    pme256 = lapply(i,read_fun256)
    pme585 = lapply(i,read_fun585)
    
    return(list(pme256,pme585))
  }else if(var == 't_cmip6'){
    input = 'output/cmip6_tmean_in_source/'
    input = paste0(input,'/',region)
    input = list.files(input,full.names = T)
    
    read_fun256<-function(i){
      tmpinput = list.files(input[i],full.names = T)
      
      files256 = as.data.frame(fread(tmpinput[1]))
      
      #files256_ense = apply(files256,1,mean,
      #                      na.rm = T)
      return(files256)
    }
    
    read_fun585<-function(i){
      tmpinput = list.files(input[i],full.names = T)
      
      files585 = as.data.frame(fread(tmpinput[2]))
      #files585_ense = apply(files585,1,mean,
      #                      na.rm = T)
      
      return(files585)
    }
    
    if(region == 'ato'){
      i = c(1,3)
    }else if(region =='io'){
      i = 1:4
    }else if(region == 'tibet'){
      i = 1:2
    }
    pme256 = lapply(i,read_fun256)
    pme585 = lapply(i,read_fun585)
    
    return(list(pme256,pme585))
  }else if(var == 'proj_ssp245_t_tpm'){
    files = list.files('output/multi_weighted_cmip6_t_in_tpm12',
                       full.names = T)
    
    tpm1 = read.csv(files[1],header = T)
    tpm2 = read.csv(files[3],header = T)
    
    tpm1 = tpm1[,2]
    tpm2 = tpm2[,2]
    
    ret = data.frame(tpm1 = tpm1,
                     tpm2 = tpm2)
    return(ret)
    
  }else if(var == 'proj_ssp585_t_tpm'){
    files = list.files('output/multi_weighted_cmip6_t_in_tpm12',
                       full.names = T)
    
    tpm1 = read.csv(files[2],header = T)
    tpm2 = read.csv(files[4],header = T)
    
    tpm1 = tpm1[,2]
    tpm2 = tpm2[,2]
    
    ret = data.frame(tpm1 = tpm1,
                     tpm2 = tpm2)
    return(ret)
    
  }else if(var == 'ssp245_t_tpm'){
    files = list.files('output/cmip6_fut_tpm',
                       full.names = T)
    ret = as.data.frame(fread(files[1]))
    return(ret)
  }else if(var == 'ssp585_t_tpm'){
    files = list.files('output/cmip6_fut_tpm',
                       full.names = T)
    ret = as.data.frame(fread(files[2]))
    return(ret)
  }else if(var == 'proj_fut_pmeato3_multi'){
    files = list.files('output/proj_fut_pmeato3_mutli_weight',
                       full.names = T)
    ret = as.data.frame(fread(files))
    return(ret)
  }else if(var == 'snow_water_equi'){
    input = 'output/mean_swe_tibet/mean_swe_box.csv'
    ret = as.data.frame(fread(input))
    return(ret)
  }
  
  return(df)

  
  
}
import_proj_border_multi_max <- function(
  mode = 'full'
){
  input='output/mulit_year_max_proj_border'
  dir.create(input)
  files245 = paste0('year_',1:3,'_border245.csv')
  files585 = paste0('year_',1:3,'_border585.csv')
  
  input245 = paste0(input,'/',files245)
  input585 = paste0(input,'/',files585)
  
  bor1_245_max = as.data.frame(fread(input245[1]))
  bor2_245_max = as.data.frame(fread(input245[2]))
  bor3_245_max = as.data.frame(fread(input245[3]))
  
  bor1_585_max = as.data.frame(fread(input585[1]))
  bor2_585_max = as.data.frame(fread(input585[2]))
  bor3_585_max = as.data.frame(fread(input585[3]))
  
  bor1_245_max$type = '(b) SSP245 2020-2051'
  bor2_245_max$type = '(c) SSP245 2051-2082'
  bor3_245_max$type = '(d) SSP245 2082-2098'
  
  bor1_585_max$type = '(e) SSP585 2020-2051'
  bor2_585_max$type = '(f) SSP585 2051-2082'
  bor3_585_max$type = '(g) SSP585 2082-2098'
  
  bor1_245_max$col = '2020-2051'
  bor2_245_max$col = '2051-2082'
  bor3_245_max$col = '2082-2098'
  
  bor1_585_max$col = '2020-2051'
  bor2_585_max$col = '2051-2082'
  bor3_585_max$col = '2082-2098'
  
  input='output/mulit_year_min_proj_border'
  dir.create(input)
  files245 = paste0('year_',1:3,'_border245.csv')
  files585 = paste0('year_',1:3,'_border585.csv')
  
  input245 = paste0(input,'/',files245)
  input585 = paste0(input,'/',files585)
  
  bor1_245_min = as.data.frame(fread(input245[1]))
  bor2_245_min = as.data.frame(fread(input245[2]))
  bor3_245_min = as.data.frame(fread(input245[3]))
  
  bor1_585_min = as.data.frame(fread(input585[1]))
  bor2_585_min = as.data.frame(fread(input585[2]))
  bor3_585_min = as.data.frame(fread(input585[3]))
  
  bor1_245_min$type = '(a) SSP245 2020-2051'
  bor2_245_min$type = '(b) SSP245 2051-2082'
  bor3_245_min$type = '(c) SSP245 2082-2098'
  
  bor1_585_min$type = '(d) SSP585 2020-2051'
  bor2_585_min$type = '(e) SSP585 2051-2082'
  bor3_585_min$type = '(f) SSP585 2082-2098'
  
  bor1_245_min$col = '2020-2051'
  bor2_245_min$col = '2051-2082'
  bor3_245_min$col = '2082-2098'
  
  bor1_585_min$col = '2020-2051'
  bor2_585_min$col = '2051-2082'
  bor3_585_min$col = '2082-2098'
  
  if(mode == 'full'){
    bors = rbind(bor1_245_max,bor2_245_max,bor3_245_max,
                 bor1_585_max,bor2_585_max,bor3_585_max)
  }else if(mode =='bor1_245_max'){
    bors = bor1_245_max
  }else if(mode =='bor2_245_max'){
    bors = bor2_245_max
  }else if(mode =='bor3_245_max'){
    bors = bor3_245_max
  }else if(mode =='bor1_585_max'){
    bors = bor1_585_max
  }else if(mode =='bor2_585_max'){
    bors = bor2_585_max
  }else if(mode =='bor3_585_max'){
    bors = bor3_585_max
  }
  
  
  return(bors)
}
import_proj_border_multi_min <- function(
  
){
  input='output/mulit_year_min_proj_border'
  dir.create(input)
  files245 = paste0('year_',1:3,'_border245.csv')
  files585 = paste0('year_',1:3,'_border585.csv')
  
  input245 = paste0(input,'/',files245)
  input585 = paste0(input,'/',files585)
  
  bor1_245_min = as.data.frame(fread(input245[1]))
  bor2_245_min = as.data.frame(fread(input245[2]))
  bor3_245_min = as.data.frame(fread(input245[3]))
  
  bor1_585_min = as.data.frame(fread(input585[1]))
  bor2_585_min = as.data.frame(fread(input585[2]))
  bor3_585_min = as.data.frame(fread(input585[3]))
  
  bor1_245_min$type = '(b) SSP245 2020-2051'
  bor2_245_min$type = '(c) SSP245 2051-2082'
  bor3_245_min$type = '(d) SSP245 2082-2098'
  
  bor1_585_min$type = '(e) SSP585 2020-2051'
  bor2_585_min$type = '(f) SSP585 2051-2082'
  bor3_585_min$type = '(g) SSP585 2082-2098'
  
  bor1_245_min$col = '2020-2051'
  bor2_245_min$col = '2051-2082'
  bor3_245_min$col = '2082-2098'
  
  bor1_585_min$col = '2020-2051'
  bor2_585_min$col = '2051-2082'
  bor3_585_min$col = '2082-2098'
  
  bors = rbind(bor1_245_min,bor2_245_min,bor3_245_min,
               bor1_585_min,bor2_585_min,bor3_585_min)
  
  return(bors)
}
import_tws_raster<-function(
  
){
  source("/home/share/R_project/xinjiang_vapor/data_management.R")
  tws = data_management('grace')
  tws_neg_region = list.files('shp/cluster_tws_neg_shp_deter',
                              full.names = T,
                              pattern = '*.shp$')
  
  tws_neg_region = lapply(tws_neg_region,shapefile)
  
  
  
  
  tws1 = raster::mask(crop(tws,tws_neg_region[[1]]),
                      tws_neg_region[[1]])
  tws2 = raster::mask(crop(tws,tws_neg_region[[2]]),
                      tws_neg_region[[2]])
  
  tws1df = as.data.frame(tws1,xy = T)
  tws2df = as.data.frame(tws2,xy = T)
  
  naid1 = which(is.na(tws1df[,3]))
  naid2 = which(is.na(tws2df[,3]))
  
  tws1df = tws1df[-naid1,]
  tws2df = tws2df[-naid2,]
  
  return(list(tws1df,tws2df))
  
  
  
    
}
inititial_move_borders <- function(
  borderdf1,borderdf2,tibet,northdis,mode
){
  calc_increasing_vector_reg1 <- function(i,northdis = 12){
    print(i)
    tmpborder = borderdf1[i,]
    
    if(mode == 'ssp245'){
      cen1 = ret_cen1[1,]
    }else{
      cen1 = ret_cen2[1,]
    }
    
    dis = pointDistance(cen1[,1:2],tmpborder[,1:2],
                        lonlat = T)
    dis = dis / 1000
    
    longdif = tmpborder[,1] - cen1[,1]
    latdif = tmpborder[,2] - cen1[,2]
    
    disdif = sqrt(longdif^2 + latdif^2)
    
    # generate equal distance by 5
    unitdis = disdif / 50
    dis = unitdis * seq(1,50,1)
    
    fetch_by_dis <- function(dis){
      longadd = (longdif/disdif)*dis
      latadd = (latdif/disdif)*dis
      
      aimpoints = data.frame(
        long = longadd + cen1[,1],
        lat = latadd + cen1[,2]
      )
      return(aimpoints)
    }
    
    
    points_on_theline = fetch_by_dis(dis)
    
    twsonroute = extract(rast,points_on_theline)
    
    naid = which(is.na(twsonroute))
    if(length(naid)>0){
      dis = dis[-naid]
      twsonroute = twsonroute[-naid]
    }
    
    model1 = lm(twsonroute ~ dis + I(dis^2))
    model2 = lm(twsonroute ~ exp(dis))
    model3 = lm(twsonroute ~ dis)
    model4 = lm(twsonroute ~ dis + I(dis^2)+I(dis^0.5))
    
    c1 = model1$coefficients
    f1 <- function(dis,a,b,c){return(c+ dis * b+ dis^2 * a)}
    c2 = model2$coefficients
    f2 <- function(dis,a,b){return(b+a*exp(dis))}
    c3 = model3$coefficients
    f3 <- function(dis,a,b){return(b+a*dis)}
    
    c4 = model4$coefficients
    f4 <- function(dis,a,b,c,d){return(d+c*dis+b* dis^2 + a*dis^0.5)}
    
    r1 = caret::RMSE(model1$fitted.values,twsonroute)
    r2 = caret::RMSE(model2$fitted.values,twsonroute)
    r3 = caret::RMSE(model3$fitted.values,twsonroute)
    r4 = caret::RMSE(model4$fitted.values,twsonroute)
    
    rs = c(r1,r2,r3,r4)
    
    print(paste0('Model1: ',r1))
    print(paste0('Model4: ',r4))
    print(paste0('Model3: ',r3))
    
    sid = order(rs,decreasing = F)
    
    mods = list(model1,model2,model3,model4)
    fs = list(f1,f2,f3,f4)
    
    minrs = which(rs == min(rs))
    
    
    for(s in sid){
      minrs = s
      mod = mods[[minrs]]
      f = fs[[minrs]]
      
      if(minrs == 1){
        ret_er = try(zerodis <- uniroot(f,c(1,100),a=c1[3],b = c1[2],c=c1[1])$root,
                     silent = T)
      }else if(minrs == 2){
        ret_er = try(zerodis <- uniroot(f,c(1,100),a=c2[2],b = c2[1])$root,
                     silent = T)
      }else if(minrs == 3){
        ret_er = try(zerodis <- uniroot(f,c(1,100),a=c3[2],b = c3[1])$root,
                     silent = T)
      }else if(minrs == 4){
        ret_er = try(zerodis <- uniroot(f,c(1,100),a=c4[4],b = c4[3],c = c4[2],d = c4[1])$root,
                     silent = T)
      }
      
      
      if(class(ret_er) %in% 'try-error'){
        print('try next')
      }else{
        break
      }
    }
    
    fetch_by_dis_withtws <- function(dis){
      longadd = (longdif/disdif)*dis
      latadd = (latdif/disdif)*dis
      
      disdf = data.frame(dis = dis)
      twsproj = predict(mod,disdf)
      
      #if(twsproj >= 0){
      #  disdf = data.frame(dis = zerodis)
      #  twsproj = predict(mod,disdf)
      
      #  longadd = (longdif/disdif)*zerodis
      #  latadd = (latdif/disdif)*zerodis
      #}
      
      aimpoints = data.frame(
        long = longadd + cen1[,1],
        lat = latadd + cen1[,2]
        #tws = twsproj
      )
      return(aimpoints)
    }
    
    len_dis = length(dis)
    northmove = dis[len_dis]+northdis
    extdis = northmove
    #extdis = c(seq(dis[len_dis],northmove,unitdis),northmove)
    #extdis = extdis[which(extdis>dis[len_dis])]
    
    aimloc = lapply(extdis,
                    fetch_by_dis_withtws)
    aimloc = do.call('rbind',
                     aimloc)
    
    return(aimloc)
  }
  calc_increasing_vector_reg2 <- function(i,northdis = 12){
    print(i)
    tmpborder = borderdf2[i,]
    
    if(mode == 'ssp245'){
      cen1 = ret_cen1[2,]
    }else{
      cen1 = ret_cen2[2,]
    }
    
    dis = pointDistance(cen1[,1:2],tmpborder[,1:2],
                        lonlat = T)
    dis = dis / 1000
    
    longdif = tmpborder[,1] - cen1[,1]
    latdif = tmpborder[,2] - cen1[,2]
    
    disdif = sqrt(longdif^2 + latdif^2)
    
    # generate equal distance by 5
    unitdis = disdif / 50
    dis = unitdis * seq(1,50,1)
    
    fetch_by_dis <- function(dis){
      longadd = (longdif/disdif)*dis
      latadd = (latdif/disdif)*dis
      
      aimpoints = data.frame(
        long = longadd + cen1[,1],
        lat = latadd + cen1[,2]
      )
      return(aimpoints)
    }
    
    
    points_on_theline = fetch_by_dis(dis)
    
    twsonroute = extract(rast,points_on_theline)
    
    naid = which(is.na(twsonroute))
    if(length(naid)>0){
      dis = dis[-naid]
      twsonroute = twsonroute[-naid]
    }
    
    model1 = lm(twsonroute ~ dis + I(dis^2))
    model2 = lm(twsonroute ~ exp(dis))
    model3 = lm(twsonroute ~ dis)
    model4 = lm(twsonroute ~ dis + I(dis^2)+I(dis^0.5))
    
    c1 = model1$coefficients
    f1 <- function(dis,a,b,c){return(c+ dis * b+ dis^2 * a)}
    c2 = model2$coefficients
    f2 <- function(dis,a,b){return(b+a*exp(dis))}
    c3 = model3$coefficients
    f3 <- function(dis,a,b){return(b+a*dis)}
    
    c4 = model4$coefficients
    f4 <- function(dis,a,b,c,d){return(d+c*dis+b* dis^2 + a*dis^0.5)}
    
    r1 = caret::RMSE(model1$fitted.values,twsonroute)
    r2 = caret::RMSE(model2$fitted.values,twsonroute)
    r3 = caret::RMSE(model3$fitted.values,twsonroute)
    r4 = caret::RMSE(model4$fitted.values,twsonroute)
    
    rs = c(r1,r2,r3,r4)
    
    print(paste0('Model1: ',r1))
    print(paste0('Model4: ',r4))
    print(paste0('Model3: ',r3))
    
    sid = order(rs,decreasing = F)
    
    mods = list(model1,model2,model3,model4)
    fs = list(f1,f2,f3,f4)
    
    minrs = which(rs == min(rs))
    
    
    for(s in sid){
      minrs = s
      mod = mods[[minrs]]
      f = fs[[minrs]]
      
      if(minrs == 1){
        ret_er = try(zerodis <- uniroot(f,c(1,100),a=c1[3],b = c1[2],c=c1[1])$root,
                     silent = T)
      }else if(minrs == 2){
        ret_er = try(zerodis <- uniroot(f,c(1,100),a=c2[2],b = c2[1])$root,
                     silent = T)
      }else if(minrs == 3){
        ret_er = try(zerodis <- uniroot(f,c(1,100),a=c3[2],b = c3[1])$root,
                     silent = T)
      }else if(minrs == 4){
        ret_er = try(zerodis <- uniroot(f,c(1,100),a=c4[4],b = c4[3],c = c4[2],d = c4[1])$root,
                     silent = T)
      }
      
      
      if(class(ret_er) %in% 'try-error'){
        print('try next')
      }else{
        break
      }
    }
    
    fetch_by_dis_withtws <- function(dis){
      longadd = (longdif/disdif)*dis
      latadd = (latdif/disdif)*dis
      
      disdf = data.frame(dis = dis)
      twsproj = predict(mod,disdf)
      
      #if(twsproj >= 0){
      #  disdf = data.frame(dis = zerodis)
      #  twsproj = predict(mod,disdf)
      #  
      #  longadd = (longdif/disdif)*zerodis
      #  latadd = (latdif/disdif)*zerodis
      #}
      
      aimpoints = data.frame(
        long = longadd + cen1[,1],
        lat = latadd + cen1[,2]
        #tws = twsproj
      )
      return(aimpoints)
    }
    
    len_dis = length(dis)
    northmove = dis[len_dis]+northdis
    extdis = northmove
    #extdis = c(seq(dis[len_dis],northmove,unitdis),northmove)
    #extdis = extdis[which(extdis>dis[len_dis])]
    
    aimloc = lapply(extdis,fetch_by_dis_withtws)
    aimloc = do.call('rbind',aimloc)
    
    
    return(aimloc)
  }
  
  
  i = 1:nrow(borderdf1)
  zerodf_reg1 = do.call(rbind,lapply(i,calc_increasing_vector_reg1,
                                     northdis = northdis))
  
  i = 1:nrow(borderdf2)
  zerodf_reg2 = do.call(rbind,
                        lapply(i,calc_increasing_vector_reg2,
                               northdis = northdis))
  
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/mask_points_by_shp.R")
  d1 = mask_points_by_shp(zerodf_reg1,tibet)
  d2 = mask_points_by_shp(zerodf_reg2,tibet)
  
  d1$group = 1
  d2$group = 2
  
  d2id = order(d2$long)
  d2 = d2[d2id,]
  
  return(list(d1[,1:2],d2[,1:2]))
}
layout_plotly_3d_main <- function(
  
){
  library(plotly)
  f1 <- list(
    family = "sans-serif",
    size = 18,
    color = "black")
  
  f2 <- list(
    family = "sans-serif",
    size = 14,
    color = "black")
  
  fleg = list(
    titlefont = f1,
    tickfont = f2,
    color = "black"
  )
  
  yaxis <- list(
    title = '',
    titlefont = f1,
    tickfont = f2,
    showgrid = T,
    range = c(0,90),
    ntick = 4,
    ticktext = paste0(seq(0,90,30),'°N'),
    tickvals = seq(0,90,30)
  )
  xaxis = list(
    title = '',
    titlefont = f1,
    tickfont = f2,
    showgrid = T,
    range = c(-180,180),
    ntick = 14,
    ticktext = c(paste0(c(160,90),'°W'),
                 paste0(0,'°'),
                 paste0(c(90,160),'°E')),
    tickvals = c(-160,-90,0,90,160)
  )
  zaxis <- list(
    title = 'Elevation (km)',
    titlefont = f1,
    tickfont = f2,
    showgrid = T,
    # dtick = 2000,
    ticktext = paste0(seq(0,8,2),'km'),
    tickvals = seq(0,8000,2000)
  )
  
  
  legend_set <- list(
    font = fleg,
    orientation = 'h',
    borderwidth = 3)
  
  return(list(legend_set,xaxis,yaxis,zaxis))
  
  
  
}
layout_plotly_3d_subs <- function(
  
){
  library(plotly)
  f1 <- list(
    family = "sans-serif",
    size = 18+4,
    color = "black")
  
  f2 <- list(
    family = "sans-serif",
    size = 14+4,
    color = "black")
  
  fleg = list(
    titlefont = f1,
    tickfont = f2,
    color = "black"
  )
  
  yaxis <- list(
    title = '',
    titlefont = f1,
    tickfont = f2,
    showgrid = T,
    range = c(15,50),
    ntick = 4,
    ticktext = paste0(seq(25,50,10),'°N'),
    tickvals = seq(25,50,10)
  )
  xaxis = list(
    title = '',
    titlefont = f1,
    tickfont = f2,
    showgrid = T,
    range = c(58,115),
    ntick = 14,
    ticktext = c(paste0(seq(55,105,20),'°E')),
    tickvals = seq(55,105,20)
  )
  zaxis <- list(
    title = '',
    titlefont = f1,
    tickfont = f2,
    showgrid = T,
    #dtick = 2000,
    ticktext = c(paste0(c(0,2000,4000,6000),' m')),
    tickvals = c(0,2000,4000,6000)
  )
  
  
  legend_set <- list(
    font = fleg,
    borderwidth = 3)
  
  return(list(legend_set,xaxis,yaxis,zaxis))
  
  
}
linear_project_tws<-function(df,df_project){
  
  id_train = sample(nrow(df),0.7*nrow(df),replace = FALSE)
  #id_train = 1:round(0.7*nrow(df))
  train = df[id_train,]
  test = df[-id_train,]
  
  
  
  
  model = glm(tws ~ ., data = train)
 
  project = predict(model,df_project)
  
  pred = predict(model,df)
  bias_correct_fun<-function(pred,df){
    twsor = df$tws
    twsor = twsor[-c(1:6)]
    pred = pred[-c(1:6)]
    
    twsor = matrix(twsor,nrow = 12)
    twsor = apply(twsor,1,mean)
    
    pred = matrix(pred,nrow = 12)
    pred = apply(pred,1,mean)
    
    diff = twsor - pred
    
    return(diff)    
    
  }
  
  bias_cor = bias_correct_fun(pred,df)
  
  
  bias_fut = rep(bias_cor,80)
  bias_fut = bias_fut[-c(955:960)]
  
  #$df_project = data.frame(pmeato3 = df_project$pmeato3[1:10])
  tws_project = as.numeric(predict(model,
                                   df_project))
  tws_project = tws_project + bias_fut
  return(tws_project)
}

stand_pme  <- function(x){
  x = x[1:174]
  x = ts(x,start = c(2003,1),frequency = 12)
  x = decompose(x)$trend
  x = x[-which(is.na(x))]
  
  x = (x -mean(x))/(sd(x))
}
stand_tws <- function(x){
  x = x/sd(x)
  
}
pmeio = import_index_insource_tibet('pme','io')
pmeato = import_index_insource_tibet('pme','ato')

tws = import_index_insource_tibet('tws_tibet')


pmeio = apply(pmeio,2,stand_pme)
pmeato = apply(pmeato,2,stand_pme)
tws = apply(tws,2,stand_tws)

plot(pmeato[,3],tws[,1])

df = data.frame(
  tws = tws[,2],
  pmeio,pmeato[,3]
)

lm = lm(tws ~., data = df)
main_calc_border_multi_year_max <-function(
  
){
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/single_year_expand_border_multi_max.R")
  year1 = 2020:2051
  year1_bor245 = single_year_expand_border_multi_max(year1,mode = 'ssp245')
  year1_bor585 = single_year_expand_border_multi_max(year1,mode = 'ssp585')
  
  print('pass1')
  year2 = 2051:2082
  year2_bor245 = single_year_expand_border_multi_max(year2,mode = 'ssp245')
  year2_bor585 = single_year_expand_border_multi_max(year2,mode = 'ssp585')
  
  print('pass2')
  
  year3 = 2082:2098
  year3_bor245 = single_year_expand_border_multi_max(year3,mode = 'ssp245')
  year3_bor585 = single_year_expand_border_multi_max(year3,mode = 'ssp585')
  print('pass3')
  
  output='output/mulit_year_max_proj_border'
  dir.create(output)
  files245 = paste0('year_',1:3,'_border245.csv')
  files585 = paste0('year_',1:3,'_border585.csv')
  
  output245 = paste0(output,'/',files245)
  output585 = paste0(output,'/',files585)
  
  
  # sort lines
  year1_b1 = year1_bor245[1:130,1:3]
  year1_b2 = year1_bor245[131:149,1:3]
  ord1 = order(year1_b2[,2],decreasing = T)
  year1_b2 = year1_b2[ord1,]
  year1_b1 = rbind(year1_b1,year1_b2)
  year1_bor245 = year1_b1
  
  fwrite(year1_bor245,output245[1])
  fwrite(year2_bor245,output245[2])
  fwrite(year3_bor245,output245[3])
  
  year1_b1 = year1_bor585[1:130,1:3]
  year1_b2 = year1_bor585[131:161,1:3]
  ord1 = order(year1_b2[,2],decreasing = T)
  year1_b2 = year1_b2[ord1,]
  year1_b1 = rbind(year1_b1,year1_b2)
  year1_bor585 = year1_b1
  
  
  
  fwrite(year1_bor585,output585[1])
  fwrite(year2_bor585,output585[2])
  fwrite(year3_bor585,output585[3])
  
  
  
}










main_calc_border_multi_year_mean <-function(
  
){
  year1 = 2020:2051
  year1_bor245 = single_year_expand_border_multi_mean(year1,mode = 'ssp245')
  year1_bor585 = single_year_expand_border_multi_mean(year1,mode = 'ssp585')
  
  print('pass1')
  year2 = 2051:2082
  year2_bor245 = single_year_expand_border_multi_mean(year2,mode = 'ssp245')
  year2_bor585 = single_year_expand_border_multi_mean(year2,mode = 'ssp585')
  
  print('pass2')
  
  year3 = 2082:2098
  year3_bor245 = single_year_expand_border_multi_mean(year3,mode = 'ssp245')
  year3_bor585 = single_year_expand_border_multi_mean(year3,mode = 'ssp585')
  print('pass3')
  
  output='output/mulit_year_mean_proj_border'
  dir.create(output)
  files245 = paste0('year_',1:3,'_border245.csv')
  files585 = paste0('year_',1:3,'_border585.csv')
  
  output245 = paste0(output,'/',files245)
  output585 = paste0(output,'/',files585)
  
  
  # sort lines
  year1_b1 = year1_bor245[1:139,1:3]
  year1_b2 = year1_bor245[140:175,1:3]
  ord1 = order(year1_b2[,2],decreasing = T)
  year1_b2 = year1_b2[ord1,]
  year1_b1 = rbind(year1_b1,year1_b2)
  year1_bor245 = year1_b1
  
  year2_b1 = year2_bor245[1:128,1:3]
  year2_b2 = year2_bor245[129:162,1:3]
  ord1 = order(year2_b2[,2],decreasing = T)
  year2_b2 = year2_b2[ord1,]
  year2_b1 = rbind(year2_b1,year2_b2)
  year2_bor245 = year2_b1
  
  year3_b1 = year3_bor245[1:104,1:3]
  year3_b2 = year3_bor245[105:119,1:3]
  ord1 = order(year3_b2[,2],decreasing = T)
  year3_b2 = year3_b2[ord1,]
  year3_b1 = rbind(year3_b1,year3_b2)
  year3_bor245 = year3_b1
  
  fwrite(year1_bor245,output245[1])
  fwrite(year2_bor245,output245[2])
  fwrite(year3_bor245,output245[3])
  
  year1_b1 = year1_bor585[1:139,1:3]
  year1_b2 = year1_bor585[140:175,1:3]
  ord1 = order(year1_b2[,2],decreasing = T)
  year1_b2 = year1_b2[ord1,]
  year1_b1 = rbind(year1_b1,year1_b2)
  year1_bor585 = year1_b1
  
  year2_b1 = year2_bor585[1:123,1:3]
  year2_b2 = year2_bor585[124:152,1:3]
  ord1 = order(year2_b2[,2],decreasing = T)
  year2_b2 = year2_b2[ord1,]
  year2_b1 = rbind(year2_b1,year2_b2)
  year2_bor585 = year2_b1
  
  year3_bor585 = year3_bor585[,1:3]
  
  
  fwrite(year1_bor585,output585[1])
  fwrite(year2_bor585,output585[2])
  fwrite(year3_bor585,output585[3])
  
  
  
}










main_calc_border_multi_year_min <-function(
  
){
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/single_year_expand_border_multi_min.R")
  year1 = 2020:2051
  year1_bor245 = single_year_expand_border_multi_min(year1,mode = 'ssp245')
  year1_bor585 = single_year_expand_border_multi_min(year1,mode = 'ssp585')
  
  print('pass1')
  year2 = 2051:2082
  year2_bor245 = single_year_expand_border_multi_min(year2,mode = 'ssp245')
  year2_bor585 = single_year_expand_border_multi_min(year2,mode = 'ssp585')
  
  print('pass2')
  
  year3 = 2082:2098
  year3_bor245 = single_year_expand_border_multi_min(year3,mode = 'ssp245')
  year3_bor585 = single_year_expand_border_multi_min(year3,mode = 'ssp585')
  print('pass3')
  
  output='output/mulit_year_min_proj_border'
  dir.create(output)
  files245 = paste0('year_',1:3,'_border245.csv')
  files585 = paste0('year_',1:3,'_border585.csv')
  
  output245 = paste0(output,'/',files245)
  output585 = paste0(output,'/',files585)
  
  
  # sort lines
  year1_b1 = year1_bor245[1:144,1:3]
  year1_b2 = year1_bor245[145:169,1:3]
  ord1 = order(year1_b2[,2],decreasing = T)
  year1_b2 = year1_b2[ord1,]
  year1_b1 = rbind(year1_b1,year1_b2)
  year1_bor245 = year1_b1
  
  year2_b1 = year2_bor245[1:138,1:3]
  year2_b2 = year2_bor245[139:174,1:3]
  ord1 = order(year2_b2[,2],decreasing = T)
  year2_b2 = year2_b2[ord1,]
  year2_b1 = rbind(year2_b1,year2_b2)
  year2_bor245 = year2_b1
  
  
  year3_b1 = year3_bor245[1:112,1:3]
  year3_b2 = year3_bor245[113:132,1:3]
  ord1 = order(year3_b2[,2],decreasing = T)
  year3_b2 = year3_b2[ord1,]
  year3_b1 = rbind(year3_b1,year3_b2)
  year3_bor245 = year3_b1
  
  fwrite(year1_bor245,output245[1])
  fwrite(year2_bor245,output245[2])
  fwrite(year3_bor245,output245[3])
  
  year1_b1 = year1_bor585[1:129,1:3]
  year1_b2 = year1_bor585[130:nrow(year1_bor585),1:3]
  ord1 = order(year1_b2[,2],decreasing = T)
  year1_b2 = year1_b2[ord1,]
  year1_b1 = rbind(year1_b1,year1_b2)
  year1_bor585 = year1_b1
  
  year2_b1 = year2_bor585[1:139,1:3]
  year2_b2 = year2_bor585[139:nrow(year2_bor585),1:3]
  ord1 = order(year2_b2[,2],decreasing = T)
  year2_b2 = year2_b2[ord1,]
  year2_b1 = rbind(year2_b1,year2_b2)
  year2_bor585 = year2_b1
  
  fwrite(year1_bor585,output585[1])
  fwrite(year2_bor585,output585[2])
  fwrite(year3_bor585,output585[3])
  
  
  
}










main_calc_pr_eva_pme_tibet_sourceregion<-function(
  
){
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/calc_pme_in_io.R")
  mode = 'ato'
  input = paste0('/home/share/R_project/xinjiang_vapor/cluster_shp',
                 '/',mode,'/')
  shp_mode = shp_management('ocean','ato')
  
  calc_pme_in_io(input,shp_mode,mode)
  print(paste0('pass ',mode))
  
  mode = 'as'
  input = paste0('/home/share/R_project/xinjiang_vapor/cluster_shp',
                 '/',mode,'/')
  shp_mode = shp_management('land','as')
  
  calc_pme_in_io(input,shp_mode,mode)
  print(paste0('pass ',mode))
  
  mode = 'eu'
  input = paste0('/home/share/R_project/xinjiang_vapor/cluster_shp',
                 '/',mode,'/')
  shp_mode = shp_management('land','eu')
  
  calc_pme_in_io(input,shp_mode,mode)
  print(paste0('pass ',mode))
  
  
  mode = 'io'
  input = paste0('/media/sdb5/Vapor_projcts/Vapor_tibet/shp/cluster_io/')
  shp_mode = shp_management('ocean','io')
  calc_pme_in_io(input,shp_mode,mode)
  print(paste0('pass ',mode))
  
  
  
  
  
}
main_calc_pr_eva_pmemean_tibet_sourceregion<-function(
  
){
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/calc_pme_in_io_mean.R")
  mode = 'ato'
  input = paste0('/home/share/R_project/xinjiang_vapor/cluster_shp',
                 '/',mode,'/')
  shp_mode = shp_management('ocean','ato')
  
  calc_pme_in_io_mean(input,shp_mode,mode)
  print(paste0('pass ',mode))
  
  mode = 'as'
  input = paste0('/home/share/R_project/xinjiang_vapor/cluster_shp',
                 '/',mode,'/')
  shp_mode = shp_management('land','as')
  
  calc_pme_in_io_mean(input,shp_mode,mode)
  print(paste0('pass ',mode))
  
  mode = 'eu'
  input = paste0('/home/share/R_project/xinjiang_vapor/cluster_shp',
                 '/',mode,'/')
  shp_mode = shp_management('land','eu')
  
  calc_pme_in_io_mean(input,shp_mode,mode)
  print(paste0('pass ',mode))
  
  
  mode = 'io'
  input = paste0('/media/sdb5/Vapor_projcts/Vapor_tibet/shp/cluster_io/')
  shp_mode = shp_management('ocean','io')
  calc_pme_in_io_mean(input,shp_mode,mode)
  print(paste0('pass ',mode))
  
  
  
  
  
}
main_compare_multi_calc_mean_and_others <-function(
  
){
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/figs_compare_project_results_basedon_mulit_calc_mean_and_nonproj_pt.R")
  # comparea all means and nonproj pt
  figs_compare_project_results_basedon_mulit_calc_mean_and_nonproj_pt()
  
  # comparea all means and proj pt
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/figs_compare_project_results_basedon_mulit_calc_mean_and_proj_pt.R")
  figs_compare_project_results_basedon_mulit_calc_mean_and_proj_pt()
  # comparea all means and non pme 
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/figs_compare_project_results_basedon_mulit_calc_mean_and_ori_pme.R")
  figs_compare_project_results_basedon_mulit_calc_mean_and_ori_pme()
  # comparea all means and proj pme 
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/figs_compare_project_results_basedon_mulit_calc_mean_and_proj_pme.R")
  figs_compare_project_results_basedon_mulit_calc_mean_and_proj_pme()
}
main_compare_tws_2020_2021<-function(
  
){
  twsnew = data_management('grace_rl06')
  loc2020 = length(2003:2020)*12-11
  loc2021 = length(2003:2021)*12
  
  twsnew = twsnew[[loc2020:loc2021]]
  
  tibet = shp_management('tibet')
  twsnew = mask(crop(twsnew,tibet),tibet)
  
  dftws = as.data.frame(twsnew,xy = T)
  naid = which(is.na(dftws[,3]))
  dftws = dftws[-naid,]
  loc = dftws[,1:2]
  colnames(loc) = c('long','lat')
  dftws = dftws[,-c(1,2)]
  
  calc_annual_sum <- function(i){
    tmp = as.numeric(dftws[i,])
    tmp = matrix(tmp,nrow = 12)
    tmp = apply(tmp,2,sum,na.rm = T)
    return(tmp)
  }
  
  i = 1:nrow(dftws)
  i <<- i
  cl = makeCluster(10)
  clusterExport(cl,c('dftws','i'))
  ret = parLapply(cl,i,calc_annual_sum)
  stopCluster(cl)
  
  ret = do.call(rbind,ret)
  
  colnames(ret) = paste0('y',c(2020,2021))
  df = data.frame(
    loc,ret
  )
  
  dfm = reshape2::melt(df,c('long','lat'))
  
  dfm1 = dfm[which(dfm$value<=0),]
  
  fwrite(dfm1,'output/evalute_proj_north_border_2020_2021/rast_tws.csv')
  
  p = ggplot()+
    geom_tile(data = dfm1,aes(x =long,y = lat,
                             fill = value))+
    scale_fill_distiller(palette = 'Spectral',
                         direction = 1)+
    facet_wrap(~variable,nrow = 2)
  
  
  
  
  
  
}
main_plot_tibet_projects<-function(
  
){
  
  
  
  
}
main_proj_pos_area_snow_tws <- function(
  
){
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/project_pos_area_by_twsandsnowcover.R")
  # Model 1 
  # Snowcover projected by  original T
  # TWS projected by original PME
  # output multi model mean pos area 
  #'output/future_pos_tws_area_based_snow_tws/pos_tws_area_ensemble_ori_pme_t.csv'
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/project_pos_area_by_twsandsnowcover.R")
  project_pos_area_by_twsandsnowcover()
  
  # Model 2 
  # Snowcover projected by original T
  # TWS projected by original PME and T
  #project_tws_in_south_tp12_by_trainonhist_random_nonproj_pme_temper
  # output multi model mean pos area 
  #'output/future_pos_tws_area_based_snow_tws/pos_tws_area_ensemble_ori_pme_t_tws_bypt.csv'
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/project_pos_area_by_twsandsnowcover2.R")
  project_pos_area_by_twsandsnowcover2()
  
  # Model 3 
  # Snowcover projected by  projected T by local and ocean T
  # TWS projected by projected PME by mutli weight
  # output multi model mean pos area 
  #'output/future_pos_tws_area_based_snow_tws/pos_tws_area_ensemble_proj_pme_t_tws_bypme.csv'
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/project_pos_area_by_twsandsnowcover3.R")
  project_pos_area_by_twsandsnowcover3()
  
 
  # Model 4 
  # Snowcover projected by  projected T by local and ocean T
  # TWS projected by projected PME and projected T
  # output multi model mean pos area 
  #'output/future_pos_tws_area_based_snow_tws/pos_tws_area_ensemble_proj_pme_t_tws_bypmet.csv'
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/project_pos_area_by_twsandsnowcover4.R")
  project_pos_area_by_twsandsnowcover4()
  
  
  # input 
  
  input1= 'output/future_pos_tws_area_based_snow_tws/pos_tws_area_ensemble_ori_pme_t.csv'
  input2 = 'output/future_pos_tws_area_based_snow_tws/pos_tws_area_ensemble_ori_pme_t_tws_bypt.csv'
  input3 = 'output/future_pos_tws_area_based_snow_tws/pos_tws_area_ensemble_proj_pme_t_tws_bypme.csv'
  input4 = 'output/future_pos_tws_area_based_snow_tws/pos_tws_area_ensemble_proj_pme_t_tws_bypmet.csv'
  
  d1 = as.data.frame(fread(input1))
  d2 = as.data.frame(fread(input2))
  d3 = as.data.frame(fread(input3))
  d4 = as.data.frame(fread(input4))
  
  dall = d1+d2+d3+d4
  allmean = dall/4
  
  calc_min <-function(i){
    tmp1 = d1[,i]
    tmp2 = d2[,i]
    tmp3 = d3[,i]
    tmp4 = d4[,i]
    
    d = cbind(tmp1,tmp2,tmp3,tmp4)
    d = apply(d,1,min)
    return(d)
  }
  calc_max <-function(i){
    tmp1 = d1[,i]
    tmp2 = d2[,i]
    tmp3 = d3[,i]
    tmp4 = d4[,i]
    
    d = cbind(tmp1,tmp2,tmp3,tmp4)
    d = apply(d,1,max)
    return(d)
  }
  
  all_min = do.call(cbind,lapply(1:2,calc_min))
  all_max = do.call(cbind,lapply(1:2,calc_max))
  
  output1  = 'output/future_pos_tws_area_based_snow_tws/pos_area_allcalc_mean.csv'
  output2  = 'output/future_pos_tws_area_based_snow_tws/pos_area_allcalc_min.csv'
  output3  = 'output/future_pos_tws_area_based_snow_tws/pos_area_allcalc_max.csv'
  
  
  fwrite(allmean,output1)
  fwrite(all_min,output2)
  fwrite(all_max,output3)
  
  2093,2097
  
  
  
  
}
main_projection_spatial_evolution_tws_based_on_area <-function(
  
){
  
  detect_changing_points<-function(date,pos_area){
    library(prophet)
    pos245 = data.frame(ds = date,
                        y = pos_area)
    p = prophet(pos245,
                n.changepoints = 2,yearly.seasonality = T,
                changepoint.range = 0.8)
    
    changeloc = which(as.character.Date(date) %in% as.character.Date(p$changepoints))
    return(changeloc)
  }
  
  #tibet = shp_management('tibet')
  #project_pos_area_by_model()
  # 1. calc the future neg area
  # import the pos area
  # time date 2018  - 2098 by year
  input_pos_area = 'output/future_pos_tws_area/pos_tws_area_ensemble.csv'
  pos_area = as.data.frame(fread(input_pos_area))
  pos_area = pos_area[3:81,]
  full_area = area(tibet)/10^6 /10000
  neg_area = full_area - pos_area
  
  pos_rate = pos_area / full_area * 100 
  neg_rate = neg_arae / full_area * 100 
  
  #pos_arae_ori = pos_area
  # import his_neg_area
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/import_historical_twsneg_area.R")
  his_neg_area = import_historical_twsneg_area()
  his_neg_min = min(his_neg_area)
  his_neg_max = max(his_neg_area)
  his_neg_mean = mean(his_neg_area)
  
  his_pos_max = full_area - his_neg_min
  his_pos_min = full_area - his_neg_max
  his_neg_mean = full_area - his_neg_mean
  # 2. detect the changing points in the series
  date = seq(as.Date('2020-01-01'),as.Date('2098-01-01'),
             '1 year')
  
  changeloc1 = detect_changing_points(date,pos_area[,1])
  changeloc2 = detect_changing_points(date,pos_area[,2])
  
  matplot(pos_area,type = 'l')
  points(changeloc1,pos_area[changeloc1,1],col = 'red')
  points(changeloc2,pos_area[changeloc2,2],col = 'blue')
  
  min_point245 = which(pos_area[,1] == min(pos_area[,1]))
  min_point585 = which(pos_area[,2] == min(pos_area[,2]))
  years = 2020:2098
  years1 = years[c(1,changeloc1,min_point245,79)]
  years2 = years[c(1,changeloc2,min_point585,79)]
  # 2. trans the neg raster to polygon and calc area 
  source("/home/share/R_project/xinjiang_vapor/spatial_pattern_of_tws_neg_multiple_year.R")
  p = spatial_pattern_of_tws_neg_multiple_year(years2,
                                               mode = 'ssp585')
  # 3. Get the border value for the future year polygon
  # 3.1 input the clusters polygon and calc area
  input_negcluster = 'shp/cluster_tws_neg_shp_deter'
  input_negcluster = list.files(input_negcluster,
                                full.names = T,
                                pattern = '*.shp$')[1:2]
  neg_shps = do.call(bind,lapply(input_negcluster,shapefile))
  area_neg = area(neg_shps) / 10^6/ 10000
  area_neg = sum(area_neg)
  # 4. Calc the centroid points with the lowest neg tws in each region
  
  # 5. Setting the centroid-border point vector and determine the increaing step
  
  # 6. Expand the neg area border in future
  
  pos_threhold
}
main_spatial_evolute_twsneg_infuture <- function(
  
){
  # 
}
main_supplementary_figs<- function(
  
){
  
  
}
main_supplementary_plot <- function(
  
){
  
  setwd('/media/sdb5/Vapor_projcts/Vapor_tibet')
  # fig s1
  # evaluate the long term contribution in tibet 
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/fig_s1_evaluate_contr.R")
  fig_s1_evaluate_contr()
  
  # fig s2
  # evaluate the 
  
  
}
mask_points_by_shp <-function(points,shp){
  points1 = points
  coordinates(points) = ~long+lat
  proj4string(points) = crs(shp)
  points_m = over(points, shp)
  points_index = which(!is.na(points_m[,1]))
  points_m = points[points_index,]
  points_m.points = as.data.frame(points_m,xy = T)
 
  ret = points1[points_index,]
  
  return(ret) 
}
mmk_trend_tws_eurasia <- function(
  
){
  
  tws = data_management('grace')
  world = shp_management('world')
  world = crop(world,extent(-20,180,0,90))
  
  tws = crop(tws,extent(world))
  tws = mask(tws,world)
  
  
  twsdf = as.data.frame(tws,xy = T)
  naid = which(is.na(twsdf[,3]))
  twsdf = twsdf[-naid,]
  
  loc = twsdf[,1:2]
  twsdf = twsdf[,-c(1,2)]
  
  i = 1:nrow(twsdf)
  i <<- i
  twsdf <<- twsdf
  sub_calc_mmk_trend <-function(i){
    source('/home/share/R_project/xinjiang_vapor/mmkTrend.R')
    x = as.numeric(twsdf[i,])
    tmptrend = mmkTrend(x)$Zc
    return(tmptrend)
  }
  
  
  library(doParallel)
  cl = makeCluster(10)
  clusterExport(cl,c('i','twsdf'))
  twsmmk = parLapply(cl,i,sub_calc_mmk_trend)
  stopCluster(cl)
  
  twsmmk = do.call('c',twsmmk)
  
  mmkdf = data.frame(
    long = loc[,1],
    lat = loc[,2],
    mmk = twsmmk
  )
  
  negid = which(mmkdf$mmk <= 0 )
  
  negmmk = mmkdf[negid,]
  
  fwrite(negmmk,'main_plot_data/fig2/negmmk_eurasia_trend.csv')
  
  
  p = ggplot()+
    geom_tile(data = negmmk,
              aes(x = long,y = lat,
                  fill = mmk))+
    scale_fill_distiller(palette = 'Spectral')
  
  
  
  
  
  
  
  
  
  
}
mmk_trend_tws_eurasia2 <- function(
  
){
  
  tws = data_management('grace')
  world = shp_management('world')
  world = crop(world,extent(-20,180,0,90))
  
  tws = crop(tws,extent(world))
  tws = mask(tws,world)
  
  
  twsdf = as.data.frame(tws,xy = T)
  naid = which(is.na(twsdf[,3]))
  twsdf = twsdf[-naid,]
  
  loc = twsdf[,1:2]
  twsdf = twsdf[,-c(1,2)]
  
  i = 1:nrow(twsdf)
  i <<- i
  twsdf <<- twsdf
  sub_calc_mmk_trend <-function(i){
    source('/home/share/R_project/xinjiang_vapor/mmkTrend.R')
    x = as.numeric(twsdf[i,])
    x = ts(x,start = c(2003,1),frequency = 12)
    x = decompose(x)$trend
    x = x[-which(is.na(x))]
    
    
    tmptrend = mmkTrend(x)$Zc
    return(tmptrend)
  }
  
  
  library(doParallel)
  cl = makeCluster(10)
  clusterExport(cl,c('i','twsdf'))
  twsmmk = parLapply(cl,i,sub_calc_mmk_trend)
  stopCluster(cl)
  
  twsmmk = do.call('c',twsmmk)
  
  mmkdf = data.frame(
    long = loc[,1],
    lat = loc[,2],
    mmk = twsmmk
  )
  
  negid = which(mmkdf$mmk <= 0 )
  
  negmmk = mmkdf[negid,]
  
  fwrite(negmmk,'main_plot_data/fig2/negmmk_eurasia_trend.csv')
  
  
  p = ggplot()+
    geom_tile(data = negmmk,
              aes(x = long,y = lat,
                  fill = mmk))+
    scale_fill_distiller(palette = 'Spectral')
  
  
}
mmk_trend_tws_pmeato <- function(
  
){
  source('/home/share/R_project/xinjiang_vapor/data_management.R')
  global_pr = data_management('era5_pr_include_ocean')
  global_eva = data_management('era5_e_include_ocean')
  #global_eva = data_management('global_era5_poten_evap')
  
  
  
  ato = shapefile('/media/sdb1/shp/ocean_shp/shp_combind/ato_diso.shp')
  
  global_pme = global_pr - global_eva
  
  global_pme_mask = raster::mask(crop(global_pme,
                                      extent(ato)),
                                 ato)
  
  mask_pmedf = as.data.frame(global_pme_mask,
                             xy = T)
  
  naid = which(is.na(mask_pmedf[,3]))
  if(length(naid)>0){
    mask_pmedf = mask_pmedf[-naid,]
  }
  
  
  
  loc = mask_pmedf[,1:2]
  mask_pmedf = mask_pmedf[,-c(1,2)]
  
  i = 1:nrow(mask_pmedf)
  i <<- i
  mask_pmedf <<- mask_pmedf
  sub_calc_mmk_trend <-function(i){
    source('/home/share/R_project/xinjiang_vapor/mmkTrend.R')
    x = as.numeric(mask_pmedf[i,])
    x = x[1:174]
    #x = ts(x,start = c(2003,1),frequency = 12)
    #x = decompose(x)$trend
    #x = x[-which(is.na(x))]
    
    tmptrend = mmkTrend(x)$Zc
    return(tmptrend)
  }
  
  
  library(doParallel)
  cl = makeCluster(10)
  clusterExport(cl,c('i','mask_pmedf'))
  pmemmk = parLapply(cl,i,sub_calc_mmk_trend)
  stopCluster(cl)
  
  pmemmk = do.call('c',pmemmk)
  
  pmemmkdf = data.frame(
    long = loc[,1],
    lat = loc[,2],
    mmk = pmemmk
  )
  
  negid = which(pmemmkdf$mmk <= 0 )
  
  pmemmkdf = pmemmkdf[negid,]
  
  fwrite(pmemmkdf,'main_plot_data/fig2/negmmk_nato.csv')
  
  
  p = ggplot()+
    geom_tile(data = pmemmkdf,
              aes(x = long,y = lat,
                  fill = mmk))+
    scale_fill_distiller(palette = 'Spectral')
  
  
  
  
  
  
  
  
  
  
}
outter_calc_sanjiangyuan_decreasing <- function(
  
){
  #years = seq(2020,2098,10)
  #years = 2050
  
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/sanjiangyuan_decreaing_rate.R")
  #system.time(ret245 <- lapply(years,sanjiangyuan_decreaing_rate,
  #                             mode = 'ssp245'))
  years = seq(2020,2098,10)
  
  ret245 = list()
 
  ret245[[1]] = sanjiangyuan_decreaing_rate(year = years[1],mode = 'ssp245')
  ret245[[2]] = sanjiangyuan_decreaing_rate(year = years[2],mode = 'ssp245')
  ret245[[3]] = sanjiangyuan_decreaing_rate(year = years[3],mode = 'ssp245')
  ret245[[4]] = sanjiangyuan_decreaing_rate(year = years[4],mode = 'ssp245')
  ret245[[5]] = sanjiangyuan_decreaing_rate(year = years[5],mode = 'ssp245')
  ret245[[6]] = sanjiangyuan_decreaing_rate(year = years[6],mode = 'ssp245')
  #six went wrong
  ret245[[7]] = sanjiangyuan_decreaing_rate(year = years[7],mode = 'ssp245')
  # seven went wrong
  ret245[[8]] = sanjiangyuan_decreaing_rate(year = years[8],mode = 'ssp245')
  
  ret585 = list()
  
  #ret585[[1]] = sanjiangyuan_decreaing_rate(year = years[1],mode = 'ssp585')
  # 1 went wrong
  cond1 = T
  times = 0
  while(cond1){
    
    times = times + 1
    print(times)
    ret = try(ret585[[1]] <- sanjiangyuan_decreaing_rate(year = years[1],mode = 'ssp585'),
              silent = T)
    if(class(ret) == 'try-error'){
      cond1 = T
    }else{
      cond1 = F
    }
  }
  # 2 went wrong
  cond1 = T
  times = 0
  while(cond1){
    
    times = times + 1
    print(times)
    ret = try(ret585[[2]] <- sanjiangyuan_decreaing_rate(year = years[2],mode = 'ssp585'),
              silent = T)
    if(class(ret) == 'try-error'){
      cond1 = T
    }else{
      cond1 = F
    }
  }
  # 3 went wrong
  cond1 = T
  times = 0
  while(cond1){
    
    times = times + 1
    print(times)
    ret = try(ret585[[3]] <- sanjiangyuan_decreaing_rate(year = years[3],mode = 'ssp585'),
              silent = T)
    if(class(ret) == 'try-error'){
      cond1 = T
    }else{
      cond1 = F
    }
  }
  # 3 went wrong
  cond1 = T
  times = 0
  while(cond1){
    
    times = times + 1
    print(times)
    ret = try(ret585[[4]] <- sanjiangyuan_decreaing_rate(year = years[4],mode = 'ssp585'),
              silent = T)
    if(class(ret) == 'try-error'){
      cond1 = T
    }else{
      cond1 = F
    }
  }
  
  # 4 wen
  ret585[[5]] = sanjiangyuan_decreaing_rate(year = years[5],mode = 'ssp585')
  ret585[[6]] = sanjiangyuan_decreaing_rate(year = years[6],mode = 'ssp585')
  ret585[[7]] = sanjiangyuan_decreaing_rate(year = years[7],mode = 'ssp585')
  ret585[[8]] = sanjiangyuan_decreaing_rate(year = years[8],mode = 'ssp585')
  
  
  decreasing_sanjiang245 = do.call('c',ret245)
  decreasing_sanjiang585 = do.call('c',ret585)
  fwrite(data.frame(sanjiang = decreasing_sanjiang245),
         'main_plot_data/fig4/fig4bc/sanjiangmin245_per10.csv')
  fwrite(data.frame(sanjiang = decreasing_sanjiang585),
         'main_plot_data/fig4/fig4bc/sanjiangmin585_per10.csv')
  
  years = c(2020,2093,2098)
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/sanjiangyuan_decreaing_rate.R")
  system.time(ret245 <- lapply(years,sanjiangyuan_decreaing_rate,
                               mode = 'ssp245'))
  years = c(2020,2097,2098)
  
  system.time(ret585 <- lapply(years,sanjiangyuan_decreaing_rate,
                               mode = 'ssp585'))
  
  
  decreasing_sanjiang245 = do.call('c',ret245)
  decreasing_sanjiang585 = do.call('c',ret585)
  fwrite(data.frame(sanjiang = decreasing_sanjiang245),
         'main_plot_data/fig4/fig4bc/sanjiangmin245.csv')
  fwrite(data.frame(sanjiang = decreasing_sanjiang585),
         'main_plot_data/fig4/fig4bc/sanjiangmin585.csv')
  
  
  
}
outter_evaluate_north_move_2020_2021 <-function(
  
){
  years = c(2020,2021)
  proj_border585  = lapply(years, single_year_expand_border,
                           mode = 'ssp585')
  proj_border245 = lapply(years,single_year_expand_border,
                          mode = 'ssp245')
  
  output = 'output/evalute_proj_north_border_2020_2021'
  
  dir.create(output)
  output245 = paste0(output,'/proj_border_ssp245_',
                     years)
  output585 = paste0(output,'/proj_border_ssp585_',
                     years)
  
  for(i in 1:2){
    tmp1 = proj_border245[[i]][,1:2]
    tmp2 = proj_border585[[i]][,1:2]
    
    fwrite(tmp1,output245[i])
    fwrite(tmp2,output585[i])
  }
  
}
outter_evaluate_north_move_hist <- function(
  
){
  years = seq(2009,2016,1)
  
  proj_border = lapply(years,single_year_expand_border_hist)
  
  
  output = 'output/northward_model_evaluate_hist/'
  dir.create(output)
  output = paste0(output,'/proj_north_',years,'.csv')
  
  export_fun<-function(i){
    fwrite(proj_border[[i]],output[i])
  }
  i = 1:8
  
  lapply(i,export_fun)
  
  
  # order projborder
  proj_border1 = proj_border[[1]][,1:2]
  minlat = which.min(proj_border1$lat)
  min_projborder1 = proj_border1[minlat,]
  proj_border2 = proj_border1[-minlat,]
  lastlat2 = which.min(proj_border2$lat)
  min_projborder2 = proj_border2[lastlat2,]
  proj_border2 = proj_border2[-lastlat2,]
  
  proj_border1 = rbind(proj_border2,min_projborder2,
                       min_projborder1)
  
  # order projborder
  proj_border2 = proj_border[[2]][,1:2]
  proj_border21 = rbind(proj_border2[1:131,])
  
  lat22id = order(proj_border2[132:160,]$lat,
                  decreasing = F)
  lat22id = rev(lat22id)
  proj_border22 = proj_border2[132:160,][lat22id,]
  
  proj_border2 = rbind(proj_border21,proj_border22)
  
  # order projborder 3
  proj_border3 = proj_border[[3]][,1:2]
  proj_border31 = rbind(proj_border3[1:136,])
  
  lat32id = order(proj_border3[136:157,]$lat,
                  decreasing = F)
  lat32id = rev(lat32id)
  proj_border32 = proj_border3[136:157,][lat32id,]
  
  proj_border3 = rbind(proj_border31,proj_border32)
  # order projborder 4
  proj_border4 = proj_border[[4]][,1:2]
  proj_border41 = rbind(proj_border4[1:139,])
  
  lat42id = order(proj_border4[139:158,]$lat,
                  decreasing = F)
  lat42id = rev(lat42id)
  proj_border42 = proj_border4[139:158,][lat42id,]
  
  proj_border4 = rbind(proj_border41,proj_border42)
  
  # order projborder 5
  proj_border5 = proj_border[[5]][,1:2]
  proj_border51 = rbind(proj_border5[1:123,])
  
  lat52id = order(proj_border5[123:nrow(proj_border5),]$lat,
                  decreasing = F)
  lat52id = rev(lat52id)
  proj_border52 = proj_border5[123:nrow(proj_border5),][lat52id,]
  
  proj_border5 = rbind(proj_border51,proj_border52)
  
  # order projborder 6
  proj_border6 = proj_border[[6]][,1:2]
  proj_border61 = rbind(proj_border6[1:120,])
  
  lat62id = order(proj_border6[120:nrow(proj_border6),]$lat,
                  decreasing = F)
  lat62id = rev(lat62id)
  proj_border62 = proj_border6[120:nrow(proj_border6),][lat62id,]
  
  proj_border6 = rbind(proj_border61,proj_border62)
  
  # Order projborder 7
  proj_border7 = proj_border[[7]][,1:2]
  proj_border71 = rbind(proj_border7[1:121,])
  
  lat72id = order(proj_border7[121:nrow(proj_border7),]$lat,
                  decreasing = F)
  lat72id = rev(lat72id)
  proj_border72 = proj_border7[121:nrow(proj_border7),][lat72id,]
  
  proj_border7 = rbind(proj_border71,proj_border72)
  
  # order projborder 8
  proj_border8 = proj_border[[8]][,1:2]
  
  proj_border[[1]] = proj_border1
  proj_border[[2]] = proj_border2
  proj_border[[3]] = proj_border3
  proj_border[[4]] = proj_border4
  proj_border[[5]] = proj_border5
  proj_border[[6]] = proj_border6
  proj_border[[7]] = proj_border7
  proj_border[[8]] = proj_border8
  
  
  export_fun<-function(i){
    fwrite(proj_border[[i]],output[i])
  }
  i = 1:8
  
  lapply(i,export_fun)
  
  
  
  
}
overlay_analysis_border_twsneg <-function(
  
){
  library(raster)
  library(sf)
  source('/home/share/R_project/xinjiang_vapor/data_management.R')
  source('/home/share/R_project/xinjiang_vapor/shp_management.R')
  # import shp 
  tibet = shp_management('tibet')
  world = shp_management('world')
  # import grace TWS
  tws = data_management('grace')
  
  ex_tibet = extent(tibet)
  minlat = ex_tibet[3]
  maxlat = ex_tibet[4]
  minlong = ex_tibet[1]
  maxlong = ex_tibet[2]
  
  input_shps = paste0('shp/big_scale_subs/','region',1:15)
  clusters = lapply(input_shps,shapefile)
  cluster_combine = do.call('bind',clusters)
  
  ex_box = extent(-20,maxlong+50,minlat-20,maxlat+20)
  tws = crop(tws,ex_box)
  tws = raster::mask(tws,world)
  
  twsdf = as.data.frame(tws,xy = T)
  naid = which(is.na(twsdf[,3]))
  twsdf = twsdf[-naid,]
  
  loc = twsdf[,1:2]
  colnames(loc) = c('long','lat')
  twsdf = twsdf[,-c(1,2)]
  
  calc_sum_by_annu <-function(x){
    xt = ts(x,start = c(2003,1),frequency = 12)
    xt = decompose(xt)$trend
    naid = which(is.na(xt))
    xt = xt[-naid]
    
    xt = c(rep(NA,6),xt)
    xm= matrix(xt,nrow = 12)
    #xm = xm[,-ncol(xm)]
    xmean = apply(xm,2,sum,na.rm = T)
    return(xmean)
  }
  
  twsdf2 = raster::mask(crop(tws,tibet),tibet)
  twsdf2 = as.data.frame(twsdf2,xy  =T)
  naid = which(is.na(twsdf2[,3]))
  twsdf2 = twsdf2[-naid,]
  
  loc2 = twsdf2[,1:2]
  twsdf2 = twsdf2[,-c(1,2)]
  
  colnames(loc2) = c('long','lat')
  sum_by_annu = apply(twsdf2,1,calc_sum_by_annu)
  sum_by_annu = t(sum_by_annu)
  colnames(sum_by_annu) = paste0('year',2003:2016)
  df_sum_annu = data.frame(loc2,sum_by_annu)
  dfm2 = reshape2::melt(df_sum_annu,c('long','lat'))
  dfm2_neg = dfm2[which(dfm2$value<=0 ),]
  
  dfm2_neg$levels = cut(dfm2_neg$value,
                        breaks = c(-670,-200,seq(-100,0,20)))
  
  
  dfm2_neg$type = dfm2_neg$variable
  
  type = paste0('year',2003:2016)
  contourdf = list()
  
  output_shp = dir.create('shp/twsneg_border')
  output_shp = paste0('shp/twsneg_border/')
  output_shp = paste0(output_shp,type, '.shp')
  
  output_rast = dir.create('output/twsneg_raster')
  output_rast = paste0('output/twsneg_raster/',type,'.nc')
  for(i in 1:14){
    tmpid = which(dfm2_neg$type == type[i])
    tmpdf = dfm2_neg[tmpid,]
    tmpdf = tmpdf[,c(1,2,4)]
    coordinates(tmpdf) = ~long + lat
    gridded(tmpdf) = T
    tmpras = raster(tmpdf)
    writeRaster(tmpras,output_rast[i],overwrite = T)
    #plot(tmpras)
    tmpras = rasterToPolygons(tmpras)
    tmpras = shapefile(tmpras,output_shp[i],overwrite = T)
    
    tmpras = st_read(output_shp[i])
    tmpras = tmpras %>% group_by()  %>% st_union()
    st_write(tmpras,output_shp[i],append = F,
             overwrite = T)
    #shapefile(tmpras,output_shp,overwrite = T)
    tmpras = shapefile(output_shp[i])
    contourdf[[i]] = tmpras
    
  }
  
  tmpras = lapply(output_shp,shapefile)
  
  shpdf = list()
  for(i in 1:14){
    tmpshpdf = fortify(tmpras[[i]])
    tmpshpdf$type = type[i]
    shpdf[[i]] = tmpshpdf
  }
  #shpdf = shpdf[-1,]
  
  library(RColorBrewer)
  
  cols = colorRampPalette(brewer.pal(9,'Blues'))(14)
  p = ggplot()+
    geom_polygon(data = tibet,
                 aes(x = long,y = lat,
                     group = group),
                 fill= 'grey90',
                 color = 'black',
                 size = 1)+
    geom_polygon(data = shpdf[[7]],
                 aes(x = long,
                     y = lat,
                     color = type,
                     group = group),
                 
                 fill = 'transparent')+
    scale_color_manual(values = cols) + 
    theme_bw()
  
  for(i in 8:14){
    p = p +
      geom_polygon(data = shpdf[[i]],
                   aes(x = long,
                       y = lat,
                       color = type,
                       group = group),
                   
                   fill = 'transparent')
  }
  
    
  
}
prepare_all_codes <- function(
  
){
  files1 = list.files(pattern = '*.R$',
                     full.names = T)
  
  tmp1 = 1
  for(i in 1:length(files1)){
    tmp = readLines(files1[i])
    tmp1 = c(tmp1,tmp)
  }
  tmp1 = tmp1[-1]
  
  writeLines(tmp1,'project_full_codes.R')
  
  
}
prepare_data_fig2_simplify_svg <- function(
  
){
  text_size = 2.3
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/calc_tws_in_bigsubs.R")
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/cor_analysis_twssubs_pme.R")
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/mmk_trend_tws_eurasia.R")
  library(ggrepel)
  # inputs
  input_pmeato = 'main_plot_data/fig2/stand_pmeato.csv'
  input_hsrtws = 'main_plot_data/fig2/stand_hsrtws.csv'
  input_twstp = 'main_plot_data/fig2/stand_twstp.csv'
  
  
  pmeato = as.data.frame(fread(input_pmeato))
  hsrtws = as.data.frame(fread(input_hsrtws))
  twstp = as.data.frame(fread(input_twstp))
  twstp = twstp[,c(1,2,4)]
  
  pmeato3 = pmeato[,3]
  
  colnames(hsrtws) = paste0('HSR',1:12)
  colnames(twstp) = c('TWS_TP_Moun1','TWS_TP_Moun2',
                      'TWS_TP_Surface')
  
  date = seq(as.Date('2003-01-01'),
             as.Date('2017-06-01'),
             '1 month')
  date = date[-c(1:6,169:174)]
  
  hsrtws1 = data.frame(
    Time = date,
    hsrtws[,1:6]
  )
  
  hsrtws2 = data.frame(
    Time = date,
    hsrtws[,7:12]
  )
  
  df1 = data.frame(
    Time = date,
    twstp,
    PME_NATO3 = pmeato3
  )
  
  df1m = reshape2::melt(df1,
                        'Time')
  colnames(df1m) = c('Time','linecol','value')
  
  
  hsrtws1m = reshape2::melt(hsrtws1,'Time')
  hsrtws2m = reshape2::melt(hsrtws2,'Time')
  
  hsrtws_mean = apply(cbind(hsrtws1[,2:7],
                            hsrtws2[,2:7]),1,mean)
  hsrtws_max = apply(cbind(hsrtws1[,2:7],
                           hsrtws2[,2:7]),1,max)
  hsrtws_min = apply(cbind(hsrtws1[,2:7],
                           hsrtws2[,2:7]),1,min)
  
  dfhsrtws_mean = data.frame(
    Time = hsrtws1$Time,
    HSRTWS_mean = hsrtws_mean
  )
  dfhsrtws_maxmin = data.frame(
    Time = hsrtws1$Time,
    HSRTWS_max = hsrtws_max,
    HSRTWS_min = hsrtws_min
  )
  
  dfhsrtws_mean$linecol = 'TWS_HSR_mean'
  
  colnames(hsrtws1m) = c('Time','linecol','value')
  colnames(hsrtws2m) = c('Time','linecol','value')
  hsrtws1m$type = hsrtws1m$linecol
  hsrtws2m$type = hsrtws2m$linecol
  
  library(ggsci)
  linecol = pal_lancet()(9)
  linecol = colorRampPalette(linecol)(20)
  
  hsrtws1m$linecol = "TWS_HSR"
  hsrtws2m$linecol = 'TWS_HSR'
  
  linecol = c('TWS_TP_Moun1'=linecol[8],
              'TWS_TP_Moun2'=linecol[9],
              'TWS_TP_Surface'=linecol[15], 
              'PME_NATO3' = linecol[1],
              'TWS_HSR_mean' = linecol[7])  
  linesize = c('TWS_TP_Moun1'= 1.3,
               'TWS_TP_Moun2'=1.3,
               'TWS_TP_Surface'=1.3, 
               'PME_NATO3' = 1.3,
               'TWS_HSR_mean' = 1.3)
  
  cal_varying_rate <- function(x){
    len = length(x)
    x = (x[len]-x[1])/x[1] *100
    return(x)
  }
  ret_first_point <- function(x){
    len = length(x)
    x=  x[1]
    return(x)
  }
  ret_last_point <- function(x){
    len = length(x)
    x=  x[len]
    return(x)
  }
  
  vr_tws_hsr = cal_varying_rate(dfhsrtws_mean[,2])
  vr_tws_tp = apply(twstp,2,cal_varying_rate)
  vr_tws_tp[3] = abs(vr_tws_tp[3])
  
  ftws_hsr = ret_first_point(dfhsrtws_mean[,2])
  ftws_tp = apply(twstp,2,ret_first_point)
  ltws_hsr = ret_last_point(dfhsrtws_mean[,2])
  ltws_tp = apply(twstp,2,ret_last_point)
  
  
  dfpstat1 = data.frame(
    region = c('HSRs','TPM1','TPM2',
               'TPS'),
    regionid = c(1,3,5,7),
    firstp = c(ftws_hsr,ftws_tp),
    lastp = c(ltws_hsr,ltws_tp),
    linecol = c('TWS_HSR_mean','TWS_TP_Moun1',
                'TWS_TP_Moun2','TWS_TP_Surface')
  )
  
  
  
  dfpstat = data.frame(
    region = c('HSRs','TPM1','TPM2',
               'TPS'),
    regionid = c(1,3,5,7),
    vrate = c(vr_tws_hsr,vr_tws_tp),
    linecol = c('TWS_HSR_mean','TWS_TP_Moun1',
                'TWS_TP_Moun2','TWS_TP_Surface')
  )
  
  seg1h = data.frame(
    x = rep(c(1,3,5,7) - 0.5,2),
    xend = rep(c(1,3,5,7) + 0.5,2),
    y = c(dfpstat1$firstp,dfpstat1$lastp)
  )
  seg1v = data.frame(
    x = c(1,3,5,7),
    y = dfpstat1$firstp,
    yend = dfpstat1$lastp
  )
  
  label_vrate = data.frame(
    x = c(1,3,5,7)- 0.4,
    y = (dfpstat1$firstp + dfpstat1$lastp)/2,
    label = round(dfpstat$vrate,2)
  )
  label_vrate$label = paste0(
    label_vrate$label,'%'
  )
  label_vrate$label[4] = paste0('+',label_vrate$label[4]) 
  
  ppoint = ggplot()+
    geom_segment(data = seg1h,
                 aes(x = x,xend = xend,y = y,
                     yend = y),size= 0.5,
                 color = 'black')+
    geom_segment(data = seg1v,
                 aes(x = x,xend = x,y = y,
                     yend = yend),size= 0.5,
                 color = 'black',
                 arrow = arrow(20,
                               unit(0.5,'cm'),
                               type = 'open'))+
    geom_point(data = dfpstat1,
               aes(x = regionid,
                   y = firstp,color = linecol),
               size = 2.5,shape = 16)+
    geom_point(data = dfpstat1,
               aes(x = regionid,
                   y = firstp,color = linecol),
               size = 4,shape = 1)+
    geom_point(data = dfpstat1,
               aes(x = regionid,
                   y = lastp,color = linecol),
               size = 2.5,shape = 16)+
    geom_point(data = dfpstat1,
               aes(x = regionid,
                   y = lastp,color = linecol),
               size = 4,shape = 1)+
    scale_color_manual(values = linecol)+
    scale_x_continuous(breaks = c(1,3,5,7),
                       labels = dfpstat$region,
                       limits = c(0,8))+
    geom_text(data = label_vrate,
              aes(x = x,y = y,label = label),
              size = text_size,angle= 90)+
    theme_bw()+
    theme(legend.position = 'none')
  
  
  
  pline1 = ggplot()+
    geom_ribbon(data = dfhsrtws_maxmin,
                aes(x = Time,ymin = HSRTWS_min,
                    ymax = HSRTWS_max),
                fill = linecol[5],
                alpha = 0.2)+
    geom_line(data = df1m[which(df1m$linecol == 'PME_NATO3'),],
              aes(x = Time,y= value,col = linecol,
                  size= linecol))+
    geom_line(data = dfhsrtws_mean,
              aes(x = Time,y = HSRTWS_mean,
                  col = linecol,
                  size = linecol))+
    scale_color_manual(values = linecol)+
    scale_size_manual(values =linesize)+
    theme_bw()
  
  plinetp = ggplot()+
    geom_line(data = df1m,
              aes(x = Time,y= value,col = linecol,
                  size = linecol))+
    scale_color_manual(values = linecol)+
    scale_size_manual(values = linesize)+
    theme_bw()
  
  # mmktrends across eurasia
  negmmk = as.data.frame(
    fread('main_plot_data/fig2/negmmk_eurasia.csv')
  )
  colnames(negmmk) = c('long','lat','TWS_MMK')
  
  negmmk$levels = cut(negmmk$TWS_MMK,
                      breaks = c(-557,seq(-25,0,2.5)))
  nclass = length(unique(negmmk$levels))
  library(RColorBrewer)
  filmmk = colorRampPalette(
    brewer.pal(9,'Spectral')[1:5]
  )(nclass*5)
  filmmk = filmmk[seq(1,nclass*4,4)]
  
  pmemmk = as.data.frame(
    fread('main_plot_data/fig2/negmmk_nato_trend.csv')
  )
  pmemmkio = as.data.frame(
    fread('output/pme_mmkio/pmemmkio.csv')
  )
  pmeioneg = pmemmkio[which(pmemmkio$mmkio <=0),]
  
  colnames(pmeioneg) = c('long','lat','mmk')
  
  pmemmk = rbind(pmemmk,pmeioneg)
  pmemmk$levels = cut(pmemmk$mmk,
                      breaks =c(-83,seq(-20,2,2)))
  nclass2 = length(unique(pmemmk$levels))
  filpme = colorRampPalette(
    brewer.pal(9,'Spectral')
  )(nclass2*4)
  
  filpme = filpme[seq(1,nclass2*2,2)]
  
  
  
  world = shp_management('world')
  world = crop(world,extent(-180,180,0,90))
  tibet = shp_management('tibet')
  
  neg_shps = 'shp/cluster_tws_neg_shp_deter'
  neg_shps = list.files(neg_shps,full.names = T,
                        pattern = '*.shp$')
  neg_shps = lapply(neg_shps,shapefile)   
  neg_shps = neg_shps[c(1,2,3)]
  neg_shps = do.call('bind',neg_shps)
  
  # input subs 
  bigsubs = 'shp/big_scale_subs/'
  hsrid = as.data.frame(fread('main_plot_data/fig2/HSRid.csv'))
  hsrid = as.numeric(hsrid$HSRid)
  
  bigsubs = paste0(bigsubs,
                   'region',1:15,'.shp')
  bigsubs = bigsubs[-14]
  bigsubs = bigsubs[hsrid]
  bigsubs = lapply(bigsubs,shapefile)
  
  bigsubs_set = bigsubs[1:12]
  bigsubs_set = do.call('bind',bigsubs_set)
  i = 1:length(bigsubs)
  loc_center_subs <- function(i){
    tmp = bigsubs[[i]]
    ex = extent(tmp)
    cenlong = (ex[1]+ex[2])/2
    cenlat = (ex[3]+ ex[4])/2
    label = paste0('(',letters[i+6],')')
    
    retdf = data.frame(
      long = cenlong,
      lat = cenlat,
      label = label
    )
    return(retdf)
    
    
  }
  
  subslabel = do.call(rbind,
                      lapply(i,loc_center_subs))
  
  subslabel_set = subslabel[8:12,]
  
  bigsubs = do.call('bind',bigsubs)
  
  seg_leg = data.frame(
    x = 130+10,
    xend = 170+10,
    y = 20,
    xlabel = 150+10,
    ylabel = 10,
    label = 'Water Vapor \n Trajectory'
  )
  
  library(ggsci)
  col_traj = pal_material('blue')(9)
  col_traj = colorRampPalette(col_traj)(9*3)
  col_traj = col_traj[seq(2,9*3,2)][4:12]
  
  library(ggnewscale)
  pmap = ggplot()+
    geom_polygon(data = world,
                 aes(x = long,y = lat,group = group),
                 color = 'black',
                 size = 0.5,
                 fill = 'transparent')+
    geom_tile(data = negmmk,
              aes(x = long,y = lat,
                  fill = levels))+
    geom_polygon(data = tibet,
                 aes(x = long,y = lat,group = group),
                 color = 'black',
                 size = 0.5,
                 fill = 'transparent')+
    geom_polygon(data = neg_shps,
                 aes(x = long,y = lat,group = group),
                 color = 'black',
                 size = 0.5,
                 fill = 'transparent')+
    geom_segment(data = seg_leg,
                 aes(x = x,xend = xend,y = y,
                     yend = y),
                 size = 0.7,
                 color = col_traj[5],
                 arrow = arrow(20,
                               unit(0.15,'inches'),
                               type ='open'))+
    geom_text(data = seg_leg,
              aes(x = xlabel,y = ylabel,
                  label = label),
              size = text_size,
              color = 'black',
              hjust = 0.5)+
    scale_x_continuous(breaks = c(-105,-20,105),
                       labels = c(paste0(c(105,20),'°W'),
                                  #0,
                                  paste0(105,'°E')))+
    
    scale_y_continuous(breaks = c(0,30,60,90),
                       labels = c(0,paste0(c(30,60,90),'°N')))+
    scale_fill_manual(values = filmmk,
                      guide = guide_legend(
                        title= 'TWS_MMK_Trend',
                        title.position = 'top',
                        nrow = 3,order=1
                      ))+
    theme_bw()
  
  pmap = pmap + 
    new_scale_fill()+
    geom_tile(data =pmemmk,
              aes(x = long,y = lat,
                  fill = levels))+
    scale_fill_manual(values = filpme,
                      guide = guide_legend(
                        title = 'PME_NATO_MMK_Trend',
                        title.position = 'top',
                        nrow = 3,order = 2
                      ))
  
  cur_df = as.data.frame(
    fread('main_plot_data/fig4/current_df.csv')
  )
  
  idless50 = which(cur_df$lat <= 50 &
                     cur_df$lat >= 10)
  cur_df = cur_df[idless50,]
  
  idbig1 = which(cur_df$u>0 &
                   cur_df$v >0)
  idbig2 = which(cur_df$u<0 &
                   cur_df$v >0)
  idbig3 = which(cur_df$u>0 &
                   cur_df$v <0)
  
  
  cur_df1 = cur_df[idbig1,]
  cur_df2 = cur_df[idbig2,]
  cur_df3 = cur_df[idbig3,]
  
  cur_df3 = cur_df3[
    which(cur_df3$long > -20 &
            cur_df3$lat <= 40 &
            cur_df3$lat >=30),
  ]
  
  cid1 = seq(1,nrow(cur_df1),40)
  cid2 = seq(1,nrow(cur_df2),200)
  cid3 = seq(1,nrow(cur_df3),30)
  
  cur_df1 = cur_df1[cid1,]
  cur_df2 = cur_df2[cid2,]
  cur_df3 = cur_df3[cid3,]
  
  
  cols_cur = c('#2988AE','#30376E','#4169E1')
  
  # import traj 
  trajdf = as.data.frame(
    fread('main_plot_data/fig1/whole_time_traj/whole_time_traj.csv')
  )
  trajdf$region[which(is.na(trajdf$region))] = 'NA'
  
  
  #col_traj = brewer.pal(9,'Spectral')
  pmap = pmap + 
    geom_path(data = trajdf,
              aes(x = long,y= lat,
                  group = routeid,
                  color = region),
              size = 0.7,
              arrow = arrow(20,
                            unit(0.15,'inches'),
                            type ='open'),
              show.legend = F)+
    geom_segment(data = cur_df1,
                 aes(x = long,y = lat,
                     xend = long+u,
                     yend = lat+v),
                 arrow = arrow(angle = 20,unit(0.1,'cm'),
                               type = 'open'),
                 color = cols_cur[1])+
    geom_segment(data = cur_df2,
                 aes(x = long,y = lat,
                     xend = long+u,
                     yend = lat+v),
                 arrow = arrow(angle = 20,unit(0.1,'cm'),
                               type = 'open'),
                 color = cols_cur[2])+ 
    geom_segment(data = cur_df3,
                 aes(x = long,y = lat,
                     xend = long+u,
                     yend = lat+v),
                 arrow = arrow(angle = 20,unit(0.1,'cm'),
                               type = 'open'),
                 color = cols_cur[3])+
    scale_color_manual(values = col_traj)
  # pmap in 
  pmapin = ggplot()+
    geom_polygon(data = bigsubs,
                 aes(x = long,y = lat,group = group),
                 color = 'black',
                 size = 0.5,
                 fill = 'transparent')+
    geom_text_repel(data = subslabel,
                    aes(x = long,y= lat,
                        label = label),
                    size = text_size,
                    color = 'black',
                    #position = position_dodge2(0.5),
                    bg.color = 'white',
                    force = F,
                    bg.r = 0.15,
                    alpha = 0.5)+
    theme_void()
  
  
  
  # input ato shps 
  cluster_atos = list.files('main_plot_data/fig2/cluster_shp/ato',
                            full.names =T ,pattern = '*.shp$')
  cluster_atos = cluster_atos[1:4]
  cluster_atos = lapply(cluster_atos,shapefile)
  
  loc_cluster <- function(i){
    tmp = cluster_atos[[i]]
    ex = extent(tmp)
    
    cenlong = (ex[1]+ex[2])/2
    cenlat = (ex[3]+ex[4])/2  
    label = paste0('NATO\n',1:4)
    
    retdf = data.frame(
      long = cenlong,
      lat = cenlat,
      label = label[i]
    )
    return(retdf)
  }
  i = 1:4
  label_nato = lapply(i,loc_cluster)
  label_nato = do.call('rbind',label_nato)
  label_nato$lat[c(1,3)] = label_nato$lat[c(1,3)]
  
  cluster_atos = do.call(bind,cluster_atos)
  
  world_c1 = crop(world,extent(cluster_atos))
  
  pmapb = ggplot()+
    geom_tile(data =pmemmk,
              aes(x = long,y = lat,
                  fill = levels))+
    scale_fill_manual(values = filpme)+
    geom_polygon(data = cluster_atos,
                 aes(x = long,y = lat,
                     group = group),
                 size = 0.5,
                 color = 'black',
                 fill = 'transparent')+
    geom_text_repel(data = label_nato,
                    aes(x = long,y = lat,
                        label = label),
                    size = text_size-0.8,
                    color = 'black',
                    face = 'bold',
                    #position = position_dodge2(0.5),
                    bg.color = 'white',
                    force = F,
                    bg.r = 0.3)+
    scale_x_continuous(breaks = c(-128,-60,30),
                       labels = c(-128,-60,30),
                       limits = c(extent(cluster_atos)[1]-1,
                                  extent(cluster_atos)[2]+1))+
    ylim(extent(cluster_atos)[3]-1,
         extent(cluster_atos)[4]+1)+
    theme_void()
  
  ex_tibet = extent(tibet)
  ex_tibet = extent(ex_tibet[1]-1,
                    ex_tibet[2]+1,
                    ex_tibet[3]-1,
                    ex_tibet[4]+1)
  
  ex_map3 = extent(bigsubs_set)
  
  world_c2 = crop(world,ex_map3)
  
  label_moun1 = data.frame(
    x = c(70,72.5,75,77.5)+6,
    y = c(38,37,36-0.5,35-0.5)-3,
    label = c('T','P','M','1')
  )
  label_moun2 = data.frame(
    x = c(90,92.5,95,97.5),
    y = c(31,31,32,33),
    label = c('T','P','M','2')
  )
  label_surf= data.frame(
    x = c(85,87.5,90)+3,
    y = 36.5,
    label = c('T','P','S')
  )
  
  intermedia_path = 'main_plot_data/fig1/whole_time_traj/trajs_intermedia.csv'
  interpath = as.data.frame(fread(intermedia_path))
  
  pa1 = paste0('long',1:19)
  pa2 = paste0('long',20:38)
  
  interpath1 = interpath[which(interpath[,3] %in% pa1),]
  interpath2 = interpath[which(interpath[,3] %in% pa2),]
  
  pmapc = ggplot()+
    geom_polygon(data = world_c2,
                 aes(x = long,y = lat,
                     group = group),
                 size = 0.5,
                 color = 'black',
                 fill = 'transparent')+
    
    geom_tile(data = negmmk,
              aes(x = long,y = lat,
                  fill = levels))+
    
    scale_fill_manual(values = filmmk)+
    geom_polygon(data = tibet,
                 aes(x = long,y = lat,group = group),
                 color = 'black',
                 size = 0.5,
                 fill = 'transparent')+
    
    geom_polygon(data = neg_shps,
                 aes(x = long,y = lat,group = group),
                 color = 'black',
                 size = 0.5,
                 fill = 'transparent')+
    geom_polygon(data = bigsubs_set,
                 aes(x = long,y = lat,group = group),
                 color = 'black',
                 size = 0.5,
                 fill = 'transparent')+
    geom_path(data = interpath1,
              aes(x =long,y = lat,group = routeid),
              color = '#000080',
              size = 0.7,
              alpha = 0.6,
              linetype = 'solid',
              arrow = arrow(20,
                            length = unit(0.15,'inches'),
                            type= 'open')
    )+
    geom_path(data = interpath2,
              aes(x =long,y = lat,group = routeid),
              color = '#000080',
              size = 0.7,
              alpha = 0.6,
              linetype = 'solid',
              arrow = arrow(20,
                            length = unit(0.15,'inches'),
                            type= 'open')
    )+
    geom_path(data = trajdf,
              aes(x = long,y= lat,
                  group = routeid,
                  color = region),
              size = 0.7,
              arrow = arrow(20,
                            unit(0.15,'inches'),
                            type ='open'),
              alpha = 0.6)+
    
    geom_text_repel(data = subslabel,
                    aes(x = long,y= lat,
                        label = label),
                    size = text_size,
                    color = 'black',
                    #position = position_dodge2(0.5),
                    bg.color = 'white',
                    force = F,
                    bg.r = 0.15)+
    geom_text_repel(data = label_moun1,
                    aes(x = x,y = y,label = label),
                    size = text_size,
                    color = 'black',
                    #position = position_dodge2(0.5),
                    bg.color = 'white',
                    fontface = 'bold',
                    force = F,
                    bg.r = 0.15)+
    geom_text_repel(data = label_moun2,
                    aes(x = x,y = y,label = label),
                    size = text_size,
                    color = 'black',
                    #position = position_dodge2(0.5),
                    bg.color = 'white',
                    fontface = 'bold',
                    force = F,
                    bg.r = 0.15)+
    geom_text_repel(data = label_surf,
                    aes(x = x,y = y,label = label),
                    size = text_size,
                    color = 'black',
                    #position = position_dodge2(0.5),
                    bg.color = 'white',
                    fontface = 'bold',
                    force = F,
                    bg.r = 0.15)+
    scale_color_manual(values = col_traj)+
    scale_x_continuous(breaks = c(-20,42,105),
                       labels = c(paste0(c(20),'°W'),
                                  paste0(c(42,105),'°E')),
                       limits = c(ex_map3[1],ex_map3[2]))+
    scale_y_continuous(breaks = c(20,30,40,50),
                       labels = paste0(c(20,30,40,50),'°N'),
                       limits = c(ex_map3[3],ex_map3[4]))+
    theme_bw()
  
  # import cor 
  input_barccf = 'main_plot_data/fig2/bar_cordf.csv'
  barccf = as.data.frame(fread(input_barccf))
  colnames(barccf) = c('PMEATO','region','value')
  
  barccf$NATOid = 1:4
  
  barccf$region = factor(barccf$region,
                         levels = c(paste0('HSR',1:12),
                                    paste0('TP_Moun',1:2)))
  
  means_ccf = aggregate(barccf$value,list(barccf$PMEATO),mean)
  min_ccf = aggregate(barccf$value,list(barccf$PMEATO),min)
  max_ccf = aggregate(barccf$value,list(barccf$PMEATO),max)
  
  colnames(means_ccf) = c('y','x')
  colnames(min_ccf) = c('y','x')
  colnames(max_ccf) = c('y','x')
  
  means_ccf$y1 = 1:4
  min_ccf$y1 = 1:4
  max_ccf$y1 = 1:4
  
  point_col = colorRampPalette(pal_lancet()(9))(14)
  point_col = colorRampPalette(brewer.pal(9,'Spectral'))(14)
  
  
  seg_df_min = data.frame(
    x = min_ccf$x,
    y = c(1:4)-0.1+0.25-0.1,
    yend = c(1:4)+0.1+0.2-0.12
  )
  
  seg_df_max = data.frame(
    x = max_ccf$x,
    y = c(1:4)-0.1+0.25-0.1,
    yend = c(1:4)+0.1+0.2-0.12
  )
  
  seg_df_h= data.frame(
    x = min_ccf$x,
    xend = max_ccf$x,
    y = 1:4+0.2-0.1
  )
  
  means_ccf$label = paste0('mean cc \n',round(means_ccf$x,2))
  means_ccf$x1 = (min_ccf$x + max_ccf$x)/2
  
  pbar  = ggplot()+
    geom_segment(data = seg_df_min,
                 aes(x = x,xend = x,y = y,yend = yend),
                 size = 0.5,
                 color = 'black')+
    geom_segment(data = seg_df_max,
                 aes(x = x,xend = x,y = y,yend = yend),
                 size = 0.5,
                 color = 'black')+
    geom_segment(data = seg_df_h,
                 aes(x = x,xend = xend,y = y,yend = y),
                 size = 0.5,
                 color = 'black')+
    geom_point(data = barccf,
               aes(y = NATOid,x = value,color = region),
               size = 3,shape = 1)+
    geom_point(data = barccf,
               aes(y = NATOid,x = value,color = region),
               size = 3.25,shape = 1)+
    geom_point(data = barccf,
               aes(y = NATOid,x = value,color = region),
               size = 2.75,shape = 1)+
    scale_color_manual(values = point_col)+
    geom_text(data = means_ccf,
              aes( x= x1,y = y1+0.25,label = label),
              size = text_size,color  ='black',hjust = 0.5)+
    theme_bw()+
    scale_y_continuous(breaks=c(1,2,3,4),
                       labels = paste0('NATO',1:4))+
    theme(
      axis.title.y = element_blank(),
      legend.position = 'none'
    )
  
  fontsize = 7
  text_theme= theme(
    axis.text = element_text(size = fontsize,
                             color = 'black'),
    axis.title = element_text(size = fontsize,
                              color = 'black'),
    legend.text =  element_text(size = fontsize,
                                color = 'black'),
    legend.title =  element_text(size = fontsize,
                                 color = 'black')
  ) 
  
  label_linedf1 = data.frame(
    x = as.Date('2005-01-01'),
    y = -2.5,
    label = paste0('(','d',")")
  )
  
  
  
  library(cowplot)
  pline1 = pline1 +
    theme(legend.position= 'none')+
    text_theme+
    theme(axis.title = element_blank(),
          strip.text = element_text(size = fontsize,
                                    color = 'black'))+
    geom_text(data = label_linedf1,
              aes(x = x,y = y,label = label),
              size = text_size,
              color = 'black',
              face = 'bold')+
    scale_y_continuous(breaks = seq(-3,3,1),
                       labels= seq(-3,3,1),
                       limits = c(-3,3))
  
  label_ppoint = data.frame(
    x = 0.5,y = -2.2,
    label = '(f)'
  )
  ppoint = ppoint + 
    geom_text(data = label_ppoint,
              aes(x = x,y = y,label = label),
              size = text_size,
              color = 'black')+
    text_theme+
    theme(axis.title = element_blank(),
          strip.text = element_text(size = fontsize,
                                    color = 'black'))
  
  
  
  label_lineb = data.frame(
    x = as.Date('2005-01-01'),
    y = -2.5,
    label = '(e)'
  )
  plinetp = plinetp+ 
    theme(legend.position= 'none')+
    text_theme+
    theme(axis.title = element_blank(),
          strip.text = element_blank())+
    geom_text(data = label_lineb,
              aes(x = x,y = y,label = label),
              size = text_size,
              color = 'black',
              face = 'bold')+
    scale_y_continuous(breaks = seq(-3,3,1),
                       labels= seq(-3,3,1),
                       limits = c(-3,3))
  
  label_pmap = data.frame(
    x = -175,
    y = 80,label = '(a)'
  )
  
  pmap = pmap + 
    geom_text(data = label_pmap,
              aes(x = x,y = y,label = label),
              size = text_size,color = 'black',face = 'bold')+
    theme(legend.position= 'none')+
    text_theme+
    xlab('Longitude')+
    ylab('Latitude')+
    theme(
      axis.title = element_blank(),
      axis.text.y = element_text(angle = 90,hjust = 0.5)
    )
  
  pmapb = pmapb + 
    theme(legend.position= 'none')+
    #text_theme+
    xlab('Longitude')+
    ylab('Latitude')+
    theme(
      axis.title = element_blank(),
      #axis.text = element_text(size = 12),
      panel.background = element_rect(fill = 'transparent',
                                      color = 'transparent'),
      plot.background = element_rect(fill = 'transparent',
                                     color = 'transparent')
    )
  
  label_pmapc = data.frame(
    x = -20,y = 47,
    label = '(b)'
  )
  
  pmapc = pmapc + 
    geom_text_repel(data = label_pmapc,
                    aes(x = x,y = y,label = label),
                    size = text_size,color = 'black',
                    face = 'bold',
                    bg.color = 'white',
                    force = F,
                    bg.r = 0.15)+
    theme(legend.position= 'none')+
    text_theme+
    xlab('Longitude')+
    ylab('Latitude')+
    theme(
      axis.title = element_blank(),
      axis.text.y = element_text(angle = 90,hjust = 0.5)
    )
  
  pline1 = pline1 + 
    theme(panel.grid = element_blank())
  plinetp = plinetp+ 
    theme(panel.grid = element_blank())
  ppoint = ppoint+
    theme(panel.grid = element_blank())
  
  pbc = plot_grid(
    pline1,plinetp,ppoint,
    nrow = 1,
    rel_widths = c(1,1,1),
    rel_heights = c(1,1,1)
  )
  pmap = pmap + 
    theme(panel.grid = element_blank())
  pmapc = pmapc +
    theme(panel.grid = element_blank())
  
  pabc = plot_grid(
    pmap,pmapc,
    ncol = 1,
    rel_widths = c(1,1),
    rel_heights = c(1,1)
  )
  
  label_pbar = data.frame(
    x = -0.125,
    y = 1,
    label = '(c)'
  )
  
  pbar = pbar +
    geom_text(data = label_pbar,
              aes(x = x,y = y,label = label),
              size = text_size,color = 'black',face = 'bold')+
    text_theme+
    theme(axis.title = element_blank())+
    theme(axis.text.y = element_text(angle = 90,
                                     hjust =0.5))
  pbar = pbar + 
    theme(panel.grid = element_blank())
  
  pabcd = plot_grid(
    pabc,pbar,
    nrow = 1,
    rel_widths = c(3,1.5),
    rel_heights = c(1,1)
  )
  
  pabcd = plot_grid(
    pabcd,pbc,
    ncol= 1,
    rel_widths = c(1,1),
    rel_heights = c(2,1)
  )
  
  pabcde1 = ggdraw()+
    draw_plot(pabcd)+
    draw_plot(pmapb,x = 0.035,y = 0.7,
              height = 0.13,width = 0.12)
  
  
  dir.create('main_plot/fig2')
  #png('main_plot/fig2/fig2_final_simple2.png',
  #    height = 24,
  #    width = 24,
  #    units = 'cm',
  #    res = 800)
  #print(pabcde1)
  #dev.off()
  
  ggsave('main_plot/fig2/fig2_final_simple3.svg',
         plot = pabcde1,device = 'svg',
         dpi = 800,width = 17.5,height = 17.5 ,units = 'cm')
  
  ggsave('main_plot/fig2/fig2_final_simple3.pdf',
         plot = pabcde1,device = 'pdf',
         dpi = 800,width = 17.5,height = 17.5 ,units = 'cm')
  
  
  pline1leg = pline1+
    theme(legend.position = 'bottom')+
    guides(color = guide_legend(
      title = '',nrow = 3
    ),
    size = guide_legend(
      title = '',nrow = 2
    ))
  plinetpleg = plinetp+
    theme(legend.position = 'bottom')+
    guides(color = guide_legend(
      title = '',nrow = 3
    ),
    size = guide_legend(
      title = '',nrow = 2
    ))
  pmapleg = pmap+
    theme(legend.position = 'bottom')
  pbarleg = pbar + 
    theme(legend.position = 'bottom')+
    guides(color = guide_legend(
      title = '',nrow = 3
    ))
  
  library(ggpubr)
  pline1leg = as_ggplot(get_legend(pline1leg))
  plinetpleg = as_ggplot(get_legend(plinetpleg))
  pmapleg = as_ggplot(get_legend(pmapleg))
  pbarleg = as_ggplot(get_legend(pbarleg))
  
  #png('main_plot/fig2/fig2_leg1.png',
  #    height = 27,
  #    width = 26,
  #    units = 'cm',
  #    res = 800)
  #print(pline1leg)
  #dev.off()
  
  ggsave('main_plot/fig2/fig2_leg1.svg',
         plot = pline1leg,device = 'svg',
         dpi = 800,width = 17.5,height = 17.5 ,units = 'cm')
  
  
  #png('main_plot/fig2/fig2_leg2.png',
  #    height = 27,
  #    width = 26,
  #    units = 'cm',
  #    res = 800)
  #print(plinetpleg)
  #dev.off()
  
  ggsave('main_plot/fig2/fig2_leg2.svg',
         plot = plinetpleg,device = 'svg',
         dpi = 800,width = 17.5,height = 17.5 ,units = 'cm')
  
  #png('main_plot/fig2/fig2_leg3.png',
  #    height = 27,
  #    width = 26,
  #    units = 'cm',
  #    res = 800)
  #print(pmapleg)
  #dev.off()
  ggsave('main_plot/fig2/fig2_leg3.svg',
         plot = pmapleg,device = 'svg',
         dpi = 800,width = 17.5,height = 17.5 ,units = 'cm')
  
  #png('main_plot/fig2/fig2_leg4.png',
  #    height = 27,
  #    width = 26,
  #    units = 'cm',
  #    res = 800)
  #print(pbarleg)
  #dev.off()
  
  ggsave('main_plot/fig2/fig2_leg4.svg',
         plot = pbarleg,device = 'svg',
         dpi = 800,width = 17.5,height = 17.5 ,units = 'cm')
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
}
prepare_data_fig2_simplify <- function(
  
){
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/calc_tws_in_bigsubs.R")
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/cor_analysis_twssubs_pme.R")
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/mmk_trend_tws_eurasia.R")
  library(ggrepel)
  # inputs
  input_pmeato = 'main_plot_data/fig2/stand_pmeato.csv'
  input_hsrtws = 'main_plot_data/fig2/stand_hsrtws.csv'
  input_twstp = 'main_plot_data/fig2/stand_twstp.csv'
  
  
  pmeato = as.data.frame(fread(input_pmeato))
  hsrtws = as.data.frame(fread(input_hsrtws))
  twstp = as.data.frame(fread(input_twstp))
  twstp = twstp[,c(1,2,4)]
  
  pmeato3 = pmeato[,3]
  
  colnames(hsrtws) = paste0('HSR',1:12)
  colnames(twstp) = c('TWS_TP_Moun1','TWS_TP_Moun2',
                      'TWS_TP_Surface')
  
  date = seq(as.Date('2003-01-01'),
             as.Date('2017-06-01'),
             '1 month')
  date = date[-c(1:6,169:174)]
  
  hsrtws1 = data.frame(
    Time = date,
    hsrtws[,1:6]
  )
  
  hsrtws2 = data.frame(
    Time = date,
    hsrtws[,7:12]
  )
  
  df1 = data.frame(
    Time = date,
    twstp,
    PME_NATO3 = pmeato3
  )
  
  df1m = reshape2::melt(df1,
                        'Time')
  colnames(df1m) = c('Time','linecol','value')
  
  
  hsrtws1m = reshape2::melt(hsrtws1,'Time')
  hsrtws2m = reshape2::melt(hsrtws2,'Time')
  
  hsrtws_mean = apply(cbind(hsrtws1[,2:7],
                            hsrtws2[,2:7]),1,mean)
  hsrtws_max = apply(cbind(hsrtws1[,2:7],
                            hsrtws2[,2:7]),1,max)
  hsrtws_min = apply(cbind(hsrtws1[,2:7],
                           hsrtws2[,2:7]),1,min)
  
  dfhsrtws_mean = data.frame(
    Time = hsrtws1$Time,
    HSRTWS_mean = hsrtws_mean
  )
  dfhsrtws_maxmin = data.frame(
    Time = hsrtws1$Time,
    HSRTWS_max = hsrtws_max,
    HSRTWS_min = hsrtws_min
  )
  
  dfhsrtws_mean$linecol = 'TWS_HSR_mean'
  
  colnames(hsrtws1m) = c('Time','linecol','value')
  colnames(hsrtws2m) = c('Time','linecol','value')
  hsrtws1m$type = hsrtws1m$linecol
  hsrtws2m$type = hsrtws2m$linecol
  
  library(ggsci)
  linecol = pal_lancet()(9)
  linecol = colorRampPalette(linecol)(20)
  
  hsrtws1m$linecol = "TWS_HSR"
  hsrtws2m$linecol = 'TWS_HSR'
  
  linecol = c('TWS_TP_Moun1'=linecol[8],
              'TWS_TP_Moun2'=linecol[9],
              'TWS_TP_Surface'=linecol[15], 
              'PME_NATO3' = linecol[1],
              'TWS_HSR_mean' = linecol[7])  
  linesize = c('TWS_TP_Moun1'= 1.3,
               'TWS_TP_Moun2'=1.3,
               'TWS_TP_Surface'=1.3, 
               'PME_NATO3' = 1.3,
               'TWS_HSR_mean' = 1.3)
  
  cal_varying_rate <- function(x){
    len = length(x)
    x = (x[len]-x[1])/x[1] *100
    return(x)
  }
  ret_first_point <- function(x){
    len = length(x)
    x=  x[1]
    return(x)
  }
  ret_last_point <- function(x){
    len = length(x)
    x=  x[len]
    return(x)
  }
  
  vr_tws_hsr = cal_varying_rate(dfhsrtws_mean[,2])
  vr_tws_tp = apply(twstp,2,cal_varying_rate)
  vr_tws_tp[3] = abs(vr_tws_tp[3])
  
  ftws_hsr = ret_first_point(dfhsrtws_mean[,2])
  ftws_tp = apply(twstp,2,ret_first_point)
  ltws_hsr = ret_last_point(dfhsrtws_mean[,2])
  ltws_tp = apply(twstp,2,ret_last_point)
  
  
  dfpstat1 = data.frame(
    region = c('HSRs','TPM1','TPM2',
               'TPS'),
    regionid = c(1,3,5,7),
    firstp = c(ftws_hsr,ftws_tp),
    lastp = c(ltws_hsr,ltws_tp),
    linecol = c('TWS_HSR_mean','TWS_TP_Moun1',
                'TWS_TP_Moun2','TWS_TP_Surface')
  )
  
  
  
  dfpstat = data.frame(
    region = c('HSRs','TPM1','TPM2',
               'TPS'),
   regionid = c(1,3,5,7),
   vrate = c(vr_tws_hsr,vr_tws_tp),
   linecol = c('TWS_HSR_mean','TWS_TP_Moun1',
               'TWS_TP_Moun2','TWS_TP_Surface')
  )
  
  seg1h = data.frame(
    x = rep(c(1,3,5,7) - 0.5,2),
    xend = rep(c(1,3,5,7) + 0.5,2),
    y = c(dfpstat1$firstp,dfpstat1$lastp)
  )
  seg1v = data.frame(
    x = c(1,3,5,7),
    y = dfpstat1$firstp,
    yend = dfpstat1$lastp
  )
  
  label_vrate = data.frame(
    x = c(1,3,5,7)- 0.4,
    y = (dfpstat1$firstp + dfpstat1$lastp)/2,
    label = round(dfpstat$vrate,2)
  )
  label_vrate$label = paste0(
    label_vrate$label,'%'
  )
  label_vrate$label[4] = paste0('+',label_vrate$label[4]) 
  
  ppoint = ggplot()+
    geom_segment(data = seg1h,
                 aes(x = x,xend = xend,y = y,
                     yend = y),size= 0.5,
                 color = 'black')+
    geom_segment(data = seg1v,
                 aes(x = x,xend = x,y = y,
                     yend = yend),size= 0.5,
                 color = 'black',
                 arrow = arrow(20,
                               unit(0.5,'cm'),
                               type = 'open'))+
    geom_point(data = dfpstat1,
               aes(x = regionid,
                   y = firstp,color = linecol),
               size = 2.5,shape = 16)+
    geom_point(data = dfpstat1,
               aes(x = regionid,
                   y = firstp,color = linecol),
               size = 4,shape = 1)+
    geom_point(data = dfpstat1,
               aes(x = regionid,
                   y = lastp,color = linecol),
               size = 2.5,shape = 16)+
    geom_point(data = dfpstat1,
               aes(x = regionid,
                   y = lastp,color = linecol),
               size = 4,shape = 1)+
    scale_color_manual(values = linecol)+
    scale_x_continuous(breaks = c(1,3,5,7),
                       labels = dfpstat$region,
                       limits = c(0,8))+
    geom_text(data = label_vrate,
              aes(x = x,y = y,label = label),
              size = 5,angle= 90)+
    theme_bw()+
    theme(legend.position = 'none')
    
  
  
  pline1 = ggplot()+
    geom_ribbon(data = dfhsrtws_maxmin,
                aes(x = Time,ymin = HSRTWS_min,
                    ymax = HSRTWS_max),
                fill = linecol[5],
                alpha = 0.2)+
    geom_line(data = df1m[which(df1m$linecol == 'PME_NATO3'),],
              aes(x = Time,y= value,col = linecol,
                  size= linecol))+
    geom_line(data = dfhsrtws_mean,
              aes(x = Time,y = HSRTWS_mean,
                  col = linecol,
                  size = linecol))+
    scale_color_manual(values = linecol)+
    scale_size_manual(values =linesize)+
    theme_bw()
  
  plinetp = ggplot()+
    geom_line(data = df1m,
              aes(x = Time,y= value,col = linecol,
                  size = linecol))+
    scale_color_manual(values = linecol)+
    scale_size_manual(values = linesize)+
    theme_bw()
  
  # mmktrends across eurasia
  negmmk = as.data.frame(
    fread('main_plot_data/fig2/negmmk_eurasia.csv')
  )
  colnames(negmmk) = c('long','lat','TWS_MMK')
  
  negmmk$levels = cut(negmmk$TWS_MMK,
                      breaks = c(-557,seq(-25,0,2.5)))
  nclass = length(unique(negmmk$levels))
  library(RColorBrewer)
  filmmk = colorRampPalette(
    brewer.pal(9,'Spectral')[1:5]
  )(nclass*5)
  filmmk = filmmk[seq(1,nclass*4,4)]
  
  pmemmk = as.data.frame(
    fread('main_plot_data/fig2/negmmk_nato_trend.csv')
  )
  pmemmkio = as.data.frame(
    fread('output/pme_mmkio/pmemmkio.csv')
  )
  pmeioneg = pmemmkio[which(pmemmkio$mmkio <=0),]
  
  colnames(pmeioneg) = c('long','lat','mmk')
  
  pmemmk = rbind(pmemmk,pmeioneg)
  pmemmk$levels = cut(pmemmk$mmk,
                      breaks =c(-83,seq(-20,2,2)))
  nclass2 = length(unique(pmemmk$levels))
  filpme = colorRampPalette(
    brewer.pal(9,'Spectral')
  )(nclass2*4)
  
  filpme = filpme[seq(1,nclass2*2,2)]
  
  
  
  world = shp_management('world')
  world = crop(world,extent(-180,180,0,90))
  tibet = shp_management('tibet')
  
  neg_shps = 'shp/cluster_tws_neg_shp_deter'
  neg_shps = list.files(neg_shps,full.names = T,
                        pattern = '*.shp$')
  neg_shps = lapply(neg_shps,shapefile)   
  neg_shps = neg_shps[c(1,2,3)]
  neg_shps = do.call('bind',neg_shps)
  
  # input subs 
  bigsubs = 'shp/big_scale_subs/'
  hsrid = as.data.frame(fread('main_plot_data/fig2/HSRid.csv'))
  hsrid = as.numeric(hsrid$HSRid)
  
  bigsubs = paste0(bigsubs,
                   'region',1:15,'.shp')
  bigsubs = bigsubs[-14]
  bigsubs = bigsubs[hsrid]
  bigsubs = lapply(bigsubs,shapefile)
  
  bigsubs_set = bigsubs[1:12]
  bigsubs_set = do.call('bind',bigsubs_set)
  i = 1:length(bigsubs)
  loc_center_subs <- function(i){
    tmp = bigsubs[[i]]
    ex = extent(tmp)
    cenlong = (ex[1]+ex[2])/2
    cenlat = (ex[3]+ ex[4])/2
    label = paste0('(',letters[i+6],')')
    
    retdf = data.frame(
      long = cenlong,
      lat = cenlat,
      label = label
    )
    return(retdf)
    
    
  }
  
  subslabel = do.call(rbind,
                      lapply(i,loc_center_subs))
  
  subslabel_set = subslabel[8:12,]
  
  bigsubs = do.call('bind',bigsubs)
  
  seg_leg = data.frame(
    x = 130+10,
    xend = 170+10,
    y = 20,
    xlabel = 150+10,
    ylabel = 10,
    label = 'Water Vapor \n Trajectory'
  )
  
  library(ggsci)
  col_traj = pal_material('blue')(9)
  col_traj = colorRampPalette(col_traj)(9*3)
  col_traj = col_traj[seq(2,9*3,2)][4:12]
  
  library(ggnewscale)
  pmap = ggplot()+
    geom_polygon(data = world,
                 aes(x = long,y = lat,group = group),
                 color = 'black',
                 size = 0.5,
                 fill = 'transparent')+
    geom_tile(data = negmmk,
              aes(x = long,y = lat,
                  fill = levels))+
    geom_polygon(data = tibet,
                 aes(x = long,y = lat,group = group),
                 color = 'black',
                 size = 0.5,
                 fill = 'transparent')+
    geom_polygon(data = neg_shps,
                 aes(x = long,y = lat,group = group),
                 color = 'black',
                 size = 0.5,
                 fill = 'transparent')+
    geom_segment(data = seg_leg,
                 aes(x = x,xend = xend,y = y,
                     yend = y),
                 size = 0.7,
                 color = col_traj[5],
                 arrow = arrow(20,
                               unit(0.15,'inches'),
                               type ='open'))+
    geom_text(data = seg_leg,
              aes(x = xlabel,y = ylabel,
                  label = label),
              size = 4,
              color = 'black',
              hjust = 0.5)+
    scale_x_continuous(breaks = c(-105,-20,105),
                       labels = c(paste0(c(105,20),'°W'),
                                  #0,
                                  paste0(105,'°E')))+
    
    scale_y_continuous(breaks = c(0,30,60,90),
                       labels = c(0,paste0(c(30,60,90),'°N')))+
    scale_fill_manual(values = filmmk,
                      guide = guide_legend(
                        title= 'TWS_MMK_Trend',
                        title.position = 'top',
                        nrow = 3,order=1
                      ))+
    theme_bw()
  
  pmap = pmap + 
    new_scale_fill()+
    geom_tile(data =pmemmk,
              aes(x = long,y = lat,
                  fill = levels))+
    scale_fill_manual(values = filpme,
                      guide = guide_legend(
                        title = 'PME_NATO_MMK_Trend',
                        title.position = 'top',
                        nrow = 3,order = 2
                      ))
  
  cur_df = as.data.frame(
    fread('/home/share/R_project/xinjiang_vapor/analysis_output/fig4/current_df.csv')
  )
  
  idless50 = which(cur_df$lat <= 50 &
                     cur_df$lat >= 10)
  cur_df = cur_df[idless50,]
  
  idbig1 = which(cur_df$u>0 &
                   cur_df$v >0)
  idbig2 = which(cur_df$u<0 &
                   cur_df$v >0)
  idbig3 = which(cur_df$u>0 &
                   cur_df$v <0)
  
  
  cur_df1 = cur_df[idbig1,]
  cur_df2 = cur_df[idbig2,]
  cur_df3 = cur_df[idbig3,]
  
  cur_df3 = cur_df3[
    which(cur_df3$long > -20 &
            cur_df3$lat <= 40 &
            cur_df3$lat >=30),
  ]
  
  cid1 = seq(1,nrow(cur_df1),40)
  cid2 = seq(1,nrow(cur_df2),200)
  cid3 = seq(1,nrow(cur_df3),30)
  
  cur_df1 = cur_df1[cid1,]
  cur_df2 = cur_df2[cid2,]
  cur_df3 = cur_df3[cid3,]
  
  
  cols_cur = c('#2988AE','#30376E','#4169E1')
  
  # import traj 
  trajdf = as.data.frame(
    fread('whole_time_traj/whole_time_traj.csv')
  )
  trajdf$region[which(is.na(trajdf$region))] = 'NA'
  
  
  #col_traj = brewer.pal(9,'Spectral')
  pmap = pmap + 
    geom_path(data = trajdf,
              aes(x = long,y= lat,
                  group = routeid,
                  color = region),
              size = 0.7,
              arrow = arrow(20,
                            unit(0.15,'inches'),
                            type ='open'),
              show.legend = F)+
    geom_segment(data = cur_df1,
                 aes(x = long,y = lat,
                     xend = long+u,
                     yend = lat+v),
                 arrow = arrow(angle = 20,unit(0.15,'cm'),
                               type = 'open'),
                 color = cols_cur[1])+
    geom_segment(data = cur_df2,
                 aes(x = long,y = lat,
                     xend = long+u,
                     yend = lat+v),
                 arrow = arrow(angle = 20,unit(0.2,'cm'),
                               type = 'open'),
                 color = cols_cur[2])+ 
    geom_segment(data = cur_df3,
                 aes(x = long,y = lat,
                     xend = long+u,
                     yend = lat+v),
                 arrow = arrow(angle = 20,unit(0.2,'cm'),
                               type = 'open'),
                 color = cols_cur[3])+
    scale_color_manual(values = col_traj)
  # pmap in 
  pmapin = ggplot()+
    geom_polygon(data = bigsubs,
                 aes(x = long,y = lat,group = group),
                 color = 'black',
                 size = 0.5,
                 fill = 'transparent')+
    geom_text_repel(data = subslabel,
                    aes(x = long,y= lat,
                        label = label),
                    size = 4,
                    color = 'black',
                    #position = position_dodge2(0.5),
                    bg.color = 'white',
                    force = F,
                    bg.r = 0.15,
                    alpha = 0.5)+
    theme_void()
  
  
  
  # input ato shps 
  cluster_atos = list.files('/home/share/R_project/xinjiang_vapor/cluster_shp/ato',
                            full.names =T ,pattern = '*.shp$')
  cluster_atos = cluster_atos[1:4]
  cluster_atos = lapply(cluster_atos,shapefile)
  
  loc_cluster <- function(i){
    tmp = cluster_atos[[i]]
    ex = extent(tmp)
    
    cenlong = (ex[1]+ex[2])/2
    cenlat = (ex[3]+ex[4])/2  
    label = paste0('NATO\n',1:4)
    
    retdf = data.frame(
      long = cenlong,
      lat = cenlat,
      label = label[i]
    )
    return(retdf)
  }
  i = 1:4
  label_nato = lapply(i,loc_cluster)
  label_nato = do.call('rbind',label_nato)
  label_nato$lat[c(1,3)] = label_nato$lat[c(1,3)]
  
  cluster_atos = do.call(bind,cluster_atos)
  
  world_c1 = crop(world,extent(cluster_atos))
  
  pmapb = ggplot()+
    geom_tile(data =pmemmk,
              aes(x = long,y = lat,
                  fill = levels))+
    scale_fill_manual(values = filpme)+
    geom_polygon(data = cluster_atos,
                 aes(x = long,y = lat,
                     group = group),
                 size = 0.5,
                 color = 'black',
                 fill = 'transparent')+
    geom_text_repel(data = label_nato,
                    aes(x = long,y = lat,
                        label = label),
                    size = 2.6,
                    color = 'black',
                    face = 'bold',
                    #position = position_dodge2(0.5),
                    bg.color = 'white',
                    force = F,
                    bg.r = 0.3)+
    scale_x_continuous(breaks = c(-128,-60,30),
                       labels = c(-128,-60,30),
                       limits = c(extent(cluster_atos)[1]-1,
                                  extent(cluster_atos)[2]+1))+
    ylim(extent(cluster_atos)[3]-1,
         extent(cluster_atos)[4]+1)+
    theme_void()
  
  ex_tibet = extent(tibet)
  ex_tibet = extent(ex_tibet[1]-1,
                    ex_tibet[2]+1,
                    ex_tibet[3]-1,
                    ex_tibet[4]+1)
  
  ex_map3 = extent(bigsubs_set)
  
  world_c2 = crop(world,ex_map3)
  
  label_moun1 = data.frame(
    x = c(70,72.5,75,77.5)+6,
    y = c(38,37,36-0.5,35-0.5)-3,
    label = c('T','P','M','1')
  )
  label_moun2 = data.frame(
    x = c(90,92.5,95,97.5),
    y = c(31,31,32,33),
    label = c('T','P','M','2')
  )
  label_surf= data.frame(
    x = c(85,87.5,90)+3,
    y = 36.5,
    label = c('T','P','S')
  )
  
  intermedia_path = 'whole_time_traj/trajs_intermedia.csv'
  interpath = as.data.frame(fread(intermedia_path))
  
  pa1 = paste0('long',1:19)
  pa2 = paste0('long',20:38)
  
  interpath1 = interpath[which(interpath[,3] %in% pa1),]
  interpath2 = interpath[which(interpath[,3] %in% pa2),]
  
  pmapc = ggplot()+
    geom_polygon(data = world_c2,
                 aes(x = long,y = lat,
                     group = group),
                 size = 0.5,
                 color = 'black',
                 fill = 'transparent')+
    
    geom_tile(data = negmmk,
              aes(x = long,y = lat,
                  fill = levels))+
    
    scale_fill_manual(values = filmmk)+
    geom_polygon(data = tibet,
                 aes(x = long,y = lat,group = group),
                 color = 'black',
                 size = 0.5,
                 fill = 'transparent')+
    
    geom_polygon(data = neg_shps,
                 aes(x = long,y = lat,group = group),
                 color = 'black',
                 size = 0.5,
                 fill = 'transparent')+
    geom_polygon(data = bigsubs_set,
                 aes(x = long,y = lat,group = group),
                 color = 'black',
                 size = 0.5,
                 fill = 'transparent')+
    geom_path(data = interpath1,
              aes(x =long,y = lat,group = routeid),
              color = '#000080',
              size = 0.7,
              alpha = 0.6,
              linetype = 'dashed',
              arrow = arrow(20,
                            length = unit(0.75,'cm'),
                            type= 'open')
    )+
    geom_path(data = interpath2,
              aes(x =long,y = lat,group = routeid),
              color = '#000080',
              size = 0.7,
              alpha = 0.6,
              linetype = 'dashed',
              arrow = arrow(20,
                            length = unit(0.75,'cm'),
                            type= 'open')
    )+
    geom_path(data = trajdf,
              aes(x = long,y= lat,
                  group = routeid,
                  color = region),
              size = 0.7,
              arrow = arrow(20,
                            unit(0.15,'inches'),
                            type ='open'),
              alpha = 0.6)+
    
    geom_text_repel(data = subslabel,
                    aes(x = long,y= lat,
                        label = label),
                    size = 4,
                    color = 'black',
                    #position = position_dodge2(0.5),
                    bg.color = 'white',
                    force = F,
                    bg.r = 0.15)+
    geom_text_repel(data = label_moun1,
                    aes(x = x,y = y,label = label),
                    size = 4,
                    color = 'black',
                    #position = position_dodge2(0.5),
                    bg.color = 'white',
                    fontface = 'bold',
                    force = F,
                    bg.r = 0.15)+
    geom_text_repel(data = label_moun2,
                    aes(x = x,y = y,label = label),
                    size = 4,
                    color = 'black',
                    #position = position_dodge2(0.5),
                    bg.color = 'white',
                    fontface = 'bold',
                    force = F,
                    bg.r = 0.15)+
    geom_text_repel(data = label_surf,
                    aes(x = x,y = y,label = label),
                    size = 4,
                    color = 'black',
                    #position = position_dodge2(0.5),
                    bg.color = 'white',
                    fontface = 'bold',
                    force = F,
                    bg.r = 0.15)+
    scale_color_manual(values = col_traj)+
    scale_x_continuous(breaks = c(-20,42,105),
                       labels = c(paste0(c(20),'°W'),
                                  paste0(c(42,105),'°E')),
                       limits = c(ex_map3[1],ex_map3[2]))+
    scale_y_continuous(breaks = c(20,30,40,50),
                       labels = paste0(c(20,30,40,50),'°N'),
                       limits = c(ex_map3[3],ex_map3[4]))+
    theme_bw()
  
  # import cor 
  input_barccf = 'main_plot_data/fig2/bar_cordf.csv'
  barccf = as.data.frame(fread(input_barccf))
  colnames(barccf) = c('PMEATO','region','value')
  
  barccf$NATOid = 1:4
  
  barccf$region = factor(barccf$region,
                         levels = c(paste0('HSR',1:12),
                                    paste0('TP_Moun',1:2)))
  
  means_ccf = aggregate(barccf$value,list(barccf$PMEATO),mean)
  min_ccf = aggregate(barccf$value,list(barccf$PMEATO),min)
  max_ccf = aggregate(barccf$value,list(barccf$PMEATO),max)
  
  colnames(means_ccf) = c('y','x')
  colnames(min_ccf) = c('y','x')
  colnames(max_ccf) = c('y','x')
  
  means_ccf$y1 = 1:4
  min_ccf$y1 = 1:4
  max_ccf$y1 = 1:4
  
  point_col = colorRampPalette(pal_lancet()(9))(14)
  point_col = colorRampPalette(brewer.pal(9,'Spectral'))(14)
  
  
  seg_df_min = data.frame(
    x = min_ccf$x,
    y = c(1:4)-0.1+0.25-0.1,
    yend = c(1:4)+0.1+0.2-0.12
  )
  
  seg_df_max = data.frame(
    x = max_ccf$x,
    y = c(1:4)-0.1+0.25-0.1,
    yend = c(1:4)+0.1+0.2-0.12
  )
  
  seg_df_h= data.frame(
    x = min_ccf$x,
    xend = max_ccf$x,
    y = 1:4+0.2-0.1
  )
  
  means_ccf$label = paste0('mean cc \n',round(means_ccf$x,2))
  means_ccf$x1 = (min_ccf$x + max_ccf$x)/2
  
  pbar  = ggplot()+
    geom_segment(data = seg_df_min,
                 aes(x = x,xend = x,y = y,yend = yend),
                 size = 0.5,
                 color = 'black')+
    geom_segment(data = seg_df_max,
                 aes(x = x,xend = x,y = y,yend = yend),
                 size = 0.5,
                 color = 'black')+
    geom_segment(data = seg_df_h,
                 aes(x = x,xend = xend,y = y,yend = y),
                 size = 0.5,
                 color = 'black')+
    geom_point(data = barccf,
               aes(y = NATOid,x = value,color = region),
               size = 3,shape = 1)+
    geom_point(data = barccf,
               aes(y = NATOid,x = value,color = region),
               size = 3.25,shape = 1)+
    geom_point(data = barccf,
               aes(y = NATOid,x = value,color = region),
               size = 2.75,shape = 1)+
    scale_color_manual(values = point_col)+
    geom_text(data = means_ccf,
              aes( x= x1,y = y1+0.25,label = label),
              size = 5,color  ='black',hjust = 0.5)+
    theme_bw()+
    scale_y_continuous(breaks=c(1,2,3,4),
                       labels = paste0('NATO',1:4))+
    theme(
      axis.title.y = element_blank(),
      legend.position = 'none'
    )
  
  fontsize = 14
  text_theme= theme(
    axis.text = element_text(size = fontsize,
                             color = 'black'),
    axis.title = element_text(size = fontsize,
                              color = 'black'),
    legend.text =  element_text(size = fontsize,
                                color = 'black'),
    legend.title =  element_text(size = fontsize,
                                 color = 'black')
  ) 
  
  label_linedf1 = data.frame(
    x = as.Date('2005-01-01'),
    y = -2.5,
    label = paste0('(','d',")")
  )
  
  
  
  library(cowplot)
  pline1 = pline1 +
    theme(legend.position= 'none')+
    text_theme+
    theme(axis.title = element_blank(),
          strip.text = element_text(size = fontsize,
                                    color = 'black'))+
    geom_text(data = label_linedf1,
              aes(x = x,y = y,label = label),
              size = 5,
              color = 'black',
              face = 'bold')+
    scale_y_continuous(breaks = seq(-3,3,1),
                       labels= seq(-3,3,1),
                       limits = c(-3,3))
  
  label_ppoint = data.frame(
    x = 0.5,y = -2.2,
    label = '(f)'
  )
  ppoint = ppoint + 
    geom_text(data = label_ppoint,
              aes(x = x,y = y,label = label),
              size = 5,
              color = 'black')+
    text_theme+
    theme(axis.title = element_blank(),
          strip.text = element_text(size = fontsize,
                                    color = 'black'))
  
  
  
  label_lineb = data.frame(
    x = as.Date('2005-01-01'),
    y = -2.5,
    label = '(e)'
  )
  plinetp = plinetp+ 
    theme(legend.position= 'none')+
    text_theme+
    theme(axis.title = element_blank(),
          strip.text = element_blank())+
    geom_text(data = label_lineb,
              aes(x = x,y = y,label = label),
              size = 5,
              color = 'black',
              face = 'bold')+
    scale_y_continuous(breaks = seq(-3,3,1),
                       labels= seq(-3,3,1),
                       limits = c(-3,3))
  
  label_pmap = data.frame(
    x = -175,
    y = 80,label = '(a)'
  )
  
  pmap = pmap + 
    geom_text(data = label_pmap,
              aes(x = x,y = y,label = label),
              size = 5,color = 'black',face = 'bold')+
    theme(legend.position= 'none')+
    text_theme+
    xlab('Longitude')+
    ylab('Latitude')+
    theme(
      axis.title = element_blank(),
      axis.text.y = element_text(angle = 90,hjust = 0.5)
    )
  
  pmapb = pmapb + 
    theme(legend.position= 'none')+
    #text_theme+
    xlab('Longitude')+
    ylab('Latitude')+
    theme(
      axis.title = element_blank(),
      #axis.text = element_text(size = 12),
      panel.background = element_rect(fill = 'transparent',
                                      color = 'transparent'),
      plot.background = element_rect(fill = 'transparent',
                                     color = 'transparent')
    )
  
  label_pmapc = data.frame(
    x = -20,y = 47,
    label = '(b)'
  )
  
  pmapc = pmapc + 
    geom_text_repel(data = label_pmapc,
                    aes(x = x,y = y,label = label),
                    size = 5,color = 'black',
                    face = 'bold',
                    bg.color = 'white',
                    force = F,
                    bg.r = 0.15)+
    theme(legend.position= 'none')+
    text_theme+
    xlab('Longitude')+
    ylab('Latitude')+
    theme(
      axis.title = element_blank(),
      axis.text.y = element_text(angle = 90,hjust = 0.5)
    )
  
  pline1 = pline1 + 
    theme(panel.grid = element_blank())
  plinetp = plinetp+ 
    theme(panel.grid = element_blank())
  ppoint = ppoint+
    theme(panel.grid = element_blank())
  
  pbc = plot_grid(
    pline1,plinetp,ppoint,
    nrow = 1,
    rel_widths = c(1,1,1),
    rel_heights = c(1,1,1)
  )
  pmap = pmap + 
    theme(panel.grid = element_blank())
  pmapc = pmapc +
    theme(panel.grid = element_blank())
  
  pabc = plot_grid(
    pmap,pmapc,
    ncol = 1,
    rel_widths = c(1,1),
    rel_heights = c(1,1)
  )
  
  label_pbar = data.frame(
    x = -0.125,
    y = 1,
    label = '(c)'
  )
  
  pbar = pbar +
    geom_text(data = label_pbar,
              aes(x = x,y = y,label = label),
              size = 5,color = 'black',face = 'bold')+
    text_theme+
    theme(axis.title = element_blank())+
    theme(axis.text.y = element_text(angle = 90,
                                     hjust =0.5))
  pbar = pbar + 
    theme(panel.grid = element_blank())
  
  pabcd = plot_grid(
    pabc,pbar,
    nrow = 1,
    rel_widths = c(3,1.5),
    rel_heights = c(1,1)
  )
 
  pabcd = plot_grid(
    pabcd,pbc,
    ncol= 1,
    rel_widths = c(1,1),
    rel_heights = c(2,1)
  )
  
  pabcde1 = ggdraw()+
    draw_plot(pabcd)+
    draw_plot(pmapb,x = 0.035,y = 0.7,
              height = 0.13,width = 0.12)
  
  
  dir.create('main_plot/fig2')
  png('main_plot/fig2/fig2_final_simple2.png',
      height = 24,
      width = 24,
      units = 'cm',
      res = 800)
  print(pabcde1)
  dev.off()
  
  
  pline1leg = pline1+
    theme(legend.position = 'bottom')+
    guides(color = guide_legend(
      title = '',nrow = 3
    ),
    size = guide_legend(
      title = '',nrow = 2
    ))
  plinetpleg = plinetp+
    theme(legend.position = 'bottom')+
    guides(color = guide_legend(
      title = '',nrow = 3
    ),
    size = guide_legend(
      title = '',nrow = 2
    ))
  pmapleg = pmap+
    theme(legend.position = 'bottom')
  pbarleg = pbar + 
    theme(legend.position = 'bottom')+
    guides(color = guide_legend(
      title = '',nrow = 3
    ))
  
  library(ggpubr)
  pline1leg = as_ggplot(get_legend(pline1leg))
  plinetpleg = as_ggplot(get_legend(plinetpleg))
  pmapleg = as_ggplot(get_legend(pmapleg))
  pbarleg = as_ggplot(get_legend(pbarleg))
  
  png('main_plot/fig2/fig2_leg1.png',
      height = 27,
      width = 26,
      units = 'cm',
      res = 800)
  print(pline1leg)
  dev.off()
  
  png('main_plot/fig2/fig2_leg2.png',
      height = 27,
      width = 26,
      units = 'cm',
      res = 800)
  print(plinetpleg)
  dev.off()
  
  png('main_plot/fig2/fig2_leg3.png',
      height = 27,
      width = 26,
      units = 'cm',
      res = 800)
  print(pmapleg)
  dev.off()
  
  png('main_plot/fig2/fig2_leg4.png',
      height = 27,
      width = 26,
      units = 'cm',
      res = 800)
  print(pbarleg)
  dev.off()
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
}
prepare_data_fig2 <- function(
  
){
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/calc_tws_in_bigsubs.R")
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/cor_analysis_twssubs_pme.R")
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/mmk_trend_tws_eurasia.R")
  library(ggrepel)
  # inputs
  input_pmeato = 'main_plot_data/fig2/stand_pmeato.csv'
  input_hsrtws = 'main_plot_data/fig2/stand_hsrtws.csv'
  input_twstp = 'main_plot_data/fig2/stand_twstp.csv'
  
  
  pmeato = as.data.frame(fread(input_pmeato))
  hsrtws = as.data.frame(fread(input_hsrtws))
  twstp = as.data.frame(fread(input_twstp))
  twstp = twstp[,c(1,2,4)]
  
  pmeato3 = pmeato[,3]
  
  colnames(hsrtws) = paste0('HSR',1:12)
  colnames(twstp) = c('TWS_TP_Moun1','TWS_TP_Moun2',
                           'TWS_TP_Surface')
  
  date = seq(as.Date('2003-01-01'),
             as.Date('2017-06-01'),
             '1 month')
  date = date[-c(1:6,169:174)]
  
  hsrtws1 = data.frame(
    Time = date,
    hsrtws[,1:6]
  )
  
  hsrtws2 = data.frame(
    Time = date,
    hsrtws[,7:12]
  )
  
  df1 = data.frame(
    Time = date,
    twstp,
    PME_NATO3 = pmeato3
  )
  
  df1m = reshape2::melt(df1,
                        'Time')
  colnames(df1m) = c('Time','linecol','value')
  
  
  hsrtws1m = reshape2::melt(hsrtws1,'Time')
  hsrtws2m = reshape2::melt(hsrtws2,'Time')
  
  colnames(hsrtws1m) = c('Time','linecol','value')
  colnames(hsrtws2m) = c('Time','linecol','value')
  hsrtws1m$type = hsrtws1m$linecol
  hsrtws2m$type = hsrtws2m$linecol
  
  library(ggsci)
  linecol = pal_lancet()(9)
  linecol = colorRampPalette(linecol)(20)

  hsrtws1m$linecol = "TWS_HSR"
  hsrtws2m$linecol = 'TWS_HSR'
  
  linecol = c('TWS_TP_Moun1'=linecol[8],
              'TWS_TP_Moun2'=linecol[9],
              'TWS_TP_Surface'=linecol[15], 
              'PME_NATO3' = linecol[1],
              'TWS_HSR' = linecol[7])  
  linesize = c('TWS_TP_Moun1'= 1.3,
               'TWS_TP_Moun2'=1.3,
               'TWS_TP_Surface'=1.3, 
               'PME_NATO3' = 1.3,
               'TWS_HSR' = 1.3)
  
  
 
  pline1 = ggplot()+
    geom_line(data = df1m[which(df1m$linecol == 'PME_NATO3'),],
              aes(x = Time,y= value,col = linecol,
                  size= linecol))+
    geom_line(data = hsrtws1m,
              aes(x = Time,y = value,col = linecol,
                  size = linecol))+
    scale_color_manual(values = linecol)+
    scale_size_manual(values =linesize)+
    theme_bw()+
    facet_wrap(~type,nrow = 1)
 
  pline2 = ggplot()+
    geom_line(data = df1m[which(df1m$linecol == 'PME_NATO3'),],
              aes(x = Time,y= value,col = linecol,
                  size = linecol))+
    geom_line(data = hsrtws2m,
              aes(x = Time,y = value,col = linecol,
                  size = linecol))+
    scale_color_manual(values = linecol)+
    scale_size_manual(values = linesize)+
    theme_bw()+
    facet_wrap(~type,nrow = 1)
  
  plinetp = ggplot()+
    geom_line(data = df1m,
              aes(x = Time,y= value,col = linecol,
                  size = linecol))+
    scale_color_manual(values = linecol)+
    scale_size_manual(values = linesize)+
    theme_bw()
  
  # mmktrends across eurasia
  negmmk = as.data.frame(
    fread('main_plot_data/fig2/negmmk_eurasia.csv')
  )
  colnames(negmmk) = c('long','lat','TWS_MMK')
  
  negmmk$levels = cut(negmmk$TWS_MMK,
                      breaks = c(-557,seq(-25,0,2.5)))
  nclass = length(unique(negmmk$levels))
  library(RColorBrewer)
  filmmk = colorRampPalette(
    brewer.pal(9,'Spectral')[1:5]
  )(nclass*5)
  filmmk = filmmk[seq(1,nclass*4,4)]
  
  pmemmk = as.data.frame(
    fread('main_plot_data/fig2/negmmk_nato_trend.csv')
  )
  
  pmemmk$levels = cut(pmemmk$mmk,
                      breaks =c(-83,seq(-20,2,2)))
  nclass2 = length(unique(pmemmk$levels))
  filpme = colorRampPalette(
    brewer.pal(9,'Spectral')
  )(nclass2*4)
  
  filpme = filpme[seq(1,nclass2*2,2)]
  
  
  
  world = shp_management('world')
  world = crop(world,extent(-180,180,0,90))
  tibet = shp_management('tibet')
  
  neg_shps = 'shp/cluster_tws_neg_shp_deter'
  neg_shps = list.files(neg_shps,full.names = T,
                        pattern = '*.shp$')
  neg_shps = lapply(neg_shps,shapefile)   
  neg_shps = neg_shps[c(1,2)]
  neg_shps = do.call('bind',neg_shps)
  
  # input subs 
  bigsubs = 'shp/big_scale_subs/'
  hsrid = as.data.frame(fread('main_plot_data/fig2/HSRid.csv'))
  hsrid = as.numeric(hsrid$HSRid)
  
  bigsubs = paste0(bigsubs,
                   'region',1:15,'.shp')
  bigsubs = bigsubs[-14]
  bigsubs = bigsubs[hsrid]
  bigsubs = lapply(bigsubs,shapefile)
  
  bigsubs_set = bigsubs[8:12]
  bigsubs_set = do.call('bind',bigsubs_set)
  i = 1:length(bigsubs)
  loc_center_subs <- function(i){
    tmp = bigsubs[[i]]
    ex = extent(tmp)
    cenlong = (ex[1]+ex[2])/2
    cenlat = (ex[3]+ ex[4])/2
    label = paste0('(',letters[i+4],')')
    
    retdf = data.frame(
      long = cenlong,
      lat = cenlat,
      label = label
    )
    return(retdf)
    
    
  }
  
  subslabel = do.call(rbind,
                      lapply(i,loc_center_subs))
  
  subslabel_set = subslabel[8:12,]
  
  bigsubs = do.call('bind',bigsubs)
  
  seg_leg = data.frame(
    x = 130+10,
    xend = 170+10,
    y = 20,
    xlabel = 150+10,
    ylabel = 10,
    label = 'Water Vapor \n Trajectory'
  )
  
  library(ggsci)
  col_traj = pal_material('blue')(9)
  col_traj = colorRampPalette(col_traj)(9*3)
  col_traj = col_traj[seq(2,9*3,2)][4:12]
  
  library(ggnewscale)
  pmap = ggplot()+
    geom_polygon(data = world,
                 aes(x = long,y = lat,group = group),
                 color = 'black',
                 size = 0.5,
                 fill = 'transparent')+
    geom_tile(data = negmmk,
              aes(x = long,y = lat,
                  fill = levels))+
    geom_polygon(data = tibet,
                 aes(x = long,y = lat,group = group),
                 color = 'black',
                 size = 0.5,
                 fill = 'transparent')+
    geom_polygon(data = neg_shps,
                 aes(x = long,y = lat,group = group),
                 color = 'black',
                 size = 0.5,
                 fill = 'transparent')+
    geom_polygon(data = bigsubs,
                 aes(x = long,y = lat,group = group),
                 color = 'black',
                 size = 0.5,
                 fill = 'transparent')+
    geom_segment(data = seg_leg,
                 aes(x = x,xend = xend,y = y,
                     yend = y),
                 size = 0.7,
                 color = col_traj[5],
                 arrow = arrow(20,
                               unit(0.15,'inches'),
                               type ='open'))+
    geom_text(data = seg_leg,
              aes(x = xlabel,y = ylabel,
                  label = label),
              size = 4,
              color = 'black',
              hjust = 0.5)+
    scale_x_continuous(breaks = c(-120,0,55,105),
                       labels = paste0(c(-120,0,55,105)))+
    scale_fill_manual(values = filmmk,
                      guide = guide_legend(
                        title= 'TWS_MMK_Trend',
                        title.position = 'top',
                        nrow = 3,order=1
                      ))+
    theme_bw()
  
  pmap = pmap + 
    new_scale_fill()+
    geom_tile(data =pmemmk,
              aes(x = long,y = lat,
                  fill = levels))+
    scale_fill_manual(values = filpme,
                      guide = guide_legend(
                        title = 'PME_NATO_MMK_Trend',
                        title.position = 'top',
                        nrow = 3,order = 2
                      ))
    
  cur_df = as.data.frame(
    fread('/home/share/R_project/xinjiang_vapor/analysis_output/fig4/current_df.csv')
  )
  
  idless50 = which(cur_df$lat <= 50 &
                     cur_df$lat >= 10)
  cur_df = cur_df[idless50,]
  
  idbig1 = which(cur_df$u>0 &
                   cur_df$v >0)
  idbig2 = which(cur_df$u<0 &
                   cur_df$v >0)
  idbig3 = which(cur_df$u>0 &
                   cur_df$v <0)
  
  
  cur_df1 = cur_df[idbig1,]
  cur_df2 = cur_df[idbig2,]
  cur_df3 = cur_df[idbig3,]
  
  cur_df3 = cur_df3[
    which(cur_df3$long > -20 &
            cur_df3$lat <= 40 &
            cur_df3$lat >=30),
  ]
  
  cid1 = seq(1,nrow(cur_df1),40)
  cid2 = seq(1,nrow(cur_df2),200)
  cid3 = seq(1,nrow(cur_df3),30)
  
  cur_df1 = cur_df1[cid1,]
  cur_df2 = cur_df2[cid2,]
  cur_df3 = cur_df3[cid3,]
  
  
  cols_cur = c('#2988AE','#30376E','#4169E1')
  
  # import traj 
  trajdf = as.data.frame(
    fread('whole_time_traj/whole_time_traj.csv')
  )
  trajdf$region[which(is.na(trajdf$region))] = 'NA'
  
 
  #col_traj = brewer.pal(9,'Spectral')
  pmap = pmap + 
    geom_path(data = trajdf,
              aes(x = long,y= lat,
                  group = routeid,
                  color = region),
              size = 0.7,
              arrow = arrow(20,
                            unit(0.15,'inches'),
                            type ='open'),
              show.legend = F)+
    geom_segment(data = cur_df1,
                 aes(x = long,y = lat,
                     xend = long+u,
                     yend = lat+v),
                 arrow = arrow(angle = 20,unit(0.15,'cm'),
                               type = 'open'),
                 color = cols_cur[1])+
    geom_segment(data = cur_df2,
                 aes(x = long,y = lat,
                     xend = long+u,
                     yend = lat+v),
                 arrow = arrow(angle = 20,unit(0.2,'cm'),
                               type = 'open'),
                 color = cols_cur[2])+ 
    geom_segment(data = cur_df3,
                 aes(x = long,y = lat,
                     xend = long+u,
                     yend = lat+v),
                 arrow = arrow(angle = 20,unit(0.2,'cm'),
                               type = 'open'),
                 color = cols_cur[3])+
    scale_color_manual(values = col_traj)+
    geom_text_repel(data = subslabel,
                    aes(x = long,y= lat,
                        label = label),
                    size = 4,
                    color = 'black',
                    #position = position_dodge2(0.5),
                    bg.color = 'white',
                    force = F,
                    bg.r = 0.15,
                    alpha = 0.5)
  
  # pmap in 
  pmapin = ggplot()+
    geom_polygon(data = bigsubs,
                 aes(x = long,y = lat,group = group),
                 color = 'black',
                 size = 0.5,
                 fill = 'transparent')+
    geom_text_repel(data = subslabel,
                    aes(x = long,y= lat,
                        label = label),
                    size = 4,
                    color = 'black',
                    #position = position_dodge2(0.5),
                    bg.color = 'white',
                    force = F,
                    bg.r = 0.15,
                    alpha = 0.5)+
    theme_void()
    
  
  
  # input ato shps 
  cluster_atos = list.files('/home/share/R_project/xinjiang_vapor/cluster_shp/ato',
                            full.names =T ,pattern = '*.shp$')
  cluster_atos = cluster_atos[1:4]
  cluster_atos = lapply(cluster_atos,shapefile)
  
  loc_cluster <- function(i){
    tmp = cluster_atos[[i]]
    ex = extent(tmp)
    
    cenlong = (ex[1]+ex[2])/2
    cenlat = (ex[3]+ex[4])/2  
    label = paste0('NATO',1:4)
    
    retdf = data.frame(
      long = cenlong,
      lat = cenlat,
      label = label[i]
    )
    return(retdf)
  }
  i = 1:4
  label_nato = lapply(i,loc_cluster)
  label_nato = do.call('rbind',label_nato)
  label_nato$lat[c(1,3)] = label_nato$lat[c(1,3)]
  
  cluster_atos = do.call(bind,cluster_atos)
  
  world_c1 = crop(world,extent(cluster_atos))
  
  pmapb = ggplot()+
    geom_tile(data =pmemmk,
              aes(x = long,y = lat,
                  fill = levels))+
    scale_fill_manual(values = filpme)+
    geom_polygon(data = cluster_atos,
                 aes(x = long,y = lat,
                     group = group),
                 size = 0.5,
                 color = 'black',
                 fill = 'transparent')+
    geom_text_repel(data = label_nato,
                    aes(x = long,y = lat,
                        label = label),
                    size = 3,
                    color = 'black',
                    face = 'bold',
                    #position = position_dodge2(0.5),
                    bg.color = 'white',
                    force = F,
                    bg.r = 0.3)+
    scale_x_continuous(breaks = c(-128,-60,30),
                       labels = c(-128,-60,30),
                       limits = c(extent(cluster_atos)[1]-1,
                                  extent(cluster_atos)[2]+1))+
    ylim(extent(cluster_atos)[3]-1,
         extent(cluster_atos)[4]+1)+
    theme_void()
    
  ex_tibet = extent(tibet)
  ex_tibet = extent(ex_tibet[1]-1,
                    ex_tibet[2]+1,
                    ex_tibet[3]-1,
                    ex_tibet[4]+1)
  
  ex_map3 = extent(bigsubs_set)
  
  world_c2 = crop(world,ex_map3)
  
  label_moun1 = data.frame(
    x = c(70,72.5,75,77.5)+6,
    y = c(38,37,36-0.5,35-0.5)-3,
    label = c('T','P','M','1')
  )
  label_moun2 = data.frame(
    x = c(90,92.5,95,97.5),
    y = c(31,31,32,33),
    label = c('T','P','M','2')
  )
  label_surf= data.frame(
    x = c(85,87.5,90)+3,
    y = 36.5,
    label = c('T','P','S')
  )
  
  intermedia_path = 'whole_time_traj/trajs_intermedia.csv'
  interpath = as.data.frame(fread(intermedia_path))
  
  pa1 = paste0('long',1:19)
  pa2 = paste0('long',20:38)
  
  interpath1 = interpath[which(interpath[,3] %in% pa1),]
  interpath2 = interpath[which(interpath[,3] %in% pa2),]
  
  pmapc = ggplot()+
    geom_polygon(data = world_c2,
                 aes(x = long,y = lat,
                     group = group),
                 size = 0.5,
                 color = 'black',
                 fill = 'transparent')+
    
    geom_tile(data = negmmk,
              aes(x = long,y = lat,
                  fill = levels))+
    
    scale_fill_manual(values = filmmk)+
    geom_polygon(data = tibet,
                 aes(x = long,y = lat,group = group),
                 color = 'black',
                 size = 0.5,
                 fill = 'transparent')+
    
    geom_polygon(data = neg_shps,
                 aes(x = long,y = lat,group = group),
                 color = 'black',
                 size = 0.5,
                 fill = 'transparent')+
    geom_polygon(data = bigsubs_set,
                 aes(x = long,y = lat,group = group),
                 color = 'black',
                 size = 0.5,
                 fill = 'transparent')+
    geom_path(data = interpath1,
              aes(x =long,y = lat,group = routeid),
              color = '#000080',
              size = 0.7,
              alpha = 0.6,
              linetype = 'dashed',
              arrow = arrow(20,
                            length = unit(0.75,'cm'),
                            type= 'open')
    )+
    geom_path(data = interpath2,
              aes(x =long,y = lat,group = routeid),
              color = '#000080',
              size = 0.7,
              alpha = 0.6,
              linetype = 'dashed',
              arrow = arrow(20,
                            length = unit(0.75,'cm'),
                            type= 'open')
    )+
    geom_path(data = trajdf,
              aes(x = long,y= lat,
                  group = routeid,
                  color = region),
              size = 0.7,
              arrow = arrow(20,
                            unit(0.15,'inches'),
                            type ='open'),
              alpha = 0.6)+
    geom_text_repel(data = subslabel_set,
                    aes(x = long,y= lat,
                        label = label),
                    size = 4,
                    color = 'black',
                    #position = position_dodge2(0.5),
                    bg.color = 'white',
                    force = F,
                    bg.r = 0.15)+
    geom_text_repel(data = label_moun1,
              aes(x = x,y = y,label = label),
              size = 5,
              color = 'black',
              #position = position_dodge2(0.5),
              bg.color = 'white',
              fontface = 'bold',
              force = F,
              bg.r = 0.15)+
    geom_text_repel(data = label_moun2,
                    aes(x = x,y = y,label = label),
                    size = 5,
                    color = 'black',
                    #position = position_dodge2(0.5),
                    bg.color = 'white',
                    fontface = 'bold',
                    force = F,
                    bg.r = 0.15)+
    geom_text_repel(data = label_surf,
                    aes(x = x,y = y,label = label),
                    size = 5,
                    color = 'black',
                    #position = position_dodge2(0.5),
                    bg.color = 'white',
                    fontface = 'bold',
                    force = F,
                    bg.r = 0.15)+
    scale_color_manual(values = col_traj)+
    scale_x_continuous(breaks = c(55,80,105),
                       labels = c(55,80,105),
                       limits = c(ex_map3[1],ex_map3[2]))+
    ylim(ex_map3[3],ex_map3[4])+
    theme_bw()
  
  # import cor 
  input_barccf = 'main_plot_data/fig2/bar_cordf.csv'
  barccf = as.data.frame(fread(input_barccf))
  colnames(barccf) = c('PMEATO','region','value')
  
  barccf$NATOid = 1:4
  
  barccf$region = factor(barccf$region,
                         levels = c(paste0('HSR',1:12),
                                    paste0('TP_Moun',1:2)))
  
  means_ccf = aggregate(barccf$value,list(barccf$PMEATO),mean)
  min_ccf = aggregate(barccf$value,list(barccf$PMEATO),min)
  max_ccf = aggregate(barccf$value,list(barccf$PMEATO),max)
  
  colnames(means_ccf) = c('y','x')
  colnames(min_ccf) = c('y','x')
  colnames(max_ccf) = c('y','x')
  
  means_ccf$y1 = 1:4
  min_ccf$y1 = 1:4
  max_ccf$y1 = 1:4
  
  point_col = colorRampPalette(pal_lancet()(9))(14)
  point_col = colorRampPalette(brewer.pal(9,'Spectral'))(14)
  
  
  seg_df_min = data.frame(
    x = min_ccf$x,
    y = c(1:4)-0.1+0.25,
    yend = c(1:4)+0.1+0.2
  )
  
  seg_df_max = data.frame(
    x = max_ccf$x,
    y = c(1:4)-0.1+0.25,
    yend = c(1:4)+0.1+0.2
  )
  
  seg_df_h= data.frame(
    x = min_ccf$x,
    xend = max_ccf$x,
    y = 1:4+0.2
  )
  
  means_ccf$label = paste0('mean ccf \n',round(means_ccf$x,2))
  means_ccf$x1 = (min_ccf$x + max_ccf$x)/2
  
  pbar  = ggplot()+
    geom_segment(data = seg_df_min,
                 aes(x = x,xend = x,y = y,yend = yend),
                 size = 0.5,
                 color = 'black')+
    geom_segment(data = seg_df_max,
                 aes(x = x,xend = x,y = y,yend = yend),
                 size = 0.5,
                 color = 'black')+
    geom_segment(data = seg_df_h,
                 aes(x = x,xend = xend,y = y,yend = y),
                 size = 0.5,
                 color = 'black')+
    geom_point(data = barccf,
               aes(y = NATOid,x = value,color = region),
               size = 3,shape = 1)+
    geom_point(data = barccf,
               aes(y = NATOid,x = value,color = region),
               size = 3.25,shape = 1)+
    geom_point(data = barccf,
               aes(y = NATOid,x = value,color = region),
               size = 2.75,shape = 1)+
    scale_color_manual(values = point_col)+
    geom_text(data = means_ccf,
              aes( x= x1,y = y1+0.35,label = label),
              size = 5,color  ='black',hjust = 0.5)+
    theme_bw()+
    scale_y_continuous(breaks=c(1,2,3,4),
                       labels = paste0('NATO',1:4))+
    theme(
      axis.title.y = element_blank(),
      legend.position = 'none'
    )
  
  fontsize = 14
  text_theme= theme(
    axis.text = element_text(size = fontsize,
                             color = 'black'),
    axis.title = element_text(size = fontsize,
                              color = 'black'),
    legend.text =  element_text(size = fontsize,
                                color = 'black'),
    legend.title =  element_text(size = fontsize,
                                 color = 'black')
  ) 
  
  label_linedf1 = data.frame(
    x = as.Date('2005-01-01'),
    y = -2.5,
    label = paste0('(',letters[(1:6)+4],")"),
    type = paste0('HSR',1:6)
  )
  label_linedf2 = data.frame(
    x = as.Date('2005-01-01'),
    y = -2.5,
    label = paste0('(',letters[(7:12)+4],")"),
    type = paste0('HSR',7:12)
  )
  
  library(cowplot)
  pline1 = pline1 +
    theme(legend.position= 'none')+
    text_theme+
    theme(axis.title = element_blank(),
          strip.text = element_text(size = fontsize,
                                    color = 'black'))+
    geom_text(data = label_linedf1,
              aes(x = x,y = y,label = label),
              size = 5,
              color = 'black',
              face = 'bold')
  
  pline2 = pline2 +
    theme(legend.position= 'none')+
    text_theme+
    theme(axis.title = element_blank(),
          strip.text = element_text(size = fontsize,
                                    color = 'black'))+
    geom_text(data = label_linedf2,
              aes(x = x,y = y,label = label),
              size = 5,
              color = 'black',
              face = 'bold')
  
  label_lineb = data.frame(
    x = as.Date('2005-01-01'),
    y = -2.5,
    label = '(b)'
  )
  plinetp = plinetp+ 
    theme(legend.position= 'none')+
    text_theme+
    theme(axis.title = element_blank(),
          strip.text = element_blank())+
    geom_text(data = label_lineb,
              aes(x = x,y = y,label = label),
              size = 5,
              color = 'black',
              face = 'bold')
  
  label_pmap = data.frame(
    x = -175,
    y = 80,label = '(a)'
  )
  
  pmap = pmap + 
    geom_text(data = label_pmap,
              aes(x = x,y = y,label = label),
              size = 5,color = 'black',face = 'bold')+
    theme(legend.position= 'none')+
    text_theme+
    xlab('Longitude')+
    ylab('Latitude')+
    theme(
      axis.title = element_blank()
    )
  
  pmapb = pmapb + 
    theme(legend.position= 'none')+
    #text_theme+
    xlab('Longitude')+
    ylab('Latitude')+
    theme(
      axis.title = element_blank(),
      #axis.text = element_text(size = 12),
      panel.background = element_rect(fill = 'transparent',
                                      color = 'transparent'),
      plot.background = element_rect(fill = 'transparent',
                                     color = 'transparent')
    )
  
  label_pmapc = data.frame(
    x = 60,y = 22.5,
    label = '(c)'
  )

  pmapc = pmapc + 
    geom_text_repel(data = label_pmapc,
              aes(x = x,y = y,label = label),
              size = 5,color = 'black',
              face = 'bold',
              bg.color = 'white',
              force = F,
              bg.r = 0.15)+
    theme(legend.position= 'none')+
    text_theme+
    xlab('Longitude')+
    ylab('Latitude')+
    theme(
      axis.title = element_blank()
    )
  
  pbc = plot_grid(
    plinetp,pmapc,
    nrow = 1,
    rel_widths = c(1,1),
    rel_heights = c(0.5,0.5)
  )
  
  pabc = plot_grid(
    pmap,pbc,
    ncol = 1,
    rel_widths = c(1,1),
    rel_heights = c(1,1)
  )
  
  label_pbar = data.frame(
    x = -0.125,
    y = 1,
    label = '(d)'
  )
  
  pbar = pbar +
    geom_text(data = label_pbar,
              aes(x = x,y = y,label = label),
              size = 5,color = 'black',face = 'bold')+
    text_theme+
    theme(axis.title = element_blank())+
    theme(axis.text.y = element_text(angle = 90,
                                     hjust =0.5))
  
  pabcd = plot_grid(
    pabc,pbar,
    nrow = 1,
    rel_widths = c(3,1),
    rel_heights = c(1,1)
  )
  
  pabcde = plot_grid(
    pline1,pabcd,pline2,
    ncol = 1,
    rel_widths = c(1,1,1),
    rel_heights = c(2,6,2)
  )
  
  pabcde1 = ggdraw()+
    draw_plot(pabcde)+
    draw_plot(pmapb,x = 0.035,y = 0.54,
              height = 0.15,width = 0.14)
  
  
  dir.create('main_plot/fig2')
  png('main_plot/fig2/fig2_final.png',
      height = 27,
      width = 26,
      units = 'cm',
      res = 800)
  print(pabcde1)
  dev.off()
  
  
  pline1leg = pline1+
    theme(legend.position = 'bottom')+
    guides(color = guide_legend(
      title = '',nrow = 3
    ),
    size = guide_legend(
      title = '',nrow = 2
    ))
  plinetpleg = plinetp+
    theme(legend.position = 'bottom')+
    guides(color = guide_legend(
      title = '',nrow = 3
    ),
    size = guide_legend(
      title = '',nrow = 2
    ))
  pmapleg = pmap+
    theme(legend.position = 'bottom')
  pbarleg = pbar + 
    theme(legend.position = 'bottom')+
    guides(color = guide_legend(
      title = '',nrow = 3
    ))
  
  library(ggpubr)
  pline1leg = as_ggplot(get_legend(pline1leg))
  plinetpleg = as_ggplot(get_legend(plinetpleg))
  pmapleg = as_ggplot(get_legend(pmapleg))
  pbarleg = as_ggplot(get_legend(pbarleg))
  
  png('main_plot/fig2/fig2_leg1.png',
      height = 27,
      width = 26,
      units = 'cm',
      res = 800)
  print(pline1leg)
  dev.off()

  png('main_plot/fig2/fig2_leg2.png',
      height = 27,
      width = 26,
      units = 'cm',
      res = 800)
  print(plinetpleg)
  dev.off()
  
  png('main_plot/fig2/fig2_leg3.png',
      height = 27,
      width = 26,
      units = 'cm',
      res = 800)
  print(pmapleg)
  dev.off()
  
  png('main_plot/fig2/fig2_leg4.png',
      height = 27,
      width = 26,
      units = 'cm',
      res = 800)
  print(pbarleg)
  dev.off()
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
    
  
}
prepare_data_for_fig4<-function(
  
){
  library(rgeos)
  detect_changing_points<-function(date,pos_area){
    library(prophet)
    pos245 = data.frame(ds = date,
                        y = pos_area)
    p = prophet(pos245,
                n.changepoints = 2,yearly.seasonality = T,
                changepoint.range = 0.8)
    
    changeloc = which(as.character.Date(date) %in% as.character.Date(p$changepoints))
    return(changeloc)
  }
  dir.create('main_plot_data')
  dir.create('main_plot_data/fig4')
  dir.create('main_plot_data/fig4/fig4a')
  
  source("/home/share/R_project/xinjiang_vapor/shp_management.R")
  tibet = shp_management('tibet')
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/final_projection_pos_area_in_tibet.R")
  #final_projection_pos_area_in_tibet()
  #input_pos = 'output/future_pos_tws_area/pos_tws_area_ensemble.csv'
  #input_pos = 'output/future_pos_tws_area/pos_area_allcalc_mean.csv'
  input_pos = 'output/future_pos_tws_area_based_snow_tws/pos_area_allcalc_mean.csv'
  pos_area = as.data.frame(fread(input_pos))
  colnames(pos_area) = c('SSP245','SSP585')
  
  pos_area = pos_area[3:81,]
  full_area = area(tibet)/10^6 /10000
  neg_area = full_area - pos_area
  
  pos_rate = pos_area / full_area * 100 
  neg_rate = neg_area / full_area * 100 
  
  fwrite(pos_rate,'main_plot_data/fig4/fig4a/pos_rate.csv')
  fwrite(pos_area,'main_plot_data/fig4/fig4a/pos_area.csv')
  
  
  date = seq(as.Date('2020-01-01'),as.Date('2098-01-01'),
             '1 year')
  
  changeloc1 = detect_changing_points(date,pos_area[,1])
  changeloc2 = detect_changing_points(date,pos_area[,2])
  
  matplot(pos_area,type = 'l')
  points(changeloc1,pos_area[changeloc1,1],col = 'red')
  points(changeloc2,pos_area[changeloc2,2],col = 'blue')
  
  min_point245 = which(pos_area[,1] == min(pos_area[,1]))
  min_point585 = which(pos_area[,2] == min(pos_area[,2]))
  years = 2020:2098
  years1 = years[c(1,changeloc1,min_point245,79)]
  years2 = years[c(1,changeloc2,min_point585,79)]
  
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/single_year_expand_border.R")
  border245_li <- lapply(years1,single_year_expand_border,mode = 'ssp245')
  border585_li <- lapply(years2,single_year_expand_border,mode = 'ssp585')
  
  dir.create('main_plot_data/fig4/fig4bc')
  output_border245 = paste0('main_plot_data/fig4/fig4bc/border_ssp245_',
                            years1,'.csv')
  output_border585 = paste0('main_plot_data/fig4/fig4bc/border_ssp585_',
                            years2,'.csv')
  
  i = 1:5
  for(i in i){
    fwrite(border245_li[[i]],output_border245[i])
    fwrite(border585_li[[i]],output_border585[i])
  }
  
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/spatial_pattern_of_tws_neg_infuture.R")
  twsneg_monmultiyear245 = spatial_pattern_of_tws_neg_infuture('ssp245')
  twsneg_monmultiyear585 = spatial_pattern_of_tws_neg_infuture('ssp585')
  
  output_twsneg_multi245= 'main_plot_data/fig4/fig4bc/multi_twsneg245.csv'
  output_twsneg_multi585= 'main_plot_data/fig4/fig4bc/multi_twsneg585.csv'
  
  fwrite(twsneg_monmultiyear245,output_twsneg_multi245)
  fwrite(twsneg_monmultiyear585,output_twsneg_multi585)
  
  
  
  
  
  
  
  
  
  
}
prepare_data_for_fig5_2022_2098<-function(
  
){
  library(rgeos)
  detect_changing_points<-function(date,pos_area){
    library(prophet)
    pos245 = data.frame(ds = date,
                        y = pos_area)
    p = prophet(pos245,
                n.changepoints = 2,yearly.seasonality = T,
                changepoint.range = 0.8)
    
    changeloc = which(as.character.Date(date) %in% as.character.Date(p$changepoints))
    return(changeloc)
  }
  dir.create('main_plot_data')
  dir.create('main_plot_data/fig4')
  dir.create('main_plot_data/fig4/fig4a')
  
  source("/home/share/R_project/xinjiang_vapor/shp_management.R")
  tibet = shp_management('tibet')
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/final_projection_pos_area_in_tibet.R")
  #final_projection_pos_area_in_tibet()
  #input_pos = 'output/future_pos_tws_area/pos_tws_area_ensemble.csv'
  input_pos = 'output/future_pos_tws_area/pos_area_allcalc_mean.csv'
  pos_area = as.data.frame(fread(input_pos))
  colnames(pos_area) = c('SSP245','SSP585')
  
  pos_area = pos_area[5:81,]
  full_area = area(tibet)/10^6 /10000
  neg_area = full_area - pos_area
  
  pos_rate = pos_area / full_area * 100 
  neg_rate = neg_area / full_area * 100 
  
  fwrite(pos_rate,'main_plot_data/fig4/fig4a/pos_rate.csv')
  fwrite(pos_area,'main_plot_data/fig4/fig4a/pos_area.csv')
  
  
  date = seq(as.Date('2022-01-01'),as.Date('2098-01-01'),
             '1 year')
  
  changeloc1 = detect_changing_points(date,pos_area[,1])
  changeloc2 = detect_changing_points(date,pos_area[,2])
  
  matplot(pos_area,type = 'l')
  points(changeloc1,pos_area[changeloc1,1],col = 'red')
  points(changeloc2,pos_area[changeloc2,2],col = 'blue')
  
  min_point245 = which(pos_area[,1] == min(pos_area[,1]))
  min_point585 = which(pos_area[,2] == min(pos_area[,2]))
  years = 2022:2098
  years1 = years[c(1,changeloc1,min_point245,77)]
  years2 = years[c(1,changeloc2,min_point585,77)]
  
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/single_year_expand_border.R")
  border245_li <- lapply(years1,single_year_expand_border,mode = 'ssp245')
  border585_li <- lapply(years2,single_year_expand_border,mode = 'ssp585')
  
  dir.create('main_plot_data/fig4/fig4bc')
  output_border245 = paste0('main_plot_data/fig4/fig4bc/border_ssp245_',
                            years1,'.csv')
  output_border585 = paste0('main_plot_data/fig4/fig4bc/border_ssp585_',
                            years2,'.csv')
  
  i = 1:5
  for(i in i){
    fwrite(border245_li[[i]],output_border245[i])
    fwrite(border585_li[[i]],output_border585[i])
  }
  
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/spatial_pattern_of_tws_neg_infuture.R")
  twsneg_monmultiyear245 = spatial_pattern_of_tws_neg_infuture('ssp245')
  twsneg_monmultiyear585 = spatial_pattern_of_tws_neg_infuture('ssp585')
  
  output_twsneg_multi245= 'main_plot_data/fig4/fig4bc/multi_twsneg245.csv'
  output_twsneg_multi585= 'main_plot_data/fig4/fig4bc/multi_twsneg585.csv'
  
  fwrite(twsneg_monmultiyear245,output_twsneg_multi245)
  fwrite(twsneg_monmultiyear585,output_twsneg_multi585)
  
  
  
  
  
  
  
  
  
  
}
prepare_data_for_mca_tibet_ocean_temperature <- function(
  
){
  # input data of the temperauture
  temper = data_management(mode = 'global_era5_temperature')
  world = shp_management('world')
  world = crop(world,extent(-20,180,0,90))
  
  temper_eura = mask(crop(temper,world),world)
  
  ato = shp_management('ocean','ato')
  io = shp_management('ocean','io')
  
  temper_ato = mask(crop(temper,ato),ato)
  temper_io = mask(crop(temper,io),io)
  
  temper_eura_df = as.data.frame(temper_eura,xy = T)
  temper_ato_df = as.data.frame(temper_ato,xy = T)
  temper_io_df = as.data.frame(temper_io,xy = T)
  
  naid1 = which(is.na(temper_eura_df[,3]))
  naid2 = which(is.na(temper_ato_df[,3]))
  naid3 = which(is.na(temper_io_df[,3]))
  
  temper_eura_df = temper_eura_df[-naid1,]
  temper_ato_df = temper_ato_df[-naid2,]
  temper_io_df = temper_io_df[-naid3,]
  
  loc_eura = temper_eura_df[,c(1,2)]
  loc_ato = temper_ato_df[,c(1,2)]
  loc_io = temper_io_df[,c(1,2)]
  
  eura_df = temper_eura_df[,-c(1,2)]
  ato_df = temper_ato_df[,-c(1,2)]
  io_df = temper_io_df[,-c(1,2)]
  
  trend_fun1 <- function(i1){
    x = eura_df[i1,]
    x = as.numeric(x)
    x = x[1:174]
    
    x = ts(x,start = c(2003,1),frequency = 12)
    x = decompose(x)$trend
    x = x[-which(is.na(x))]
    
    x = (x -mean(x))/sd(x)
    return(x)
  }
  trend_fun2 <- function(i2){
    x = ato_df[i2,]
    x = as.numeric(x)
    x = x[1:174]
    
    x = ts(x,start = c(2003,1),frequency = 12)
    x = decompose(x)$trend
    x = x[-which(is.na(x))]
    
    x = (x -mean(x))/sd(x)
    return(x)
  }
  trend_fun3 <- function(i3){
    x = io_df[i3,]
    x = as.numeric(x)
    x = x[1:174]
    
    x = ts(x,start = c(2003,1),frequency = 12)
    x = decompose(x)$trend
    x = x[-which(is.na(x))]
    
    x = (x -mean(x))/sd(x)
    return(x)
  }
  
  i1 = 1:nrow(eura_df)
  i2= 1:nrow(ato_df)
  i3 = 1:nrow(io_df)
  
  eura_df <<- eura_df
  ato_df <<- ato_df
  io_df <<- io_df
  i1 <<- i1
  i2 <<- i2
  i3 <<- i3
  
  library(doParallel)
  cl = makeCluster(10)
  clusterExport(cl,c('i1','eura_df'))
  system.time(ret1 <- parLapply(cl,i1,trend_fun1))  
  stopCluster(cl)
  
  cl = makeCluster(10)
  clusterExport(cl,c('i2','ato_df'))
  system.time(ret2 <- parLapply(cl,i2,trend_fun2))  
  stopCluster(cl)
  
  cl = makeCluster(10)
  clusterExport(cl,c('i3','io_df'))
  system.time(ret3 <- parLapply(cl,i3,trend_fun3))  
  stopCluster(cl)
  
  eura_df = do.call(rbind,ret1)
  ato_df = do.call(rbind,ret2)
  io_df = do.call(rbind,ret3)
  
  output = 'output/mca_temperature_ocean_land'
  dir.create(output)
  output_eura= paste0(output,'/eura_temper.csv')
  output_atoio = paste0(output,'/atoio_temper.csv')
  output_loc1 =paste0(output,'/eura_loc.csv')
  output_loc2 = paste0(output,'/atoio_loc.csv')
  
  atoiodf = rbind(ato_df,io_df)
  
  fwrite(eura_df,output_eura)
  fwrite(atoiodf,output_atoio)
  fwrite(loc_eura,output_loc1)
  
  loc_atoio = rbind(loc_ato,loc_io)
  fwrite(loc_atoio,output_loc2)
  
  

  
  
  
  
  
  
  
  
}
preprocess_cmip6_extented_2100<-function(
  
){
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/filter_cmip6_data_to_date_2099.R")
  filter_cmip6_data_to_date_2099('E')
  filter_cmip6_data_to_date_2099('Pr')
  filter_cmip6_data_to_date_2099('T')
  
  combine_cmip6_data_his_ssp_2099('E')
  combine_cmip6_data_his_ssp_2099('Pr')
  combine_cmip6_data_his_ssp_2099('T')
  
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/preprocess_pmes_cmip6_insource.R")
  preprocess_pmes_cmip6_insource()
  
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/extent_adjust_cmip6_temperature.R")
  #extent_adjust_cmip6_temperature()
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/preprocess_temperature_cmip6_insource.R")
  preprocess_temperautre_cmip6_insource()
}
preprocess_pmes_cmip6_insource <-function(
  
){
  
  input = '/media/root/Shen_drive1/CMIP6_combined_2099/'
  var = c('Pr','E')
  
  input_pr = paste0(input,var[1])
  input_eva = paste0(input,var[2])
  
  mode = c('ssp245','ssp585')
  
  files = list.files(input_pr,full.names = T)
  files585 = list.files(files[2])
  files = list.files(files[1])
  
  sub_extract_model <-function(x){
    xn = strsplit(x,'_')[[1]][2]  
    return(xn)
  }
  models = lapply(files,sub_extract_model)
  models = do.call('c',models)
  
  input_pr_ssp245 = list.files(list.files(input_pr,full.names = T)[1],
                               full.names = T)
  input_pr_ssp585 = list.files(list.files(input_pr,full.names = T)[2],
                               full.names = T)
  input_eva_ssp245 = list.files(list.files(input_eva,full.names = T)[1],
                                full.names = T)
  input_eva_ssp585 = list.files(list.files(input_eva,full.names = T)[2],
                                full.names = T)
  
  input_pr_ssp245 <<- input_pr_ssp245
  input_pr_ssp585 <<- input_pr_ssp585
  input_eva_ssp245 <<- input_eva_ssp245
  input_eva_ssp585 <<- input_eva_ssp585
  
  # output_pme_ssps
  output = dir.create('Data/cmip6_pme_global_2099')
  output245 = 'Data/cmip6_pme_global_2099/hist_ssp245'
  output585 = 'Data/cmip6_pme_global_2099/hist_ssp585'
  
  dir.create(output245)
  dir.create(output585)
  
  output245 = paste0(output245,'/',files)
  output585 = paste0(output585,'/',files585)
  
  output245 <<- output245
  output585 <<- output585
  
  
  i = 1:8
  i <<- i
  sub_calc_pme_ssp245 <- function(i){
    setwd('/media/sdb5/Vapor_projcts/Vapor_tibet/')
    library(raster)
    
    tmpinput_pr = input_pr_ssp245[i]
    tmpinput_eva = input_eva_ssp245[i]
    tmpoutput_pme = output245[i]
    
    tmp_pr = stack(tmpinput_pr)
    tmp_eva = stack(tmpinput_eva)
    tmp_pr = tmp_pr * 30.5 * 86400
    tmp_eva = tmp_eva * 30.5 * 86400
    
    tmp_pme = tmp_pr - tmp_eva
    
    writeRaster(tmp_pme,tmpoutput_pme,overwrite = T)
    #print(i)
    
  }
  sub_calc_pme_ssp585 <- function(i){
    
    library(raster)
    setwd('/media/sdb5/Vapor_projcts/Vapor_tibet/')
    tmpinput_pr = input_pr_ssp585[i]
    tmpinput_eva = input_eva_ssp585[i]
    tmpoutput_pme = output585[i]
    
    tmp_pr = stack(tmpinput_pr)
    tmp_eva = stack(tmpinput_eva)
    tmp_pr = tmp_pr * 30.5 * 86400
    tmp_eva = tmp_eva * 30.5 * 86400
    
    tmp_pme = tmp_pr - tmp_eva
    
    writeRaster(tmp_pme,tmpoutput_pme,overwrite = T)
    
  }
  
  library(doParallel)
  cl = makeCluster(9)
  clusterExport(cl,c('input_pr_ssp245','input_eva_ssp245',
                     'i','output245'))
  parLapply(cl,i,sub_calc_pme_ssp245)
  stopCluster(cl)
  
  cl = makeCluster(9)
  clusterExport(cl,c('input_pr_ssp585','input_eva_ssp585',
                     'i','output585'))
  parLapply(cl,i,sub_calc_pme_ssp585)
  stopCluster(cl)
  
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/calc_cmip6_pme_by_source_tibet.R")
  calc_cmip6_pme_by_source_tibet('ato',models)
  calc_cmip6_pme_by_source_tibet('io',models)
  
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/calc_cmip6_pmemean_by_source_tibet.R")
  calc_cmip6_pmemean_by_source_tibet('ato',models)
  calc_cmip6_pmemean_by_source_tibet('io',models)
}
preprocess_temperautre_cmip6_insource <-function(
  
){
  
  input = '/media/root/Shen_drive1/CMIP6_combined_2099/'
  var = c('T')
  
  input_t = paste0(input,var[1])
  
  mode = c('ssp245','ssp585')
  
  files = list.files(input_t,full.names = T)
  files585 = list.files(files[2])
  files = list.files(files[1])
  
  sub_extract_model <-function(x){
    xn = strsplit(x,'_')[[1]][2]  
    return(xn)
  }
  models = lapply(files,sub_extract_model)
  models = do.call('c',models)
  
  input_t_ssp245 = list.files(list.files(input_t,full.names = T)[1],
                               full.names = T)
  input_t_ssp585 = list.files(list.files(input_t,full.names = T)[2],
                               full.names = T)
  
  input_t_ssp245 <<- input_t_ssp245
  input_t_ssp585 <<- input_t_ssp585

  # output_pme_ssps
  output = dir.create('Data/cmip6_t_global_2099')
  output245 = 'Data/cmip6_t_global_2099/hist_ssp245'
  output585 = 'Data/cmip6_t_global_2099/hist_ssp585'
  
  dir.create(output245)
  dir.create(output585)
  
  output245 = paste0(output245,'/',files)
  output585 = paste0(output585,'/',files585)
  
  output245 <<- output245
  output585 <<- output585
  
  
  i = 1:8
  i <<- i
  sub_calc_t_ssp245 <- function(i){
    setwd('/media/sdb5/Vapor_projcts/Vapor_tibet/')
    library(raster)
    
    tmpinput_t = input_t_ssp245[i]
    tmpoutput_t = output245[i]
    
    tmp_t = stack(tmpinput_t)
    tmp_t = tmp_t - 273.15
    
    writeRaster(tmp_t,tmpoutput_t,overwrite = T)
    #print(i)
    
  }
  sub_calc_t_ssp585 <- function(i){
    
    library(raster)
    setwd('/media/sdb5/Vapor_projcts/Vapor_tibet/')
    library(raster)
    
    tmpinput_t = input_t_ssp585[i]
    tmpoutput_t = output585[i]
    
    tmp_t = stack(tmpinput_t)
    tmp_t = tmp_t - 273.15
    
    
    writeRaster(tmp_t,tmpoutput_t,overwrite = T)
    
  }
  
  library(doParallel)
  cl = makeCluster(9)
  clusterExport(cl,c('input_t_ssp245',
                     'i','output245'))
  parLapply(cl,i,sub_calc_t_ssp245)
  stopCluster(cl)
  
  cl = makeCluster(9)
  clusterExport(cl,c('input_t_ssp585',
                     'i','output585'))
  parLapply(cl,i,sub_calc_t_ssp585)
  stopCluster(cl)
  
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/calc_cmip6_t_by_source_tibet.R")
  calc_cmip6_t_by_source_tibet('ato',models)
  calc_cmip6_t_by_source_tibet('io',models)
  calc_cmip6_t_by_source_tibet('tibet',models)
  
}
profile_analysis_particle_varep_across_tibet <-function(
  
){
  base = '/media/sdb5/Vapor_projcts/Vapor_tibet'
  setwd(base)
  input_traj = 'whole_time_traj/whole_time_traj_with_height_varep.csv'
  
  traj_varepdf = fread(input_traj)
  traj_varepdf = as.data.frame(traj_varepdf)
  
  id9 = which(traj_varepdf$routeid == 9 |
                traj_varepdf$routeid == 4)
  traj_varepdf = traj_varepdf[-id9,]
  
  cluster_shps =lapply(list.files('shp/cluster_tws_neg_shp_deter/',pattern = '*.shp$',
                                  full.names = T),
                       shapefile)
  #cluster_shps = do.call('bind',cluster_shps)
  
  # mask points by shps
  mask_points_by_shp <-function(df,shp){
    library(rgeos)
    library(raster)
    library(rgdal)
    library(sp)
    library(maptools)
    df = data.frame(long = df$long,lat = df$lat)
    coordinates(df) = ~long+lat
    crs(df)=crs(shp)
    df_m = over(df,shp)
    df_index = which(!is.na(df_m[,1]))
    print(df_index)
    return(df_index)
  }
  
  varep_trajdf = 1
  fulldf = 1
  i = 1:20
  i = i[-c(4,9)]
  for(i in i){
    tmpdf = traj_varepdf[which(traj_varepdf$routeid == i),]
    
    for(j in 1:3){
      tmpshp = cluster_shps[[j]]  
      tmpid = mask_points_by_shp(tmpdf,tmpshp)
      
      tmpdf$loc_status = 'none'
      if(length(tmpid)>0){
        mintmpid = min(tmpid)
        maxtmpid = max(tmpid)
        
        inid = 1:(mintmpid - 1)
        if(maxtmpid<38){
          outid = (maxtmpid+1):38
          midid = tmpid
          #tmpdf$loc_status = 1
          tmpdf$loc_status[inid] = 'before'
          tmpdf$loc_status[outid] = 'after'
          tmpdf$loc_status[midid] = 'in'
          
          tmpin = sum(tmpdf$varep[inid])
          tmpmid = sum(tmpdf$varep[midid])
          tmpout = sum(tmpdf$varep[outid])
          print(outid)
          
          retdf = data.frame(
            region = paste0('region',j),
            trajid = paste('traj',i),
            varep_before = tmpin,
            varep_in = tmpmid,
            varep_after = tmpout
          )
        }else{
          
          midid = tmpid  
          
          #tmpdf$loc_status = 1
          tmpdf$loc_status[inid] = 'before'
          tmpdf$loc_status[midid] = 'in'
          
          tmpin = sum(tmpdf$varep[inid])
          tmpmid = sum(tmpdf$varep[midid])
          
          retdf = data.frame(
            region = paste0('region',j),
            trajid = paste('traj',i),
            varep_before = tmpin,
            varep_in = tmpmid,
            varep_after = 0
          )
        }
        
        
        varep_trajdf = rbind(varep_trajdf,retdf)
        fulldf = rbind(fulldf,tmpdf)
      }
      
    }
    
  }
  fulldf = fulldf[-1,]
  varep_trajdf = varep_trajdf[-1,]
  
  
  fulldf1 = fulldf[-which(fulldf$routeid %in% c(1)),]
  fulldf1 = fulldf
  p  = ggplot()+
    geom_line(data = fulldf1,aes(x = long,y = height,color = factor(routeid)))+
    geom_vline(xintercept = 68)+
    geom_vline(xintercept = 102)+
    theme_bw()+
    facet_wrap(~region,nrow = 4)
  
  return(fulldf1)
}
profile_downstream_yrb3d<-function(
  
){
  library(raster)
  library(data.table)
  library(RColorBrewer)
  base = '/media/sdb5/Vapor_projcts/Vapor_tibet'
  setwd(base)
  source('/home/share/R_project/xinjiang_vapor/shp_management.R')
  source('/home/share/R_project/xinjiang_vapor/data_management.R')
  
  tibet = shp_management('tibet')
  world = shp_management('world')
  
  ex_tibet = extent(tibet)
  minlat = ex_tibet[3]
  maxlat = ex_tibet[4]
  minlong = ex_tibet[1]
  maxlong = ex_tibet[2]
  
  ex_box = extent(minlong-5,maxlong+5,minlat-5,maxlat+5)
  ex_box = as(ex_box,'SpatialPolygons')
  #crs(ex_box) = crs(tibet)
  
  #shapefile(ex_box,'shp/tibet_bigger_border2/border2.shp',
  #          overwrite = T)
  
  #ex_box = extent(ex_box[1]+10,ex_box[2]-10,ex_box[3]+10,ex_box[4]-10)
  dem = raster('Data/global_dem/elev.0.5-deg.nc')
  
  dem1 = crop(dem,extent(0,180,-90,90))
  dem2 = crop(dem,extent(180,360,-90,90))
  extent(dem2) = extent(-180,0,-90,90)
  dem = merge(dem1,dem2)
  
  #z = raster(nrow = 60,ncol = 360)
  #extent(z) = extent(dem)
  #dem = resample(dem,z)
  
  #dem = raster('Data/global_dem/elevation_10KMmd_SRTM.tif')
  world= shp_management('world')
  dem = crop(dem,extent(-180,180,0,90))
  dem = raster::mask(dem,world)
  
  ex1 = extent(tibet)
  ex1 = extent(ex1[1]-10,ex1[2]+10,
               ex1[3]-10,ex1[4]+10)
  
  
  raster2matrix <-function(dem){
    xyz = as.data.frame(dem,xy = T)
    x = unique(as.numeric(xyz[,1]))
    y = unique(as.numeric(xyz[,2]))
    
    or = order(y,decreasing = F)
    
    mat = matrix(xyz[,3],nrow = length(x))
    #mat = mat[,or]
    
    rownames(mat) = x
    colnames(mat) = y
    return(mat)
  }
  
  library(rayshader)
  demdf2 = raster2matrix(dem)
  
  longlat  = as.data.frame(dem,xy = T)
  long = unique(as.numeric(longlat$x))
  lat = unique(as.numeric(longlat$y))
  
  traj = as.data.frame(fread('whole_time_traj/whole_time_traj_with_height_varep.csv'))
  traj = traj[-which(traj$routeid==9),]
  traj1 = traj[which(traj$routeid == 1),]
  traj_group = group_by(traj,routeid)
  
  traj_jet = as.data.frame(
    fread('whole_time_traj/trajs_intermedia.csv')
  )
  traj_jet1 = traj_jet
  traj_jet = group_by(traj_jet,routeid)
  
  set_neg_value_zero <-function(x){
    x = as.numeric(x)
    subs<-function(x1){
      x1 = as.numeric(x1)
      if(is.na(x1)){
        x1 = x1
      }else{
        if(x1 <=0){
          x1 = 0
        }else{
          x1 = x1
        }
      }
      return(x1)
    }
    x = sapply(x,subs)
    return(x)
    
  }
  demdf2 = apply(demdf2, 2, set_neg_value_zero)
  
  world1 =crop(world,extent(-180,180,0,90))
  worlddf = fortify(world1)
  worlddf$height = -100
  worlddf = group_by(worlddf,group)
  
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/layout_plotly_3d_main.R")
  ret_set = layout_plotly_3d_main()
  legend_set = ret_set[[1]]
  xaxis = ret_set[[2]]
  yaxis = ret_set[[3]]
  zaxis = ret_set[[4]]
  
  library(RColorBrewer)
  traj_col = brewer.pal(9,'Spectral')
  traj_col = colorRampPalette(traj_col)(50)
  traj_col = traj_col[seq(1,9*3,3)]
  
  ear_col = c(hcl.colors(9,'Earth'))
  
  
  
  
  fig = plot_ly() %>%
    add_trace(z= ~t(demdf2),
              x = ~long,
              y = ~lat,
              type = 'surface',
              #fill= filllevels,
              colorbar=list(title='Altitude (m)'),
              
              #n= 10,
              colors = 'Spectral',
              #colorscale = 'Portland',
              #colors = ear_col,
              reversescale =T,
              legendgroup = 'Altitude',
              inherit = F,
              name = 'tile')
  
  fig1leg = fig
  
  i = 1:20
  i = i[-9]
  for(i in i){
    tmptraj = traj_group[which(traj_group$routeid == i),]
    
    if(is.na(tmptraj$region)){
      tmpcol = traj_col[6]
    }else{
      if(unique(tmptraj$region) == 'AS'){
        tmpcol = traj_col[1]
      }else if(unique(tmptraj$region) == 'CS'){
        tmpcol = traj_col[2]
      }else if(unique(tmptraj$region) == 'ATO'){
        tmpcol = traj_col[3]
      }else if(unique(tmptraj$region) == 'NAF'){
        tmpcol = traj_col[4]
      }else if(unique(tmptraj$region) == 'EU'){
        tmpcol = traj_col[5]
      }else if(unique(tmptraj$region) == 'MS'){
        tmpcol = traj_col[7]
      }else if(unique(tmptraj$region) == 'IO'){
        tmpcol = traj_col[8]
      }else if(unique(tmptraj$region) == 'BS'){
        tmpcol = traj_col[9]
      }
    }
    
    
    fig = fig %>%
      add_trace(data = tmptraj,
                y = ~lat, 
                x = ~long, 
                z = ~height, 
                
                mode = "lines", 
                type = "scatter3d", 
                #color = ~factor(region),
                legendgroup = 'Trajectory',
                line = list(width = 5,color= tmpcol),
                inherit = T)
  }
  
  fig = fig %>%
    add_trace(data = worlddf,
              x = worlddf$long,
              y = worlddf$lat,
              z = worlddf$height,
              type = 'scatter3d',
              line = list(color = 'black'),
              mode =  'lines') %>%
    add_trace(data = traj_jet,
              x = traj_jet$long,
              y = traj_jet$lat,
              z = traj_jet$height,
              type = 'scatter3d',
              line = list(color = '#000080',
                          width = 5),
              mode =  'lines')
  
  
  scene1 = list(
    xaxis = xaxis,
    yaxis = yaxis,
    zaxis = zaxis,
    yaxis = list(title = 'Sepal Width (cm)'),
    legend = legend_set,
    aspectmode = 'manual',
    aspectratio = list(x = 1.5,y = 1,z = 0.3),
    camera = list(eye = list(x = 0.01, y = -1.6, z = 0.3)))
  
  fig1 = fig %>% layout(scene = scene1) %>% layout(showlegend = F)
  fig1leg = fig1leg %>% layout(scene = scene1) 
  
  scene1r = list(
    xaxis = xaxis,
    yaxis = yaxis,
    zaxis = zaxis,
    yaxis = list(title = 'Sepal Width (cm)'),
    legend = legend_set,
    aspectmode = 'manual',
    aspectratio = list(x = 1.5,y = 1,z = 0.3),
    camera = list(eye = list(x = -0.01, y = 1.6, z = 0.3)))
  
  
  fig1r = fig %>% layout(scene = scene1r)
  
  dir.create('main_plot/fig1/')
  output1 = 'main_plot/fig1/fig1-1-withleg.svg'
  output1leg = 'main_plot/fig1/fig1-1leg.svg'
  output2 = 'main_plot/fig1/fig1-1-rev.svg'
  orca(fig1,output1,width = 1500,height = 800,scale = 1)
  orca(fig1leg,output1leg,width = 1500,height = 800,scale = 1)
  
  orca(fig1r,output2,width = 1500,height = 800,scale = 1)
  
  
  # ggplot
  input_contr = 'main_plot_data/fig1/long_term_mean_contr_raster.csv'
  contr_rast  = as.data.frame(fread(input_contr))
  naid = which(is.na(contr_rast[,3]))
  contr_rast = contr_rast[-naid,]
  contr_rast$cuts = cut(contr_rast$contr_rate,
                        breaks = c(seq(0,5,0.5),15,20,25,45),
                        right = F)
  nclass = length(unique(contr_rast$cuts))
  
  fil_blue = colorRampPalette(brewer.pal(9,'Blues'))(nclass*10)
  fil_blue = fil_blue[seq(1,nclass*5,5)+30]
  show_col(fil_blue)
  
  demdf = as.data.frame(dem,xy = T)
  colnames(demdf) = c('long','lat','dem')
  naid = which(is.na(demdf$dem))
  demdf = demdf[-naid,]
  demdf$dem[which(demdf$dem<0)] = 0
  library(ggplot2)
  
  traj_group2= traj
  traj_group2$region[which(traj_group2$region == 'ATO')] = 'NATO'
  traj_group2$region[which(is.na(traj_group2$region))] = 'NA'
  traj_col2 = c('AS' = traj_col[1],
                'CS' = traj_col[2],
                'NATO' = traj_col[3],
                'NAF' = traj_col[4],
                'EU' = traj_col[5],
                'NA' = traj_col[6],
                'MS'= traj_col[7],
                "IO" = traj_col[8],
                'BS' = traj_col[9])
  
  traj_mid = traj_group2[which(traj_group2$variable %in%
                                 paste0('long',1:19)),]
  
  tibet = shp_management('tibet')
  ex_tibet = as(extent(tibet),'SpatialPolygons')
  
  pg = ggplot()+
    geom_tile(data = contr_rast,
              aes(x = x, y = y,
                  fill = cuts))+
    geom_hline(yintercept = 15,color = 'black',
               linetype = 'dashed')+
    geom_hline(yintercept = 60,color = 'black',
               linetype = 'dashed')+
    
    geom_polygon(data = world1,
                 aes(x = long,y = lat,group = group),
                 color = 'black',
                 size = 0.5,
                 fill = 'transparent')+
    geom_polygon(data =tibet,
                 aes(x = long,y = lat,group= group),
                 color= 'black',
                 size= 0.5,
                 fill = 'transparent')+
    geom_path(data = traj_jet1,
              aes(x = long,y = lat,group= routeid),
              size = 0.5,
              #linetype = 'dashed',
              color = '#000080',
              #alpha = 0.5,
              arrow = arrow(20,
                            length = unit(0.25,'cm'),
                            type = 'open'))+
    geom_path(data = traj_group2,
              aes(x = long,y = lat,group= routeid,
                  color = factor(region)),
              size = 0.5,
              arrow = arrow(20,
                            length = unit(0.25,'cm'),
                            type = 'open'),
              show.legend = F)+
    geom_polygon(data =ex_tibet,
                 aes(x = long,y = lat,group= group),
                 color= 'black',
                 size= 0.1,
                 fill = 'transparent')+
    scale_color_manual(values = traj_col2,
                       guide = guide_legend(
                         title = 'Water vapor trajectories',
                         title.position = 'top',
                         nrow = 3
                       ))+
    #scale_fill_distiller(palette = 'Spectral')+
    scale_fill_manual(values = fil_blue,
                      guide = guide_legend(
                        title = 'Particle-scale water vapor contribution rates (1/1000000)',
                        title.position = 'top',
                        nrow = 2
                      ))+
    scale_x_continuous(breaks = seq(-180,180,90),
                       labels = c(paste0(seq(180,90,-90),'°W'),
                                  paste0(0,'°'),
                                  paste0(seq(90,180,90),'°E')))+
    scale_y_continuous(breaks = c(0,15,60,90),
                       labels = paste0(c(0,15,60,90),'°N'))+
    #facet_wrap(routeid ~ ., nrow = 4)+
    theme_bw()+
    theme(legend.position = 'none')
  
  pg2 = ggplot()+
    geom_polygon(data =tibet,
                 aes(x = long,y = lat,group= group),
                 color= 'black',
                 size= 0.5,
                 fill = 'white',
                 alpha  = 0.5)+
    geom_path(data = traj_jet1,
              aes(x = long,y = lat,group= routeid),
              size = 0.5,
              #linetype = 'dashed',
              color = '#000080',
              #alpha = 0.5,
              arrow = arrow(20,
                            length = unit(0.35,'cm'),
                            type = 'open'))+
    #facet_wrap(routeid ~ ., nrow = 4)+
    theme_bw()+
    theme(legend.position = 'none')
  
  
  fontsize = 14-2
  text_theme = theme(
    legend.text = element_text(size = fontsize,color = 'black'),
    axis.text = element_text(size = fontsize,color = 'black'),
    axis.title = element_blank(),
    #axis.title = element_text(size = fontsize,color = 'black'),
    legend.title = element_text(size = fontsize,color = 'black'),
    strip.text = element_text(size = fontsize,color = 'black')
  )
  
  pg = pg + text_theme + 
    theme(panel.grid = element_line(color = 'transparent'))
  
  pg2 = pg2 + theme_void()+
    theme(panel.background = element_rect(fill = 'transparent',
                                          color = 'black'),
          plot.background = element_rect(fill = 'transparent',
                                         color = 'black'))
  
  pg12 = ggdraw(pg)+
    draw_plot(pg2,x = 0.84,y = 0.1,
              width = 0.15,height = 0.25)
  
  
  
  png('main_plot/fig1/fig1_map_12.png',
      width = 23.05,
      height = 8,
      units = 'cm',
      res = 800)
  print(pg12)
  dev.off()
  
  
  
  library(ggpubr)
  pg_theme = as_ggplot(get_legend(
    pg + theme(legend.position = 'bottom')
  ))
  
  
  
  png('main_plot/fig1/fig1_map_theme2.png',
      width = 24,
      height = 8,
      units = 'cm',
      res = 800)
  print(pg_theme)
  dev.off()
  
  
  
  
  
  
  
}
proj_north_move_border <-function(
  d1,
  d2,
  borderdf
){
  d2_p = d2
  coordinates(d2_p) = ~long+lat
  d2l = as(d2_p,"SpatialLines")
  
  i = 2:nrow(d1)
  for( i in i){
    d1_p = d1[1:i,]
    
    coordinates(d1_p) = ~long+lat
    d1l = as(d1_p,"SpatialLines")
    
    cond = gIntersects(d1l,d2l)
    if(cond){
      joint_p = gIntersection(d1l,d2l)
      break
    }
  }
  
  if(cond == T){
    joint_p = as.data.frame(joint_p,xy = T)
    joint_p = joint_p[1,]
    li1 = d1[1:(i-1),]
    
    
    jp1 = SpatialPoints(joint_p)
    for(i in 2:nrow(d2)){
      d2_p = d2[1:i,]
      
      coordinates(d2_p) = ~long+lat
      d2l = as(d2_p,"SpatialLines")
      
      cond = distance(jp1,d2l,lonlat = T)
      if(cond < 0.1){
        break
      }
    }
    
    li2 = d2[i:nrow(d2),]
    
    li1$part = 'left'
    li2$part = 'right'
    joint_p$part = 'joint'
    
    colnames(joint_p) = c('long','lat','part')
    li1li2_outter = rbind(li1,joint_p,li2)
    
  }else{
    
    
    d21 = d2[1,1:2]
    d22 = pointDistance(d21,d1[,1:2],lonlat = T)
    minid = which(d22 == min(d22))
    if(minid != nrow(d1)){
      d1 = d1[1:minid,]
    }else{
      d1 = d1
    }
    
    d1$part = 'left'
    d2$part = 'right'
    
    li1li2_outter = rbind(d1,d2)
  }
  
  
  
  
  
  
  return(li1li2_outter)
}
proj_north_move_border2 <-function(
  d1,
  d2,
  borderdf
){
  d2_p = d2
  coordinates(d2_p) = ~long+lat
  d2l = as(d2_p,"SpatialLines")
  
  i = 2:nrow(d1)
  for( i in i){
    d1_p = d1[1:i,]
    
    coordinates(d1_p) = ~long+lat
    d1l = as(d1_p,"SpatialLines")
    
    cond = gIntersects(d1l,d2l)
    if(cond){
      joint_p = gIntersection(d1l,d2l)
      break
    }
  }
  
  if(cond == T){
    joint_p = as.data.frame(joint_p,xy = T)
    joint_p = joint_p[1,]
    li1 = d1[1:(i-1),]
    
    
    jp1 = SpatialPoints(joint_p)
    for(i in 2:nrow(d2)){
      d2_p = d2[1:i,]
      
      coordinates(d2_p) = ~long+lat
      d2l = as(d2_p,"SpatialLines")
      
      cond = distance(jp1,d2l,lonlat = T)
      if(cond < 0.1){
        break
      }
    }
    
    li2 = d2[i:nrow(d2),]
    
    li1$part = 'left'
    li2$part = 'right'
    joint_p$part = 'joint'
    
    colnames(joint_p) = c('long','lat','part')
    li1li2_outter = rbind(li1,joint_p,li2)
    
  }else{
    
    
    d21 = d2[1,1:2]
    d22 = pointDistance(d21,d1[,1:2],lonlat = T)
    minid = which(d22 == min(d22))
    if(minid != nrow(d1)){
      d1 = d1[1:minid,]
    }else{
      d1 = d1
    }
    
    d1$part = 'left'
    d2$part = 'right'
    
    li1li2_outter = rbind(d1,d2)
  }
  
  
  return(list(d1,d2))
  
  
  
  return(li1li2_outter)
}
project_fut_pos_area_cnn<-function(
  twsfut
){
  standard_fun_index_tws <-function(x){
    xs = x/sd(x)
    return(xs)
  }
  
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/tws_pos_area_vs_annual_tws.R")
  pos_area = tws_pos_area_vs_annual_tws()
  pos_area = pos_area / 10000
  
  mean_pos = mean(pos_area)
  sd_pos = sd(pos_area)
  
  pos_area = (pos_area-mean_pos)/sd_pos
  
  twsdf = import_index_insource_tibet(var = 'tws_tibet')  
  twsdf = apply(twsdf,2,standard_fun_index_tws)
  twsdf = twsdf[,1:2]
  stand_fun2<-function(x){
    x = (x-mean(x))/sd(x)
    return(x)
  }
  #twsdf = apply(twsdf,2,stand_fun2)
  
  to_annual<-function(x){
    x = c(rep(NA,6),x)
    #x = c(rep(NA,6),x)
    xm = matrix(x,nrow = 12)
    xa = apply(xm,2,sum,na.rm = T)
    return(xa)
  }
  
  twsann = apply(twsdf,2,to_annual)
  colnames(twsann) = c('region1','region2')
  twsann = apply(twsann,2,stand_fun2)
  
  id = round(0.7 * length(pos_area))
  trainid = 1:id
  testid = id:length(pos_area)
  
  
  df = data.frame(pos_area = pos_area,
                  twsann)
  train = df[trainid,]
  test = df[testid,]
  
  
  model_best = glm(pos_area~.,data = train)
  
  fit = predict(model_best,test)
  
  
  to_annual_twsfut<-function(x){
    sid = length(x)-5
    eid = length(x)
    x = x[-c(sid:eid)]
    
    xm = matrix(x,nrow = 12)
    xm = apply(xm,2,sum,na.rm = T)
    return(xm)
  }
  #twsfut = df
  tws_fut_ann = apply(twsfut,2,to_annual_twsfut)
  tws_fut_ann = apply(tws_fut_ann,2,stand_fun2)
  
  tws245 = data.frame(region1 = tws_fut_ann[,1],
                      region2 = tws_fut_ann[,3])
  tws585 = data.frame(
    region1 = tws_fut_ann[,2],
    region2 = tws_fut_ann[,4]
  )
  predict_pos_area<-function(x){
    proj = predict(model_best,x)
    return(proj)
  }
  
  posfut245_st = predict_pos_area(tws245)
  posfut585_st = predict_pos_area(tws585)
  
  retdf = data.frame(
    pos245 = c(posfut245_st),
    pos585 = c(posfut585_st)
  )
  
  
  
  return(retdf)
}
project_fut_pos_area<-function(
  twsfut
){
  standard_fun_index_tws <-function(x){
    xs = x/(sd(x))
    return(xs)
  }
  
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/tws_pos_area_vs_annual_tws.R")
  pos_area = tws_pos_area_vs_annual_tws()
  pos_area = pos_area / 10000
  
  #min_pos = min(pos_area)
  #max_pos = max(pos_area)
  
  #pos_area = (pos_area-min_pos)/(max_pos - min_pos)
  
  twsdf = import_index_insource_tibet(var = 'tws_tibet')  
  twsdf = apply(twsdf,2,standard_fun_index_tws)
  twsdf = twsdf[,1:2]
  stand_fun2<-function(x){
    x = (x-min(x))/(max(x)-min(x))
    return(x)
  }
  #twsdf = apply(twsdf,2,stand_fun2)
  
  to_annual<-function(x){
    x = c(rep(NA,6),x)
    #x = c(rep(NA,6),x)
    xm = matrix(x,nrow = 12)
    xa = apply(xm,2,sum,na.rm = T)
    return(xa)
  }
  
  twsann = apply(twsdf,2,to_annual)
  colnames(twsann) = c('region1','region2')
  twsann = apply(twsann,2,stand_fun2)
  
  id = round(0.7 * length(pos_area))
  trainid = 1:id
  testid = id:length(pos_area)
  
  
  df = data.frame(pos_area = pos_area,
                  twsann)
  train = df[trainid,]
  test = df[testid,]
  
  
  model_best = glm(pos_area~.,data = train)
  
  fit = predict(model_best,test)
  
  
  to_annual_twsfut<-function(x){
    sid = length(x)-5
    eid = length(x)
    x = x[-c(sid:eid)]
   
    xm = matrix(x,nrow = 12)
    xm = apply(xm,2,sum,na.rm = T)
    return(xm)
  }
  #twsfut = df
  tws_fut_ann = apply(twsfut,2,to_annual_twsfut)
  tws_fut_ann = apply(tws_fut_ann,2,stand_fun2)
  
  
  tws245 = data.frame(region1 = tws_fut_ann[,1],
                      region2 = tws_fut_ann[,3])
  tws585 = data.frame(
    region1 = tws_fut_ann[,2],
    region2 = tws_fut_ann[,4]
  )
  predict_pos_area<-function(x){
    proj = predict(model_best,x)
    return(proj)
  }
  
  posfut245_st = predict_pos_area(tws245)
  posfut585_st = predict_pos_area(tws585)
  
  retdf = data.frame(
    pos245 = c(posfut245_st),
    pos585 = c(posfut585_st)
  )
  
  
  
  return(retdf)
}
project_fut_pos_area2_hist_based_twsandsnow<-function(
  twsfut,snowfut
){
  standard_fun_index_tws <-function(x){
    xs = x/sd(x)
    return(xs)
  }
  stand_fun2<-function(x){
    x = x/sd(x)
    return(x)
  }
  stand_fun_cmip6<-function(x){
    x = x/sds
    return(x)
  }
  stand_fun_snow <- function(x){
    x = (x-mean(x))/sd(x)
    return(x)
  }
  
  pos_area = as.data.frame(fread('output/pos_area/pos_area.csv'))
  pos_area = as.numeric(pos_area[,1])
  pos_area = pos_area / 10000
  #mean_pos = mean(pos_area)
  #sdpos = sd(pos_area)
  
  #pos_area = (pos_area-mean_pos)/(sdpos)
  
  twsdf = import_index_insource_tibet(var = 'tws_tibet')  
  twsdf = apply(twsdf,2,standard_fun_index_tws)
  twsdf = twsdf[,1:2]
  
  snow = import_index_insource_tibet('snowcover')
  snow = snow[,1:2]
  
  colnames(twsdf) = c('tws1','tws2')
  colnames(snow) = c('snow1','snow2')
  
  
  to_annual<-function(x){
    x = c(rep(NA,6),x)
    xm = matrix(x,nrow = 12)
    xa = apply(xm,2,sum,na.rm = T)
    return(xa)
  }
  
  twsann = apply(twsdf,2,to_annual)
  twsann = apply(twsann,2,stand_fun2)
  
  snowann = apply(snow,2,to_annual)
  snowann = apply(snowann,2,stand_fun_snow)
  
  trainid = 1:round(0.8*14)
  testid = (round(0.8*14)):14
  
  train = data.frame(
    pos_area = pos_area[trainid],
    twsann[trainid,],
    snowann[trainid,])
  test = data.frame(
    pos_area = pos_area[testid],
    twsann[testid,],
    snowann[testid,])
  
  
  to_annual_cmip6<-function(x){
    
    sid = length(x)-5
    eid = length(x)
    x = x[-c(sid:eid)]
    
    x = c(rep(NA,6),x)
    xm = matrix(x,nrow = 12)
    xa = apply(xm,2,sum,na.rm = T)
    return(xa)
  }
  
  twsdf245 = twsfut[1:1152,c(1,3)]
  twsdf585 = twsfut[1:1152,c(2,4)]
  snow245 = snowfut[1:1152,c(1,3)]
  snow585 = snowfut[1:1152,c(2,4)]
  
  
  twsdf245 = apply(twsdf245,2,to_annual_cmip6)
  twsdf585 = apply(twsdf585,2,to_annual_cmip6)
  snow245 = apply(snow245,2,to_annual_cmip6)
  snow585 = apply(snow585,2,to_annual_cmip6)
  #means = mean(c(twsdf245,twsdf585),na.rm = T)
  sds = sd(c(twsdf245,twsdf585),na.rm = T)
  
  twsdf245 = apply(twsdf245,2,stand_fun_cmip6)
  twsdf585 = apply(twsdf585,2,stand_fun_cmip6)
  snow245 = apply(snow245,2,stand_fun_snow)
  snow585 = apply(snow585,2,stand_fun_snow)
  
  
  colnames(twsdf245) = colnames(twsdf)
  colnames(twsdf585) = colnames(twsdf)
  colnames(snow245) = colnames(snow)
  colnames(snow585) = colnames(snow)
  
  model = lm(pos_area ~., data = train)
  
  fit = predict(model,test,
                interval = 'confidence')
  
  fut245 = data.frame(twsdf245[16:96,],
                      snow245[16:96,])
  fut585 = data.frame(twsdf585[16:96,],
                      snow585[16:96,])
  
  posarea245 = predict(model,fut245,
                       interval = 'confidence')
  posarea585 = predict(model,fut585,
                       interval = 'confidence')
  
  retdf = data.frame(
    pos_area245 = posarea245,
    pos_area585 = posarea585
  )
  
  
  return(retdf)
}
project_fut_pos_area2_hist_based<-function(
  twsfut
){
  standard_fun_index_tws <-function(x){
    xs = x/sd(x)
    return(xs)
  }
  stand_fun2<-function(x){
    x = x/sd(x)
    return(x)
  }
  stand_fun_cmip6<-function(x){
    x = x/sds
    return(x)
  }
  
  pos_area = as.data.frame(fread('output/pos_area/pos_area.csv'))
  pos_area = as.numeric(pos_area[,1])
  pos_area = pos_area / 10000
  #mean_pos = mean(pos_area)
  #sdpos = sd(pos_area)
  
  #pos_area = (pos_area-mean_pos)/(sdpos)
  
  twsdf = import_index_insource_tibet(var = 'tws_tibet')  
  twsdf = apply(twsdf,2,standard_fun_index_tws)
  twsdf = twsdf[,1:2]
  
  
  colnames(twsdf) = c('region1','region2')
  
  to_annual<-function(x){
    x = c(rep(NA,6),x)
    xm = matrix(x,nrow = 12)
    xa = apply(xm,2,sum,na.rm = T)
    return(xa)
  }
  
  twsann = apply(twsdf,2,to_annual)
  twsann = apply(twsann,2,stand_fun2)
  
  trainid = 1:round(0.8*14)
  testid = (round(0.8*14)):14
  
  train = data.frame(
    pos_area = pos_area[trainid],
    twsann[trainid,])
  test = data.frame(
    pos_area = pos_area[testid],
    twsann[testid,])
  
  
  to_annual_cmip6<-function(x){
    
    sid = length(x)-5
    eid = length(x)
    x = x[-c(sid:eid)]
    
    x = c(rep(NA,6),x)
    xm = matrix(x,nrow = 12)
    xa = apply(xm,2,sum,na.rm = T)
    return(xa)
  }
  
  twsdf245 = twsfut[1:1152,c(1,3)]
  twsdf585 = twsfut[1:1152,c(2,4)]
  
  twsdf245 = apply(twsdf245,2,to_annual_cmip6)
  twsdf585 = apply(twsdf585,2,to_annual_cmip6)
  
  #means = mean(c(twsdf245,twsdf585),na.rm = T)
  sds = sd(c(twsdf245,twsdf585),na.rm = T)
  
  twsdf245 = apply(twsdf245,2,stand_fun_cmip6)
  twsdf585 = apply(twsdf585,2,stand_fun_cmip6)
  
  colnames(twsdf245) = colnames(twsdf)
  colnames(twsdf585) = colnames(twsdf)
  
  model = lm(pos_area ~., data = train)
  
  fit = predict(model,test,
                interval = 'confidence')
  
  fut245 = data.frame(twsdf245[16:96,])
  fut585 = data.frame(twsdf585[16:96,])
  
  posarea245 = predict(model,fut245,
                       interval = 'confidence')
  posarea585 = predict(model,fut585,
                       interval = 'confidence')
  
  retdf = data.frame(
    pos_area245 = posarea245,
    pos_area585 = posarea585
  )
 
  
  return(retdf)
}
project_fut_pos_area2_normal<-function(
  twsfut
){
  standard_fun_index_tws <-function(x){
    xs = x/sd(x)
    return(xs)
  }
  stand_fun2<-function(x){
    x = x/sd(x)
    return(x)
  }
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/tws_pos_area_vs_annual_tws.R")
  pos_area = tws_pos_area_vs_annual_tws()
  pos_area = pos_area / 10000
  
  #min_pos = min(pos_area)
  #max_pos = max(pos_area)
  
  #pos_area = (pos_area-min_pos)/(max_pos - min_pos)
  
  twsdf = import_index_insource_tibet(var = 'tws_tibet')  
  twsdf = apply(twsdf,2,standard_fun_index_tws)
  twsdf = twsdf[,1:2]
  
  colnames(twsdf) = c('region1','region2')
  twsdf245 = twsfut[175:1152,c(1,3)]
  twsdf585 = twsfut[175:1152,c(2,4)]
  colnames(twsdf245) = colnames(twsdf)
  colnames(twsdf585) = colnames(twsdf)
  
  twsdf245 = rbind(twsdf,twsdf245)
  twsdf585 = rbind(twsdf,twsdf585)
  
  to_annual<-function(x){
    x = c(rep(NA,6),x)
    
    sid = length(x)-5
    eid = length(x)
    x = x[-c(sid:eid)]
    
    #x = c(rep(NA,6),x)
    xm = matrix(x,nrow = 12)
    xa = apply(xm,2,sum,na.rm = T)
    return(xa)
  }
  
  twsann245 = apply(twsdf245,2,to_annual)
  twsann585 = apply(twsdf585,2,to_annual)
  
  twsann245 = apply(twsann245,2,stand_fun2)
  twsann585 = apply(twsann585,2,stand_fun2)
  
  trainid = 1:round(0.85*14)
  testid = (round(0.85*14)-3):14
  
  train245 = data.frame(
    pos_area = pos_area[trainid],
    twsann245[trainid,])
  test245 = data.frame(
    pos_area = pos_area[testid],
    twsann245[testid,])
  train585 = data.frame(
    pos_area = pos_area[trainid],
    twsann585[trainid,])
  test585 = data.frame(
    pos_area = pos_area[testid],
    twsann585[testid,])
  
  
  model245 = lm(pos_area ~., data = train245)
  model585 = lm(pos_area ~., data = train585)
  
  fit245 = predict(model245,test245)
  fit585 = predict(model585,test585)
  
  fut245 = data.frame(twsann245[15:95,])
  fut585 = data.frame(twsann585[15:95,])
  
  posarea245 = predict(model245,fut245)
  posarea585 = predict(model585,fut585)
  
  retdf = data.frame(
    pos_area245 = posarea245,
    pos_area585 = posarea585
  )
  
  
  
  
  
  return(retdf)
}
project_fut_pos_area3_normal<-function(
  twsfut
){
  standard_fun_index_tws <-function(x){
    xs = (x-min(x))/(max(x)-min(x))
    return(xs)
  }
  stand_fun2<-function(x){
    x = (x-min(x))/(max(x)-min(x))
    return(x)
  }
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/tws_pos_area_vs_annual_tws.R")
  pos_area = tws_pos_area_vs_annual_tws()
  pos_area = pos_area / 10000
  
  #min_pos = min(pos_area)
  #max_pos = max(pos_area)
  
  #pos_area = (pos_area-min_pos)/(max_pos - min_pos)
  
  twsdf = import_index_insource_tibet(var = 'tws_tibet')  
  twsdf = apply(twsdf,2,standard_fun_index_tws)
  twsdf = twsdf[,1:2]
  
  colnames(twsdf) = c('region1','region2')
  twsdf245 = twsfut[175:1152,c(1,3)]
  twsdf585 = twsfut[175:1152,c(2,4)]
  colnames(twsdf245) = colnames(twsdf)
  colnames(twsdf585) = colnames(twsdf)
  
  twsdf245 = rbind(twsdf,twsdf245)
  twsdf585 = rbind(twsdf,twsdf585)
  
  to_annual<-function(x){
    x = c(rep(NA,6),x)
    
    sid = length(x)-5
    eid = length(x)
    x = x[-c(sid:eid)]
    
    #x = c(rep(NA,6),x)
    xm = matrix(x,nrow = 12)
    xa = apply(xm,2,sum,na.rm = T)
    return(xa)
  }
  
  twsann245 = apply(twsdf245,2,to_annual)
  twsann585 = apply(twsdf585,2,to_annual)
  
  twsann245 = apply(twsann245,2,stand_fun2)
  twsann585 = apply(twsann585,2,stand_fun2)
  
  trainid = 1:round(0.85*14)
  testid = (round(0.85*14)-3):14
  
  train245 = data.frame(
    pos_area = pos_area[trainid],
    twsann245[trainid,])
  test245 = data.frame(
    pos_area = pos_area[testid],
    twsann245[testid,])
  train585 = data.frame(
    pos_area = pos_area[trainid],
    twsann585[trainid,])
  test585 = data.frame(
    pos_area = pos_area[testid],
    twsann585[testid,])
  
  
  model245 = lm(pos_area ~., data = train245)
  model585 = lm(pos_area ~., data = train585)
  
  fit245 = predict(model245,test245)
  fit585 = predict(model585,test585)
  
  fut245 = data.frame(twsann245[15:95,])
  fut585 = data.frame(twsann585[15:95,])
  
  posarea245 = predict(model245,fut245)
  posarea585 = predict(model585,fut585)
  
  retdf = data.frame(
    pos_area245 = posarea245,
    pos_area585 = posarea585
  )
  
  
  
  
  
  return(retdf)
}
project_pmes_fun<-function(
  pme_ori3,
  pmeato,
  models
){
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/cnn_model_predict_pme.R")
  
  pme_ori3 = pmeato_ori3
  i = 1:ncol(pmeato)
  
  sub_fun<-function(i){
    
    df = data.frame(
      pme = pme_ori3,
      pmecmip6 = pmeato[1:162,i]
    )
    
    df_project = data.frame(
      pmecmip6 = pmeato[,i]
    )
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/cnn_model_predict_pme.R")
    ret = cnn_model_predict_pme(df,df_project,
                                models[i],mode = 'ssp245')

  }
  
  i <<- i 
  pme_ori3 <<- pme_ori3
  pmeato <<- pmeato
  models <<- models
  
  library(doParallel)
  cl = makeCluster(10)
  clusterExport(cl,c('pme_ori3','pmeato','models'))
  ret = parLapply(cl,i,sub_fun)
  stopCluster(cl)
  
  ret = do.call('cbind',ret)
  return(ret)
  
}
project_pos_area_by_model_with_noproj_pme_tws<-function(
  
){
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/project_tws_in_south_tp12_by_trainonhist_random_nonproj_pme_temper.R")
  ret_li = project_tws_in_south_tp12_by_trainonhist_random_nonproj_pme_temper()
  
  ret_li = ret_li[[2]]
  tws1_245 = ret_li[[1]]
  tws1_585 = ret_li[[2]]
  tws2_245 = ret_li[[3]]
  tws2_585 = ret_li[[4]]
  
  
  i = 1:9
  i <<- i
  sub_predict_pos <-function(i){
    twsfut = data.frame(
      tws1_245[,i],
      tws1_585[,i],
      tws2_245[,i],
      tws2_585[,i]
    )
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/project_fut_pos_area2_hist_based.R")
    retpos = project_fut_pos_area2_hist_based(twsfut)
    
  }
  
  ret_pos = lapply(i,sub_predict_pos)
  
  ret_pos245_fun_fit<-function(i){
    ret = ret_pos[[i]][,1]
    return(ret)
  }
  
  ret_pos245_fun_lwr<-function(i){
    ret = ret_pos[[i]][,2]
    return(ret)
  }
  
  ret_pos245_fun_upr<-function(i){
    ret = ret_pos[[i]][,3]
    return(ret)
  }
  
  
  
  ret_pos585_fun_fit<-function(i){
    ret = ret_pos[[i]][,4]
    return(ret)
  }
  
  ret_pos585_fun_lwr<-function(i){
    ret = ret_pos[[i]][,5]
    return(ret)
  }
  
  ret_pos585_fun_upr<-function(i){
    ret = ret_pos[[i]][,6]
    return(ret)
  }
  
  pos245_fit = do.call(cbind,lapply(i,ret_pos245_fun_fit))
  pos245_lwr = do.call(cbind,lapply(i,ret_pos245_fun_lwr))
  pos245_upr = do.call(cbind,lapply(i,ret_pos245_fun_upr))
  
  pos585_fit = do.call(cbind,lapply(i,ret_pos585_fun_fit))
  pos585_lwr = do.call(cbind,lapply(i,ret_pos585_fun_lwr))
  pos585_upr = do.call(cbind,lapply(i,ret_pos585_fun_upr))
  
  
  dir.create('output/future_pos_tws_area')
  output1 = 'output/future_pos_tws_area/pos_tws_area_multi245_fit.csv'
  output2 = 'output/future_pos_tws_area/pos_tws_area_multi585_fit.csv'
  output3 = 'output/future_pos_tws_area/pos_tws_area_multi245_lwr.csv'
  output4 = 'output/future_pos_tws_area/pos_tws_area_multi585_lwr.csv'
  output5 = 'output/future_pos_tws_area/pos_tws_area_multi245_upr.csv'
  output6 = 'output/future_pos_tws_area/pos_tws_area_multi585_upr.csv'
  
  ##fwrite(pos245_fit,output1)
  #fwrite(pos585_fit,output2)
  #fwrite(pos245_lwr,output3)
  #fwrite(pos585_lwr,output4)
  #fwrite(pos245_upr,output5)
  #fwrite(pos585_upr,output6)
  
  pos245_fit_mean = apply(pos245_fit[,1:8],1,mean)
  pos585_fit_mean = apply(pos585_fit[,1:8],1,mean)
  pos245_lwr_mean = apply(pos245_lwr[,1:8],1,mean)
  pos585_lwr_mean = apply(pos585_lwr[,1:8],1,mean)
  pos245_upr_mean = apply(pos245_upr[,1:8],1,mean)
  pos585_upr_mean = apply(pos585_upr[,1:8],1,mean)
  
  output7 = 'output/future_pos_tws_area/pos_tws_area_ensemble_noproj_temper_pme.csv'
  
  pos245_ens = data.frame(
    pos245 = pos245_fit[,9],
    pos245_lwr = pos245_lwr[,9],
    pos245_upr = pos245_upr[,9]
  )
  pos585_ens = data.frame(
    pos585 = pos585_fit[,9],
    pos585_lwr = pos585_lwr[,9],
    pos585_upr = pos585_upr[,9]
  )
  
  
  ##fwrite(pos245,output1)
  ##fwrite(pos585,output2)
  pos245 = pos245_fit[,9]
  pos585 = pos585_fit[,9]
  
  ense = cbind(pos245,pos585)
  fwrite(ense,output7)
  
  return(ense)
  
}
project_pos_area_by_model_with_proj_temper_proj_pme<-function(
  
){
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/project_tws_in_south_tp12_by_trainonhist_random_proj_temper_proj_pme.R")
  ret_li = project_tws_in_south_tp12_by_trainonhist_random_proj_temper_proj_pme()
  
  ret_li = ret_li[[2]]
  tws1_245 = ret_li[[1]]
  tws1_585 = ret_li[[2]]
  tws2_245 = ret_li[[3]]
  tws2_585 = ret_li[[4]]
  
  
  i = 1:9
  i <<- i
  sub_predict_pos <-function(i){
    twsfut = data.frame(
      tws1_245[,i],
      tws1_585[,i],
      tws2_245[,i],
      tws2_585[,i]
    )
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/project_fut_pos_area2_hist_based.R")
    retpos = project_fut_pos_area2_hist_based(twsfut)
    
  }
  
  ret_pos = lapply(i,sub_predict_pos)
  
  ret_pos245_fun_fit<-function(i){
    ret = ret_pos[[i]][,1]
    return(ret)
  }
  
  ret_pos245_fun_lwr<-function(i){
    ret = ret_pos[[i]][,2]
    return(ret)
  }
  
  ret_pos245_fun_upr<-function(i){
    ret = ret_pos[[i]][,3]
    return(ret)
  }
  
  
  
  ret_pos585_fun_fit<-function(i){
    ret = ret_pos[[i]][,4]
    return(ret)
  }
  
  ret_pos585_fun_lwr<-function(i){
    ret = ret_pos[[i]][,5]
    return(ret)
  }
  
  ret_pos585_fun_upr<-function(i){
    ret = ret_pos[[i]][,6]
    return(ret)
  }
  
  pos245_fit = do.call(cbind,lapply(i,ret_pos245_fun_fit))
  pos245_lwr = do.call(cbind,lapply(i,ret_pos245_fun_lwr))
  pos245_upr = do.call(cbind,lapply(i,ret_pos245_fun_upr))
  
  pos585_fit = do.call(cbind,lapply(i,ret_pos585_fun_fit))
  pos585_lwr = do.call(cbind,lapply(i,ret_pos585_fun_lwr))
  pos585_upr = do.call(cbind,lapply(i,ret_pos585_fun_upr))
  
  
  dir.create('output/future_pos_tws_area')
  output1 = 'output/future_pos_tws_area/pos_tws_area_multi245_fit.csv'
  output2 = 'output/future_pos_tws_area/pos_tws_area_multi585_fit.csv'
  output3 = 'output/future_pos_tws_area/pos_tws_area_multi245_lwr.csv'
  output4 = 'output/future_pos_tws_area/pos_tws_area_multi585_lwr.csv'
  output5 = 'output/future_pos_tws_area/pos_tws_area_multi245_upr.csv'
  output6 = 'output/future_pos_tws_area/pos_tws_area_multi585_upr.csv'
  
  ##fwrite(pos245_fit,output1)
  #fwrite(pos585_fit,output2)
  #fwrite(pos245_lwr,output3)
  #fwrite(pos585_lwr,output4)
  #fwrite(pos245_upr,output5)
  #fwrite(pos585_upr,output6)
  
  pos245_fit_mean = apply(pos245_fit[,1:8],1,mean)
  pos585_fit_mean = apply(pos585_fit[,1:8],1,mean)
  pos245_lwr_mean = apply(pos245_lwr[,1:8],1,mean)
  pos585_lwr_mean = apply(pos585_lwr[,1:8],1,mean)
  pos245_upr_mean = apply(pos245_upr[,1:8],1,mean)
  pos585_upr_mean = apply(pos585_upr[,1:8],1,mean)
  
  output7 = 'output/future_pos_tws_area/pos_tws_area_ensemble_proj_temper_proj_pme.csv'
  
  pos245_ens = data.frame(
    pos245 = pos245_fit[,9],
    pos245_lwr = pos245_lwr[,9],
    pos245_upr = pos245_upr[,9]
  )
  pos585_ens = data.frame(
    pos585 = pos585_fit[,9],
    pos585_lwr = pos585_lwr[,9],
    pos585_upr = pos585_upr[,9]
  )
  
  
  ##fwrite(pos245,output1)
  ##fwrite(pos585,output2)
  pos245 = pos245_fit[,9]
  pos585 = pos585_fit[,9]
  
  ense = cbind(pos245,pos585)
  fwrite(ense,output7)
  
  return(ense)
  
}
project_pos_area_by_model_withtemper<-function(
  
){
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/project_tws_in_south_tp12_withtemper_by_trainonhist_random.R")
  
  ret_li = project_tws_in_south_tp12_withtemper_by_trainonhist_random()
  
  ret_li = ret_li[[2]]
  tws1_245 = ret_li[[1]]
  tws1_585 = ret_li[[2]]
  tws2_245 = ret_li[[3]]
  tws2_585 = ret_li[[4]]
  
  
  i = 1:9
  i <<- i
  sub_predict_pos <-function(i){
    twsfut = data.frame(
      tws1_245[,i],
      tws1_585[,i],
      tws2_245[,i],
      tws2_585[,i]
    )
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/project_fut_pos_area2_hist_based.R")
    retpos = project_fut_pos_area2_hist_based(twsfut)
    
  }
  
  ret_pos = lapply(i,sub_predict_pos)
  
  ret_pos245_fun_fit<-function(i){
    ret = ret_pos[[i]][,1]
    return(ret)
  }
  
  ret_pos245_fun_lwr<-function(i){
    ret = ret_pos[[i]][,2]
    return(ret)
  }
  
  ret_pos245_fun_upr<-function(i){
    ret = ret_pos[[i]][,3]
    return(ret)
  }
  
  
  
  ret_pos585_fun_fit<-function(i){
    ret = ret_pos[[i]][,4]
    return(ret)
  }
  
  ret_pos585_fun_lwr<-function(i){
    ret = ret_pos[[i]][,5]
    return(ret)
  }
  
  ret_pos585_fun_upr<-function(i){
    ret = ret_pos[[i]][,6]
    return(ret)
  }
  
  pos245_fit = do.call(cbind,lapply(i,ret_pos245_fun_fit))
  pos245_lwr = do.call(cbind,lapply(i,ret_pos245_fun_lwr))
  pos245_upr = do.call(cbind,lapply(i,ret_pos245_fun_upr))
  
  pos585_fit = do.call(cbind,lapply(i,ret_pos585_fun_fit))
  pos585_lwr = do.call(cbind,lapply(i,ret_pos585_fun_lwr))
  pos585_upr = do.call(cbind,lapply(i,ret_pos585_fun_upr))
  
  
  dir.create('output/future_pos_tws_area')
  output1 = 'output/future_pos_tws_area/pos_tws_area_multi245_fit.csv'
  output2 = 'output/future_pos_tws_area/pos_tws_area_multi585_fit.csv'
  output3 = 'output/future_pos_tws_area/pos_tws_area_multi245_lwr.csv'
  output4 = 'output/future_pos_tws_area/pos_tws_area_multi585_lwr.csv'
  output5 = 'output/future_pos_tws_area/pos_tws_area_multi245_upr.csv'
  output6 = 'output/future_pos_tws_area/pos_tws_area_multi585_upr.csv'
  
  ##fwrite(pos245_fit,output1)
  #fwrite(pos585_fit,output2)
  #fwrite(pos245_lwr,output3)
  #fwrite(pos585_lwr,output4)
  #fwrite(pos245_upr,output5)
  #fwrite(pos585_upr,output6)
  
  pos245_fit_mean = apply(pos245_fit[,1:8],1,mean)
  pos585_fit_mean = apply(pos585_fit[,1:8],1,mean)
  pos245_lwr_mean = apply(pos245_lwr[,1:8],1,mean)
  pos585_lwr_mean = apply(pos585_lwr[,1:8],1,mean)
  pos245_upr_mean = apply(pos245_upr[,1:8],1,mean)
  pos585_upr_mean = apply(pos585_upr[,1:8],1,mean)
  
  output7 = 'output/future_pos_tws_area/pos_tws_area_proj_pmeato.csv'
  
  pos245_ens = data.frame(
    pos245 = pos245_fit[,9],
    pos245_lwr = pos245_lwr[,9],
    pos245_upr = pos245_upr[,9]
  )
  pos585_ens = data.frame(
    pos585 = pos585_fit[,9],
    pos585_lwr = pos585_lwr[,9],
    pos585_upr = pos585_upr[,9]
  )
  
  
  ##fwrite(pos245,output1)
  ##fwrite(pos585,output2)
  pos245 = pos245_fit[,9]
  pos585 = pos585_fit[,9]
  
  ense = cbind(pos245,pos585)
  fwrite(ense,output7)
  
  return(ense)
  
}
project_pos_area_by_model_withtemper2<-function(
  
){
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/project_tws_in_south_tp12_by_trainonhist_random_withtemper_rel.R")
  ret_li = project_tws_in_south_tp12_by_trainonhist_random_withtemper_rel()
  
  ret_li = ret_li[[2]]
  tws1_245 = ret_li[[1]]
  tws1_585 = ret_li[[2]]
  tws2_245 = ret_li[[3]]
  tws2_585 = ret_li[[4]]
  
  
  i = 1:9
  i <<- i
  sub_predict_pos <-function(i){
    twsfut = data.frame(
      tws1_245[,i],
      tws1_585[,i],
      tws2_245[,i],
      tws2_585[,i]
    )
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/project_fut_pos_area2_hist_based.R")
    retpos = project_fut_pos_area2_hist_based(twsfut)
    
  }
  
  ret_pos = lapply(i,sub_predict_pos)
  
  ret_pos245_fun_fit<-function(i){
    ret = ret_pos[[i]][,1]
    return(ret)
  }
  
  ret_pos245_fun_lwr<-function(i){
    ret = ret_pos[[i]][,2]
    return(ret)
  }
  
  ret_pos245_fun_upr<-function(i){
    ret = ret_pos[[i]][,3]
    return(ret)
  }
  
  
  
  ret_pos585_fun_fit<-function(i){
    ret = ret_pos[[i]][,4]
    return(ret)
  }
  
  ret_pos585_fun_lwr<-function(i){
    ret = ret_pos[[i]][,5]
    return(ret)
  }
  
  ret_pos585_fun_upr<-function(i){
    ret = ret_pos[[i]][,6]
    return(ret)
  }
  
  pos245_fit = do.call(cbind,lapply(i,ret_pos245_fun_fit))
  pos245_lwr = do.call(cbind,lapply(i,ret_pos245_fun_lwr))
  pos245_upr = do.call(cbind,lapply(i,ret_pos245_fun_upr))
  
  pos585_fit = do.call(cbind,lapply(i,ret_pos585_fun_fit))
  pos585_lwr = do.call(cbind,lapply(i,ret_pos585_fun_lwr))
  pos585_upr = do.call(cbind,lapply(i,ret_pos585_fun_upr))
  
  
  dir.create('output/future_pos_tws_area')
  output1 = 'output/future_pos_tws_area/pos_tws_area_multi245_fit.csv'
  output2 = 'output/future_pos_tws_area/pos_tws_area_multi585_fit.csv'
  output3 = 'output/future_pos_tws_area/pos_tws_area_multi245_lwr.csv'
  output4 = 'output/future_pos_tws_area/pos_tws_area_multi585_lwr.csv'
  output5 = 'output/future_pos_tws_area/pos_tws_area_multi245_upr.csv'
  output6 = 'output/future_pos_tws_area/pos_tws_area_multi585_upr.csv'
  
  ##fwrite(pos245_fit,output1)
  #fwrite(pos585_fit,output2)
  #fwrite(pos245_lwr,output3)
  #fwrite(pos585_lwr,output4)
  #fwrite(pos245_upr,output5)
  #fwrite(pos585_upr,output6)
  
  pos245_fit_mean = apply(pos245_fit[,1:8],1,mean)
  pos585_fit_mean = apply(pos585_fit[,1:8],1,mean)
  pos245_lwr_mean = apply(pos245_lwr[,1:8],1,mean)
  pos585_lwr_mean = apply(pos585_lwr[,1:8],1,mean)
  pos245_upr_mean = apply(pos245_upr[,1:8],1,mean)
  pos585_upr_mean = apply(pos585_upr[,1:8],1,mean)
  
  output7 = 'output/future_pos_tws_area/pos_tws_area_ensemble_consider_temper.csv'
  
  pos245_ens = data.frame(
    pos245 = pos245_fit[,9],
    pos245_lwr = pos245_lwr[,9],
    pos245_upr = pos245_upr[,9]
  )
  pos585_ens = data.frame(
    pos585 = pos585_fit[,9],
    pos585_lwr = pos585_lwr[,9],
    pos585_upr = pos585_upr[,9]
  )
  
  
  ##fwrite(pos245,output1)
  ##fwrite(pos585,output2)
  pos245 = pos245_fit[,9]
  pos585 = pos585_fit[,9]
  
  ense = cbind(pos245,pos585)
  fwrite(ense,output7)
  
  return(ense)
  
}
project_pos_area_by_model<-function(
  
){
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/project_tws_in_south_tp12_by_trainonhist_random.R")
  
  ret_li = project_tws_in_south_tp12_by_trainonhist_random()
  
  ret_li = ret_li[[2]]
  tws1_245 = ret_li[[1]]
  tws1_585 = ret_li[[2]]
  tws2_245 = ret_li[[3]]
  tws2_585 = ret_li[[4]]
  
  
  i = 1:9
  i <<- i
  sub_predict_pos <-function(i){
    twsfut = data.frame(
      tws1_245[,i],
      tws1_585[,i],
      tws2_245[,i],
      tws2_585[,i]
    )
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/project_fut_pos_area2_hist_based.R")
    retpos = project_fut_pos_area2_hist_based(twsfut)
    
  }
  
  ret_pos = lapply(i,sub_predict_pos)
  
  ret_pos245_fun_fit<-function(i){
    ret = ret_pos[[i]][,1]
    return(ret)
  }
  
  ret_pos245_fun_lwr<-function(i){
    ret = ret_pos[[i]][,2]
    return(ret)
  }
  
  ret_pos245_fun_upr<-function(i){
    ret = ret_pos[[i]][,3]
    return(ret)
  }
  
  
  
  ret_pos585_fun_fit<-function(i){
    ret = ret_pos[[i]][,4]
    return(ret)
  }
  
  ret_pos585_fun_lwr<-function(i){
    ret = ret_pos[[i]][,5]
    return(ret)
  }
  
  ret_pos585_fun_upr<-function(i){
    ret = ret_pos[[i]][,6]
    return(ret)
  }
  
  pos245_fit = do.call(cbind,lapply(i,ret_pos245_fun_fit))
  pos245_lwr = do.call(cbind,lapply(i,ret_pos245_fun_lwr))
  pos245_upr = do.call(cbind,lapply(i,ret_pos245_fun_upr))
  
  pos585_fit = do.call(cbind,lapply(i,ret_pos585_fun_fit))
  pos585_lwr = do.call(cbind,lapply(i,ret_pos585_fun_lwr))
  pos585_upr = do.call(cbind,lapply(i,ret_pos585_fun_upr))
  
  
  dir.create('output/future_pos_tws_area')
  output1 = 'output/future_pos_tws_area/pos_tws_area_multi245_fit.csv'
  output2 = 'output/future_pos_tws_area/pos_tws_area_multi585_fit.csv'
  output3 = 'output/future_pos_tws_area/pos_tws_area_multi245_lwr.csv'
  output4 = 'output/future_pos_tws_area/pos_tws_area_multi585_lwr.csv'
  output5 = 'output/future_pos_tws_area/pos_tws_area_multi245_upr.csv'
  output6 = 'output/future_pos_tws_area/pos_tws_area_multi585_upr.csv'
  
  fwrite(pos245_fit,output1)
  fwrite(pos585_fit,output2)
  fwrite(pos245_lwr,output3)
  fwrite(pos585_lwr,output4)
  fwrite(pos245_upr,output5)
  fwrite(pos585_upr,output6)
  
  pos245_fit_mean = apply(pos245_fit[,1:8],1,mean)
  pos585_fit_mean = apply(pos585_fit[,1:8],1,mean)
  pos245_lwr_mean = apply(pos245_lwr[,1:8],1,mean)
  pos585_lwr_mean = apply(pos585_lwr[,1:8],1,mean)
  pos245_upr_mean = apply(pos245_upr[,1:8],1,mean)
  pos585_upr_mean = apply(pos585_upr[,1:8],1,mean)
  
  output7 = 'output/future_pos_tws_area/pos_tws_area_ensemble.csv'
  
  pos245_ens = data.frame(
    pos245 = pos245_fit[,9],
    pos245_lwr = pos245_lwr[,9],
    pos245_upr = pos245_upr[,9]
  )
  pos585_ens = data.frame(
    pos585 = pos585_fit[,9],
    pos585_lwr = pos585_lwr[,9],
    pos585_upr = pos585_upr[,9]
  )
  
  
  #fwrite(pos245,output1)
  #fwrite(pos585,output2)
  pos245 = pos245_fit[,9]
  pos585 = pos585_fit[,9]
  
  ense = cbind(pos245,pos585)
  fwrite(ense,output7)
  
  return(ense)
  
}
project_pos_area_by_twsandsnowcover<-function(
  
){
  # tws projected by pme ori
  # snowcover projected by t in tpm ori 
  
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/project_tws_in_south_tp12_by_trainonhist_random.R")
  ret_li = project_tws_in_south_tp12_by_trainonhist_random()
  
  ret_li = ret_li[[2]]
  tws1_245 = ret_li[[1]]
  tws1_585 = ret_li[[2]]
  tws2_245 = ret_li[[3]]
  tws2_585 = ret_li[[4]]
  
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/project_snowcover_basedon_temeprature.R")
  ret_snowcover = project_snowcover_basedon_temeprature()
  
  ret_snowcover = ret_snowcover[[1]]
  sc1_245 = ret_snowcover[[1]]
  sc1_585 = ret_snowcover[[2]]
  sc2_245 = ret_snowcover[[3]]
  sc2_585 = ret_snowcover[[4]]
  
  
  i = 1:9
  i <<- i
  sub_predict_pos <-function(i){
    twsfut = data.frame(
      tws1_245[,i],
      tws1_585[,i],
      tws2_245[,i],
      tws2_585[,i]
    )
    snowfut = data.frame(
      sc1_245[,i],
      sc1_585[,i],
      sc2_245[,i],
      sc2_585[,i]
    )
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/project_fut_pos_area2_hist_based_twsandsnow.R")
    retpos = project_fut_pos_area2_hist_based_twsandsnow(twsfut,snowfut)
    
  }
  
  ret_pos = lapply(i,sub_predict_pos)
  
  ret_pos245_fun_fit<-function(i){
    ret = ret_pos[[i]][,1]
    return(ret)
  }
  
  ret_pos245_fun_lwr<-function(i){
    ret = ret_pos[[i]][,2]
    return(ret)
  }
  
  ret_pos245_fun_upr<-function(i){
    ret = ret_pos[[i]][,3]
    return(ret)
  }
  
  
  
  ret_pos585_fun_fit<-function(i){
    ret = ret_pos[[i]][,4]
    return(ret)
  }
  
  ret_pos585_fun_lwr<-function(i){
    ret = ret_pos[[i]][,5]
    return(ret)
  }
  
  ret_pos585_fun_upr<-function(i){
    ret = ret_pos[[i]][,6]
    return(ret)
  }
  
  pos245_fit = do.call(cbind,lapply(i,ret_pos245_fun_fit))
  pos245_lwr = do.call(cbind,lapply(i,ret_pos245_fun_lwr))
  pos245_upr = do.call(cbind,lapply(i,ret_pos245_fun_upr))
  
  pos585_fit = do.call(cbind,lapply(i,ret_pos585_fun_fit))
  pos585_lwr = do.call(cbind,lapply(i,ret_pos585_fun_lwr))
  pos585_upr = do.call(cbind,lapply(i,ret_pos585_fun_upr))
  
  
  dir.create('output/future_pos_tws_area_based_snow_tws')
  output1 = 'output/future_pos_tws_area_based_snow_tws/pos_tws_area_multi245_fit.csv'
  output2 = 'output/future_pos_tws_area_based_snow_tws/pos_tws_area_multi585_fit.csv'
  output3 = 'output/future_pos_tws_area_based_snow_tws/pos_tws_area_multi245_lwr.csv'
  output4 = 'output/future_pos_tws_area_based_snow_tws/pos_tws_area_multi585_lwr.csv'
  output5 = 'output/future_pos_tws_area_based_snow_tws/pos_tws_area_multi245_upr.csv'
  output6 = 'output/future_pos_tws_area_based_snow_tws/pos_tws_area_multi585_upr.csv'
  
  #fwrite(pos245_fit,output1)
  #fwrite(pos585_fit,output2)
  #fwrite(pos245_lwr,output3)
  #fwrite(pos585_lwr,output4)
  #fwrite(pos245_upr,output5)
  #fwrite(pos585_upr,output6)
  
  pos245_fit_mean = apply(pos245_fit[,1:8],1,mean)
  pos585_fit_mean = apply(pos585_fit[,1:8],1,mean)
  pos245_lwr_mean = apply(pos245_lwr[,1:8],1,mean)
  pos585_lwr_mean = apply(pos585_lwr[,1:8],1,mean)
  pos245_upr_mean = apply(pos245_upr[,1:8],1,mean)
  pos585_upr_mean = apply(pos585_upr[,1:8],1,mean)
  
  output7 = 'output/future_pos_tws_area_based_snow_tws/pos_tws_area_ensemble_ori_pme_t.csv'
  
  pos245_ens = data.frame(
    pos245 = pos245_fit[,9],
    pos245_lwr = pos245_lwr[,9],
    pos245_upr = pos245_upr[,9]
  )
  pos585_ens = data.frame(
    pos585 = pos585_fit[,9],
    pos585_lwr = pos585_lwr[,9],
    pos585_upr = pos585_upr[,9]
  )
  
  
  #fwrite(pos245,output1)
  #fwrite(pos585,output2)
  pos245 = pos245_fit[,9]
  pos585 = pos585_fit[,9]
  
  ense = cbind(pos245,pos585)
  fwrite(ense,output7)
  
  return(ense)
  
}
project_pos_area_by_twsandsnowcover2<-function(
  
){
  # tws projected by pme ori
  # snowcover projected by t in tpm ori 
  
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/project_tws_in_south_tp12_by_trainonhist_random_nonproj_pme_temper.R")
  ret_li = project_tws_in_south_tp12_by_trainonhist_random_nonproj_pme_temper()
  
  ret_li = ret_li[[2]]
  tws1_245 = ret_li[[1]]
  tws1_585 = ret_li[[2]]
  tws2_245 = ret_li[[3]]
  tws2_585 = ret_li[[4]]
  
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/project_snowcover_basedon_temeprature.R")
  ret_snowcover = project_snowcover_basedon_temeprature()
  
  ret_snowcover = ret_snowcover[[1]]
  sc1_245 = ret_snowcover[[1]]
  sc1_585 = ret_snowcover[[2]]
  sc2_245 = ret_snowcover[[3]]
  sc2_585 = ret_snowcover[[4]]
  
  
  i = 1:9
  i <<- i
  sub_predict_pos <-function(i){
    twsfut = data.frame(
      tws1_245[,i],
      tws1_585[,i],
      tws2_245[,i],
      tws2_585[,i]
    )
    snowfut = data.frame(
      sc1_245[,i],
      sc1_585[,i],
      sc2_245[,i],
      sc2_585[,i]
    )
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/project_fut_pos_area2_hist_based_twsandsnow.R")
    retpos = project_fut_pos_area2_hist_based_twsandsnow(twsfut,snowfut)
    
  }
  
  ret_pos = lapply(i,sub_predict_pos)
  
  ret_pos245_fun_fit<-function(i){
    ret = ret_pos[[i]][,1]
    return(ret)
  }
  
  ret_pos245_fun_lwr<-function(i){
    ret = ret_pos[[i]][,2]
    return(ret)
  }
  
  ret_pos245_fun_upr<-function(i){
    ret = ret_pos[[i]][,3]
    return(ret)
  }
  
  
  
  ret_pos585_fun_fit<-function(i){
    ret = ret_pos[[i]][,4]
    return(ret)
  }
  
  ret_pos585_fun_lwr<-function(i){
    ret = ret_pos[[i]][,5]
    return(ret)
  }
  
  ret_pos585_fun_upr<-function(i){
    ret = ret_pos[[i]][,6]
    return(ret)
  }
  
  pos245_fit = do.call(cbind,lapply(i,ret_pos245_fun_fit))
  pos245_lwr = do.call(cbind,lapply(i,ret_pos245_fun_lwr))
  pos245_upr = do.call(cbind,lapply(i,ret_pos245_fun_upr))
  
  pos585_fit = do.call(cbind,lapply(i,ret_pos585_fun_fit))
  pos585_lwr = do.call(cbind,lapply(i,ret_pos585_fun_lwr))
  pos585_upr = do.call(cbind,lapply(i,ret_pos585_fun_upr))
  
  
  dir.create('output/future_pos_tws_area_based_snow_tws')
  output1 = 'output/future_pos_tws_area_based_snow_tws/pos_tws_area_multi245_fit.csv'
  output2 = 'output/future_pos_tws_area_based_snow_tws/pos_tws_area_multi585_fit.csv'
  output3 = 'output/future_pos_tws_area_based_snow_tws/pos_tws_area_multi245_lwr.csv'
  output4 = 'output/future_pos_tws_area_based_snow_tws/pos_tws_area_multi585_lwr.csv'
  output5 = 'output/future_pos_tws_area_based_snow_tws/pos_tws_area_multi245_upr.csv'
  output6 = 'output/future_pos_tws_area_based_snow_tws/pos_tws_area_multi585_upr.csv'
  
  
  
  pos245_fit_mean = apply(pos245_fit[,1:8],1,mean)
  pos585_fit_mean = apply(pos585_fit[,1:8],1,mean)
  pos245_lwr_mean = apply(pos245_lwr[,1:8],1,mean)
  pos585_lwr_mean = apply(pos585_lwr[,1:8],1,mean)
  pos245_upr_mean = apply(pos245_upr[,1:8],1,mean)
  pos585_upr_mean = apply(pos585_upr[,1:8],1,mean)
  
  output7 = 'output/future_pos_tws_area_based_snow_tws/pos_tws_area_ensemble_ori_pme_t_tws_bypt.csv'
  
  pos245_ens = data.frame(
    pos245 = pos245_fit[,9],
    pos245_lwr = pos245_lwr[,9],
    pos245_upr = pos245_upr[,9]
  )
  pos585_ens = data.frame(
    pos585 = pos585_fit[,9],
    pos585_lwr = pos585_lwr[,9],
    pos585_upr = pos585_upr[,9]
  )
  
  
  #fwrite(pos245,output1)
  #fwrite(pos585,output2)
  pos245 = pos245_fit[,9]
  pos585 = pos585_fit[,9]
  
  ense = cbind(pos245,pos585)
  fwrite(ense,output7)
  
  return(ense)
  
}
project_pos_area_by_twsandsnowcover3<-function(
  
){
  # tws projected by pme ori
  # snowcover projected by t in tpm ori 
  
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/project_tws_in_south_tp12_withtemper_by_trainonhist_random.R")
  ret_li = project_tws_in_south_tp12_withtemper_by_trainonhist_random()
  
  ret_li = ret_li[[2]]
  tws1_245 = ret_li[[1]]
  tws1_585 = ret_li[[2]]
  tws2_245 = ret_li[[3]]
  tws2_585 = ret_li[[4]]
  
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/project_snowcover_basedon_proj_temeprature.R")
  ret_snowcover = project_snowcover_basedon_proj_temeprature()
  
  ret_snowcover = ret_snowcover[[1]]
  sc1_245 = ret_snowcover[[1]]
  sc1_585 = ret_snowcover[[2]]
  sc2_245 = ret_snowcover[[3]]
  sc2_585 = ret_snowcover[[4]]
  
  
  i = 1:9
  i <<- i
  sub_predict_pos <-function(i){
    twsfut = data.frame(
      tws1_245[,i],
      tws1_585[,i],
      tws2_245[,i],
      tws2_585[,i]
    )
    snowfut = data.frame(
      sc1_245[,i],
      sc1_585[,i],
      sc2_245[,i],
      sc2_585[,i]
    )
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/project_fut_pos_area2_hist_based_twsandsnow.R")
    retpos = project_fut_pos_area2_hist_based_twsandsnow(twsfut,snowfut)
    
  }
  
  ret_pos = lapply(i,sub_predict_pos)
  
  ret_pos245_fun_fit<-function(i){
    ret = ret_pos[[i]][,1]
    return(ret)
  }
  
  ret_pos245_fun_lwr<-function(i){
    ret = ret_pos[[i]][,2]
    return(ret)
  }
  
  ret_pos245_fun_upr<-function(i){
    ret = ret_pos[[i]][,3]
    return(ret)
  }
  
  
  
  ret_pos585_fun_fit<-function(i){
    ret = ret_pos[[i]][,4]
    return(ret)
  }
  
  ret_pos585_fun_lwr<-function(i){
    ret = ret_pos[[i]][,5]
    return(ret)
  }
  
  ret_pos585_fun_upr<-function(i){
    ret = ret_pos[[i]][,6]
    return(ret)
  }
  
  pos245_fit = do.call(cbind,lapply(i,ret_pos245_fun_fit))
  pos245_lwr = do.call(cbind,lapply(i,ret_pos245_fun_lwr))
  pos245_upr = do.call(cbind,lapply(i,ret_pos245_fun_upr))
  
  pos585_fit = do.call(cbind,lapply(i,ret_pos585_fun_fit))
  pos585_lwr = do.call(cbind,lapply(i,ret_pos585_fun_lwr))
  pos585_upr = do.call(cbind,lapply(i,ret_pos585_fun_upr))
  
  
  dir.create('output/future_pos_tws_area_based_snow_tws')
  output1 = 'output/future_pos_tws_area_based_snow_tws/pos_tws_area_multi245_fit.csv'
  output2 = 'output/future_pos_tws_area_based_snow_tws/pos_tws_area_multi585_fit.csv'
  output3 = 'output/future_pos_tws_area_based_snow_tws/pos_tws_area_multi245_lwr.csv'
  output4 = 'output/future_pos_tws_area_based_snow_tws/pos_tws_area_multi585_lwr.csv'
  output5 = 'output/future_pos_tws_area_based_snow_tws/pos_tws_area_multi245_upr.csv'
  output6 = 'output/future_pos_tws_area_based_snow_tws/pos_tws_area_multi585_upr.csv'
  
  
  
  pos245_fit_mean = apply(pos245_fit[,1:8],1,mean)
  pos585_fit_mean = apply(pos585_fit[,1:8],1,mean)
  pos245_lwr_mean = apply(pos245_lwr[,1:8],1,mean)
  pos585_lwr_mean = apply(pos585_lwr[,1:8],1,mean)
  pos245_upr_mean = apply(pos245_upr[,1:8],1,mean)
  pos585_upr_mean = apply(pos585_upr[,1:8],1,mean)
  
  output7 = 'output/future_pos_tws_area_based_snow_tws/pos_tws_area_ensemble_proj_pme_t_tws_bypme.csv'
  
  pos245_ens = data.frame(
    pos245 = pos245_fit[,9],
    pos245_lwr = pos245_lwr[,9],
    pos245_upr = pos245_upr[,9]
  )
  pos585_ens = data.frame(
    pos585 = pos585_fit[,9],
    pos585_lwr = pos585_lwr[,9],
    pos585_upr = pos585_upr[,9]
  )
  
  
  #fwrite(pos245,output1)
  #fwrite(pos585,output2)
  pos245 = pos245_fit[,9]
  pos585 = pos585_fit[,9]
  
  ense = cbind(pos245,pos585)
  fwrite(ense,output7)
  
  return(ense)
  
}
project_pos_area_by_twsandsnowcover4<-function(
  
){
  # tws projected by pme ori
  # snowcover projected by t in tpm ori 
  
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/project_tws_in_south_tp12_by_trainonhist_random_proj_temper_proj_pme.R")
  ret_li = project_tws_in_south_tp12_by_trainonhist_random_proj_temper_proj_pme()
  
  ret_li = ret_li[[2]]
  tws1_245 = ret_li[[1]]
  tws1_585 = ret_li[[2]]
  tws2_245 = ret_li[[3]]
  tws2_585 = ret_li[[4]]
  
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/project_snowcover_basedon_proj_temeprature.R")
  ret_snowcover = project_snowcover_basedon_proj_temeprature()
  
  ret_snowcover = ret_snowcover[[1]]
  sc1_245 = ret_snowcover[[1]]
  sc1_585 = ret_snowcover[[2]]
  sc2_245 = ret_snowcover[[3]]
  sc2_585 = ret_snowcover[[4]]
  
  
  i = 1:9
  i <<- i
  sub_predict_pos <-function(i){
    twsfut = data.frame(
      tws1_245[,i],
      tws1_585[,i],
      tws2_245[,i],
      tws2_585[,i]
    )
    snowfut = data.frame(
      sc1_245[,i],
      sc1_585[,i],
      sc2_245[,i],
      sc2_585[,i]
    )
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/project_fut_pos_area2_hist_based_twsandsnow.R")
    retpos = project_fut_pos_area2_hist_based_twsandsnow(twsfut,snowfut)
    
  }
  
  ret_pos = lapply(i,sub_predict_pos)
  
  ret_pos245_fun_fit<-function(i){
    ret = ret_pos[[i]][,1]
    return(ret)
  }
  
  ret_pos245_fun_lwr<-function(i){
    ret = ret_pos[[i]][,2]
    return(ret)
  }
  
  ret_pos245_fun_upr<-function(i){
    ret = ret_pos[[i]][,3]
    return(ret)
  }
  
  
  
  ret_pos585_fun_fit<-function(i){
    ret = ret_pos[[i]][,4]
    return(ret)
  }
  
  ret_pos585_fun_lwr<-function(i){
    ret = ret_pos[[i]][,5]
    return(ret)
  }
  
  ret_pos585_fun_upr<-function(i){
    ret = ret_pos[[i]][,6]
    return(ret)
  }
  
  pos245_fit = do.call(cbind,lapply(i,ret_pos245_fun_fit))
  pos245_lwr = do.call(cbind,lapply(i,ret_pos245_fun_lwr))
  pos245_upr = do.call(cbind,lapply(i,ret_pos245_fun_upr))
  
  pos585_fit = do.call(cbind,lapply(i,ret_pos585_fun_fit))
  pos585_lwr = do.call(cbind,lapply(i,ret_pos585_fun_lwr))
  pos585_upr = do.call(cbind,lapply(i,ret_pos585_fun_upr))
  
  
  dir.create('output/future_pos_tws_area_based_snow_tws')
  output1 = 'output/future_pos_tws_area_based_snow_tws/pos_tws_area_multi245_fit.csv'
  output2 = 'output/future_pos_tws_area_based_snow_tws/pos_tws_area_multi585_fit.csv'
  output3 = 'output/future_pos_tws_area_based_snow_tws/pos_tws_area_multi245_lwr.csv'
  output4 = 'output/future_pos_tws_area_based_snow_tws/pos_tws_area_multi585_lwr.csv'
  output5 = 'output/future_pos_tws_area_based_snow_tws/pos_tws_area_multi245_upr.csv'
  output6 = 'output/future_pos_tws_area_based_snow_tws/pos_tws_area_multi585_upr.csv'
  
  
  
  pos245_fit_mean = apply(pos245_fit[,1:8],1,mean)
  pos585_fit_mean = apply(pos585_fit[,1:8],1,mean)
  pos245_lwr_mean = apply(pos245_lwr[,1:8],1,mean)
  pos585_lwr_mean = apply(pos585_lwr[,1:8],1,mean)
  pos245_upr_mean = apply(pos245_upr[,1:8],1,mean)
  pos585_upr_mean = apply(pos585_upr[,1:8],1,mean)
  
  output7 = 'output/future_pos_tws_area_based_snow_tws/pos_tws_area_ensemble_proj_pme_t_tws_bypmet.csv'
  
  pos245_ens = data.frame(
    pos245 = pos245_fit[,9],
    pos245_lwr = pos245_lwr[,9],
    pos245_upr = pos245_upr[,9]
  )
  pos585_ens = data.frame(
    pos585 = pos585_fit[,9],
    pos585_lwr = pos585_lwr[,9],
    pos585_upr = pos585_upr[,9]
  )
  
  
  #fwrite(pos245,output1)
  #fwrite(pos585,output2)
  pos245 = pos245_fit[,9]
  pos585 = pos585_fit[,9]
  
  ense = cbind(pos245,pos585)
  fwrite(ense,output7)
  
  return(ense)
  
}
project_snowcover_basedon_proj_temeprature <- function(
  
){
  
  #develope hist model 
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/import_index_insource_tibet.R")
  snowcover = import_index_insource_tibet('snowcover')
  # import era5_temperature in tpm
  era5_t = import_index_insource_tibet('era5_t_tibet')
  
  t_tpm_ssp245 = import_index_insource_tibet('ssp245_t_tpm')
  t_tpm_ssp585 = import_index_insource_tibet('ssp585_t_tpm')
  
  t_tpm1_ssp245 = t_tpm_ssp245[,1:8]
  t_tpm2_ssp245 = t_tpm_ssp245[,9:16]
  t_tpm1_ssp585 = t_tpm_ssp585[,1:8]
  t_tpm2_ssp585 = t_tpm_ssp585[,9:16]
  
  proj_tpm_ssp245 = import_index_insource_tibet('proj_ssp245_t_tpm')
  proj_tpm_ssp585 = import_index_insource_tibet('proj_ssp585_t_tpm')
  
  t_tpm1_ssp245 = cbind(t_tpm1_ssp245,proj_tpm_ssp245[,1])
  t_tpm2_ssp245 = cbind(t_tpm2_ssp245,proj_tpm_ssp245[,2])
  t_tpm1_ssp585 = cbind(t_tpm1_ssp585,proj_tpm_ssp585[,1])
  t_tpm2_ssp585 = cbind(t_tpm2_ssp585,proj_tpm_ssp585[,2])
  
  t_tpm1_ssp245 <<- t_tpm1_ssp245
  t_tpm2_ssp245 <<- t_tpm2_ssp245
  t_tpm1_ssp585 <<- t_tpm1_ssp585
  t_tpm2_ssp585 <<- t_tpm2_ssp585
  
  era5_t <<- era5_t
  
  i = 1:9
  i<<- i
  sub_trains_rfmodel_subs1_256 <-function(i){
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/cnn_model_predict_tws.R")
    df = data.frame(
      snowcover = snowcover[,1],
      t = era5_t[,1]
    )
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/random_forest_model_snowcover_cmip6_raster_tibet.R")
    model_best = random_forest_model_snowcover_cmip6_raster_tibet(df) 
    
    df_project = data.frame(
      t = as.numeric(t_tpm1_ssp245[1:1152,i])
    )
    
    ret = predict(model_best,df_project)
    return(ret)
  }
  sub_trains_rfmodel_subs1_585 <-function(i){
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/cnn_model_predict_tws.R")
    df = data.frame(
      snowcover = snowcover[,1],
      t = era5_t[,1]
    )
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/random_forest_model_snowcover_cmip6_raster_tibet.R")
    model_best = random_forest_model_snowcover_cmip6_raster_tibet(df) 
    
    df_project = data.frame(
      t = as.numeric(t_tpm1_ssp585[1:1152,i])
      #pmeato3neg = -1*as.numeric(pmeato3_256[175:1152,i])
    )
    
    ret = predict(model_best,df_project)
    return(ret)
  }
  sub_trains_rfmodel_subs2_256 <-function(i){
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/cnn_model_predict_tws.R")
    df = data.frame(
      snowcover = snowcover[,2],
      t = era5_t[,2]
    )
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/random_forest_model_snowcover_cmip6_raster_tibet.R")
    model_best = random_forest_model_snowcover_cmip6_raster_tibet(df) 
    
    df_project = data.frame(
      t = as.numeric(t_tpm2_ssp245[1:1152,i])
    )
    
    ret = predict(model_best,df_project)
    return(ret)
  }
  sub_trains_rfmodel_subs2_585 <-function(i){
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/cnn_model_predict_tws.R")
    df = data.frame(
      snowcover = snowcover[,2],
      t = era5_t[,2]
    )
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/random_forest_model_snowcover_cmip6_raster_tibet.R")
    model_best = random_forest_model_snowcover_cmip6_raster_tibet(df) 
    
    df_project = data.frame(
      t = as.numeric(t_tpm2_ssp585[1:1152,i])
      #pmeato3neg = -1*as.numeric(pmeato3_256[175:1152,i])
    )
    
    ret = predict(model_best,df_project)
    return(ret)
  }
  
  
  library(doParallel)
  
  cl = makeCluster(9)
  clusterExport(cl,c('i','t_tpm1_ssp245',
                     't_tpm2_ssp245','t_tpm1_ssp585','t_tpm2_ssp585',
                     'era5_t'))
  proj_snowcover_tp1_256 = parLapply(cl,i,sub_trains_rfmodel_subs1_256)
  stopCluster(cl) 
  
  cl = makeCluster(9)
  clusterExport(cl,c('i','t_tpm1_ssp245',
                     't_tpm2_ssp245','t_tpm1_ssp585','t_tpm2_ssp585',
                     'era5_t'))
  proj_snowcover_tp1_585 = parLapply(cl,i,sub_trains_rfmodel_subs1_585)
  stopCluster(cl) 
  
  
  cl = makeCluster(9)
  clusterExport(cl,c('i','t_tpm1_ssp245',
                     't_tpm2_ssp245','t_tpm1_ssp585','t_tpm2_ssp585',
                     'era5_t'))
  proj_snowcover_tp2_256 = parLapply(cl,i,sub_trains_rfmodel_subs2_256)
  stopCluster(cl) 
  
  cl = makeCluster(9)
  clusterExport(cl,c('i','t_tpm1_ssp245',
                     't_tpm2_ssp245','t_tpm1_ssp585','t_tpm2_ssp585',
                     'era5_t'))
  proj_snowcover_tp2_585 = parLapply(cl,i,sub_trains_rfmodel_subs2_585)
  stopCluster(cl) 
  
  proj_snowcover_tp1_256 = do.call(cbind,proj_snowcover_tp1_256)
  proj_snowcover_tp1_585 = do.call(cbind,proj_snowcover_tp1_585)
  proj_snowcover_tp2_256 = do.call(cbind,proj_snowcover_tp2_256)
  proj_snowcover_tp2_585 = do.call(cbind,proj_snowcover_tp2_585)
  
  ensemble_snowcover_tp1_256 = apply(proj_snowcover_tp1_256[,1:8],1,mean)
  ensemble_snowcover_tp1_585 = apply(proj_snowcover_tp1_585[,1:8],1,mean)
  ensemble_snowcover_tp2_256 = apply(proj_snowcover_tp2_256[,1:8],1,mean)
  ensemble_snowcover_tp2_585 = apply(proj_snowcover_tp2_585[,1:8],1,mean)
  
  
  ense1256 = c(proj_snowcover_tp1_256[,9])
  ense1585 = c(proj_snowcover_tp1_585[,9])
  
  ense2256 = c(proj_snowcover_tp2_256[,9])
  ense2585 = c(proj_snowcover_tp2_585[,9])  
  
  df = data.frame(ense1256,ense1585,
                  ense2256,ense2585)
  
  proj_snowcover_tp1_256[,9] = ense1256
  proj_snowcover_tp1_585[,9] = ense1585
  proj_snowcover_tp2_256[,9] = ense2256
  proj_snowcover_tp2_585[,9] = ense2585
  
  dir.create('output_proj_snowcover')
  output = 'output_proj_snowcover/ensemble_snowcover2020_2099_proj_t'
  dir.create(output)
  output1 = 'output_proj_snowcover/ensemble_snowcover2020_2099_proj_t/snowcoverdf_proj_t.csv'
  fwrite(df,output1)
  
  ret_proj = list(proj_snowcover_tp1_256,
                  proj_snowcover_tp1_585,
                  proj_snowcover_tp2_256,
                  proj_snowcover_tp2_585)
  return(list(ret_proj))
  
  
  
}
project_snowcover_basedon_temeprature <- function(
  
){
  
  #develope hist model 
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/import_index_insource_tibet.R")
  snowcover = import_index_insource_tibet('snowcover')
  # import era5_temperature in tpm
  era5_t = import_index_insource_tibet('era5_t_tibet')
  #develope monthly model between snowcover and temperature
  
  t_tpm_ssp245 = import_index_insource_tibet('ssp245_t_tpm')
  t_tpm_ssp585 = import_index_insource_tibet('ssp585_t_tpm')
  
  t_tpm1_ssp245 = t_tpm_ssp245[,1:8]
  t_tpm2_ssp245 = t_tpm_ssp245[,9:16]
  t_tpm1_ssp585 = t_tpm_ssp585[,1:8]
  t_tpm2_ssp585 = t_tpm_ssp585[,9:16]
  
  proj_tpm1_ssp245 = apply(t_tpm1_ssp245,1,mean)
  proj_tpm1_ssp585 = apply(t_tpm1_ssp585,1,mean)
  proj_tpm2_ssp245 = apply(t_tpm2_ssp245,1,mean)
  proj_tpm2_ssp585 = apply(t_tpm2_ssp585,1,mean)
  
  t_tpm1_ssp245 = cbind(t_tpm1_ssp245,proj_tpm1_ssp245)
  t_tpm2_ssp245 = cbind(t_tpm2_ssp245,proj_tpm2_ssp245)
  t_tpm1_ssp585 = cbind(t_tpm1_ssp585,proj_tpm1_ssp585)
  t_tpm2_ssp585 = cbind(t_tpm2_ssp585,proj_tpm2_ssp585)
  
  t_tpm1_ssp245 <<- t_tpm1_ssp245
  t_tpm2_ssp245 <<- t_tpm2_ssp245
  t_tpm1_ssp585 <<- t_tpm1_ssp585
  t_tpm2_ssp585 <<- t_tpm2_ssp585
  
  era5_t <<- era5_t
  
  i = 1:9
  i<<- i
  sub_trains_rfmodel_subs1_256 <-function(i){
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/cnn_model_predict_tws.R")
    df = data.frame(
      snowcover = snowcover[,1],
      t = era5_t[,1]
    )
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/random_forest_model_snowcover_cmip6_raster_tibet.R")
    model_best = random_forest_model_snowcover_cmip6_raster_tibet(df) 
    
    df_project = data.frame(
      t = as.numeric(t_tpm1_ssp245[1:1152,i])
    )
    
    ret = predict(model_best,df_project)
    return(ret)
  }
  sub_trains_rfmodel_subs1_585 <-function(i){
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/cnn_model_predict_tws.R")
    df = data.frame(
      snowcover = snowcover[,1],
      t = era5_t[,1]
    )
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/random_forest_model_snowcover_cmip6_raster_tibet.R")
    model_best = random_forest_model_snowcover_cmip6_raster_tibet(df) 
    
    df_project = data.frame(
      t = as.numeric(t_tpm1_ssp585[1:1152,i])
      #pmeato3neg = -1*as.numeric(pmeato3_256[175:1152,i])
    )
    
    ret = predict(model_best,df_project)
    return(ret)
  }
  sub_trains_rfmodel_subs2_256 <-function(i){
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/cnn_model_predict_tws.R")
    df = data.frame(
      snowcover = snowcover[,2],
      t = era5_t[,2]
    )
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/random_forest_model_snowcover_cmip6_raster_tibet.R")
    model_best = random_forest_model_snowcover_cmip6_raster_tibet(df) 
    
    df_project = data.frame(
      t = as.numeric(t_tpm2_ssp245[1:1152,i])
    )
    
    ret = predict(model_best,df_project)
    return(ret)
  }
  sub_trains_rfmodel_subs2_585 <-function(i){
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/cnn_model_predict_tws.R")
    df = data.frame(
      snowcover = snowcover[,2],
      t = era5_t[,2]
    )
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/random_forest_model_snowcover_cmip6_raster_tibet.R")
    model_best = random_forest_model_snowcover_cmip6_raster_tibet(df) 
    
    df_project = data.frame(
      t = as.numeric(t_tpm2_ssp585[1:1152,i])
      #pmeato3neg = -1*as.numeric(pmeato3_256[175:1152,i])
    )
    
    ret = predict(model_best,df_project)
    return(ret)
  }
  
  
  library(doParallel)
  
  cl = makeCluster(9)
  clusterExport(cl,c('i','t_tpm1_ssp245',
                     't_tpm2_ssp245','t_tpm1_ssp585','t_tpm2_ssp585',
                     'era5_t'))
  proj_snowcover_tp1_256 = parLapply(cl,i,sub_trains_rfmodel_subs1_256)
  stopCluster(cl) 
  
  cl = makeCluster(9)
  clusterExport(cl,c('i','t_tpm1_ssp245',
                     't_tpm2_ssp245','t_tpm1_ssp585','t_tpm2_ssp585',
                     'era5_t'))
  proj_snowcover_tp1_585 = parLapply(cl,i,sub_trains_rfmodel_subs1_585)
  stopCluster(cl) 
  
  
  cl = makeCluster(9)
  clusterExport(cl,c('i','t_tpm1_ssp245',
                     't_tpm2_ssp245','t_tpm1_ssp585','t_tpm2_ssp585',
                     'era5_t'))
  proj_snowcover_tp2_256 = parLapply(cl,i,sub_trains_rfmodel_subs2_256)
  stopCluster(cl) 
  
  cl = makeCluster(9)
  clusterExport(cl,c('i','t_tpm1_ssp245',
                     't_tpm2_ssp245','t_tpm1_ssp585','t_tpm2_ssp585',
                     'era5_t'))
  proj_snowcover_tp2_585 = parLapply(cl,i,sub_trains_rfmodel_subs2_585)
  stopCluster(cl) 
  
  proj_snowcover_tp1_256 = do.call(cbind,proj_snowcover_tp1_256)
  proj_snowcover_tp1_585 = do.call(cbind,proj_snowcover_tp1_585)
  proj_snowcover_tp2_256 = do.call(cbind,proj_snowcover_tp2_256)
  proj_snowcover_tp2_585 = do.call(cbind,proj_snowcover_tp2_585)
  
  ensemble_snowcover_tp1_256 = apply(proj_snowcover_tp1_256[,1:8],1,mean)
  ensemble_snowcover_tp1_585 = apply(proj_snowcover_tp1_585[,1:8],1,mean)
  ensemble_snowcover_tp2_256 = apply(proj_snowcover_tp2_256[,1:8],1,mean)
  ensemble_snowcover_tp2_585 = apply(proj_snowcover_tp2_585[,1:8],1,mean)
  
  
  ense1256 = c(ensemble_snowcover_tp1_256)
  ense1585 = c(ensemble_snowcover_tp1_585)
  
  ense2256 = c(ensemble_snowcover_tp2_256)
  ense2585 = c(ensemble_snowcover_tp2_585)  
  
  df = data.frame(ense1256,ense1585,
                  ense2256,ense2585)
  
  proj_snowcover_tp1_256[,9] = ense1256
  proj_snowcover_tp1_585[,9] = ense1585
  proj_snowcover_tp2_256[,9] = ense2256
  proj_snowcover_tp2_585[,9] = ense2585
  
  dir.create('output_proj_snowcover')
  output = 'output_proj_snowcover/ensemble_snowcover2020_2099_noproj_pme_t'
  dir.create(output)
  output1 = 'output_proj_snowcover/ensemble_snowcover2020_2099_noproj_pme_t/snowcoverdf_noproj_pme_t.csv'
  fwrite(df,output1)
  
  ret_proj = list(proj_snowcover_tp1_256,
                  proj_snowcover_tp1_585,
                  proj_snowcover_tp2_256,
                  proj_snowcover_tp2_585)
  return(list(ret_proj))
  
  
  
}
project_the_pos_neg_tws_area_tibet<-function(
  
){
  
  
  
  
  
  
  
}
project_tws_in_south_tp12_by_cnn<-function(
  
){
  dir.create('output_proj_tws')
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/import_index_insource_tibet.R")
  trend_fun_index_cmip6<-function(x){
    x = as.numeric(x)
    loc2020 = length(2003:2020)*12-11
    loc2050 = length(2003:2099)*12
    x = x[loc2020:loc2050]
    xt = ts(x,start = c(2020,1),frequency = 12)
    xt = decompose(xt)$trend
    naid = which(is.na(xt))
    xt = xt[-naid]
    
    xt = (xt - mean(xt))/sd(xt)
    return(xt)
  }
  trend_fun_index_cmip6_2003<-function(x){
    x = as.numeric(x)
    #x = x[loc2020:loc2050]
    xt = ts(x,start = c(2003,1),frequency = 12)
    xt = decompose(xt)$trend
    
    naid = which(is.na(xt))
    xt = xt[-naid]
    
    return(xt)
  }
  stand_fun_index_cmip6_2003<-function(x){
    #xt = (x - mean(x))/sd(x)
    xt = (x - mean_pmeato3)/sd_pmeato3
    return(xt)
  }
  trend_fun_index_era5<-function(x){
    x = as.numeric(x)
    xt = ts(x,start = c(2003,1),frequency = 12)
    xt = decompose(xt)$trend
    
    naid = which(is.na(xt))
    xt = xt[-naid]
    return(xt)
  }
  standard_fun_index_era5 <-function(x){
    xs = (x - mean(x))/sd(x)
    return(xs)
  }
  standard_fun_index_tws <-function(x){
    xs = (x)/sd(x)
    return(xs)
  }
  # import data section
  
  # input index tws trend items in tibet based on era5 
  twsdf = import_index_insource_tibet(var = 'tws_tibet')  
  meatws = apply(twsdf,2,mean)
  sdtws = apply(twsdf,2,sd)
  
  twsdf = apply(twsdf,2,standard_fun_index_tws)
  twsdf = twsdf[,1:2]
  
  # input and choose pmes based on the relationships
  pmeato1 = import_index_insource_tibet(var = 'pme_mean',region = 'ato')
  pmeio1 = import_index_insource_tibet(var = 'pme_mean',region = 'io')
  
  pmeato = pmeato1[1:174,]
  pmeio = pmeio1[1:174,]
  
  pmeato = apply(pmeato,2,trend_fun_index_era5)
  mean_pmeato3 = mean(pmeato[,3])
  sd_pmeato3 = sd(pmeato[,3])
  
  pmeio = apply(pmeio,2,trend_fun_index_era5)
  pmeato = apply(pmeato,2,standard_fun_index_era5)
  pmeio = apply(pmeio,2,standard_fun_index_era5)

  pmeato = pmeato[,2:3]
  pmeio = pmeio[,4]
  
  # import cmip6 data
  #############
  pmeato_ori3 = pmeato[,2]
  
  pmeato_cmip6 = import_index_insource_tibet(var = 'pme_cmip6',
                                             region = 'ato')
  # import cmip6 index
  pmeato256 = pmeato_cmip6[[1]]
  pmeato3_256 = pmeato256[[2]]
  
  pmeato585 = pmeato_cmip6[[2]]
  pmeato3_585 = pmeato585[[2]]
  
  models = colnames(pmeato3_256)
  
  #colnames(pmeato_ori3) = models
  models = c(models,'Ensemble')
  models <<- models
  #############
  pmeato3_256_ense = apply(pmeato3_256,1,mean)
  pmeato3_585_ense = apply(pmeato3_585,1,mean)
  
  pmeato3_256 = as.data.frame(pmeato3_256)
  pmeato3_585 = as.data.frame(pmeato3_585)
  
  pmeato3_256$Ensemble = pmeato3_256_ense
  pmeato3_585$Ensemble = pmeato3_585_ense
  
  pmeato3_256 = apply(pmeato3_256,2,trend_fun_index_cmip6_2003)
  pmeato3_585 = apply(pmeato3_585,2,trend_fun_index_cmip6_2003)
  pmeato3_256 = apply(pmeato3_256,2,stand_fun_index_cmip6_2003)
  pmeato3_585 = apply(pmeato3_585,2,stand_fun_index_cmip6_2003)
  
  i = 1:9
  #pmeato_ori3 = pmeato[,2]
  
  pmeato_ori3 <<- pmeato_ori3
  
  
  sub_trains_rfmodel_subs1_256 <-function(i){
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/cnn_model_predict_tws.R")
    df = data.frame(
      tws = twsdf[,1],
      pmeato3 = pmeato_ori3
    )
    df_project = data.frame(
      #pmeato2 = pmeato2_256[,i],
      #pmeato3 = as.numeric(pmeato3_256[175:1152,i])
      pmeato3 = as.numeric(pmeato3_256[175:1152,i])
      #pmeato3neg = -1*as.numeric(pmeato3_256[175:1152,i])
    )
    
    ret = cnn_model_predict_tws(df,df_project,
                                models[i],
                                mode = 'ssp245',
                                region = 'region1')
    return(ret)
  }
  
  
}

















project_tws_in_south_tp12_by_trainonhist_random_nonproj_pme_temper<-function(
  
){
  dir.create('output_proj_tws')
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/import_index_insource_tibet.R")
  trend_fun_index_cmip6<-function(x){
    x = as.numeric(x)
    loc2020 = length(2003:2020)*12-11
    loc2050 = length(2003:2099)*12
    x = x[loc2020:loc2050]
    xt = ts(x,start = c(2020,1),frequency = 12)
    xt = decompose(xt)$trend
    naid = which(is.na(xt))
    xt = xt[-naid]
    
    xt = (xt - mean(xt))/sd(xt)
    return(xt)
  }
  trend_fun_index_cmip6_2003<-function(x){
    x = as.numeric(x)
    #x = x[loc2020:loc2050]
    xt = ts(x,start = c(2003,1),frequency = 12)
    xt = decompose(xt)$trend
    
    naid = which(is.na(xt))
    xt = xt[-naid]
    
    xt = (xt-mean(xt))/sd(xt)
    return(xt)
  }
  trend_fun_index_era5<-function(x){
    x = as.numeric(x)
    xt = ts(x,start = c(2003,1),frequency = 12)
    xt = decompose(xt)$trend
    
    naid = which(is.na(xt))
    xt = xt[-naid]
    return(xt)
  }
  standard_fun_index_era5 <-function(x){
    xs = (x - mean(x))/sd(x)
    return(xs)
  }
  standard_fun_index_tws <-function(x){
    xs = (x)/sd(x)
    return(xs)
  }
  # import data section
  
  # input index tws trend items in tibet based on era5 
  twsdf = import_index_insource_tibet(var = 'tws_tibet')  
  meatws = apply(twsdf,2,mean)
  sdtws = apply(twsdf,2,sd)
  
  twsdf = apply(twsdf,2,standard_fun_index_tws)
  twsdf = twsdf[,1:2]
  
  # input and choose pmes based on the relationships
  pmeato1 = import_index_insource_tibet(var = 'pme_mean',region = 'ato')
  pmeio1 = import_index_insource_tibet(var = 'pme_mean',region = 'io')
  
  pmeato = pmeato1[1:174,]
  pmeio = pmeio1[1:174,]
  
  pmeato = apply(pmeato,2,trend_fun_index_era5)
  mean_pmeato3 = mean(pmeato[,3])
  sd_pmeato3 = sd(pmeato[,3])
  
  pmeio = apply(pmeio,2,trend_fun_index_era5)
  pmeato = apply(pmeato,2,standard_fun_index_era5)
  pmeio = apply(pmeio,2,standard_fun_index_era5)
  
  pmeato = pmeato[,2:3]
  pmeio = pmeio[,4]
  
  # import cmip6 data
  #############
  pmeato_ori3 = pmeato[,2]
  
  pmeato_cmip6 = import_index_insource_tibet(var = 'pme_cmip6',
                                             region = 'ato')
  # import cmip6 index
  pmeato256 = pmeato_cmip6[[1]]
  pmeato3_256 = pmeato256[[2]]
  
  pmeato585 = pmeato_cmip6[[2]]
  pmeato3_585 = pmeato585[[2]]
  
  models = colnames(pmeato3_256)
  
  #colnames(pmeato_ori3) = models
  models = c(models,'Ensemble')
  models <<- models
  #############
  
  
  
  pmeato3_256_ense = apply(pmeato3_256,1,mean)
  pmeato3_585_ense = apply(pmeato3_585,1,mean)
  
  pmeato3_256 = as.data.frame(pmeato3_256)
  pmeato3_585 = as.data.frame(pmeato3_585)
  
  pmeato3_256$Ensemble = pmeato3_256_ense
  pmeato3_585$Ensemble = pmeato3_585_ense
  
  i = 1:9
  
  stand_pmeato3_by_model256 <-function(i){
    tmp256 = pmeato3_256[,i]
    tmp585 = pmeato3_585[,i]
    
    tmp256 = trend_fun_index_cmip6_2003(tmp256)
    tmp585 = trend_fun_index_cmip6_2003(tmp585)
    
    means = mean(c(tmp256,tmp585))
    sds = sd(c(tmp256,tmp585))
    
    tmp256 = (tmp256 - means)/sds
    tmp585 = (tmp585 - means)/sds
    
    return(tmp256)
  }
  stand_pmeato3_by_model585 <-function(i){
    tmp256 = pmeato3_256[,i]
    tmp585 = pmeato3_585[,i]
    
    tmp256 = trend_fun_index_cmip6_2003(tmp256)
    tmp585 = trend_fun_index_cmip6_2003(tmp585)
    
    means = mean(c(tmp256,tmp585))
    sds = sd(c(tmp256,tmp585))
    
    tmp256 = (tmp256 - means)/sds
    tmp585 = (tmp585 - means)/sds
    
    return(tmp585)
  }
  #pmeato3_256_s = do.call(data.frame,lapply(i,stand_pmeato3_by_model256))
  #pmeato3_585_s = do.call(data.frame,lapply(i,stand_pmeato3_by_model585))
  pmeato3_256_s = apply(pmeato3_256,2,trend_fun_index_cmip6_2003)
  pmeato3_585_s = apply(pmeato3_585,2,trend_fun_index_cmip6_2003)
  
  pmeato3_256 = pmeato3_256_s
  pmeato3_585 = pmeato3_585_s
  #pmeato_ori3 = pmeato[,2]
  
  pmeato_ori3 <<- pmeato_ori3
  
  # input temperature filed function
  era5_t = import_index_insource_tibet('era5_t_tibet')
  
  t_tpm_ssp245 = import_index_insource_tibet('ssp245_t_tpm')
  t_tpm_ssp585 = import_index_insource_tibet('ssp585_t_tpm')
  
  t_tpm1_ssp245 = t_tpm_ssp245[,1:8]
  t_tpm2_ssp245 = t_tpm_ssp245[,9:16]
  t_tpm1_ssp585 = t_tpm_ssp585[,1:8]
  t_tpm2_ssp585 = t_tpm_ssp585[,9:16]
  
  proj_tpm1_ssp245 = apply(t_tpm1_ssp245,1,mean)
  proj_tpm1_ssp585 = apply(t_tpm1_ssp585,1,mean)
  proj_tpm2_ssp245 = apply(t_tpm2_ssp245,1,mean)
  proj_tpm2_ssp585 = apply(t_tpm2_ssp585,1,mean)
  
  t_tpm1_ssp245 = cbind(t_tpm1_ssp245,proj_tpm1_ssp245)
  t_tpm2_ssp245 = cbind(t_tpm2_ssp245,proj_tpm2_ssp245)
  t_tpm1_ssp585 = cbind(t_tpm1_ssp585,proj_tpm1_ssp585)
  t_tpm2_ssp585 = cbind(t_tpm2_ssp585,proj_tpm2_ssp585)
  
  t_tpm1_ssp245 <<- t_tpm1_ssp245
  t_tpm2_ssp245 <<- t_tpm2_ssp245
  t_tpm1_ssp585 <<- t_tpm1_ssp585
  t_tpm2_ssp585 <<- t_tpm2_ssp585
  
  era5_t <<- era5_t
  
  sub_trains_rfmodel_subs1_256 <-function(i){
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/cnn_model_predict_tws.R")
    df = data.frame(
      tws = twsdf[,1],
      pmeato3 = pmeato_ori3,
      t = era5_t[,1]
    )
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/random_forest_model_tws_cmip6_raster_tibet.R")
    model_best = random_forest_model_tws_cmip6_raster_tibet(df) 
    
    df_project = data.frame(
      pmeato3 = as.numeric(pmeato3_256[1:1152,i]),
      t = as.numeric(t_tpm1_ssp245[1:1152,i])
      #pmeato3neg = -1*as.numeric(pmeato3_256[175:1152,i])
    )
    
    ret = predict(model_best,df_project)
    return(ret)
  }
  sub_trains_rfmodel_subs1_585 <-function(i){
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/cnn_model_predict_tws.R")
    df = data.frame(
      tws = twsdf[,1],
      pmeato3 = pmeato_ori3,
      t = era5_t[,1]
    )
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/random_forest_model_tws_cmip6_raster_tibet.R")
    model_best = random_forest_model_tws_cmip6_raster_tibet(df) 
    
    df_project = data.frame(
      pmeato3 = as.numeric(pmeato3_585[1:1152,i]),
      t = as.numeric(t_tpm1_ssp585[1:1152,i])
      #pmeato3neg = -1*as.numeric(pmeato3_256[175:1152,i])
    )
    
    ret = predict(model_best,df_project)
    return(ret)
  }
  sub_trains_rfmodel_subs2_256 <-function(i){
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/cnn_model_predict_tws.R")
    df = data.frame(
      tws = twsdf[,2],
      pmeato3 = pmeato_ori3,
      t = era5_t[,2]
    )
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/random_forest_model_tws_cmip6_raster_tibet.R")
    model_best = random_forest_model_tws_cmip6_raster_tibet(df) 
    
    df_project = data.frame(
      pmeato3 = as.numeric(pmeato3_256[1:1152,i]),
      t = as.numeric(t_tpm2_ssp245[1:1152,i])
      #pmeato3neg = -1*as.numeric(pmeato3_256[175:1152,i])
    )
    
    ret = predict(model_best,df_project)
    return(ret)
  }
  sub_trains_rfmodel_subs2_585 <-function(i){
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/cnn_model_predict_tws.R")
    df = data.frame(
      tws = twsdf[,2],
      pmeato3 = pmeato_ori3,
      t = era5_t[,2]
    )
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/random_forest_model_tws_cmip6_raster_tibet.R")
    model_best = random_forest_model_tws_cmip6_raster_tibet(df) 
    
    df_project = data.frame(
      pmeato3 = as.numeric(pmeato3_585[1:1152,i]),
      t = as.numeric(t_tpm2_ssp585[1:1152,i])
      #pmeato3neg = -1*as.numeric(pmeato3_256[175:1152,i])
    )
    
    ret = predict(model_best,df_project)
    return(ret)
  }
  
  library(doParallel)
  i <<- i 
  #df1 <<- df1
  #df2 <<- df2
  twsdf <<- twsdf
  pmeato3_256 <<- pmeato3_256
  pmeato3_585 <<- pmeato3_585
  pmeato_ori3 <<- pmeato_ori3
  #proj_tws_tp1_256 = sub_trains_rfmodel_subs1_256()
  #proj_tws_tp1_585 = sub_trains_rfmodel_subs1_585()
  #proj_tws_tp2_256 = sub_trains_rfmodel_subs2_256()
  #proj_tws_tp2_585 = sub_trains_rfmodel_subs2_585()
  
  
  cl = makeCluster(9)
  clusterExport(cl,c('i','pmeato3_256','pmeato_ori3',
                     'twsdf','pmeato3_585','t_tpm1_ssp245',
                     't_tpm2_ssp245','t_tpm1_ssp585','t_tpm2_ssp585',
                     'era5_t'))
  proj_tws_tp1_256 = parLapply(cl,i,sub_trains_rfmodel_subs1_256)
  stopCluster(cl) 
  
  cl = makeCluster(9)
  clusterExport(cl,c('i','pmeato3_256','twsdf','pmeato_ori3',
                     'pmeato3_585','t_tpm1_ssp245',
                     't_tpm2_ssp245','t_tpm1_ssp585','t_tpm2_ssp585',
                     'era5_t'))
  proj_tws_tp1_585 = parLapply(cl,i,sub_trains_rfmodel_subs1_585)
  stopCluster(cl) 
  
  
  cl = makeCluster(9)
  clusterExport(cl,c('i','pmeato3_256','twsdf','pmeato_ori3',
                     'pmeato3_585','t_tpm1_ssp245',
                     't_tpm2_ssp245','t_tpm1_ssp585','t_tpm2_ssp585',
                     'era5_t'))
  proj_tws_tp2_256 = parLapply(cl,i,sub_trains_rfmodel_subs2_256)
  stopCluster(cl) 
  
  cl = makeCluster(9)
  clusterExport(cl,c('i','pmeato3_256','twsdf','pmeato_ori3',
                     'pmeato3_585','t_tpm1_ssp245',
                     't_tpm2_ssp245','t_tpm1_ssp585','t_tpm2_ssp585',
                     'era5_t'))
  proj_tws_tp2_585 = parLapply(cl,i,sub_trains_rfmodel_subs2_585)
  stopCluster(cl) 
  
  proj_tws_tp1_256 = do.call(cbind,proj_tws_tp1_256)
  proj_tws_tp1_585 = do.call(cbind,proj_tws_tp1_585)
  proj_tws_tp2_256 = do.call(cbind,proj_tws_tp2_256)
  proj_tws_tp2_585 = do.call(cbind,proj_tws_tp2_585)
  
  ensemble_tws_tp1_256 = apply(proj_tws_tp1_256[,1:8],1,mean)
  ensemble_tws_tp1_585 = apply(proj_tws_tp1_585[,1:8],1,mean)
  ensemble_tws_tp2_256 = apply(proj_tws_tp2_256[,1:8],1,mean)
  ensemble_tws_tp2_585 = apply(proj_tws_tp2_585[,1:8],1,mean)
  
  
  ense1256 = c(ensemble_tws_tp1_256)
  ense1585 = c(ensemble_tws_tp1_585)
  
  ense2256 = c(ensemble_tws_tp2_256)
  ense2585 = c(ensemble_tws_tp2_585)  
  
  df = data.frame(ense1256,ense1585,
                  ense2256,ense2585)
  
  proj_tws_tp1_256[,9] = ense1256
  proj_tws_tp1_585[,9] = ense1585
  proj_tws_tp2_256[,9] = ense2256
  proj_tws_tp2_585[,9] = ense2585
  
  output = 'output_proj_tws/ensemble_tws2020_2099_noproj_pme_t'
  dir.create(output)
  output1 = 'output_proj_tws/ensemble_tws2020_2099_noproj_pme_t/twsdf_noproj_pme_t.csv'
  fwrite(df,output1)
  
  #output2 = 'output_proj_tws/ensemble_tws_2020_2099_bc_cnn_final/proj_tws_tp1_245.csv'
  #output3 = 'output_proj_tws/ensemble_tws_2020_2099_bc_cnn_final/proj_tws_tp1_585.csv'
  #output4 = 'output_proj_tws/ensemble_tws_2020_2099_bc_cnn_final/proj_tws_tp2_245.csv'
  #output5 = 'output_proj_tws/ensemble_tws_2020_2099_bc_cnn_final/proj_tws_tp2_585.csv'
  
  #fwrite(proj_tws_tp1_256,output2)
  #fwrite(proj_tws_tp1_585,output3)
  #fwrite(proj_tws_tp2_256,output4)
  #fwrite(proj_tws_tp2_585,output5)
  
  ret_train = list(pmeato3_256,pmeato3_585)
  ret_proj = list(proj_tws_tp1_256,
                  proj_tws_tp1_585,
                  proj_tws_tp2_256,
                  proj_tws_tp2_585)
  return(list(ret_train,ret_proj))
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
}

















project_tws_in_south_tp12_by_trainonhist_random_proj_temper_proj_pme<-function(
  
){
  dir.create('output_proj_tws')
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/import_index_insource_tibet.R")
  trend_fun_index_cmip6<-function(x){
    x = as.numeric(x)
    loc2020 = length(2003:2020)*12-11
    loc2050 = length(2003:2099)*12
    x = x[loc2020:loc2050]
    xt = ts(x,start = c(2020,1),frequency = 12)
    xt = decompose(xt)$trend
    naid = which(is.na(xt))
    xt = xt[-naid]
    
    xt = (xt - mean(xt))/sd(xt)
    return(xt)
  }
  trend_fun_index_cmip6_2003<-function(x){
    x = as.numeric(x)
    #x = x[loc2020:loc2050]
    xt = ts(x,start = c(2003,1),frequency = 12)
    xt = decompose(xt)$trend
    
    naid = which(is.na(xt))
    xt = xt[-naid]
    
    xt = (xt-mean(xt))/sd(xt)
    return(xt)
  }
  trend_fun_index_era5<-function(x){
    x = as.numeric(x)
    xt = ts(x,start = c(2003,1),frequency = 12)
    xt = decompose(xt)$trend
    
    naid = which(is.na(xt))
    xt = xt[-naid]
    return(xt)
  }
  standard_fun_index_era5 <-function(x){
    xs = (x - mean(x))/sd(x)
    return(xs)
  }
  standard_fun_index_tws <-function(x){
    xs = (x)/sd(x)
    return(xs)
  }
  # import data section
  
  # input index tws trend items in tibet based on era5 
  twsdf = import_index_insource_tibet(var = 'tws_tibet')  
  meatws = apply(twsdf,2,mean)
  sdtws = apply(twsdf,2,sd)
  
  twsdf = apply(twsdf,2,standard_fun_index_tws)
  twsdf = twsdf[,1:2]
  
  # input and choose pmes based on the relationships
  pmeato1 = import_index_insource_tibet(var = 'pme_mean',region = 'ato')
  pmeio1 = import_index_insource_tibet(var = 'pme_mean',region = 'io')
  
  pmeato = pmeato1[1:174,]
  pmeio = pmeio1[1:174,]
  
  pmeato = apply(pmeato,2,trend_fun_index_era5)
  mean_pmeato3 = mean(pmeato[,3])
  sd_pmeato3 = sd(pmeato[,3])
  
  pmeio = apply(pmeio,2,trend_fun_index_era5)
  pmeato = apply(pmeato,2,standard_fun_index_era5)
  pmeio = apply(pmeio,2,standard_fun_index_era5)
  
  pmeato = pmeato[,2:3]
  pmeio = pmeio[,4]
  
  # import cmip6 data
  #############
  pmeato_ori3 = pmeato[,2]
  
  pmeato_cmip6 = import_index_insource_tibet(var = 'pme_cmip6',
                                             region = 'ato')
  # import cmip6 index
  pmeato256 = pmeato_cmip6[[1]]
  pmeato3_256 = pmeato256[[2]]
  
  pmeato585 = pmeato_cmip6[[2]]
  pmeato3_585 = pmeato585[[2]]
  
  models = colnames(pmeato3_256)
  
  #colnames(pmeato_ori3) = models
  models = c(models,'Ensemble')
  models <<- models
  #############
  
  
  
  pmeato3_256_ense = apply(pmeato3_256,1,mean)
  pmeato3_585_ense = apply(pmeato3_585,1,mean)
  
  pmeato3_256 = as.data.frame(pmeato3_256)
  pmeato3_585 = as.data.frame(pmeato3_585)
  
  pmeato3_256$Ensemble = pmeato3_256_ense
  pmeato3_585$Ensemble = pmeato3_585_ense
  
  i = 1:9
  
  stand_pmeato3_by_model256 <-function(i){
    tmp256 = pmeato3_256[,i]
    tmp585 = pmeato3_585[,i]
    
    tmp256 = trend_fun_index_cmip6_2003(tmp256)
    tmp585 = trend_fun_index_cmip6_2003(tmp585)
    
    means = mean(c(tmp256,tmp585))
    sds = sd(c(tmp256,tmp585))
    
    tmp256 = (tmp256 - means)/sds
    tmp585 = (tmp585 - means)/sds
    
    return(tmp256)
  }
  stand_pmeato3_by_model585 <-function(i){
    tmp256 = pmeato3_256[,i]
    tmp585 = pmeato3_585[,i]
    
    tmp256 = trend_fun_index_cmip6_2003(tmp256)
    tmp585 = trend_fun_index_cmip6_2003(tmp585)
    
    means = mean(c(tmp256,tmp585))
    sds = sd(c(tmp256,tmp585))
    
    tmp256 = (tmp256 - means)/sds
    tmp585 = (tmp585 - means)/sds
    
    return(tmp585)
  }
  #pmeato3_256_s = do.call(data.frame,lapply(i,stand_pmeato3_by_model256))
  #pmeato3_585_s = do.call(data.frame,lapply(i,stand_pmeato3_by_model585))
  pmeato3_256_s = apply(pmeato3_256,2,trend_fun_index_cmip6_2003)
  pmeato3_585_s = apply(pmeato3_585,2,trend_fun_index_cmip6_2003)
  
  proj_multi_pmeato3 = import_index_insource_tibet('proj_fut_pmeato3_multi')
  proj_multi_pmeato3_245 = proj_multi_pmeato3[,1]
  proj_multi_pmeato3_585 = proj_multi_pmeato3[,2]
  
  pmeato3_256_s[,9] = proj_multi_pmeato3_245
  pmeato3_585_s[,9] = proj_multi_pmeato3_585
  
  pmeato3_256 = pmeato3_256_s
  pmeato3_585 = pmeato3_585_s
  #pmeato_ori3 = pmeato[,2]
  
  pmeato_ori3 <<- pmeato_ori3
  
  # input temperature filed function
  era5_t = import_index_insource_tibet('era5_t_tibet')
  
  t_tpm_ssp245 = import_index_insource_tibet('ssp245_t_tpm')
  t_tpm_ssp585 = import_index_insource_tibet('ssp585_t_tpm')
  
  t_tpm1_ssp245 = t_tpm_ssp245[,1:8]
  t_tpm2_ssp245 = t_tpm_ssp245[,9:16]
  t_tpm1_ssp585 = t_tpm_ssp585[,1:8]
  t_tpm2_ssp585 = t_tpm_ssp585[,9:16]
  
  proj_tpm_ssp245 = import_index_insource_tibet('proj_ssp245_t_tpm')
  proj_tpm_ssp585 = import_index_insource_tibet('proj_ssp585_t_tpm')
  
  t_tpm1_ssp245 = cbind(t_tpm1_ssp245,proj_tpm_ssp245[,1])
  t_tpm2_ssp245 = cbind(t_tpm2_ssp245,proj_tpm_ssp245[,2])
  t_tpm1_ssp585 = cbind(t_tpm1_ssp585,proj_tpm_ssp585[,1])
  t_tpm2_ssp585 = cbind(t_tpm2_ssp585,proj_tpm_ssp585[,2])
  
  t_tpm1_ssp245 <<- t_tpm1_ssp245
  t_tpm2_ssp245 <<- t_tpm2_ssp245
  t_tpm1_ssp585 <<- t_tpm1_ssp585
  t_tpm2_ssp585 <<- t_tpm2_ssp585
  
  era5_t <<- era5_t
  
  sub_trains_rfmodel_subs1_256 <-function(i){
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/cnn_model_predict_tws.R")
    df = data.frame(
      tws = twsdf[,1],
      pmeato3 = pmeato_ori3,
      t = era5_t[,1]
    )
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/random_forest_model_tws_cmip6_raster_tibet.R")
    model_best = random_forest_model_tws_cmip6_raster_tibet(df) 
    
    df_project = data.frame(
      pmeato3 = as.numeric(pmeato3_256[1:1152,i]),
      t = as.numeric(t_tpm1_ssp245[1:1152,i])
      #pmeato3neg = -1*as.numeric(pmeato3_256[175:1152,i])
    )
    
    ret = predict(model_best,df_project)
    return(ret)
  }
  sub_trains_rfmodel_subs1_585 <-function(i){
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/cnn_model_predict_tws.R")
    df = data.frame(
      tws = twsdf[,1],
      pmeato3 = pmeato_ori3,
      t = era5_t[,1]
    )
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/random_forest_model_tws_cmip6_raster_tibet.R")
    model_best = random_forest_model_tws_cmip6_raster_tibet(df) 
    
    df_project = data.frame(
      pmeato3 = as.numeric(pmeato3_585[1:1152,i]),
      t = as.numeric(t_tpm1_ssp585[1:1152,i])
      #pmeato3neg = -1*as.numeric(pmeato3_256[175:1152,i])
    )
    
    ret = predict(model_best,df_project)
    return(ret)
  }
  sub_trains_rfmodel_subs2_256 <-function(i){
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/cnn_model_predict_tws.R")
    df = data.frame(
      tws = twsdf[,2],
      pmeato3 = pmeato_ori3,
      t = era5_t[,2]
    )
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/random_forest_model_tws_cmip6_raster_tibet.R")
    model_best = random_forest_model_tws_cmip6_raster_tibet(df) 
    
    df_project = data.frame(
      pmeato3 = as.numeric(pmeato3_256[1:1152,i]),
      t = as.numeric(t_tpm2_ssp245[1:1152,i])
      #pmeato3neg = -1*as.numeric(pmeato3_256[175:1152,i])
    )
    
    ret = predict(model_best,df_project)
    return(ret)
  }
  sub_trains_rfmodel_subs2_585 <-function(i){
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/cnn_model_predict_tws.R")
    df = data.frame(
      tws = twsdf[,2],
      pmeato3 = pmeato_ori3,
      t = era5_t[,2]
    )
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/random_forest_model_tws_cmip6_raster_tibet.R")
    model_best = random_forest_model_tws_cmip6_raster_tibet(df) 
    
    df_project = data.frame(
      pmeato3 = as.numeric(pmeato3_585[1:1152,i]),
      t = as.numeric(t_tpm2_ssp585[1:1152,i])
      #pmeato3neg = -1*as.numeric(pmeato3_256[175:1152,i])
    )
    
    ret = predict(model_best,df_project)
    return(ret)
  }
  
  library(doParallel)
  i <<- i 
  #df1 <<- df1
  #df2 <<- df2
  twsdf <<- twsdf
  pmeato3_256 <<- pmeato3_256
  pmeato3_585 <<- pmeato3_585
  pmeato_ori3 <<- pmeato_ori3
  #proj_tws_tp1_256 = sub_trains_rfmodel_subs1_256()
  #proj_tws_tp1_585 = sub_trains_rfmodel_subs1_585()
  #proj_tws_tp2_256 = sub_trains_rfmodel_subs2_256()
  #proj_tws_tp2_585 = sub_trains_rfmodel_subs2_585()
  
  
  cl = makeCluster(9)
  clusterExport(cl,c('i','pmeato3_256','pmeato_ori3',
                     'twsdf','pmeato3_585','t_tpm1_ssp245',
                     't_tpm2_ssp245','t_tpm1_ssp585','t_tpm2_ssp585',
                     'era5_t'))
  proj_tws_tp1_256 = parLapply(cl,i,sub_trains_rfmodel_subs1_256)
  stopCluster(cl) 
  
  cl = makeCluster(9)
  clusterExport(cl,c('i','pmeato3_256','twsdf','pmeato_ori3',
                     'pmeato3_585','t_tpm1_ssp245',
                     't_tpm2_ssp245','t_tpm1_ssp585','t_tpm2_ssp585',
                     'era5_t'))
  proj_tws_tp1_585 = parLapply(cl,i,sub_trains_rfmodel_subs1_585)
  stopCluster(cl) 
  
  
  cl = makeCluster(9)
  clusterExport(cl,c('i','pmeato3_256','twsdf','pmeato_ori3',
                     'pmeato3_585','t_tpm1_ssp245',
                     't_tpm2_ssp245','t_tpm1_ssp585','t_tpm2_ssp585',
                     'era5_t'))
  proj_tws_tp2_256 = parLapply(cl,i,sub_trains_rfmodel_subs2_256)
  stopCluster(cl) 
  
  cl = makeCluster(9)
  clusterExport(cl,c('i','pmeato3_256','twsdf','pmeato_ori3',
                     'pmeato3_585','t_tpm1_ssp245',
                     't_tpm2_ssp245','t_tpm1_ssp585','t_tpm2_ssp585',
                     'era5_t'))
  proj_tws_tp2_585 = parLapply(cl,i,sub_trains_rfmodel_subs2_585)
  stopCluster(cl) 
  
  proj_tws_tp1_256 = do.call(cbind,proj_tws_tp1_256)
  proj_tws_tp1_585 = do.call(cbind,proj_tws_tp1_585)
  proj_tws_tp2_256 = do.call(cbind,proj_tws_tp2_256)
  proj_tws_tp2_585 = do.call(cbind,proj_tws_tp2_585)
  
  ensemble_tws_tp1_256 = apply(proj_tws_tp1_256[,1:8],1,mean)
  ensemble_tws_tp1_585 = apply(proj_tws_tp1_585[,1:8],1,mean)
  ensemble_tws_tp2_256 = apply(proj_tws_tp2_256[,1:8],1,mean)
  ensemble_tws_tp2_585 = apply(proj_tws_tp2_585[,1:8],1,mean)
  
  
  ense1256 = c(proj_tws_tp1_256[,9])
  ense1585 = c(proj_tws_tp1_585[,9])
  
  ense2256 = c(proj_tws_tp2_256[,9])
  ense2585 = c(proj_tws_tp2_585[,9])  
  
  df = data.frame(ense1256,ense1585,
                  ense2256,ense2585)
  
  #proj_tws_tp1_256[,9] = ense1256
  #proj_tws_tp1_585[,9] = ense1585
  #proj_tws_tp2_256[,9] = ense2256
  #proj_tws_tp2_585[,9] = ense2585
  
  output = 'output_proj_tws/ensemble_tws_2020_2099_proj_pme_t'
  dir.create(output)
  output1 = 'output_proj_tws/ensemble_tws_2020_2099_proj_pme_t/twsdf_proj_pme_t.csv'
  fwrite(df,output1)
  
  #output2 = 'output_proj_tws/ensemble_tws_2020_2099_bc_cnn_final/proj_tws_tp1_245.csv'
  #output3 = 'output_proj_tws/ensemble_tws_2020_2099_bc_cnn_final/proj_tws_tp1_585.csv'
  #output4 = 'output_proj_tws/ensemble_tws_2020_2099_bc_cnn_final/proj_tws_tp2_245.csv'
  #output5 = 'output_proj_tws/ensemble_tws_2020_2099_bc_cnn_final/proj_tws_tp2_585.csv'
  
  #fwrite(proj_tws_tp1_256,output2)
  #fwrite(proj_tws_tp1_585,output3)
  #fwrite(proj_tws_tp2_256,output4)
  #fwrite(proj_tws_tp2_585,output5)
  
  ret_train = list(pmeato3_256,pmeato3_585)
  ret_proj = list(proj_tws_tp1_256,
                  proj_tws_tp1_585,
                  proj_tws_tp2_256,
                  proj_tws_tp2_585)
  return(list(ret_train,ret_proj))
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
}

















project_tws_in_south_tp12_by_trainonhist_random_withtemper_rel<-function(
  
){
  dir.create('output_proj_tws')
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/import_index_insource_tibet.R")
  trend_fun_index_cmip6<-function(x){
    x = as.numeric(x)
    loc2020 = length(2003:2020)*12-11
    loc2050 = length(2003:2099)*12
    x = x[loc2020:loc2050]
    xt = ts(x,start = c(2020,1),frequency = 12)
    xt = decompose(xt)$trend
    naid = which(is.na(xt))
    xt = xt[-naid]
    
    xt = (xt - mean(xt))/sd(xt)
    return(xt)
  }
  trend_fun_index_cmip6_2003<-function(x){
    x = as.numeric(x)
    #x = x[loc2020:loc2050]
    xt = ts(x,start = c(2003,1),frequency = 12)
    xt = decompose(xt)$trend
    
    naid = which(is.na(xt))
    xt = xt[-naid]
    
    xt = (xt-mean(xt))/sd(xt)
    return(xt)
  }
  trend_fun_index_era5<-function(x){
    x = as.numeric(x)
    xt = ts(x,start = c(2003,1),frequency = 12)
    xt = decompose(xt)$trend
    
    naid = which(is.na(xt))
    xt = xt[-naid]
    return(xt)
  }
  standard_fun_index_era5 <-function(x){
    xs = (x - mean(x))/sd(x)
    return(xs)
  }
  standard_fun_index_tws <-function(x){
    xs = (x)/sd(x)
    return(xs)
  }
  # import data section
  
  # input index tws trend items in tibet based on era5 
  twsdf = import_index_insource_tibet(var = 'tws_tibet')  
  meatws = apply(twsdf,2,mean)
  sdtws = apply(twsdf,2,sd)
  
  twsdf = apply(twsdf,2,standard_fun_index_tws)
  twsdf = twsdf[,1:2]
  
  # input and choose pmes based on the relationships
  pmeato1 = import_index_insource_tibet(var = 'pme_mean',region = 'ato')
  pmeio1 = import_index_insource_tibet(var = 'pme_mean',region = 'io')
  
  pmeato = pmeato1[1:174,]
  pmeio = pmeio1[1:174,]
  
  pmeato = apply(pmeato,2,trend_fun_index_era5)
  mean_pmeato3 = mean(pmeato[,3])
  sd_pmeato3 = sd(pmeato[,3])
  
  pmeio = apply(pmeio,2,trend_fun_index_era5)
  pmeato = apply(pmeato,2,standard_fun_index_era5)
  pmeio = apply(pmeio,2,standard_fun_index_era5)
  
  pmeato = pmeato[,2:3]
  pmeio = pmeio[,4]
  
  # import cmip6 data
  #############
  pmeato_ori3 = pmeato[,2]
  
  pmeato_cmip6 = import_index_insource_tibet(var = 'pme_cmip6',
                                             region = 'ato')
  # import cmip6 index
  pmeato256 = pmeato_cmip6[[1]]
  pmeato3_256 = pmeato256[[2]]
  
  pmeato585 = pmeato_cmip6[[2]]
  pmeato3_585 = pmeato585[[2]]
  
  models = colnames(pmeato3_256)
  
  #colnames(pmeato_ori3) = models
  models = c(models,'Ensemble')
  models <<- models
  #############
  
  
  
  pmeato3_256_ense = apply(pmeato3_256,1,mean)
  pmeato3_585_ense = apply(pmeato3_585,1,mean)
  
  pmeato3_256 = as.data.frame(pmeato3_256)
  pmeato3_585 = as.data.frame(pmeato3_585)
  
  pmeato3_256$Ensemble = pmeato3_256_ense
  pmeato3_585$Ensemble = pmeato3_585_ense
  
  i = 1:9
  
  stand_pmeato3_by_model256 <-function(i){
    tmp256 = pmeato3_256[,i]
    tmp585 = pmeato3_585[,i]
    
    tmp256 = trend_fun_index_cmip6_2003(tmp256)
    tmp585 = trend_fun_index_cmip6_2003(tmp585)
    
    means = mean(c(tmp256,tmp585))
    sds = sd(c(tmp256,tmp585))
    
    tmp256 = (tmp256 - means)/sds
    tmp585 = (tmp585 - means)/sds
    
    return(tmp256)
  }
  stand_pmeato3_by_model585 <-function(i){
    tmp256 = pmeato3_256[,i]
    tmp585 = pmeato3_585[,i]
    
    tmp256 = trend_fun_index_cmip6_2003(tmp256)
    tmp585 = trend_fun_index_cmip6_2003(tmp585)
    
    means = mean(c(tmp256,tmp585))
    sds = sd(c(tmp256,tmp585))
    
    tmp256 = (tmp256 - means)/sds
    tmp585 = (tmp585 - means)/sds
    
    return(tmp585)
  }
  #pmeato3_256_s = do.call(data.frame,lapply(i,stand_pmeato3_by_model256))
  #pmeato3_585_s = do.call(data.frame,lapply(i,stand_pmeato3_by_model585))
  pmeato3_256_s = apply(pmeato3_256,2,trend_fun_index_cmip6_2003)
  pmeato3_585_s = apply(pmeato3_585,2,trend_fun_index_cmip6_2003)
  
  #proj_multi_pmeato3 = import_index_insource_tibet('proj_fut_pmeato3_multi')
  #proj_multi_pmeato3_245 = proj_multi_pmeato3[,1]
  #proj_multi_pmeato3_585 = proj_multi_pmeato3[,2]
  
  #pmeato3_256_s[,9] = proj_multi_pmeato3_245
  #pmeato3_585_s[,9] = proj_multi_pmeato3_585
  
  pmeato3_256 = pmeato3_256_s
  pmeato3_585 = pmeato3_585_s
  #pmeato_ori3 = pmeato[,2]
  
  pmeato_ori3 <<- pmeato_ori3
  
  # input temperature filed function
  era5_t = import_index_insource_tibet('era5_t_tibet')
  
  t_tpm_ssp245 = import_index_insource_tibet('ssp245_t_tpm')
  t_tpm_ssp585 = import_index_insource_tibet('ssp585_t_tpm')
  
  t_tpm1_ssp245 = t_tpm_ssp245[,1:8]
  t_tpm2_ssp245 = t_tpm_ssp245[,9:16]
  t_tpm1_ssp585 = t_tpm_ssp585[,1:8]
  t_tpm2_ssp585 = t_tpm_ssp585[,9:16]
  
  proj_tpm_ssp245 = import_index_insource_tibet('proj_ssp245_t_tpm')
  proj_tpm_ssp585 = import_index_insource_tibet('proj_ssp585_t_tpm')
  
  t_tpm1_ssp245 = cbind(t_tpm1_ssp245,proj_tpm_ssp245[,1])
  t_tpm2_ssp245 = cbind(t_tpm2_ssp245,proj_tpm_ssp245[,2])
  t_tpm1_ssp585 = cbind(t_tpm1_ssp585,proj_tpm_ssp585[,1])
  t_tpm2_ssp585 = cbind(t_tpm2_ssp585,proj_tpm_ssp585[,2])
  
  t_tpm1_ssp245 <<- t_tpm1_ssp245
  t_tpm2_ssp245 <<- t_tpm2_ssp245
  t_tpm1_ssp585 <<- t_tpm1_ssp585
  t_tpm2_ssp585 <<- t_tpm2_ssp585
  
  era5_t <<- era5_t
  
  sub_trains_rfmodel_subs1_256 <-function(i){
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/cnn_model_predict_tws.R")
    df = data.frame(
      tws = twsdf[,1],
      pmeato3 = pmeato_ori3,
      t = era5_t[,1]
    )
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/random_forest_model_tws_cmip6_raster_tibet.R")
    model_best = random_forest_model_tws_cmip6_raster_tibet(df) 
    
    df_project = data.frame(
      pmeato3 = as.numeric(pmeato3_256[1:1152,i]),
      t = as.numeric(t_tpm1_ssp245[1:1152,i])
      #pmeato3neg = -1*as.numeric(pmeato3_256[175:1152,i])
    )
    
    ret = predict(model_best,df_project)
    return(ret)
  }
  sub_trains_rfmodel_subs1_585 <-function(i){
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/cnn_model_predict_tws.R")
    df = data.frame(
      tws = twsdf[,1],
      pmeato3 = pmeato_ori3,
      t = era5_t[,1]
    )
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/random_forest_model_tws_cmip6_raster_tibet.R")
    model_best = random_forest_model_tws_cmip6_raster_tibet(df) 
    
    df_project = data.frame(
      pmeato3 = as.numeric(pmeato3_585[1:1152,i]),
      t = as.numeric(t_tpm1_ssp585[1:1152,i])
      #pmeato3neg = -1*as.numeric(pmeato3_256[175:1152,i])
    )
    
    ret = predict(model_best,df_project)
    return(ret)
  }
  sub_trains_rfmodel_subs2_256 <-function(i){
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/cnn_model_predict_tws.R")
    df = data.frame(
      tws = twsdf[,2],
      pmeato3 = pmeato_ori3,
      t = era5_t[,2]
    )
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/random_forest_model_tws_cmip6_raster_tibet.R")
    model_best = random_forest_model_tws_cmip6_raster_tibet(df) 
    
    df_project = data.frame(
      pmeato3 = as.numeric(pmeato3_256[1:1152,i]),
      t = as.numeric(t_tpm2_ssp245[1:1152,i])
      #pmeato3neg = -1*as.numeric(pmeato3_256[175:1152,i])
    )
    
    ret = predict(model_best,df_project)
    return(ret)
  }
  sub_trains_rfmodel_subs2_585 <-function(i){
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/cnn_model_predict_tws.R")
    df = data.frame(
      tws = twsdf[,2],
      pmeato3 = pmeato_ori3,
      t = era5_t[,2]
    )
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/random_forest_model_tws_cmip6_raster_tibet.R")
    model_best = random_forest_model_tws_cmip6_raster_tibet(df) 
    
    df_project = data.frame(
      pmeato3 = as.numeric(pmeato3_585[1:1152,i]),
      t = as.numeric(t_tpm2_ssp585[1:1152,i])
      #pmeato3neg = -1*as.numeric(pmeato3_256[175:1152,i])
    )
    
    ret = predict(model_best,df_project)
    return(ret)
  }
  
  library(doParallel)
  i <<- i 
  #df1 <<- df1
  #df2 <<- df2
  twsdf <<- twsdf
  pmeato3_256 <<- pmeato3_256
  pmeato3_585 <<- pmeato3_585
  pmeato_ori3 <<- pmeato_ori3
  #proj_tws_tp1_256 = sub_trains_rfmodel_subs1_256()
  #proj_tws_tp1_585 = sub_trains_rfmodel_subs1_585()
  #proj_tws_tp2_256 = sub_trains_rfmodel_subs2_256()
  #proj_tws_tp2_585 = sub_trains_rfmodel_subs2_585()
  
  
  cl = makeCluster(9)
  clusterExport(cl,c('i','pmeato3_256','pmeato_ori3',
                     'twsdf','pmeato3_585','t_tpm1_ssp245',
                     't_tpm2_ssp245','t_tpm1_ssp585','t_tpm2_ssp585',
                     'era5_t'))
  proj_tws_tp1_256 = parLapply(cl,i,sub_trains_rfmodel_subs1_256)
  stopCluster(cl) 
  
  cl = makeCluster(9)
  clusterExport(cl,c('i','pmeato3_256','twsdf','pmeato_ori3',
                     'pmeato3_585','t_tpm1_ssp245',
                     't_tpm2_ssp245','t_tpm1_ssp585','t_tpm2_ssp585',
                     'era5_t'))
  proj_tws_tp1_585 = parLapply(cl,i,sub_trains_rfmodel_subs1_585)
  stopCluster(cl) 
  
  
  cl = makeCluster(9)
  clusterExport(cl,c('i','pmeato3_256','twsdf','pmeato_ori3',
                     'pmeato3_585','t_tpm1_ssp245',
                     't_tpm2_ssp245','t_tpm1_ssp585','t_tpm2_ssp585',
                     'era5_t'))
  proj_tws_tp2_256 = parLapply(cl,i,sub_trains_rfmodel_subs2_256)
  stopCluster(cl) 
  
  cl = makeCluster(9)
  clusterExport(cl,c('i','pmeato3_256','twsdf','pmeato_ori3',
                     'pmeato3_585','t_tpm1_ssp245',
                     't_tpm2_ssp245','t_tpm1_ssp585','t_tpm2_ssp585',
                     'era5_t'))
  proj_tws_tp2_585 = parLapply(cl,i,sub_trains_rfmodel_subs2_585)
  stopCluster(cl) 
  
  proj_tws_tp1_256 = do.call(cbind,proj_tws_tp1_256)
  proj_tws_tp1_585 = do.call(cbind,proj_tws_tp1_585)
  proj_tws_tp2_256 = do.call(cbind,proj_tws_tp2_256)
  proj_tws_tp2_585 = do.call(cbind,proj_tws_tp2_585)
  
  ensemble_tws_tp1_256 = apply(proj_tws_tp1_256[,1:8],1,mean)
  ensemble_tws_tp1_585 = apply(proj_tws_tp1_585[,1:8],1,mean)
  ensemble_tws_tp2_256 = apply(proj_tws_tp2_256[,1:8],1,mean)
  ensemble_tws_tp2_585 = apply(proj_tws_tp2_585[,1:8],1,mean)
  
  
  ense1256 = c(ensemble_tws_tp1_256)
  ense1585 = c(ensemble_tws_tp1_585)
  
  ense2256 = c(ensemble_tws_tp2_256)
  ense2585 = c(ensemble_tws_tp2_585)  
  
  df = data.frame(ense1256,ense1585,
                  ense2256,ense2585)
  
  #proj_tws_tp1_256[,9] = ense1256
  #proj_tws_tp1_585[,9] = ense1585
  #proj_tws_tp2_256[,9] = ense2256
  #proj_tws_tp2_585[,9] = ense2585
  
  output = 'output_proj_tws/ensemble_tws_2020_2099_bc_cnn_final'
  dir.create(output)
  output1 = 'output_proj_tws/ensemble_tws_2020_2099_bc_cnn_final/twsdf_in_tibet_consider_hist.csv'
  #fwrite(df,output1)
  
  #output2 = 'output_proj_tws/ensemble_tws_2020_2099_bc_cnn_final/proj_tws_tp1_245.csv'
  #output3 = 'output_proj_tws/ensemble_tws_2020_2099_bc_cnn_final/proj_tws_tp1_585.csv'
  #output4 = 'output_proj_tws/ensemble_tws_2020_2099_bc_cnn_final/proj_tws_tp2_245.csv'
  #output5 = 'output_proj_tws/ensemble_tws_2020_2099_bc_cnn_final/proj_tws_tp2_585.csv'
  
  #fwrite(proj_tws_tp1_256,output2)
  #fwrite(proj_tws_tp1_585,output3)
  #fwrite(proj_tws_tp2_256,output4)
  #fwrite(proj_tws_tp2_585,output5)
  
  ret_train = list(pmeato3_256,pmeato3_585)
  ret_proj = list(proj_tws_tp1_256,
                  proj_tws_tp1_585,
                  proj_tws_tp2_256,
                  proj_tws_tp2_585)
  return(list(ret_train,ret_proj))
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
}

















project_tws_in_south_tp12_by_trainonhist_random<-function(
  
){
  dir.create('output_proj_tws')
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/import_index_insource_tibet.R")
  trend_fun_index_cmip6<-function(x){
    x = as.numeric(x)
    loc2020 = length(2003:2020)*12-11
    loc2050 = length(2003:2099)*12
    x = x[loc2020:loc2050]
    xt = ts(x,start = c(2020,1),frequency = 12)
    xt = decompose(xt)$trend
    naid = which(is.na(xt))
    xt = xt[-naid]
    
    xt = (xt - mean(xt))/sd(xt)
    return(xt)
  }
  trend_fun_index_cmip6_2003<-function(x){
    x = as.numeric(x)
    #x = x[loc2020:loc2050]
    xt = ts(x,start = c(2003,1),frequency = 12)
    xt = decompose(xt)$trend
    
    naid = which(is.na(xt))
    xt = xt[-naid]
    
    return(xt)
  }
  trend_fun_index_era5<-function(x){
    x = as.numeric(x)
    xt = ts(x,start = c(2003,1),frequency = 12)
    xt = decompose(xt)$trend
    
    naid = which(is.na(xt))
    xt = xt[-naid]
    return(xt)
  }
  standard_fun_index_era5 <-function(x){
    xs = (x - mean(x))/sd(x)
    return(xs)
  }
  standard_fun_index_tws <-function(x){
    xs = (x)/sd(x)
    return(xs)
  }
  # import data section
  
  # input index tws trend items in tibet based on era5 
  twsdf = import_index_insource_tibet(var = 'tws_tibet')  
  meatws = apply(twsdf,2,mean)
  sdtws = apply(twsdf,2,sd)
  
  twsdf = apply(twsdf,2,standard_fun_index_tws)
  twsdf = twsdf[,1:2]
  
  # input and choose pmes based on the relationships
  pmeato1 = import_index_insource_tibet(var = 'pme_mean',region = 'ato')
  pmeio1 = import_index_insource_tibet(var = 'pme_mean',region = 'io')
  
  pmeato = pmeato1[1:174,]
  pmeio = pmeio1[1:174,]
  
  pmeato = apply(pmeato,2,trend_fun_index_era5)
  mean_pmeato3 = mean(pmeato[,3])
  sd_pmeato3 = sd(pmeato[,3])
  
  pmeio = apply(pmeio,2,trend_fun_index_era5)
  pmeato = apply(pmeato,2,standard_fun_index_era5)
  pmeio = apply(pmeio,2,standard_fun_index_era5)
  
  pmeato = pmeato[,2:3]
  pmeio = pmeio[,4]
  
  # import cmip6 data
  #############
  pmeato_ori3 = pmeato[,2]
  
  pmeato_cmip6 = import_index_insource_tibet(var = 'pme_cmip6',
                                             region = 'ato')
  # import cmip6 index
  pmeato256 = pmeato_cmip6[[1]]
  pmeato3_256 = pmeato256[[2]]
  
  pmeato585 = pmeato_cmip6[[2]]
  pmeato3_585 = pmeato585[[2]]
  
  models = colnames(pmeato3_256)
  
  #colnames(pmeato_ori3) = models
  models = c(models,'Ensemble')
  models <<- models
  #############
  pmeato3_256_ense = apply(pmeato3_256,1,mean)
  pmeato3_585_ense = apply(pmeato3_585,1,mean)
  
  pmeato3_256 = as.data.frame(pmeato3_256)
  pmeato3_585 = as.data.frame(pmeato3_585)
  
  pmeato3_256$Ensemble = pmeato3_256_ense
  pmeato3_585$Ensemble = pmeato3_585_ense
  
  i = 1:9
  
  stand_pmeato3_by_model256 <-function(i){
    tmp256 = pmeato3_256[,i]
    tmp585 = pmeato3_585[,i]
    
    tmp256 = trend_fun_index_cmip6_2003(tmp256)
    tmp585 = trend_fun_index_cmip6_2003(tmp585)
    
    means = mean(c(tmp256,tmp585))
    sds = sd(c(tmp256,tmp585))
    
    tmp256 = (tmp256 - means)/sds
    tmp585 = (tmp585 - means)/sds
    
    return(tmp256)
  }
  stand_pmeato3_by_model585 <-function(i){
    tmp256 = pmeato3_256[,i]
    tmp585 = pmeato3_585[,i]
    
    tmp256 = trend_fun_index_cmip6_2003(tmp256)
    tmp585 = trend_fun_index_cmip6_2003(tmp585)
    
    means = mean(c(tmp256,tmp585))
    sds = sd(c(tmp256,tmp585))
    
    tmp256 = (tmp256 - means)/sds
    tmp585 = (tmp585 - means)/sds
    
    return(tmp585)
  }
  pmeato3_256_s = do.call(data.frame,lapply(i,stand_pmeato3_by_model256))
  pmeato3_585_s = do.call(data.frame,lapply(i,stand_pmeato3_by_model585))
  
  pmeato3_256 = pmeato3_256_s
  pmeato3_585 = pmeato3_585_s
  #pmeato_ori3 = pmeato[,2]
  
  pmeato_ori3 <<- pmeato_ori3
  
  
  sub_trains_rfmodel_subs1_256 <-function(i){
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/cnn_model_predict_tws.R")
    df = data.frame(
      tws = twsdf[,1],
      pmeato3 = pmeato_ori3
    )
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/random_forest_model_tws_cmip6_raster_tibet.R")
    model_best = random_forest_model_tws_cmip6_raster_tibet(df) 
    
    df_project = data.frame(
      pmeato3 = as.numeric(pmeato3_256[1:1152,i])
      #pmeato3neg = -1*as.numeric(pmeato3_256[175:1152,i])
    )
    
    ret = predict(model_best,df_project)
    return(ret)
  }
  sub_trains_rfmodel_subs1_585 <-function(i){
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/cnn_model_predict_tws.R")
    df = data.frame(
      tws = twsdf[,1],
      pmeato3 = pmeato_ori3
    )
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/random_forest_model_tws_cmip6_raster_tibet.R")
    model_best = random_forest_model_tws_cmip6_raster_tibet(df) 
    
    df_project = data.frame(
      pmeato3 = as.numeric(pmeato3_585[1:1152,i])
      #pmeato3neg = -1*as.numeric(pmeato3_256[175:1152,i])
    )
    
    ret = predict(model_best,df_project)
    return(ret)
  }
  sub_trains_rfmodel_subs2_256 <-function(i){
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/cnn_model_predict_tws.R")
    df = data.frame(
      tws = twsdf[,2],
      pmeato3 = pmeato_ori3
    )
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/random_forest_model_tws_cmip6_raster_tibet.R")
    model_best = random_forest_model_tws_cmip6_raster_tibet(df) 
    
    df_project = data.frame(
      pmeato3 = as.numeric(pmeato3_256[1:1152,i])
      #pmeato3neg = -1*as.numeric(pmeato3_256[175:1152,i])
    )
    
    ret = predict(model_best,df_project)
    return(ret)
  }
  sub_trains_rfmodel_subs2_585 <-function(i){
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/cnn_model_predict_tws.R")
    df = data.frame(
      tws = twsdf[,2],
      pmeato3 = pmeato_ori3
    )
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/random_forest_model_tws_cmip6_raster_tibet.R")
    model_best = random_forest_model_tws_cmip6_raster_tibet(df) 
    
    df_project = data.frame(
      pmeato3 = as.numeric(pmeato3_585[1:1152,i])
      #pmeato3neg = -1*as.numeric(pmeato3_256[175:1152,i])
    )
    
    ret = predict(model_best,df_project)
    return(ret)
  }
  
  library(doParallel)
  i <<- i 
  #df1 <<- df1
  #df2 <<- df2
  twsdf <<- twsdf
  pmeato3_256 <<- pmeato3_256
  pmeato3_585 <<- pmeato3_585
  pmeato_ori3 <<- pmeato_ori3
  #proj_tws_tp1_256 = sub_trains_rfmodel_subs1_256()
  #proj_tws_tp1_585 = sub_trains_rfmodel_subs1_585()
  #proj_tws_tp2_256 = sub_trains_rfmodel_subs2_256()
  #proj_tws_tp2_585 = sub_trains_rfmodel_subs2_585()
  
  
  cl = makeCluster(9)
  clusterExport(cl,c('i','pmeato3_256','pmeato_ori3',
                     'twsdf','pmeato3_585'))
  proj_tws_tp1_256 = parLapply(cl,i,sub_trains_rfmodel_subs1_256)
  stopCluster(cl) 
  
  cl = makeCluster(9)
  clusterExport(cl,c('i','pmeato3_256','twsdf','pmeato_ori3',
                     'pmeato3_585'))
  proj_tws_tp1_585 = parLapply(cl,i,sub_trains_rfmodel_subs1_585)
  stopCluster(cl) 
  
  
  cl = makeCluster(9)
  clusterExport(cl,c('i','pmeato3_256','twsdf','pmeato_ori3',
                     'pmeato3_585'))
  proj_tws_tp2_256 = parLapply(cl,i,sub_trains_rfmodel_subs2_256)
  stopCluster(cl) 
  
  cl = makeCluster(9)
  clusterExport(cl,c('i','pmeato3_256','twsdf','pmeato_ori3',
                     'pmeato3_585'))
  proj_tws_tp2_585 = parLapply(cl,i,sub_trains_rfmodel_subs2_585)
  stopCluster(cl) 
  
  proj_tws_tp1_256 = do.call(cbind,proj_tws_tp1_256)
  proj_tws_tp1_585 = do.call(cbind,proj_tws_tp1_585)
  proj_tws_tp2_256 = do.call(cbind,proj_tws_tp2_256)
  proj_tws_tp2_585 = do.call(cbind,proj_tws_tp2_585)
  
  ensemble_tws_tp1_256 = apply(proj_tws_tp1_256[,1:8],1,mean)
  ensemble_tws_tp1_585 = apply(proj_tws_tp1_585[,1:8],1,mean)
  ensemble_tws_tp2_256 = apply(proj_tws_tp2_256[,1:8],1,mean)
  ensemble_tws_tp2_585 = apply(proj_tws_tp2_585[,1:8],1,mean)
  
  
  ense1256 = c(ensemble_tws_tp1_256)
  ense1585 = c(ensemble_tws_tp1_585)
  
  ense2256 = c(ensemble_tws_tp2_256)
  ense2585 = c(ensemble_tws_tp2_585)  
  
  df = data.frame(ense1256,ense1585,
                  ense2256,ense2585)
  
  proj_tws_tp1_256[,9] = ense1256
  proj_tws_tp1_585[,9] = ense1585
  proj_tws_tp2_256[,9] = ense2256
  proj_tws_tp2_585[,9] = ense2585
  
  output = 'output_proj_tws/ensemble_tws_2020_2099_onlypme'
  dir.create(output)
  output1 = 'output_proj_tws/ensemble_tws_2020_2099_onlypme/twsdf_onlypme.csv'
  fwrite(df,output1)
  
  output2 = 'output_proj_tws/ensemble_tws_2020_2099_bc_cnn_final/proj_tws_tp1_245.csv'
  output3 = 'output_proj_tws/ensemble_tws_2020_2099_bc_cnn_final/proj_tws_tp1_585.csv'
  output4 = 'output_proj_tws/ensemble_tws_2020_2099_bc_cnn_final/proj_tws_tp2_245.csv'
  output5 = 'output_proj_tws/ensemble_tws_2020_2099_bc_cnn_final/proj_tws_tp2_585.csv'
  
  fwrite(proj_tws_tp1_256,output2)
  fwrite(proj_tws_tp1_585,output3)
  fwrite(proj_tws_tp2_256,output4)
  fwrite(proj_tws_tp2_585,output5)
  
  ret_train = list(pmeato3_256,pmeato3_585)
  ret_proj = list(proj_tws_tp1_256,
                  proj_tws_tp1_585,
                  proj_tws_tp2_256,
                  proj_tws_tp2_585)
  return(list(ret_train,ret_proj))
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
}

















project_tws_in_south_tp12_withtemper_by_trainonhist_random<-function(
  
){
  dir.create('output_proj_tws')
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/import_index_insource_tibet.R")
  trend_fun_index_cmip6<-function(x){
    x = as.numeric(x)
    loc2020 = length(2003:2020)*12-11
    loc2050 = length(2003:2099)*12
    x = x[loc2020:loc2050]
    xt = ts(x,start = c(2020,1),frequency = 12)
    xt = decompose(xt)$trend
    naid = which(is.na(xt))
    xt = xt[-naid]
    
    xt = (xt - mean(xt))/sd(xt)
    return(xt)
  }
  trend_fun_index_cmip6_2003<-function(x){
    x = as.numeric(x)
    #x = x[loc2020:loc2050]
    xt = ts(x,start = c(2003,1),frequency = 12)
    xt = decompose(xt)$trend
    
    naid = which(is.na(xt))
    xt = xt[-naid]
    
    xt = (xt-mean(xt))/sd(xt)
    return(xt)
  }
  trend_fun_index_era5<-function(x){
    x = as.numeric(x)
    xt = ts(x,start = c(2003,1),frequency = 12)
    xt = decompose(xt)$trend
    
    naid = which(is.na(xt))
    xt = xt[-naid]
    return(xt)
  }
  standard_fun_index_era5 <-function(x){
    xs = (x - mean(x))/sd(x)
    return(xs)
  }
  standard_fun_index_tws <-function(x){
    xs = (x)/sd(x)
    return(xs)
  }
  # import data section
  
  # input index tws trend items in tibet based on era5 
  twsdf = import_index_insource_tibet(var = 'tws_tibet')  
  meatws = apply(twsdf,2,mean)
  sdtws = apply(twsdf,2,sd)
  
  twsdf = apply(twsdf,2,standard_fun_index_tws)
  twsdf = twsdf[,1:2]
  
  # input and choose pmes based on the relationships
  pmeato1 = import_index_insource_tibet(var = 'pme_mean',region = 'ato')
  pmeio1 = import_index_insource_tibet(var = 'pme_mean',region = 'io')
  
  pmeato = pmeato1[1:174,]
  pmeio = pmeio1[1:174,]
  
  pmeato = apply(pmeato,2,trend_fun_index_era5)
  mean_pmeato3 = mean(pmeato[,3])
  sd_pmeato3 = sd(pmeato[,3])
  
  pmeio = apply(pmeio,2,trend_fun_index_era5)
  pmeato = apply(pmeato,2,standard_fun_index_era5)
  pmeio = apply(pmeio,2,standard_fun_index_era5)
  
  pmeato = pmeato[,2:3]
  pmeio = pmeio[,4]
  
  # import cmip6 data
  #############
  pmeato_ori3 = pmeato[,2]
  
  pmeato_cmip6 = import_index_insource_tibet(var = 'pme_cmip6',
                                             region = 'ato')
  # import cmip6 index
  pmeato256 = pmeato_cmip6[[1]]
  pmeato3_256 = pmeato256[[2]]
  
  pmeato585 = pmeato_cmip6[[2]]
  pmeato3_585 = pmeato585[[2]]
  
  models = colnames(pmeato3_256)
  
  #colnames(pmeato_ori3) = models
  models = c(models,'Ensemble')
  models <<- models
  #############
  
  
  
  pmeato3_256_ense = apply(pmeato3_256,1,mean)
  pmeato3_585_ense = apply(pmeato3_585,1,mean)
  
  pmeato3_256 = as.data.frame(pmeato3_256)
  pmeato3_585 = as.data.frame(pmeato3_585)
  
  pmeato3_256$Ensemble = pmeato3_256_ense
  pmeato3_585$Ensemble = pmeato3_585_ense
  
  i = 1:9
  
  stand_pmeato3_by_model256 <-function(i){
    tmp256 = pmeato3_256[,i]
    tmp585 = pmeato3_585[,i]
    
    tmp256 = trend_fun_index_cmip6_2003(tmp256)
    tmp585 = trend_fun_index_cmip6_2003(tmp585)
    
    means = mean(c(tmp256,tmp585))
    sds = sd(c(tmp256,tmp585))
    
    tmp256 = (tmp256 - means)/sds
    tmp585 = (tmp585 - means)/sds
    
    return(tmp256)
  }
  stand_pmeato3_by_model585 <-function(i){
    tmp256 = pmeato3_256[,i]
    tmp585 = pmeato3_585[,i]
    
    tmp256 = trend_fun_index_cmip6_2003(tmp256)
    tmp585 = trend_fun_index_cmip6_2003(tmp585)
    
    means = mean(c(tmp256,tmp585))
    sds = sd(c(tmp256,tmp585))
    
    tmp256 = (tmp256 - means)/sds
    tmp585 = (tmp585 - means)/sds
    
    return(tmp585)
  }
  #pmeato3_256_s = do.call(data.frame,lapply(i,stand_pmeato3_by_model256))
  #pmeato3_585_s = do.call(data.frame,lapply(i,stand_pmeato3_by_model585))
  pmeato3_256_s = apply(pmeato3_256,2,trend_fun_index_cmip6_2003)
  pmeato3_585_s = apply(pmeato3_585,2,trend_fun_index_cmip6_2003)
  
  proj_multi_pmeato3 = import_index_insource_tibet('proj_fut_pmeato3_multi')
  proj_multi_pmeato3_245 = proj_multi_pmeato3[,1]
  proj_multi_pmeato3_585 = proj_multi_pmeato3[,2]
  
  pmeato3_256_s[,9] = proj_multi_pmeato3_245
  pmeato3_585_s[,9] = proj_multi_pmeato3_585
  
  pmeato3_256 = pmeato3_256_s
  pmeato3_585 = pmeato3_585_s
  #pmeato_ori3 = pmeato[,2]
  
  pmeato_ori3 <<- pmeato_ori3
  
  # input temperature filed function
  era5_t = import_index_insource_tibet('era5_t_tibet')
  
  t_tpm_ssp245 = import_index_insource_tibet('ssp245_t_tpm')
  t_tpm_ssp585 = import_index_insource_tibet('ssp585_t_tpm')
  
  t_tpm1_ssp245 = t_tpm_ssp245[,1:8]
  t_tpm2_ssp245 = t_tpm_ssp245[,9:16]
  t_tpm1_ssp585 = t_tpm_ssp585[,1:8]
  t_tpm2_ssp585 = t_tpm_ssp585[,9:16]
  
  proj_tpm_ssp245 = import_index_insource_tibet('proj_ssp245_t_tpm')
  proj_tpm_ssp585 = import_index_insource_tibet('proj_ssp585_t_tpm')
  
  t_tpm1_ssp245 = cbind(t_tpm1_ssp245,proj_tpm_ssp245[,1])
  t_tpm2_ssp245 = cbind(t_tpm2_ssp245,proj_tpm_ssp245[,2])
  t_tpm1_ssp585 = cbind(t_tpm1_ssp585,proj_tpm_ssp585[,1])
  t_tpm2_ssp585 = cbind(t_tpm2_ssp585,proj_tpm_ssp585[,2])
  
  t_tpm1_ssp245 <<- t_tpm1_ssp245
  t_tpm2_ssp245 <<- t_tpm2_ssp245
  t_tpm1_ssp585 <<- t_tpm1_ssp585
  t_tpm2_ssp585 <<- t_tpm2_ssp585
  
  era5_t <<- era5_t
  
  sub_trains_rfmodel_subs1_256 <-function(i){
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/cnn_model_predict_tws.R")
    df = data.frame(
      tws = twsdf[,1],
      pmeato3 = pmeato_ori3
      #t = era5_t[,1]
    )
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/random_forest_model_tws_cmip6_raster_tibet.R")
    model_best = random_forest_model_tws_cmip6_raster_tibet(df) 
    
    df_project = data.frame(
      pmeato3 = as.numeric(pmeato3_256[1:1152,i])
      #t = as.numeric(t_tpm1_ssp245[1:1152,i])
      #pmeato3neg = -1*as.numeric(pmeato3_256[175:1152,i])
    )
    
    ret = predict(model_best,df_project)
    return(ret)
  }
  sub_trains_rfmodel_subs1_585 <-function(i){
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/cnn_model_predict_tws.R")
    df = data.frame(
      tws = twsdf[,1],
      pmeato3 = pmeato_ori3
      #t = era5_t[,1]
    )
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/random_forest_model_tws_cmip6_raster_tibet.R")
    model_best = random_forest_model_tws_cmip6_raster_tibet(df) 
    
    df_project = data.frame(
      pmeato3 = as.numeric(pmeato3_585[1:1152,i])
      #t = as.numeric(t_tpm1_ssp585[1:1152,i])
      #pmeato3neg = -1*as.numeric(pmeato3_256[175:1152,i])
    )
    
    ret = predict(model_best,df_project)
    return(ret)
  }
  sub_trains_rfmodel_subs2_256 <-function(i){
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/cnn_model_predict_tws.R")
    df = data.frame(
      tws = twsdf[,2],
      pmeato3 = pmeato_ori3
      #t = era5_t[,2]
    )
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/random_forest_model_tws_cmip6_raster_tibet.R")
    model_best = random_forest_model_tws_cmip6_raster_tibet(df) 
    
    df_project = data.frame(
      pmeato3 = as.numeric(pmeato3_256[1:1152,i])
      #t = as.numeric(t_tpm2_ssp245[1:1152,i])
      #pmeato3neg = -1*as.numeric(pmeato3_256[175:1152,i])
    )
    
    ret = predict(model_best,df_project)
    return(ret)
  }
  sub_trains_rfmodel_subs2_585 <-function(i){
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/cnn_model_predict_tws.R")
    df = data.frame(
      tws = twsdf[,2],
      pmeato3 = pmeato_ori3#,
      #t = era5_t[,2]
    )
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/random_forest_model_tws_cmip6_raster_tibet.R")
    model_best = random_forest_model_tws_cmip6_raster_tibet(df) 
    
    df_project = data.frame(
      pmeato3 = as.numeric(pmeato3_585[1:1152,i])
      #t = as.numeric(t_tpm2_ssp585[1:1152,i])
      #pmeato3neg = -1*as.numeric(pmeato3_256[175:1152,i])
    )
    
    ret = predict(model_best,df_project)
    return(ret)
  }
  
  library(doParallel)
  i <<- i 
  #df1 <<- df1
  #df2 <<- df2
  twsdf <<- twsdf
  pmeato3_256 <<- pmeato3_256
  pmeato3_585 <<- pmeato3_585
  pmeato_ori3 <<- pmeato_ori3
  #proj_tws_tp1_256 = sub_trains_rfmodel_subs1_256()
  #proj_tws_tp1_585 = sub_trains_rfmodel_subs1_585()
  #proj_tws_tp2_256 = sub_trains_rfmodel_subs2_256()
  #proj_tws_tp2_585 = sub_trains_rfmodel_subs2_585()
  

  cl = makeCluster(9)
  clusterExport(cl,c('i','pmeato3_256','pmeato_ori3',
                     'twsdf','pmeato3_585','t_tpm1_ssp245',
                     't_tpm2_ssp245','t_tpm1_ssp585','t_tpm2_ssp585',
                     'era5_t'))
  proj_tws_tp1_256 = parLapply(cl,i,sub_trains_rfmodel_subs1_256)
  stopCluster(cl) 
  
  cl = makeCluster(9)
  clusterExport(cl,c('i','pmeato3_256','twsdf','pmeato_ori3',
                     'pmeato3_585','t_tpm1_ssp245',
                     't_tpm2_ssp245','t_tpm1_ssp585','t_tpm2_ssp585',
                     'era5_t'))
  proj_tws_tp1_585 = parLapply(cl,i,sub_trains_rfmodel_subs1_585)
  stopCluster(cl) 
  
  
  cl = makeCluster(9)
  clusterExport(cl,c('i','pmeato3_256','twsdf','pmeato_ori3',
                     'pmeato3_585','t_tpm1_ssp245',
                     't_tpm2_ssp245','t_tpm1_ssp585','t_tpm2_ssp585',
                     'era5_t'))
  proj_tws_tp2_256 = parLapply(cl,i,sub_trains_rfmodel_subs2_256)
  stopCluster(cl) 
  
  cl = makeCluster(9)
  clusterExport(cl,c('i','pmeato3_256','twsdf','pmeato_ori3',
                     'pmeato3_585','t_tpm1_ssp245',
                     't_tpm2_ssp245','t_tpm1_ssp585','t_tpm2_ssp585',
                     'era5_t'))
  proj_tws_tp2_585 = parLapply(cl,i,sub_trains_rfmodel_subs2_585)
  stopCluster(cl) 
  
  proj_tws_tp1_256 = do.call(cbind,proj_tws_tp1_256)
  proj_tws_tp1_585 = do.call(cbind,proj_tws_tp1_585)
  proj_tws_tp2_256 = do.call(cbind,proj_tws_tp2_256)
  proj_tws_tp2_585 = do.call(cbind,proj_tws_tp2_585)
  
  ensemble_tws_tp1_256 = apply(proj_tws_tp1_256[,1:8],1,mean)
  ensemble_tws_tp1_585 = apply(proj_tws_tp1_585[,1:8],1,mean)
  ensemble_tws_tp2_256 = apply(proj_tws_tp2_256[,1:8],1,mean)
  ensemble_tws_tp2_585 = apply(proj_tws_tp2_585[,1:8],1,mean)
  
  
  ense1256 = c(proj_tws_tp1_256[,9])
  ense1585 = c(proj_tws_tp1_585[,9])
  
  ense2256 = c(proj_tws_tp2_256[,9])
  ense2585 = c(proj_tws_tp2_585[,9])  
  
  df = data.frame(ense1256,ense1585,
                  ense2256,ense2585)
  
  #proj_tws_tp1_256[,9] = ense1256
  #proj_tws_tp1_585[,9] = ense1585
  #proj_tws_tp2_256[,9] = ense2256
  #proj_tws_tp2_585[,9] = ense2585
  
  output = 'output_proj_tws/ensemble_tws_proj_only_pme'
  dir.create(output)
  output1 = 'output_proj_tws/ensemble_tws_proj_only_pme/tws_only_proj_pme.csv'
  fwrite(df,output1)
  
  #output2 = 'output_proj_tws/ensemble_tws_2020_2099_bc_cnn_final/proj_tws_tp1_245.csv'
  #output3 = 'output_proj_tws/ensemble_tws_2020_2099_bc_cnn_final/proj_tws_tp1_585.csv'
  #output4 = 'output_proj_tws/ensemble_tws_2020_2099_bc_cnn_final/proj_tws_tp2_245.csv'
  #output5 = 'output_proj_tws/ensemble_tws_2020_2099_bc_cnn_final/proj_tws_tp2_585.csv'
  
  #fwrite(proj_tws_tp1_256,output2)
  #fwrite(proj_tws_tp1_585,output3)
  #fwrite(proj_tws_tp2_256,output4)
  #fwrite(proj_tws_tp2_585,output5)
  
  ret_train = list(pmeato3_256,pmeato3_585)
  ret_proj = list(proj_tws_tp1_256,
                  proj_tws_tp1_585,
                  proj_tws_tp2_256,
                  proj_tws_tp2_585)
  return(list(ret_train,ret_proj))
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
}

















projection_of_possibility_intibet <-function(
  
){
  # spatial pattern of the tws in future by 10 years 
  
  
  
}
projection_raster_tws_in_tp12 <-function(
  
){
  
  trend_fun_index_cmip6<-function(x){
    x = as.numeric(x)
    loc2020 = length(2003:2020)*12-11
    loc2050 = length(2003:2050)*12
    x = x[loc2020:loc2050]
    xt = ts(x,start = c(2020,1),frequency = 12)
    xt = decompose(xt)$trend
    naid = which(is.na(xt))
    xt = xt[-naid]
    
    xt = (xt - mean(xt))/sd(xt)
    return(xt)
  }
  trend_fun_index_era5<-function(x){
    x = as.numeric(x)
    xt = ts(x,start = c(2003,1),frequency = 12)
    xt = decompose(xt)$trend
    
    naid = which(is.na(xt))
    xt = xt[-naid]
    return(xt)
  }
  standard_fun_index_era5 <-function(x){
    xs = (x - mean(x))/sd(x)
    return(xs)
  }
  # input index tws trend items in tibet based on era5 
  twsdf = import_tws_raster()
  twsdf1 = twsdf[[1]]
  twsdf2 = twsdf[[2]]
  
  loc1 = twsdf1[,1:2]
  loc2 = twsdf2[,1:2]
  
  twsdf1 = twsdf1[,-c(1,2)]
  twsdf2 = twsdf2[,-c(1,2)]
  
  twsdf1 = t(twsdf1)
  twsdf2 = t(twsdf2)
  
  twsdf1 = apply(twsdf1,2,trend_fun_index_era5)
  twsdf2 = apply(twsdf2,2,trend_fun_index_era5)
  twsdf1 = apply(twsdf1,2,standard_fun_index_era5)
  twsdf2 = apply(twsdf2,2,standard_fun_index_era5)
  
  # input and choose pmes based on the relationships
  pmeato = import_index_insource_tibet(var = 'pme',region = 'ato')
  pmeio = import_index_insource_tibet(var = 'pme',region = 'io')
  
  pmeato = pmeato[1:174,]
  pmeio = pmeio[1:174,]
  
  pmeato = apply(pmeato,2,trend_fun_index_era5)
  pmeio = apply(pmeio,2,trend_fun_index_era5)
  pmeato = apply(pmeato,2,standard_fun_index_era5)
  pmeio = apply(pmeio,2,standard_fun_index_era5)
  
  #determine
  #region1 --> ato2,ato3 and io4
  #region2 --> ato2,ato3 and io4
  
  pmeato = pmeato[,2:3]
  pmeio = pmeio[,4]
  
  
  # input the cmip6 pmes in ato 2,3 and the io 2-3
  #######
  pmeato_cmip6 = import_index_insource_tibet(var = 'pme_cmip6',
                                       region = 'ato')
  pmeato256 = pmeato_cmip6[[1]]
  pmeato2_256 = pmeato256[[1]]
  pmeato3_256 = pmeato256[[2]]
  
  models = colnames(pmeato2_256)
  
  pmeato585 = pmeato_cmip6[[2]]
  pmeato2_585 = pmeato585[[1]]
  pmeato3_585 = pmeato585[[2]]
  
  pmeato2_256 = apply(pmeato2_256,2,trend_fun_index_cmip6)
  pmeato2_585 = apply(pmeato2_585,2,trend_fun_index_cmip6)
  pmeato3_256 = apply(pmeato3_256,2,trend_fun_index_cmip6)
  pmeato3_585 = apply(pmeato3_585,2,trend_fun_index_cmip6)

  pmeio_cmip6 = import_index_insource_tibet(var = 'pme_cmip6',
                                       region = 'io')
  pmeio256 = pmeio_cmip6[[1]]
  pmeio4_256 = pmeio256[[1]]
  pmeio585 = pmeio_cmip6[[2]]
  pmeio4_585 = pmeio585[[1]]
  
  pmeio4_256 = apply(pmeio4_256,2,trend_fun_index_cmip6)
  pmeio4_585 = apply(pmeio4_585,2,trend_fun_index_cmip6)
  #######
  
  # set up the random forest models
  i = 1:ncol(twsdf1)
  twsdf1 <<- twsdf1
  pmeato <<- pmeato
  pmeio <<- pmeio
  pmeato2_256 <<- pmeato2_256
  pmeato2_585 <<- pmeato2_585
  pmeato3_256 <<- pmeato3_256
  pmeato3_585 <<- pmeato3_585
  pmeio4_256 <<- pmeio4_256
  pmeio4_585 <<- pmeio4_585
  
  sub_calc_each_index_subs1<-function(i){
    
    df = data.frame(
      tws = twsdf1[,i],
      pmeato2 = pmeato[,1],
      pmeato3 = pmeato[,2],
      pmeio4 = as.numeric(pmeio)
    )
    
    j = 1:8
    
    sub_trains_rfmodel_subs1_256 <-function(j){
      source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/random_forest_model_tws_cmip6_raster_tibet.R")
      
      df_project = data.frame(
        pmeato2 = pmeato2_256[,j],
        pmeato3 = pmeato3_256[,j],
        pmeio4 = pmeio4_256[,j]
      )
      
      ret = random_forest_model_tws_cmip6_raster_tibet(df,
                                                       df_project)
      return(ret)
    }
    sub_trains_rfmodel_subs1_585 <-function(j){
      source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/random_forest_model_tws_cmip6_raster_tibet.R")
      df_project = data.frame(
        pmeato2 = pmeato2_585[,j],
        pmeato3 = pmeato3_585[,j],
        pmeio4 = pmeio4_585[,j]
      )
      
      ret = random_forest_model_tws_cmip6_raster_tibet(df,
                                                       df_project)
      return(ret)
    }
    
    ret_tws_256 = lapply(j,sub_trains_rfmodel_subs1_256)
    ret_tws_585 = lapply(j,sub_trains_rfmodel_subs1_585)
    
    ret_tws_256 = do.call('cbind',ret_tws_256)
    ret_tws_585 = do.call('cbind',ret_tws_585)
    
    return(list(ret_tws_256,ret_tws_585))
  }
  sub_calc_each_index_subs2<-function(i){
    
    df = data.frame(
      tws = twsdf2[,i],
      pmeato2 = pmeato[,1],
      pmeato3 = pmeato[,2],
      pmeio4 = as.numeric(pmeio)
    )
    
    j = 1:8
    
    sub_trains_rfmodel_subs2_256 <-function(j){
      source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/random_forest_model_tws_cmip6_raster_tibet.R")
      
      df_project = data.frame(
        pmeato2 = pmeato2_256[,j],
        pmeato3 = pmeato3_256[,j],
        pmeio4 = pmeio4_256[,j]
      )
      
      ret = random_forest_model_tws_cmip6_raster_tibet(df,
                                                       df_project)
      return(ret)
    }
    sub_trains_rfmodel_subs2_585 <-function(j){
      source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/random_forest_model_tws_cmip6_raster_tibet.R")
      df_project = data.frame(
        pmeato2 = pmeato2_585[,j],
        pmeato3 = pmeato3_585[,j],
        pmeio4 = pmeio4_585[,j]
      )
      
      ret = random_forest_model_tws_cmip6_raster_tibet(df,
                                                       df_project)
      return(ret)
    }
    
    ret_tws_256 = lapply(j,sub_trains_rfmodel_subs2_256)
    ret_tws_585 = lapply(j,sub_trains_rfmodel_subs2_585)
    
    ret_tws_256 = do.call('cbind',ret_tws_256)
    ret_tws_585 = do.call('cbind',ret_tws_585)
    
    return(list(ret_tws_256,ret_tws_585))
  }
  
  i <<- i 
  
  cl = makeCluster(12)
  clusterExport(cl,c('i','twsdf1','pmeato','pmeio',
                     'pmeato2_256','pmeato3_256',
                     'pmeato2_585','pmeato3_585',
                     'pmeio4_256','pmeio4_585'))
  ret_tws1_li = parLapply(cl,i,sub_calc_each_index_subs1)
  stopCluster(cl)
  
  sub_rearrange1_256_model1<-function(i){
    ret_tws1 = ret_tws1_li[[i]][[1]]
    ret_tws1_model1 = ret_tws1[,1]
    return(ret_tws1_model1)
  }
  sub_rearrange1_256_model2<-function(i){
    ret_tws1 = ret_tws1_li[[i]][[1]]
    ret_tws1_model1 = ret_tws1[,2]
    return(ret_tws1_model1)
  }
  sub_rearrange1_256_model3<-function(i){
    ret_tws1 = ret_tws1_li[[i]][[1]]
    ret_tws1_model1 = ret_tws1[,3]
    return(ret_tws1_model1)
  }
  sub_rearrange1_256_model4<-function(i){
    ret_tws1 = ret_tws1_li[[i]][[1]]
    ret_tws1_model1 = ret_tws1[,4]
    return(ret_tws1_model1)
  }
  sub_rearrange1_256_model5<-function(i){
    ret_tws1 = ret_tws1_li[[i]][[1]]
    ret_tws1_model1 = ret_tws1[,5]
    return(ret_tws1_model1)
  }
  sub_rearrange1_256_model6<-function(i){
    ret_tws1 = ret_tws1_li[[i]][[1]]
    ret_tws1_model1 = ret_tws1[,6]
    return(ret_tws1_model1)
  }
  sub_rearrange1_256_model7<-function(i){
    ret_tws1 = ret_tws1_li[[i]][[1]]
    ret_tws1_model1 = ret_tws1[,7]
    return(ret_tws1_model1)
  }
  sub_rearrange1_256_model8<-function(i){
    ret_tws1 = ret_tws1_li[[i]][[1]]
    ret_tws1_model1 = ret_tws1[,8]
    return(ret_tws1_model1)
  }
  
  sub_rearrange1_585_model1<-function(i){
    ret_tws1 = ret_tws1_li[[i]][[2]]
    ret_tws1_model1 = ret_tws1[,1]
    return(ret_tws1_model1)
  }
  sub_rearrange1_585_model2<-function(i){
    ret_tws1 = ret_tws1_li[[i]][[2]]
    ret_tws1_model1 = ret_tws1[,2]
    return(ret_tws1_model1)
  }
  sub_rearrange1_585_model3<-function(i){
    ret_tws1 = ret_tws1_li[[i]][[2]]
    ret_tws1_model1 = ret_tws1[,3]
    return(ret_tws1_model1)
  }
  sub_rearrange1_585_model4<-function(i){
    ret_tws1 = ret_tws1_li[[i]][[2]]
    ret_tws1_model1 = ret_tws1[,4]
    return(ret_tws1_model1)
  }
  sub_rearrange1_585_model5<-function(i){
    ret_tws1 = ret_tws1_li[[i]][[2]]
    ret_tws1_model1 = ret_tws1[,5]
    return(ret_tws1_model1)
  }
  sub_rearrange1_585_model6<-function(i){
    ret_tws1 = ret_tws1_li[[i]][[2]]
    ret_tws1_model1 = ret_tws1[,6]
    return(ret_tws1_model1)
  }
  sub_rearrange1_585_model7<-function(i){
    ret_tws1 = ret_tws1_li[[i]][[2]]
    ret_tws1_model1 = ret_tws1[,7]
    return(ret_tws1_model1)
  }
  sub_rearrange1_585_model8<-function(i){
    ret_tws1 = ret_tws1_li[[i]][[2]]
    ret_tws1_model1 = ret_tws1[,8]
    return(ret_tws1_model1)
  }
  
  i = 1:ncol(twsdf1)
  subs1_tws_256_model1 = do.call('cbind',lapply(i,sub_rearrange1_256_model1))
  subs1_tws_256_model2 = do.call('cbind',lapply(i,sub_rearrange1_256_model2))
  subs1_tws_256_model3 = do.call('cbind',lapply(i,sub_rearrange1_256_model3))
  subs1_tws_256_model4 = do.call('cbind',lapply(i,sub_rearrange1_256_model4))
  subs1_tws_256_model5 = do.call('cbind',lapply(i,sub_rearrange1_256_model5))
  subs1_tws_256_model6 = do.call('cbind',lapply(i,sub_rearrange1_256_model6))
  subs1_tws_256_model7 = do.call('cbind',lapply(i,sub_rearrange1_256_model7))
  subs1_tws_256_model8 = do.call('cbind',lapply(i,sub_rearrange1_256_model8))
  
  subs1_tws_585_model1 = do.call('cbind',lapply(i,sub_rearrange1_585_model1))
  subs1_tws_585_model2 = do.call('cbind',lapply(i,sub_rearrange1_585_model2))
  subs1_tws_585_model3 = do.call('cbind',lapply(i,sub_rearrange1_585_model3))
  subs1_tws_585_model4 = do.call('cbind',lapply(i,sub_rearrange1_585_model4))
  subs1_tws_585_model5 = do.call('cbind',lapply(i,sub_rearrange1_585_model5))
  subs1_tws_585_model6 = do.call('cbind',lapply(i,sub_rearrange1_585_model6))
  subs1_tws_585_model7 = do.call('cbind',lapply(i,sub_rearrange1_585_model7))
  subs1_tws_585_model8 = do.call('cbind',lapply(i,sub_rearrange1_585_model8))
  
  # calculate the model mean 
  subs1_tws_256_model_mean = subs1_tws_256_model1 + 
    subs1_tws_256_model2+ subs1_tws_256_model3+
    subs1_tws_256_model4+ subs1_tws_256_model5+
    subs1_tws_256_model6+ subs1_tws_256_model7+
    subs1_tws_256_model8
  
  subs1_tws_585_model_mean = subs1_tws_585_model1 + 
    subs1_tws_585_model2+ subs1_tws_585_model3+
    subs1_tws_585_model4+ subs1_tws_585_model5+
    subs1_tws_585_model6+ subs1_tws_585_model7+
    subs1_tws_585_model8
  
  subs1_tws_256_model_mean = subs1_tws_256_model_mean / 8
  subs1_tws_585_model_mean = subs1_tws_585_model_mean / 8
  
  proj_tws1_256 = data.frame(
    long = loc1[,1],
    lat = loc1[,2],
    t(subs1_tws_256_model_mean)
  )
  proj_tws1_585 = data.frame(
    long = loc1[,1],
    lat = loc1[,2],
    t(subs1_tws_585_model_mean)
  )
  
  output_projrast = 'output/proj_tws_tibet'
  dir.create(output_projrast)
  output_projrast = 'output/proj_tws_tibet/region1'
  dir.create(output_projrast)
  output_projrast_ssp245 = paste0(output_projrast,'/ssp245')
  output_projrast_ssp585 = paste0(output_projrast,'/ssp585')
  
  dir.create(output_projrast_ssp245)
  dir.create(output_projrast_ssp585)
  
  files = paste0('proj_tws_subs1_tibet_',models,'.csv')
  files = c(files,'proj_tws_subs1_tibet_ensemble.csv')
  output_projrast_ssp245 = paste0(
    output_projrast_ssp245,'/',files
  )
  output_projrast_ssp585 = paste0(
    output_projrast_ssp585,'/',files
  )
  
  library(data.table)
  fwrite(subs1_tws_256_model1,output_projrast_ssp245[1])
  fwrite(subs1_tws_256_model2,output_projrast_ssp245[2])
  fwrite(subs1_tws_256_model3,output_projrast_ssp245[3])
  fwrite(subs1_tws_256_model4,output_projrast_ssp245[4])
  fwrite(subs1_tws_256_model5,output_projrast_ssp245[5])
  fwrite(subs1_tws_256_model6,output_projrast_ssp245[6])
  fwrite(subs1_tws_256_model7,output_projrast_ssp245[7])
  fwrite(subs1_tws_256_model8,output_projrast_ssp245[8])
  fwrite(subs1_tws_256_model_mean,output_projrast_ssp245[9])
  fwrite(subs1_tws_585_model1,output_projrast_ssp585[1])
  fwrite(subs1_tws_585_model2,output_projrast_ssp585[2])
  fwrite(subs1_tws_585_model3,output_projrast_ssp585[3])
  fwrite(subs1_tws_585_model4,output_projrast_ssp585[4])
  fwrite(subs1_tws_585_model5,output_projrast_ssp585[5])
  fwrite(subs1_tws_585_model6,output_projrast_ssp585[6])
  fwrite(subs1_tws_585_model7,output_projrast_ssp585[7])
  fwrite(subs1_tws_585_model8,output_projrast_ssp585[8])
  fwrite(subs1_tws_585_model_mean,output_projrast_ssp585[9])
  
  #ssp585
  ############ 
  i = 1:ncol(twsdf2)
  twsdf2 <<- twsdf2
  
  i <<- i 
  
  cl = makeCluster(12)
  clusterExport(cl,c('i','twsdf2','pmeato','pmeio',
                     'pmeato2_256','pmeato3_256',
                     'pmeato2_585','pmeato3_585',
                     'pmeio4_256','pmeio4_585'))
  ret_tws2_li = parLapply(cl,i,sub_calc_each_index_subs2)
  stopCluster(cl)
  
  sub_rearrange2_256_model1<-function(i){
    ret_tws2 = ret_tws2_li[[i]][[1]]
    ret_tws2_model1 = ret_tws2[,1]
    return(ret_tws2_model1)
  }
  sub_rearrange2_256_model2<-function(i){
    ret_tws2 = ret_tws2_li[[i]][[1]]
    ret_tws2_model1 = ret_tws2[,2]
    return(ret_tws2_model1)
  }
  sub_rearrange2_256_model3<-function(i){
    ret_tws2 = ret_tws2_li[[i]][[1]]
    ret_tws2_model1 = ret_tws2[,3]
    return(ret_tws2_model1)
  }
  sub_rearrange2_256_model4<-function(i){
    ret_tws2 = ret_tws2_li[[i]][[1]]
    ret_tws2_model1 = ret_tws2[,4]
    return(ret_tws2_model1)
  }
  sub_rearrange2_256_model5<-function(i){
    ret_tws2 = ret_tws2_li[[i]][[1]]
    ret_tws2_model1 = ret_tws2[,5]
    return(ret_tws2_model1)
  }
  sub_rearrange2_256_model6<-function(i){
    ret_tws2 = ret_tws2_li[[i]][[1]]
    ret_tws2_model1 = ret_tws2[,6]
    return(ret_tws2_model1)
  }
  sub_rearrange2_256_model7<-function(i){
    ret_tws2 = ret_tws2_li[[i]][[1]]
    ret_tws2_model1 = ret_tws2[,7]
    return(ret_tws2_model1)
  }
  sub_rearrange2_256_model8<-function(i){
    ret_tws2 = ret_tws2_li[[i]][[1]]
    ret_tws2_model1 = ret_tws2[,8]
    return(ret_tws2_model1)
  }
  
  sub_rearrange2_585_model1<-function(i){
    ret_tws2 = ret_tws2_li[[i]][[2]]
    ret_tws2_model1 = ret_tws2[,1]
    return(ret_tws2_model1)
  }
  sub_rearrange2_585_model2<-function(i){
    ret_tws2 = ret_tws2_li[[i]][[2]]
    ret_tws2_model1 = ret_tws2[,2]
    return(ret_tws2_model1)
  }
  sub_rearrange2_585_model3<-function(i){
    ret_tws2 = ret_tws2_li[[i]][[2]]
    ret_tws2_model1 = ret_tws2[,3]
    return(ret_tws2_model1)
  }
  sub_rearrange2_585_model4<-function(i){
    ret_tws2 = ret_tws2_li[[i]][[2]]
    ret_tws2_model1 = ret_tws2[,4]
    return(ret_tws2_model1)
  }
  sub_rearrange2_585_model5<-function(i){
    ret_tws2 = ret_tws2_li[[i]][[2]]
    ret_tws2_model1 = ret_tws2[,5]
    return(ret_tws2_model1)
  }
  sub_rearrange2_585_model6<-function(i){
    ret_tws2 = ret_tws2_li[[i]][[2]]
    ret_tws2_model1 = ret_tws2[,6]
    return(ret_tws2_model1)
  }
  sub_rearrange2_585_model7<-function(i){
    ret_tws2 = ret_tws2_li[[i]][[2]]
    ret_tws2_model1 = ret_tws2[,7]
    return(ret_tws2_model1)
  }
  sub_rearrange2_585_model8<-function(i){
    ret_tws2 = ret_tws2_li[[i]][[2]]
    ret_tws2_model1 = ret_tws2[,8]
    return(ret_tws2_model1)
  }
  i = 1:ncol(twsdf2)
  subs2_tws_256_model1 = do.call('cbind',lapply(i,sub_rearrange2_256_model1))
  subs2_tws_256_model2 = do.call('cbind',lapply(i,sub_rearrange2_256_model2))
  subs2_tws_256_model3 = do.call('cbind',lapply(i,sub_rearrange2_256_model3))
  subs2_tws_256_model4 = do.call('cbind',lapply(i,sub_rearrange2_256_model4))
  subs2_tws_256_model5 = do.call('cbind',lapply(i,sub_rearrange2_256_model5))
  subs2_tws_256_model6 = do.call('cbind',lapply(i,sub_rearrange2_256_model6))
  subs2_tws_256_model7 = do.call('cbind',lapply(i,sub_rearrange2_256_model7))
  subs2_tws_256_model8 = do.call('cbind',lapply(i,sub_rearrange2_256_model8))
  
  subs2_tws_585_model1 = do.call('cbind',lapply(i,sub_rearrange2_585_model1))
  subs2_tws_585_model2 = do.call('cbind',lapply(i,sub_rearrange2_585_model2))
  subs2_tws_585_model3 = do.call('cbind',lapply(i,sub_rearrange2_585_model3))
  subs2_tws_585_model4 = do.call('cbind',lapply(i,sub_rearrange2_585_model4))
  subs2_tws_585_model5 = do.call('cbind',lapply(i,sub_rearrange2_585_model5))
  subs2_tws_585_model6 = do.call('cbind',lapply(i,sub_rearrange2_585_model6))
  subs2_tws_585_model7 = do.call('cbind',lapply(i,sub_rearrange2_585_model7))
  subs2_tws_585_model8 = do.call('cbind',lapply(i,sub_rearrange2_585_model8))
  
  # calculate the model mean 
  subs2_tws_256_model_mean = subs2_tws_256_model1 + 
    subs2_tws_256_model2+ subs2_tws_256_model3+
    subs2_tws_256_model4+ subs2_tws_256_model5+
    subs2_tws_256_model6+ subs2_tws_256_model7+
    subs2_tws_256_model8
  
  subs2_tws_585_model_mean = subs2_tws_585_model1 + 
    subs2_tws_585_model2+ subs2_tws_585_model3+
    subs2_tws_585_model4+ subs2_tws_585_model5+
    subs2_tws_585_model6+ subs2_tws_585_model7+
    subs2_tws_585_model8
  
  subs2_tws_256_model_mean = subs2_tws_256_model_mean / 8
  subs2_tws_585_model_mean = subs2_tws_585_model_mean / 8
  
  proj_tws2_256 = data.frame(
    long = loc2[,1],
    lat = loc2[,2],
    t(subs2_tws_256_model_mean)
  )
  proj_tws2_585 = data.frame(
    long = loc2[,1],
    lat = loc2[,2],
    t(subs2_tws_585_model_mean)
  )
  
  output_projrast = 'output/proj_tws_tibet'
  dir.create(output_projrast)
  output_projrast = 'output/proj_tws_tibet/region2'
  dir.create(output_projrast)
  output_projrast_ssp245 = paste0(output_projrast,'/ssp245')
  output_projrast_ssp585 = paste0(output_projrast,'/ssp585')
  
  dir.create(output_projrast_ssp245)
  dir.create(output_projrast_ssp585)
  
  files = paste0('proj_tws_subs2_tibet_',models,'.csv')
  files = c(files,'proj_tws_subs2_tibet_ensemble.csv')
  output_projrast_ssp245 = paste0(
    output_projrast_ssp245,'/',files
  )
  output_projrast_ssp585 = paste0(
    output_projrast_ssp585,'/',files
  )
  
  
  library(data.table)
  fwrite(subs2_tws_256_model1,output_projrast_ssp245[1])
  fwrite(subs2_tws_256_model2,output_projrast_ssp245[2])
  fwrite(subs2_tws_256_model3,output_projrast_ssp245[3])
  fwrite(subs2_tws_256_model4,output_projrast_ssp245[4])
  fwrite(subs2_tws_256_model5,output_projrast_ssp245[5])
  fwrite(subs2_tws_256_model6,output_projrast_ssp245[6])
  fwrite(subs2_tws_256_model7,output_projrast_ssp245[7])
  fwrite(subs2_tws_256_model8,output_projrast_ssp245[8])
  fwrite(subs2_tws_256_model_mean,output_projrast_ssp245[9])
  fwrite(subs2_tws_585_model1,output_projrast_ssp585[1])
  fwrite(subs2_tws_585_model2,output_projrast_ssp585[2])
  fwrite(subs2_tws_585_model3,output_projrast_ssp585[3])
  fwrite(subs2_tws_585_model4,output_projrast_ssp585[4])
  fwrite(subs2_tws_585_model5,output_projrast_ssp585[5])
  fwrite(subs2_tws_585_model6,output_projrast_ssp585[6])
  fwrite(subs2_tws_585_model7,output_projrast_ssp585[7])
  fwrite(subs2_tws_585_model8,output_projrast_ssp585[8])
  fwrite(subs2_tws_585_model_mean,output_projrast_ssp585[9])
  
}
projection_tws_in_tp12_bc_cnn<-function(
  
){
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/import_index_insource_tibet.R")
  trend_fun_index_cmip6<-function(x){
    x = as.numeric(x)
    loc2020 = length(2003:2020)*12-11
    loc2050 = length(2003:2099)*12
    x = x[loc2020:loc2050]
    xt = ts(x,start = c(2020,1),frequency = 12)
    xt = decompose(xt)$trend
    naid = which(is.na(xt))
    xt = xt[-naid]
    
    xt = (xt - mean(xt))/sd(xt)
    return(xt)
  }
  trend_fun_index_cmip6_2003<-function(x){
    x = as.numeric(x)
    #x = x[loc2020:loc2050]
    xt = ts(x,start = c(2003,1),frequency = 12)
    xt = decompose(xt)$trend
    
    naid = which(is.na(xt))
    xt = xt[-naid]
    
    return(xt)
  }
  stand_fun_index_cmip6_2003<-function(x){
    xt = (x - min(x))/(max(x)-min(x))
    
    #loc2020 = 175
    #loc2099 = length(xt)
    #xt = xt[loc2020:loc2099]
    return(xt)
  }
  trend_fun_index_era5<-function(x){
    x = as.numeric(x)
    xt = ts(x,start = c(2003,1),frequency = 12)
    xt = decompose(xt)$trend
    
    naid = which(is.na(xt))
    xt = xt[-naid]
    return(xt)
  }
  standard_fun_index_era5 <-function(x){
    xs = (x - min(x))/(max(x) - min(x))
    return(xs)
  }
  
  standard_fun_index_tws <-function(x){
    xs = (x - min(x))/(max(x) - min(x))
    return(xs)
  }
  
  # input index tws trend items in tibet based on era5 
  twsdf = import_index_insource_tibet(var = 'tws_tibet')  
  twsdf = apply(twsdf,2,standard_fun_index_tws)
  twsdf = twsdf[,1:2]
  
  # input and choose pmes based on the relationships
  pmeato1 = import_index_insource_tibet(var = 'pme_mean',region = 'ato')
  pmeio1 = import_index_insource_tibet(var = 'pme_mean',region = 'io')
  
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/bias_correction_cmip6_index.R")
  
  
  pmeato = pmeato1[1:174,]
  pmeio = pmeio1[1:174,]
  
  pmeato = apply(pmeato,2,trend_fun_index_era5)
  pmeio = apply(pmeio,2,trend_fun_index_era5)
  pmeato = apply(pmeato,2,standard_fun_index_era5)
  pmeio = apply(pmeio,2,standard_fun_index_era5)
  
  
  pmeato = pmeato[,2:3]
  pmeio = pmeio[,4]
  
  
  # input the cmip6 pmes in ato 2,3 and the io 2-3
  #######
  pmeato_ori2 = matrix(rep(pmeato1[,2],8),ncol = 8)
  pmeato_ori3 = matrix(rep(pmeato1[,3],8),ncol = 8)
  
  pmeato_cmip6 = import_index_insource_tibet(var = 'pme_cmip6_mean',
                                             region = 'ato')
  pmeato256 = pmeato_cmip6[[1]]
  pmeato3_256 = pmeato256[[2]]
  
  pmeato585 = pmeato_cmip6[[2]]
  pmeato3_585 = pmeato585[[2]]
  
  loc2018 = length(2003:2018)*12-11
  loc2099 = length(2003:2099)*12
  
  pmeato3_256 = pmeato3_256[loc2018:loc2099,]
  pmeato3_585 = pmeato3_585[loc2018:loc2099,]
  
  colnames(pmeato_ori3) = colnames(pmeato3_256)
  models = colnames(pmeato3_256)
  models <<- models
  
  pmeato3_256 = rbind(pmeato_ori3,pmeato3_256)
  pmeato3_585 = rbind(pmeato_ori3,pmeato3_585)
  
  #pmeato3_256 = apply(pmeato3_256,1,mean)
  #pmeato3_585 = apply(pmeato3_585,1,mean)
  
  pmeato3_256 = apply(pmeato3_256,2,trend_fun_index_cmip6_2003)
  pmeato3_585 = apply(pmeato3_585,2,trend_fun_index_cmip6_2003)
  pmeato3_256 = apply(pmeato3_256,2,stand_fun_index_cmip6_2003)
  pmeato3_585 = apply(pmeato3_585,2,stand_fun_index_cmip6_2003)
  #pmeato3_256 = trend_fun_index_cmip6_2003(pmeato3_256)
  #pmeato3_585 = trend_fun_index_cmip6_2003(pmeato3_585)
  #pmeato3_256 = stand_fun_index_cmip6_2003(pmeato3_256)
  #pmeato3_585 = stand_fun_index_cmip6_2003(pmeato3_585)
  
  #pmeato3_256 = matrix(pmeato3_256,ncol = 1)
  #pmeato3_585 = matrix(pmeato3_585,ncol = 1)
  #######
  
  # set up the random forest models
  i = 1:8
  sub_trains_rfmodel_subs1_256 <-function(i){
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/cnn_model_predict_tws.R")
    df = data.frame(
      tws = twsdf[,1],
      pmeato3 = pmeato3_256[1:162,i]
    )
    df_project = data.frame(
      #pmeato2 = pmeato2_256[,i],
      pmeato3 = as.numeric(pmeato3_256[175:1152,i])
    )
    
    ret = cnn_model_predict_tws(df,df_project,
                                models[i],
                                mode = 'ssp245',
                                region = 'region1')
    return(ret)
  }
  sub_trains_rfmodel_subs2_256 <-function(i){
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/cnn_model_predict_tws.R")
    df = data.frame(
      tws = twsdf[,2],
      pmeato3 = pmeato3_256[1:162,i]
    )
    df_project = data.frame(
      #pmeato2 = pmeato2_256[,i],
      #pmeato3 = pmeato3_256[175:1128,i]
      pmeato3 = pmeato3_256[175:1152,i]
    )
    
    ret = cnn_model_predict_tws(df,df_project,
                                models[i],
                                mode = 'ssp245',
                                region = 'region2')
    return(ret)
  }
  sub_trains_rfmodel_subs1_585 <-function(i){
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/cnn_model_predict_tws.R")
    df = data.frame(
      tws = twsdf[,1],
      pmeato3 = pmeato3_585[1:162,i]
    )
    df_project = data.frame(
      #pmeato2 = pmeato2_585[,i],
      pmeato3 = pmeato3_585[175:1152,i]
    )
    
    ret = cnn_model_predict_tws(df,df_project,
                                models[i],
                                mode = 'ssp585',
                                region = 'region1')
    return(ret)
  }
  sub_trains_rfmodel_subs2_585 <-function(i){
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/cnn_model_predict_tws.R")
    df = data.frame(
      tws = twsdf[,2],
      pmeato3 = pmeato3_585[1:162,i]
    )
    df_project = data.frame(
      #pmeato2 = pmeato2_585[,i],
      pmeato3 = pmeato3_585[175:1152,i]
    )
    
    ret = cnn_model_predict_tws(df,df_project,
                                models[i],
                                mode = 'ssp585',
                                region = 'region2')
    return(ret)
  }
  
  
  library(doParallel)
  i <<- i 
  #df1 <<- df1
  #df2 <<- df2
  twsdf <<- twsdf
  pmeato3_256 <<- pmeato3_256
  pmeato3_585 <<- pmeato3_585
  
  #proj_tws_tp1_256 = sub_trains_rfmodel_subs1_256()
  #proj_tws_tp1_585 = sub_trains_rfmodel_subs1_585()
  #proj_tws_tp2_256 = sub_trains_rfmodel_subs2_256()
  #proj_tws_tp2_585 = sub_trains_rfmodel_subs2_585()
  
  
  cl = makeCluster(9)
  clusterExport(cl,c('i','pmeato3_256',
                     'twsdf','pmeato3_585','models'))
  proj_tws_tp1_256 = parLapply(cl,i,sub_trains_rfmodel_subs1_256)
  stopCluster(cl) 
  
  cl = makeCluster(9)
  clusterExport(cl,c('i','pmeato3_256','twsdf',
                     'pmeato3_585','models'))
  proj_tws_tp1_585 = parLapply(cl,i,sub_trains_rfmodel_subs1_585)
  stopCluster(cl) 
  
  
  cl = makeCluster(9)
  clusterExport(cl,c('i','pmeato3_256','twsdf',
                     'pmeato3_585','models'))
  proj_tws_tp2_256 = parLapply(cl,i,sub_trains_rfmodel_subs2_256)
  stopCluster(cl) 
  
  cl = makeCluster(9)
  clusterExport(cl,c('i','pmeato3_256','twsdf',
                     'pmeato3_585','models'))
  proj_tws_tp2_585 = parLapply(cl,i,sub_trains_rfmodel_subs2_585)
  stopCluster(cl) 
  
  proj_tws_tp1_256 = do.call(cbind,proj_tws_tp1_256)
  proj_tws_tp1_585 = do.call(cbind,proj_tws_tp1_585)
  proj_tws_tp2_256 = do.call(cbind,proj_tws_tp2_256)
  proj_tws_tp2_585 = do.call(cbind,proj_tws_tp2_585)
  
  ensemble_tws_tp1_256 = apply(proj_tws_tp1_256,1,mean)
  ensemble_tws_tp1_585 = apply(proj_tws_tp1_585,1,mean)
  ensemble_tws_tp2_256 = apply(proj_tws_tp2_256,1,mean)
  ensemble_tws_tp2_585 = apply(proj_tws_tp2_585,1,mean)
  
  
  ense1256 = c(ensemble_tws_tp1_256)
  ense1585 = c(ensemble_tws_tp1_585)
  
  ense2256 = c(ensemble_tws_tp2_256)
  ense2585 = c(ensemble_tws_tp2_585)  
  
  df = data.frame(ense1256,ense1585,
                  ense2256,ense2585)
  output = 'output/ensemble_tws_2020_2099_cnn_normal'
  dir.create(output)
  output1 = 'output/ensemble_tws_2020_2099_cnn_normal/twsdf_in_tibet_consider_hist.csv'
  fwrite(df,output1)
  
  output2 = 'output/ensemble_tws_2020_2099_cnn_normal/proj_tws_tp1_245.csv'
  output3 = 'output/ensemble_tws_2020_2099_cnn_normal/proj_tws_tp1_585.csv'
  output4 = 'output/ensemble_tws_2020_2099_cnn_normal/proj_tws_tp2_245.csv'
  output5 = 'output/ensemble_tws_2020_2099_cnn_normal/proj_tws_tp2_585.csv'
  
  fwrite(proj_tws_tp1_256,output2)
  fwrite(proj_tws_tp1_585,output3)
  fwrite(proj_tws_tp2_256,output4)
  fwrite(proj_tws_tp2_585,output5)
  
  ret_train = list(pmeato3_256,pmeato3_585)
  ret_proj = list(proj_tws_tp1_256,
                  proj_tws_tp1_585,
                  proj_tws_tp2_256,
                  proj_tws_tp2_585)
  return(list(ret_train,ret_proj))
  
  
}
projection_tws_in_tp12_pmeato3_sttrend <-function(
  
){
  trend_fun_index_cmip6<-function(x){
    x = as.numeric(x)
    loc2020 = length(2003:2020)*12-11
    loc2050 = length(2003:2099)*12
    x = x[loc2020:loc2050]
    xt = ts(x,start = c(2020,1),frequency = 12)
    xt = decompose(xt)$trend
    naid = which(is.na(xt))
    xt = xt[-naid]
    
    xt = (xt - mean(xt))/sd(xt)
    return(xt)
  }
  trend_fun_index_era5<-function(x){
    x = as.numeric(x)
    xt = ts(x,start = c(2003,1),frequency = 12)
    xt = decompose(xt)$trend
    
    naid = which(is.na(xt))
    xt = xt[-naid]
    return(xt)
  }
  standard_fun_index_era5 <-function(x){
    xs = (x - mean(x))/sd(x)
    return(xs)
  }
  
  standard_fun_index_tws <-function(x){
    xs = x/sd(x)
    return(xs)
  }
  
  # input index tws trend items in tibet based on era5 
  twsdf = import_index_insource_tibet(var = 'tws_tibet_full')  
  #twsdf = apply(twsdf,2,standard_fun_index_tws)
  twsdf = twsdf[,1:2]
  # input and choose pmes based on the relationships
  pmeato1 = import_index_insource_tibet(var = 'pme',region = 'ato')
  pmeio1 = import_index_insource_tibet(var = 'pme',region = 'io')
  
  pmeato = pmeato1[1:174,]
  pmeio = pmeio1[1:174,]
  
  pmeato = apply(pmeato,2,trend_fun_index_era5)
  pmeio = apply(pmeio,2,trend_fun_index_era5)
  pmeato = apply(pmeato,2,standard_fun_index_era5)
  pmeio = apply(pmeio,2,standard_fun_index_era5)
  
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/cross_correlation_pme_tws_tibet.R")
  cor_tws1_pmeato = cross_correlation_pme_tws_tibet(twsdf[,1],pmeato)
  cor_tws2_pmeato = cross_correlation_pme_tws_tibet(twsdf[,2],pmeato)
  cor_tws1_pmeio = cross_correlation_pme_tws_tibet(twsdf[,1],pmeio)
  cor_tws2_pmeio = cross_correlation_pme_tws_tibet(twsdf[,2],pmeio)
  
  cor_mat = rbind(cor_tws1_pmeato,
                  cor_tws2_pmeato,
                  cor_tws1_pmeio,
                  cor_tws2_pmeio)
  #determine
  #region1 --> ato2,ato3 and io4
  #region2 --> ato2,ato3 and io4
  
  pmeato = pmeato[,2:3]
  pmeio = pmeio[,4]
  
  df1 = data.frame(tws = twsdf[,1],
                   #pmeato2 = pmeato[,1],
                   pmeato3 = pmeato[,2])
  df2 = data.frame(tws = twsdf[,2],
                   #pmeato2 = pmeato[,1],
                   pmeato3 = pmeato[,2])
  
  # input the cmip6 pmes in ato 2,3 and the io 2-3
  #######
  pmeato_cmip6 = import_index_insource_tibet(var = 'pme_cmip6',
                                             region = 'ato')
  pmeato256 = pmeato_cmip6[[1]]
  pmeato2_256 = pmeato256[[1]]
  pmeato3_256 = pmeato256[[2]]
  
  pmeato585 = pmeato_cmip6[[2]]
  pmeato2_585 = pmeato585[[1]]
  pmeato3_585 = pmeato585[[2]]
  
  pmeato3_256 = apply(pmeato3_256,1,mean)
  pmeato3_585 = apply(pmeato3_585,1,mean)
  
  pmeato3_256 = trend_fun_index_cmip6(pmeato3_256)
  pmeato3_585 = trend_fun_index_cmip6(pmeato3_585)
  
  
  
  #pmeato3_256 = apply(pmeato3_256,2,trend_fun_index_cmip6)
  #pmeato3_585 = apply(pmeato3_585,2,trend_fun_index_cmip6)
  
  #######
  
  # set up the random forest models
  #i = 1:8
  sub_trains_rfmodel_subs1_256 <-function(){
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/random_forest_model_tws_cmip6_raster_tibet.R")
    df = df1
    df_project = data.frame(
      #pmeato2 = pmeato2_256[,i],
      pmeato3 = pmeato3_256
    )
    
    ret = random_forest_model_tws_cmip6_raster_tibet(df,
                                                     df_project)
    return(ret)
  }
  sub_trains_rfmodel_subs2_256 <-function(){
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/random_forest_model_tws_cmip6_raster_tibet.R")
    df = df2
    df_project = data.frame(
      #pmeato2 = pmeato2_256[,i],
      pmeato3 = pmeato3_256
    )
    
    ret = random_forest_model_tws_cmip6_raster_tibet(df,
                                                     df_project)
    return(ret)
  }
  sub_trains_rfmodel_subs1_585 <-function(){
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/random_forest_model_tws_cmip6_raster_tibet.R")
    df = df1
    df_project = data.frame(
      #pmeato2 = pmeato2_585[,i],
      pmeato3 = pmeato3_585
    )
    
    ret = random_forest_model_tws_cmip6_raster_tibet(df,
                                                     df_project)
    return(ret)
  }
  sub_trains_rfmodel_subs2_585 <-function(){
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/random_forest_model_tws_cmip6_raster_tibet.R")
    df = df2
    df_project = data.frame(
      #pmeato2 = pmeato2_585[,i],
      pmeato3 = pmeato3_585
    )
    
    ret = random_forest_model_tws_cmip6_raster_tibet(df,
                                                     df_project)
    return(ret)
  }
  
  
  
  library(doParallel)
  i <<- i 
  df1 <<- df1
  df2 <<- df2
  pmeio4_256 <<- pmeio4_256
  pmeato2_256 <<- pmeato2_256
  pmeato3_256 <<- pmeato3_256
  pmeio4_585 <<- pmeio4_585
  pmeato2_585 <<- pmeato2_585
  pmeato3_585 <<- pmeato3_585
  
  #proj_tws_tp1_256 = sub_trains_rfmodel_subs1_256()
  #proj_tws_tp1_585 = sub_trains_rfmodel_subs1_585()
  #proj_tws_tp2_256 = sub_trains_rfmodel_subs2_256()
  #proj_tws_tp2_585 = sub_trains_rfmodel_subs2_585()
  
  ense1256 = sub_trains_rfmodel_subs1_256()
  ense1585 = sub_trains_rfmodel_subs1_585()
  ense2256 = sub_trains_rfmodel_subs2_256()
  ense2585 = sub_trains_rfmodel_subs2_585()
  # output 

  df = data.frame(ense1256,ense1585,
                  ense2256,ense2585)
  
  sub_trains_linear_subs1_256 <-function(){
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/linear_project_tws.R")
    df = df1
    df_project = data.frame(
      #pmeato2 = pmeato2_256[,i],
      pmeato3 = pmeato3_256
    )
    
    ret = linear_project_tws(df,
                             df_project)
    return(ret)
  }
  sub_trains_linear_subs2_256 <-function(){
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/linear_project_tws.R")
    df = df2
    df_project = data.frame(
      #pmeato2 = pmeato2_256[,i],
      pmeato3 = pmeato3_256
    )
    
    ret = linear_project_tws(df,
                             df_project)
    return(ret)
  }
  sub_trains_linear_subs1_585 <-function(){
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/linear_project_tws.R")
    df = df1
    df_project = data.frame(
      #pmeato2 = pmeato2_585[,i],
      pmeato3 = pmeato3_585
    )
    
    ret = linear_project_tws(df,
                             df_project)
    return(ret)
  }
  sub_trains_linear_subs2_585 <-function(){
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/linear_project_tws.R")
    df = df2
    df_project = data.frame(
      #pmeato2 = pmeato2_585[,i],
      pmeato3 = pmeato3_585
    )
    
    ret = linear_project_tws(df,
                             df_project)
    return(ret)
  }
  
  
  ense1256_line = sub_trains_linear_subs1_256()
  ense1585_line = sub_trains_linear_subs1_585()
  ense2256_line = sub_trains_linear_subs2_256()
  ense2585_line = sub_trains_linear_subs2_585()
  # output 
  
  df = data.frame(ense1256,ense1585,
                  ense2256,ense2585)
  
  
  output = 'output/ensemble_tws_2020_2099'
  dir.create(output)
  output = paste0(output,'/twsdf_in_tibet.csv')
  fwrite(df,output)
  return(df)
  
  
}
projection_tws_in_tp12_pmeato3_withhist_bc_cnn_ensemble<-function(
  
){
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/import_index_insource_tibet.R")
  trend_fun_index_cmip6<-function(x){
    x = as.numeric(x)
    loc2020 = length(2003:2020)*12-11
    loc2050 = length(2003:2099)*12
    x = x[loc2020:loc2050]
    xt = ts(x,start = c(2020,1),frequency = 12)
    xt = decompose(xt)$trend
    naid = which(is.na(xt))
    xt = xt[-naid]
    
    xt = (xt - mean(xt))/sd(xt)
    return(xt)
  }
  trend_fun_index_cmip6_2003<-function(x){
    x = as.numeric(x)
    #x = x[loc2020:loc2050]
    xt = ts(x,start = c(2003,1),frequency = 12)
    xt = decompose(xt)$trend
    
    naid = which(is.na(xt))
    xt = xt[-naid]
    
    return(xt)
  }
  stand_fun_index_cmip6_2003<-function(x){
    xt = (x - mean(x))/sd(x)
    
    #loc2020 = 175
    #loc2099 = length(xt)
    #xt = xt[loc2020:loc2099]
    return(xt)
  }
  trend_fun_index_era5<-function(x){
    x = as.numeric(x)
    xt = ts(x,start = c(2003,1),frequency = 12)
    xt = decompose(xt)$trend
    
    naid = which(is.na(xt))
    xt = xt[-naid]
    return(xt)
  }
  standard_fun_index_era5 <-function(x){
    xs = (x - mean(x))/sd(x)
    return(xs)
  }
  
  standard_fun_index_tws <-function(x){
    xs = x/sd(x)
    return(xs)
  }
  
  # input index tws trend items in tibet based on era5 
  twsdf = import_index_insource_tibet(var = 'tws_tibet')  
  twsdf = apply(twsdf,2,standard_fun_index_tws)
  twsdf = twsdf[,1:2]
  
  # input and choose pmes based on the relationships
  pmeato1 = import_index_insource_tibet(var = 'pme_mean',region = 'ato')
  pmeio1 = import_index_insource_tibet(var = 'pme_mean',region = 'io')
  
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/bias_correction_cmip6_index.R")
  
  
  pmeato = pmeato1[1:174,]
  pmeio = pmeio1[1:174,]
  
  pmeato = apply(pmeato,2,trend_fun_index_era5)
  pmeio = apply(pmeio,2,trend_fun_index_era5)
  pmeato = apply(pmeato,2,standard_fun_index_era5)
  pmeio = apply(pmeio,2,standard_fun_index_era5)
  
  
  pmeato = pmeato[,2:3]
  pmeio = pmeio[,4]
  
  
  # input the cmip6 pmes in ato 2,3 and the io 2-3
  #######
  pmeato_ori2 = matrix(rep(pmeato1[,2],8),ncol = 8)
  pmeato_ori3 = matrix(rep(pmeato1[,3],8),ncol = 8)
  
  
  pmeato_cmip6 = import_index_insource_tibet(var = 'pme_cmip6_mean',
                                             region = 'ato')
  #pmeato_cmip6_corre = bias_correction_cmip6_index(pmeato1,pmeato_cmip6)
  
  pmeato256 = pmeato_cmip6[[1]]
  pmeato2_256 = pmeato256[[1]]
  pmeato3_256 = pmeato256[[2]]
  
  pmeato585 = pmeato_cmip6[[2]]
  pmeato2_585 = pmeato585[[1]]
  pmeato3_585 = pmeato585[[2]]
  
  loc2020 = length(2003:2018)*12-11
  loc2099 = length(2003:2099)*12
  
  pmeato3_256 = pmeato3_256[loc2020:loc2099,]
  pmeato3_585 = pmeato3_585[loc2020:loc2099,]
  
  #pmeato3_256 = pmeato_cmip6_corre[[1]]
  #pmeato3_585 = pmeato_cmip6_corre[[2]]
  
  #output_corre_pmeato3 = 'output/corrected_pmeato3_cmip6'
  #dir.create(output_corre_pmeato3)
  #output_corre_pmeato3 = paste0(output_corre_pmeato3,'/',
  #                              c('pmeato3_245','pmeato3_585'),'.csv')
  #fwrite(pmeato3_256,output_corre_pmeato3[1])
  #fwrite(pmeato3_585,output_corre_pmeato3[2])
  
  
  colnames(pmeato_ori3) = colnames(pmeato3_256)
  models = colnames(pmeato3_256)
  models <<- models
  
  pmeato3_256 = rbind(pmeato_ori3,pmeato3_256)
  pmeato3_585 = rbind(pmeato_ori3,pmeato3_585)
  
  #pmeato3_256 = apply(pmeato3_256,1,mean)
  #pmeato3_585 = apply(pmeato3_585,1,mean)
  
  pmeato3_256 = apply(pmeato3_256,2,trend_fun_index_cmip6_2003)
  pmeato3_585 = apply(pmeato3_585,2,trend_fun_index_cmip6_2003)
  pmeato3_256 = apply(pmeato3_256,2,stand_fun_index_cmip6_2003)
  pmeato3_585 = apply(pmeato3_585,2,stand_fun_index_cmip6_2003)
  #pmeato3_256 = trend_fun_index_cmip6_2003(pmeato3_256)
  #pmeato3_585 = trend_fun_index_cmip6_2003(pmeato3_585)
  #pmeato3_256 = stand_fun_index_cmip6_2003(pmeato3_256)
  #pmeato3_585 = stand_fun_index_cmip6_2003(pmeato3_585)
  
  #pmeato3_256 = matrix(pmeato3_256,ncol = 1)
  #pmeato3_585 = matrix(pmeato3_585,ncol = 1)
  #######
  
  # set up the random forest models
  i = 1:8
  sub_trains_rfmodel_subs1_256 <-function(i){
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/cnn_model_predict_tws.R")
    df = data.frame(
      tws = twsdf[,1],
      pmeato3 = pmeato3_256[1:162,i]
    )
    df_project = data.frame(
      #pmeato2 = pmeato2_256[,i],
      pmeato3 = as.numeric(pmeato3_256[175:1152,i])
    )
    
    ret = cnn_model_predict_tws(df,df_project,
                                models[i],
                                mode = 'ssp245',
                                region = 'region1')
    return(ret)
  }
  sub_trains_rfmodel_subs2_256 <-function(i){
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/cnn_model_predict_tws.R")
    df = data.frame(
      tws = twsdf[,2],
      pmeato3 = pmeato3_256[1:162,i]
    )
    df_project = data.frame(
      #pmeato2 = pmeato2_256[,i],
      #pmeato3 = pmeato3_256[175:1128,i]
      pmeato3 = pmeato3_256[175:1152,i]
    )
    
    ret = cnn_model_predict_tws(df,df_project,
                                models[i],
                                mode = 'ssp245',
                                region = 'region2')
    return(ret)
  }
  sub_trains_rfmodel_subs1_585 <-function(i){
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/cnn_model_predict_tws.R")
    df = data.frame(
      tws = twsdf[,1],
      pmeato3 = pmeato3_585[1:162,i]
    )
    df_project = data.frame(
      #pmeato2 = pmeato2_585[,i],
      pmeato3 = pmeato3_585[175:1152,i]
    )
    
    ret = cnn_model_predict_tws(df,df_project,
                                models[i],
                                mode = 'ssp585',
                                region = 'region1')
    return(ret)
  }
  sub_trains_rfmodel_subs2_585 <-function(i){
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/cnn_model_predict_tws.R")
    df = data.frame(
      tws = twsdf[,2],
      pmeato3 = pmeato3_585[1:162,i]
    )
    df_project = data.frame(
      #pmeato2 = pmeato2_585[,i],
      pmeato3 = pmeato3_585[175:1152,i]
    )
    
    ret = cnn_model_predict_tws(df,df_project,
                                models[i],
                                mode = 'ssp585',
                                region = 'region2')
    return(ret)
  }
  
  
  library(doParallel)
  i <<- i 
  #df1 <<- df1
  #df2 <<- df2
  twsdf <<- twsdf
  pmeato3_256 <<- pmeato3_256
  pmeato3_585 <<- pmeato3_585
  models <<- models
  #proj_tws_tp1_256 = sub_trains_rfmodel_subs1_256()
  #proj_tws_tp1_585 = sub_trains_rfmodel_subs1_585()
  #proj_tws_tp2_256 = sub_trains_rfmodel_subs2_256()
  #proj_tws_tp2_585 = sub_trains_rfmodel_subs2_585()
  
  
  cl = makeCluster(9)
  clusterExport(cl,c('i','pmeato3_256',
                     'twsdf','pmeato3_585','models'))
  proj_tws_tp1_256 = parLapply(cl,i,sub_trains_rfmodel_subs1_256)
  stopCluster(cl) 
  
  cl = makeCluster(9)
  clusterExport(cl,c('i','pmeato3_256','twsdf',
                     'pmeato3_585','models'))
  proj_tws_tp1_585 = parLapply(cl,i,sub_trains_rfmodel_subs1_585)
  stopCluster(cl) 
  
  
  cl = makeCluster(9)
  clusterExport(cl,c('i','pmeato3_256','twsdf',
                     'pmeato3_585','models'))
  proj_tws_tp2_256 = parLapply(cl,i,sub_trains_rfmodel_subs2_256)
  stopCluster(cl) 
  
  cl = makeCluster(9)
  clusterExport(cl,c('i','pmeato3_256','twsdf',
                     'pmeato3_585','models'))
  proj_tws_tp2_585 = parLapply(cl,i,sub_trains_rfmodel_subs2_585)
  stopCluster(cl) 
  
  proj_tws_tp1_256 = do.call(cbind,proj_tws_tp1_256)
  proj_tws_tp1_585 = do.call(cbind,proj_tws_tp1_585)
  proj_tws_tp2_256 = do.call(cbind,proj_tws_tp2_256)
  proj_tws_tp2_585 = do.call(cbind,proj_tws_tp2_585)
  
  ensemble_tws_tp1_256 = apply(proj_tws_tp1_256,1,mean)
  ensemble_tws_tp1_585 = apply(proj_tws_tp1_585,1,mean)
  ensemble_tws_tp2_256 = apply(proj_tws_tp2_256,1,mean)
  ensemble_tws_tp2_585 = apply(proj_tws_tp2_585,1,mean)
  
  
  ense1256 = c(ensemble_tws_tp1_256)
  ense1585 = c(ensemble_tws_tp1_585)
  
  ense2256 = c(ensemble_tws_tp2_256)
  ense2585 = c(ensemble_tws_tp2_585)  
  
  df = data.frame(ense1256,ense1585,
                  ense2256,ense2585)
  output = 'output/ensemble_tws_2020_2099_bc_cnn_final'
  dir.create(output)
  output1 = 'output/ensemble_tws_2020_2099_bc_cnn_final/twsdf_in_tibet_consider_hist.csv'
  fwrite(df,output1)
  
  output2 = 'output/ensemble_tws_2020_2099_bc_cnn_final/proj_tws_tp1_245.csv'
  output3 = 'output/ensemble_tws_2020_2099_bc_cnn_final/proj_tws_tp1_585.csv'
  output4 = 'output/ensemble_tws_2020_2099_bc_cnn_final/proj_tws_tp2_245.csv'
  output5 = 'output/ensemble_tws_2020_2099_bc_cnn_final/proj_tws_tp2_585.csv'
  
  fwrite(proj_tws_tp1_256,output2)
  fwrite(proj_tws_tp1_585,output3)
  fwrite(proj_tws_tp2_256,output4)
  fwrite(proj_tws_tp2_585,output5)
  
  ret_train = list(pmeato3_256,pmeato3_585)
  ret_proj = list(proj_tws_tp1_256,
                  proj_tws_tp1_585,
                  proj_tws_tp2_256,
                  proj_tws_tp2_585)
  return(list(ret_train,ret_proj))
  
  
}
projection_tws_in_tp12_pmeato3_withhist_bc_cnn<-function(
  
){
  dir.create('output_proj_tws')
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/import_index_insource_tibet.R")
  trend_fun_index_cmip6<-function(x){
    x = as.numeric(x)
    loc2020 = length(2003:2020)*12-11
    loc2050 = length(2003:2099)*12
    x = x[loc2020:loc2050]
    xt = ts(x,start = c(2020,1),frequency = 12)
    xt = decompose(xt)$trend
    naid = which(is.na(xt))
    xt = xt[-naid]
    
    xt = (xt - mean(xt))/sd(xt)
    return(xt)
  }
  trend_fun_index_cmip6_2003<-function(x){
    x = as.numeric(x)
    #x = x[loc2020:loc2050]
    xt = ts(x,start = c(2003,1),frequency = 12)
    xt = decompose(xt)$trend
    
    naid = which(is.na(xt))
    xt = xt[-naid]
    
    return(xt)
  }
  stand_fun_index_cmip6_2003<-function(x){
    xt = (x - mean(x))/sd(x)
    
    #loc2020 = 175
    #loc2099 = length(xt)
    #xt = xt[loc2020:loc2099]
    return(xt)
  }
  trend_fun_index_era5<-function(x){
    x = as.numeric(x)
    xt = ts(x,start = c(2003,1),frequency = 12)
    xt = decompose(xt)$trend
    
    naid = which(is.na(xt))
    xt = xt[-naid]
    return(xt)
  }
  standard_fun_index_era5 <-function(x){
    xs = (x - mean(x))/sd(x)
    return(xs)
  }
  
  standard_fun_index_tws <-function(x){
    xs = x/sd(x)
    return(xs)
  }
  
  # input index tws trend items in tibet based on era5 
  twsdf = import_index_insource_tibet(var = 'tws_tibet')  
  twsdf = apply(twsdf,2,standard_fun_index_tws)
  twsdf = twsdf[,1:2]
  
  # input and choose pmes based on the relationships
  pmeato1 = import_index_insource_tibet(var = 'pme_mean',region = 'ato')
  pmeio1 = import_index_insource_tibet(var = 'pme_mean',region = 'io')
  
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/bias_correction_cmip6_index.R")
  
  
  pmeato = pmeato1[1:174,]
  pmeio = pmeio1[1:174,]
  
  pmeato = apply(pmeato,2,trend_fun_index_era5)
  pmeio = apply(pmeio,2,trend_fun_index_era5)
  pmeato = apply(pmeato,2,standard_fun_index_era5)
  pmeio = apply(pmeio,2,standard_fun_index_era5)
  
  
  pmeato = pmeato[,2:3]
  pmeio = pmeio[,4]
  
  
  # input the cmip6 pmes in ato 2,3 and the io 2-3
  #######
  pmeato_ori3 = pmeato[,2]
  pmeato_ori3 <<- pmeato_ori3
  
  pmeato_cmip6 = import_index_insource_tibet(var = 'pme_cmip6_mean',
                                             region = 'ato')
  pmeato_cmip6_corre = bias_correction_cmip6_index(pmeato1,pmeato_cmip6)
  
  pmeato3_256 = pmeato_cmip6_corre[[1]]
  pmeato3_585 = pmeato_cmip6_corre[[2]]
  
  output_corre_pmeato3 = 'output_proj_tws/corrected_pmeato3_cmip6'
  dir.create(output_corre_pmeato3)
  output_corre_pmeato3 = paste0(output_corre_pmeato3,'/',
                                c('pmeato3_245','pmeato3_585'),'.csv')
  fwrite(pmeato3_256,output_corre_pmeato3[1])
  fwrite(pmeato3_585,output_corre_pmeato3[2])
  
    
  #colnames(pmeato_ori3) = colnames(pmeato3_256)
  models = colnames(pmeato3_256)
  models = c(models,'Ensemble')
  models <<- models

  
  #pmeato3_256 = apply(pmeato3_256,1,mean)
  #pmeato3_585 = apply(pmeato3_585,1,mean)
  
  pmeato3_256_ense = apply(pmeato3_256,1,mean)
  pmeato3_585_ense = apply(pmeato3_585,1,mean)
  
  pmeato3_256_ense = trend_fun_index_cmip6_2003(pmeato3_256_ense)
  pmeato3_585_ense = trend_fun_index_cmip6_2003(pmeato3_585_ense)
  pmeato3_256_ense = stand_fun_index_cmip6_2003(pmeato3_256_ense)
  pmeato3_585_ense = stand_fun_index_cmip6_2003(pmeato3_585_ense)
  
  pmeato3_256 = apply(pmeato3_256,2,trend_fun_index_cmip6_2003)
  pmeato3_585 = apply(pmeato3_585,2,trend_fun_index_cmip6_2003)
  pmeato3_256 = apply(pmeato3_256,2,stand_fun_index_cmip6_2003)
  pmeato3_585 = apply(pmeato3_585,2,stand_fun_index_cmip6_2003)
  
  pmeato3_256 = as.data.frame(pmeato3_256)
  pmeato3_585 = as.data.frame(pmeato3_585)
  
  pmeato3_256$Ensemble = pmeato3_256_ense
  pmeato3_585$Ensemble = pmeato3_585_ense
  #pmeato3_256 = trend_fun_index_cmip6_2003(pmeato3_256)
  #pmeato3_585 = trend_fun_index_cmip6_2003(pmeato3_585)
  #pmeato3_256 = stand_fun_index_cmip6_2003(pmeato3_256)
  #pmeato3_585 = stand_fun_index_cmip6_2003(pmeato3_585)
  
  
  #pmeato3_256 = matrix(pmeato3_256,ncol = 1)
  #pmeato3_585 = matrix(pmeato3_585,ncol = 1)
  #######
  
  # set up the random forest models
  i = 1:9
  sub_trains_rfmodel_subs1_256 <-function(i){
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/cnn_model_predict_tws.R")
    df = data.frame(
      tws = twsdf[,1],
      pmeato3 =pmeato_ori3
    )
    df_project = data.frame(
      #pmeato2 = pmeato2_256[,i],
      #pmeato3 = as.numeric(pmeato3_256[175:1152,i])
      pmeato3 = as.numeric(pmeato3_256[,i])
    )
    
    ret = cnn_model_predict_tws(df,df_project,
                                models[i],
                                mode = 'ssp245',
                                region = 'region1')
    return(ret)
  }
  sub_trains_rfmodel_subs2_256 <-function(i){
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/cnn_model_predict_tws.R")
    df = data.frame(
      tws = twsdf[,2],
      pmeato3 = pmeato_ori3
    )
    df_project = data.frame(
      #pmeato2 = pmeato2_256[,i],
      #pmeato3 = pmeato3_256[175:1128,i]
      #pmeato3 = pmeato3_256[175:1152,i]
      pmeato3 = pmeato3_256[,i]
    )
    
    ret = cnn_model_predict_tws(df,df_project,
                                models[i],
                                mode = 'ssp245',
                                region = 'region2')
    return(ret)
  }
  sub_trains_rfmodel_subs1_585 <-function(i){
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/cnn_model_predict_tws.R")
    df = data.frame(
      tws = twsdf[,1],
      pmeato3 =pmeato_ori3
    )
    df_project = data.frame(
      #pmeato2 = pmeato2_585[,i],
      #pmeato3 = pmeato3_585[175:1152,i]
      pmeato3 = pmeato3_585[,i]
    )
    
    ret = cnn_model_predict_tws(df,df_project,
                                models[i],
                                mode = 'ssp585',
                                region = 'region1')
    return(ret)
  }
  sub_trains_rfmodel_subs2_585 <-function(i){
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/cnn_model_predict_tws.R")
    df = data.frame(
      tws = twsdf[,2],
      pmeato3 = pmeato_ori3
    )
    df_project = data.frame(
      #pmeato2 = pmeato2_585[,i],
      #pmeato3 = pmeato3_585[175:1152,i]
      pmeato3 = pmeato3_585[,i]
    )
    
    ret = cnn_model_predict_tws(df,df_project,
                                models[i],
                                mode = 'ssp585',
                                region = 'region2')
    return(ret)
  }
  
  
  library(doParallel)
  i <<- i 
  #df1 <<- df1
  #df2 <<- df2
  twsdf <<- twsdf
  pmeato3_256 <<- pmeato3_256
  pmeato3_585 <<- pmeato3_585
  
  #proj_tws_tp1_256 = sub_trains_rfmodel_subs1_256()
  #proj_tws_tp1_585 = sub_trains_rfmodel_subs1_585()
  #proj_tws_tp2_256 = sub_trains_rfmodel_subs2_256()
  #proj_tws_tp2_585 = sub_trains_rfmodel_subs2_585()
  
  
  cl = makeCluster(9)
  clusterExport(cl,c('i','pmeato3_256','pmeato_ori3',
                     'twsdf','pmeato3_585','models'))
  proj_tws_tp1_256 = parLapply(cl,i,sub_trains_rfmodel_subs1_256)
  stopCluster(cl) 
  
  cl = makeCluster(9)
  clusterExport(cl,c('i','pmeato3_256','twsdf','pmeato_ori3',
                     'pmeato3_585','models'))
  proj_tws_tp1_585 = parLapply(cl,i,sub_trains_rfmodel_subs1_585)
  stopCluster(cl) 
  
  
  cl = makeCluster(9)
  clusterExport(cl,c('i','pmeato3_256','twsdf','pmeato_ori3',
                     'pmeato3_585','models'))
  proj_tws_tp2_256 = parLapply(cl,i,sub_trains_rfmodel_subs2_256)
  stopCluster(cl) 
  
  cl = makeCluster(9)
  clusterExport(cl,c('i','pmeato3_256','twsdf','pmeato_ori3',
                     'pmeato3_585','models'))
  proj_tws_tp2_585 = parLapply(cl,i,sub_trains_rfmodel_subs2_585)
  stopCluster(cl) 
  
  proj_tws_tp1_256 = do.call(cbind,proj_tws_tp1_256)
  proj_tws_tp1_585 = do.call(cbind,proj_tws_tp1_585)
  proj_tws_tp2_256 = do.call(cbind,proj_tws_tp2_256)
  proj_tws_tp2_585 = do.call(cbind,proj_tws_tp2_585)
  
  ensemble_tws_tp1_256 = apply(proj_tws_tp1_256[,1:8],1,mean)
  ensemble_tws_tp1_585 = apply(proj_tws_tp1_585[,1:8],1,mean)
  ensemble_tws_tp2_256 = apply(proj_tws_tp2_256[,1:8],1,mean)
  ensemble_tws_tp2_585 = apply(proj_tws_tp2_585[,1:8],1,mean)
  
  
  ense1256 = c(ensemble_tws_tp1_256)
  ense1585 = c(ensemble_tws_tp1_585)
  
  ense2256 = c(ensemble_tws_tp2_256)
  ense2585 = c(ensemble_tws_tp2_585)  
  
  df = data.frame(ense1256,ense1585,
                  ense2256,ense2585)
  
  proj_tws_tp1_256[,9] = ense1256
  proj_tws_tp1_585[,9] = ense1585
  proj_tws_tp2_256[,9] = ense2256
  proj_tws_tp2_585[,9] = ense2585
  
  output = 'output_proj_tws/ensemble_tws_2020_2099_bc_cnn_final'
  dir.create(output)
  output1 = 'output_proj_tws/ensemble_tws_2020_2099_bc_cnn_final/twsdf_in_tibet_consider_hist.csv'
  fwrite(df,output1)
  
  output2 = 'output_proj_tws/ensemble_tws_2020_2099_bc_cnn_final/proj_tws_tp1_245.csv'
  output3 = 'output_proj_tws/ensemble_tws_2020_2099_bc_cnn_final/proj_tws_tp1_585.csv'
  output4 = 'output_proj_tws/ensemble_tws_2020_2099_bc_cnn_final/proj_tws_tp2_245.csv'
  output5 = 'output_proj_tws/ensemble_tws_2020_2099_bc_cnn_final/proj_tws_tp2_585.csv'
  
  fwrite(proj_tws_tp1_256,output2)
  fwrite(proj_tws_tp1_585,output3)
  fwrite(proj_tws_tp2_256,output4)
  fwrite(proj_tws_tp2_585,output5)
  
  ret_train = list(pmeato3_256,pmeato3_585)
  ret_proj = list(proj_tws_tp1_256,
                  proj_tws_tp1_585,
                  proj_tws_tp2_256,
                  proj_tws_tp2_585)
  return(list(ret_train,ret_proj))
  
  
}
projection_tws_in_tp12_pmeato3_withhist_bias_corrected<-function(
  
){
  
  trend_fun_index_cmip6<-function(x){
    x = as.numeric(x)
    loc2020 = length(2003:2020)*12-11
    loc2050 = length(2003:2099)*12
    x = x[loc2020:loc2050]
    xt = ts(x,start = c(2020,1),frequency = 12)
    xt = decompose(xt)$trend
    naid = which(is.na(xt))
    xt = xt[-naid]
    
    xt = (xt - mean(xt))/sd(xt)
    return(xt)
  }
  trend_fun_index_cmip6_2003<-function(x){
    x = as.numeric(x)
    #x = x[loc2020:loc2050]
    xt = ts(x,start = c(2003,1),frequency = 12)
    xt = decompose(xt)$trend
    
    naid = which(is.na(xt))
    xt = xt[-naid]
    
    return(xt)
  }
  stand_fun_index_cmip6_2003<-function(x){
    xt = (x - mean(x))/sd(x)
    
    #loc2020 = 175
    #loc2099 = length(xt)
    #xt = xt[loc2020:loc2099]
    return(xt)
  }
  trend_fun_index_era5<-function(x){
    x = as.numeric(x)
    xt = ts(x,start = c(2003,1),frequency = 12)
    xt = decompose(xt)$trend
    
    naid = which(is.na(xt))
    xt = xt[-naid]
    return(xt)
  }
  standard_fun_index_era5 <-function(x){
    xs = (x - mean(x))/sd(x)
    return(xs)
  }
  
  standard_fun_index_tws <-function(x){
    xs = x/sd(x)
    return(xs)
  }
  
  # input index tws trend items in tibet based on era5 
  twsdf = import_index_insource_tibet(var = 'tws_tibet')  
  #twsdf = apply(twsdf,2,standard_fun_index_tws)
  twsdf = twsdf[,1:2]
  
  # input and choose pmes based on the relationships
  pmeato1 = import_index_insource_tibet(var = 'pme_mean',region = 'ato')
  pmeio1 = import_index_insource_tibet(var = 'pme_mean',region = 'io')
  
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/bias_correction_cmip6_index.R")
  
  
  pmeato = pmeato1[1:174,]
  pmeio = pmeio1[1:174,]
  
  pmeato = apply(pmeato,2,trend_fun_index_era5)
  pmeio = apply(pmeio,2,trend_fun_index_era5)
  pmeato = apply(pmeato,2,standard_fun_index_era5)
  pmeio = apply(pmeio,2,standard_fun_index_era5)
  
  
  pmeato = pmeato[,2:3]
  pmeio = pmeio[,4]
  
  
  # input the cmip6 pmes in ato 2,3 and the io 2-3
  #######
  pmeato_ori2 = matrix(rep(pmeato1[,2],8),ncol = 8)
  pmeato_ori3 = matrix(rep(pmeato1[,3],8),ncol = 8)
  
  
  pmeato_cmip6 = import_index_insource_tibet(var = 'pme_cmip6_mean',
                                             region = 'ato')
  pmeato_cmip6_corre = bias_correction_cmip6_index(pmeato1,pmeato_cmip6)
  
  pmeato3_256 = pmeato_cmip6_corre[[1]]
  pmeato3_585 = pmeato_cmip6_corre[[2]]
  
  colnames(pmeato_ori3) = colnames(pmeato3_256)
  
  pmeato3_256 = rbind(pmeato_ori3,pmeato3_256)
  pmeato3_585 = rbind(pmeato_ori3,pmeato3_585)
  
  #pmeato3_256 = apply(pmeato3_256,1,mean)
  #pmeato3_585 = apply(pmeato3_585,1,mean)
  
  pmeato3_256 = apply(pmeato3_256,2,trend_fun_index_cmip6_2003)
  pmeato3_585 = apply(pmeato3_585,2,trend_fun_index_cmip6_2003)
  #pmeato3_256 = apply(pmeato3_256,2,stand_fun_index_cmip6_2003)
  #pmeato3_585 = apply(pmeato3_585,2,stand_fun_index_cmip6_2003)
  #pmeato3_256 = trend_fun_index_cmip6_2003(pmeato3_256)
  #pmeato3_585 = trend_fun_index_cmip6_2003(pmeato3_585)
  #pmeato3_256 = stand_fun_index_cmip6_2003(pmeato3_256)
  #pmeato3_585 = stand_fun_index_cmip6_2003(pmeato3_585)
  
  #pmeato3_256 = matrix(pmeato3_256,ncol = 1)
  #pmeato3_585 = matrix(pmeato3_585,ncol = 1)
  #######
  
  # set up the random forest models
  i = 1:8
  sub_trains_rfmodel_subs1_256 <-function(i){
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/random_forest_model_tws_cmip6_raster_tibet.R")
    df = data.frame(
      tws = twsdf[,1],
      pmeato3 = pmeato3_256[1:162,i]
    )
    df_project = data.frame(
      #pmeato2 = pmeato2_256[,i],
      pmeato3 = as.numeric(pmeato3_256[175:1152,i])
    )
    
    ret = random_forest_model_tws_cmip6_raster_tibet(df,
                                                     df_project)
    return(ret)
  }
  sub_trains_rfmodel_subs2_256 <-function(i){
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/random_forest_model_tws_cmip6_raster_tibet.R")
    df = data.frame(
      tws = twsdf[,2],
      pmeato3 = pmeato3_256[1:162,i]
    )
    df_project = data.frame(
      #pmeato2 = pmeato2_256[,i],
      pmeato3 = pmeato3_256[175:1128,i]
    )
    
    ret = random_forest_model_tws_cmip6_raster_tibet(df,
                                                     df_project)
    return(ret)
  }
  sub_trains_rfmodel_subs1_585 <-function(i){
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/random_forest_model_tws_cmip6_raster_tibet.R")
    df = data.frame(
      tws = twsdf[,1],
      pmeato3 = pmeato3_585[1:162,i]
    )
    df_project = data.frame(
      #pmeato2 = pmeato2_585[,i],
      pmeato3 = pmeato3_585[175:1128,i]
    )
    
    ret = random_forest_model_tws_cmip6_raster_tibet(df,
                                                     df_project)
    return(ret)
  }
  sub_trains_rfmodel_subs2_585 <-function(i){
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/random_forest_model_tws_cmip6_raster_tibet.R")
    df = data.frame(
      tws = twsdf[,2],
      pmeato3 = pmeato3_585[1:162,i]
    )
    df_project = data.frame(
      #pmeato2 = pmeato2_585[,i],
      pmeato3 = pmeato3_585[175:1128,i]
    )
    
    ret = random_forest_model_tws_cmip6_raster_tibet(df,
                                                     df_project)
    return(ret)
  }
  
  
  library(doParallel)
  i <<- i 
  df1 <<- df1
  df2 <<- df2
  twsdf <<- twsdf
  pmeio4_256 <<- pmeio4_256
  pmeato2_256 <<- pmeato2_256
  pmeato3_256 <<- pmeato3_256
  pmeio4_585 <<- pmeio4_585
  pmeato2_585 <<- pmeato2_585
  pmeato3_585 <<- pmeato3_585
  
  #proj_tws_tp1_256 = sub_trains_rfmodel_subs1_256()
  #proj_tws_tp1_585 = sub_trains_rfmodel_subs1_585()
  #proj_tws_tp2_256 = sub_trains_rfmodel_subs2_256()
  #proj_tws_tp2_585 = sub_trains_rfmodel_subs2_585()
  
  
  cl = makeCluster(9)
  clusterExport(cl,c('i','pmeato3_256','twsdf','pmeato3_585',
                     'df1','df2'))
  proj_tws_tp1_256 = parLapply(cl,i,sub_trains_rfmodel_subs1_256)
  stopCluster(cl) 
  
  cl = makeCluster(9)
  clusterExport(cl,c('i','pmeato3_256','twsdf','pmeato3_585',
                     'df1','df2'))
  proj_tws_tp1_585 = parLapply(cl,i,sub_trains_rfmodel_subs1_585)
  stopCluster(cl) 
  
  
  cl = makeCluster(9)
  clusterExport(cl,c('i','pmeato3_256','twsdf','pmeato3_585',
                     'df1','df2'))
  proj_tws_tp2_256 = parLapply(cl,i,sub_trains_rfmodel_subs2_256)
  stopCluster(cl) 
  
  cl = makeCluster(9)
  clusterExport(cl,c('i','pmeato3_256','twsdf','pmeato3_585',
                     'df1','df2'))
  proj_tws_tp2_585 = parLapply(cl,i,sub_trains_rfmodel_subs2_585)
  stopCluster(cl) 
  
  proj_tws_tp1_256 = do.call(cbind,proj_tws_tp1_256)
  proj_tws_tp1_585 = do.call(cbind,proj_tws_tp1_585)
  proj_tws_tp2_256 = do.call(cbind,proj_tws_tp2_256)
  proj_tws_tp2_585 = do.call(cbind,proj_tws_tp2_585)
  
  ensemble_tws_tp1_256 = apply(proj_tws_tp1_256,1,mean)
  ensemble_tws_tp1_585 = apply(proj_tws_tp1_585,1,mean)
  ensemble_tws_tp2_256 = apply(proj_tws_tp2_256,1,mean)
  ensemble_tws_tp2_585 = apply(proj_tws_tp2_585,1,mean)
  
  
  ense1256 = c(ensemble_tws_tp1_256)
  ense1585 = c(ensemble_tws_tp1_585)
  
  ense2256 = c(ensemble_tws_tp2_256)
  ense2585 = c(ensemble_tws_tp2_585)  
  
  df = data.frame(ense1256,ense1585,
                  ense2256,ense2585)
  output = 'output/ensemble_tws_2020_2099_final'
  dir.create(output)
  output1 = 'output/ensemble_tws_2020_2099_final/twsdf_in_tibet_consider_hist.csv'
  fwrite(df,output1)
  
  output2 = 'output/ensemble_tws_2020_2099_final/proj_tws_tp1_245.csv'
  output3 = 'output/ensemble_tws_2020_2099_final/proj_tws_tp1_585.csv'
  output4 = 'output/ensemble_tws_2020_2099_final/proj_tws_tp2_245.csv'
  output5 = 'output/ensemble_tws_2020_2099_final/proj_tws_tp2_585.csv'
  
  fwrite(proj_tws_tp1_256,output2)
  fwrite(proj_tws_tp1_585,output3)
  fwrite(proj_tws_tp2_256,output4)
  fwrite(proj_tws_tp2_585,output5)
  
  ret_train = list(pmeato3_256,pmeato3_585)
  ret_proj = list(proj_tws_tp1_256,
                  proj_tws_tp1_585,
                  proj_tws_tp2_256,
                  proj_tws_tp2_585)
  return(list(ret_train,ret_proj))
  
  
}
projection_tws_in_tp12_pmeato3_withhist_cnn_normal<-function(
  
){
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/import_index_insource_tibet.R")
  trend_fun_index_cmip6<-function(x){
    x = as.numeric(x)
    loc2020 = length(2003:2020)*12-11
    loc2050 = length(2003:2099)*12
    x = x[loc2020:loc2050]
    xt = ts(x,start = c(2020,1),frequency = 12)
    xt = decompose(xt)$trend
    naid = which(is.na(xt))
    xt = xt[-naid]
    
    xt = (xt - mean(xt))/sd(xt)
    return(xt)
  }
  trend_fun_index_cmip6_2003<-function(x){
    x = as.numeric(x)
    #x = x[loc2020:loc2050]
    xt = ts(x,start = c(2003,1),frequency = 12)
    xt = decompose(xt)$trend
    
    naid = which(is.na(xt))
    xt = xt[-naid]
    
    return(xt)
  }
  stand_fun_index_cmip6_2003<-function(x){
    xt = (x - min(x))/(max(x)-min(x))
    
    #loc2020 = 175
    #loc2099 = length(xt)
    #xt = xt[loc2020:loc2099]
    return(xt)
  }
  trend_fun_index_era5<-function(x){
    x = as.numeric(x)
    xt = ts(x,start = c(2003,1),frequency = 12)
    xt = decompose(xt)$trend
    
    naid = which(is.na(xt))
    xt = xt[-naid]
    return(xt)
  }
  standard_fun_index_era5 <-function(x){
    xs = (x - min(x))/(max(x) - min(x))
    return(xs)
  }
  
  standard_fun_index_tws <-function(x){
    xs = (x - min(x))/(max(x) - min(x))
    return(xs)
  }
  
  # input index tws trend items in tibet based on era5 
  twsdf = import_index_insource_tibet(var = 'tws_tibet')  
  twsdf = apply(twsdf,2,standard_fun_index_tws)
  twsdf = twsdf[,1:2]
  
  # input and choose pmes based on the relationships
  pmeato1 = import_index_insource_tibet(var = 'pme_mean',region = 'ato')
  pmeio1 = import_index_insource_tibet(var = 'pme_mean',region = 'io')
  
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/bias_correction_cmip6_index.R")
  
  
  pmeato = pmeato1[1:174,]
  pmeio = pmeio1[1:174,]
  
  pmeato = apply(pmeato,2,trend_fun_index_era5)
  pmeio = apply(pmeio,2,trend_fun_index_era5)
  pmeato = apply(pmeato,2,standard_fun_index_era5)
  pmeio = apply(pmeio,2,standard_fun_index_era5)
  
  
  pmeato = pmeato[,2:3]
  pmeio = pmeio[,4]
  
  
  # input the cmip6 pmes in ato 2,3 and the io 2-3
  #######
  pmeato_ori2 = matrix(rep(pmeato1[,2],8),ncol = 8)
  pmeato_ori3 = matrix(rep(pmeato1[,3],8),ncol = 8)
  
  pmeato_cmip6 = import_index_insource_tibet(var = 'pme_cmip6_mean',
                                             region = 'ato')
  pmeato256 = pmeato_cmip6[[1]]
  pmeato3_256 = pmeato256[[2]]
  
  pmeato585 = pmeato_cmip6[[2]]
  pmeato3_585 = pmeato585[[2]]
  
  loc2018 = length(2003:2018)*12-11
  loc2099 = length(2003:2099)*12
  
  pmeato3_256 = pmeato3_256[loc2018:loc2099,]
  pmeato3_585 = pmeato3_585[loc2018:loc2099,]
  
  colnames(pmeato_ori3) = colnames(pmeato3_256)
  models = colnames(pmeato3_256)
  models <<- models
  
  pmeato3_256 = rbind(pmeato_ori3,pmeato3_256)
  pmeato3_585 = rbind(pmeato_ori3,pmeato3_585)
  
  #pmeato3_256 = apply(pmeato3_256,1,mean)
  #pmeato3_585 = apply(pmeato3_585,1,mean)
  
  pmeato3_256 = apply(pmeato3_256,2,trend_fun_index_cmip6_2003)
  pmeato3_585 = apply(pmeato3_585,2,trend_fun_index_cmip6_2003)
  pmeato3_256 = apply(pmeato3_256,2,stand_fun_index_cmip6_2003)
  pmeato3_585 = apply(pmeato3_585,2,stand_fun_index_cmip6_2003)
  #pmeato3_256 = trend_fun_index_cmip6_2003(pmeato3_256)
  #pmeato3_585 = trend_fun_index_cmip6_2003(pmeato3_585)
  #pmeato3_256 = stand_fun_index_cmip6_2003(pmeato3_256)
  #pmeato3_585 = stand_fun_index_cmip6_2003(pmeato3_585)
  
  #pmeato3_256 = matrix(pmeato3_256,ncol = 1)
  #pmeato3_585 = matrix(pmeato3_585,ncol = 1)
  #######
  
  # set up the random forest models
  i = 1:8
  sub_trains_rfmodel_subs1_256 <-function(i){
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/cnn_model_predict_tws.R")
    df = data.frame(
      tws = twsdf[,1],
      pmeato3 = pmeato3_256[1:162,i]
    )
    df_project = data.frame(
      #pmeato2 = pmeato2_256[,i],
      pmeato3 = as.numeric(pmeato3_256[175:1152,i])
    )
    
    ret = cnn_model_predict_tws(df,df_project,
                                models[i],
                                mode = 'ssp245',
                                region = 'region1')
    return(ret)
  }
  sub_trains_rfmodel_subs2_256 <-function(i){
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/cnn_model_predict_tws.R")
    df = data.frame(
      tws = twsdf[,2],
      pmeato3 = pmeato3_256[1:162,i]
    )
    df_project = data.frame(
      #pmeato2 = pmeato2_256[,i],
      #pmeato3 = pmeato3_256[175:1128,i]
      pmeato3 = pmeato3_256[175:1152,i]
    )
    
    ret = cnn_model_predict_tws(df,df_project,
                                models[i],
                                mode = 'ssp245',
                                region = 'region2')
    return(ret)
  }
  sub_trains_rfmodel_subs1_585 <-function(i){
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/cnn_model_predict_tws.R")
    df = data.frame(
      tws = twsdf[,1],
      pmeato3 = pmeato3_585[1:162,i]
    )
    df_project = data.frame(
      #pmeato2 = pmeato2_585[,i],
      pmeato3 = pmeato3_585[175:1152,i]
    )
    
    ret = cnn_model_predict_tws(df,df_project,
                                models[i],
                                mode = 'ssp585',
                                region = 'region1')
    return(ret)
  }
  sub_trains_rfmodel_subs2_585 <-function(i){
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/cnn_model_predict_tws.R")
    df = data.frame(
      tws = twsdf[,2],
      pmeato3 = pmeato3_585[1:162,i]
    )
    df_project = data.frame(
      #pmeato2 = pmeato2_585[,i],
      pmeato3 = pmeato3_585[175:1152,i]
    )
    
    ret = cnn_model_predict_tws(df,df_project,
                                models[i],
                                mode = 'ssp585',
                                region = 'region2')
    return(ret)
  }
  
  
  library(doParallel)
  i <<- i 
  #df1 <<- df1
  #df2 <<- df2
  twsdf <<- twsdf
  pmeato3_256 <<- pmeato3_256
  pmeato3_585 <<- pmeato3_585
  
  #proj_tws_tp1_256 = sub_trains_rfmodel_subs1_256()
  #proj_tws_tp1_585 = sub_trains_rfmodel_subs1_585()
  #proj_tws_tp2_256 = sub_trains_rfmodel_subs2_256()
  #proj_tws_tp2_585 = sub_trains_rfmodel_subs2_585()
  
  
  cl = makeCluster(9)
  clusterExport(cl,c('i','pmeato3_256',
                     'twsdf','pmeato3_585','models'))
  proj_tws_tp1_256 = parLapply(cl,i,sub_trains_rfmodel_subs1_256)
  stopCluster(cl) 
  
  cl = makeCluster(9)
  clusterExport(cl,c('i','pmeato3_256','twsdf',
                     'pmeato3_585','models'))
  proj_tws_tp1_585 = parLapply(cl,i,sub_trains_rfmodel_subs1_585)
  stopCluster(cl) 
  
  
  cl = makeCluster(9)
  clusterExport(cl,c('i','pmeato3_256','twsdf',
                     'pmeato3_585','models'))
  proj_tws_tp2_256 = parLapply(cl,i,sub_trains_rfmodel_subs2_256)
  stopCluster(cl) 
  
  cl = makeCluster(9)
  clusterExport(cl,c('i','pmeato3_256','twsdf',
                     'pmeato3_585','models'))
  proj_tws_tp2_585 = parLapply(cl,i,sub_trains_rfmodel_subs2_585)
  stopCluster(cl) 
  
  proj_tws_tp1_256 = do.call(cbind,proj_tws_tp1_256)
  proj_tws_tp1_585 = do.call(cbind,proj_tws_tp1_585)
  proj_tws_tp2_256 = do.call(cbind,proj_tws_tp2_256)
  proj_tws_tp2_585 = do.call(cbind,proj_tws_tp2_585)
  
  ensemble_tws_tp1_256 = apply(proj_tws_tp1_256,1,mean)
  ensemble_tws_tp1_585 = apply(proj_tws_tp1_585,1,mean)
  ensemble_tws_tp2_256 = apply(proj_tws_tp2_256,1,mean)
  ensemble_tws_tp2_585 = apply(proj_tws_tp2_585,1,mean)
  
  
  ense1256 = c(ensemble_tws_tp1_256)
  ense1585 = c(ensemble_tws_tp1_585)
  
  ense2256 = c(ensemble_tws_tp2_256)
  ense2585 = c(ensemble_tws_tp2_585)  
  
  df = data.frame(ense1256,ense1585,
                  ense2256,ense2585)
  output = 'output/ensemble_tws_2020_2099_cnn_normal'
  dir.create(output)
  output1 = 'output/ensemble_tws_2020_2099_cnn_normal/twsdf_in_tibet_consider_hist.csv'
  fwrite(df,output1)
  
  output2 = 'output/ensemble_tws_2020_2099_cnn_normal/proj_tws_tp1_245.csv'
  output3 = 'output/ensemble_tws_2020_2099_cnn_normal/proj_tws_tp1_585.csv'
  output4 = 'output/ensemble_tws_2020_2099_cnn_normal/proj_tws_tp2_245.csv'
  output5 = 'output/ensemble_tws_2020_2099_cnn_normal/proj_tws_tp2_585.csv'
  
  fwrite(proj_tws_tp1_256,output2)
  fwrite(proj_tws_tp1_585,output3)
  fwrite(proj_tws_tp2_256,output4)
  fwrite(proj_tws_tp2_585,output5)
  
  ret_train = list(pmeato3_256,pmeato3_585)
  ret_proj = list(proj_tws_tp1_256,
                  proj_tws_tp1_585,
                  proj_tws_tp2_256,
                  proj_tws_tp2_585)
  return(list(ret_train,ret_proj))
  
  
}
projection_tws_in_tp12_pmeato3_withhist_cnn_normal2<-function(
  
){
  dir.create('output_proj_tws')
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/import_index_insource_tibet.R")
  trend_fun_index_cmip6<-function(x){
    x = as.numeric(x)
    loc2020 = length(2003:2020)*12-11
    loc2050 = length(2003:2099)*12
    x = x[loc2020:loc2050]
    xt = ts(x,start = c(2020,1),frequency = 12)
    xt = decompose(xt)$trend
    naid = which(is.na(xt))
    xt = xt[-naid]
    
    xt = (xt - mean(xt))/sd(xt)
    return(xt)
  }
  trend_fun_index_cmip6_2003<-function(x){
    x = as.numeric(x)
    #x = x[loc2020:loc2050]
    xt = ts(x,start = c(2003,1),frequency = 12)
    xt = decompose(xt)$trend
    
    naid = which(is.na(xt))
    xt = xt[-naid]
    
    return(xt)
  }
  stand_fun_index_cmip6_2003<-function(x){
    xt = (x - min(x))/(max(x)-min(x))
    
    #loc2020 = 175
    #loc2099 = length(xt)
    #xt = xt[loc2020:loc2099]
    return(xt)
  }
  trend_fun_index_era5<-function(x){
    x = as.numeric(x)
    xt = ts(x,start = c(2003,1),frequency = 12)
    xt = decompose(xt)$trend
    
    naid = which(is.na(xt))
    xt = xt[-naid]
    return(xt)
  }
  standard_fun_index_era5 <-function(x){
    xs = (x - min(x))/(max(x)-min(x))
    return(xs)
  }
  
  standard_fun_index_tws <-function(x){
    xs = (x - min(x))/(max(x)-min(x))
    return(xs)
  }
  
  # input index tws trend items in tibet based on era5 
  twsdf = import_index_insource_tibet(var = 'tws_tibet')  
  twsdf = apply(twsdf,2,standard_fun_index_tws)
  twsdf = twsdf[,1:2]
  
  # input and choose pmes based on the relationships
  pmeato1 = import_index_insource_tibet(var = 'pme_mean',region = 'ato')
  pmeio1 = import_index_insource_tibet(var = 'pme_mean',region = 'io')
  
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/bias_correction_cmip6_index_withlinear.R")
  
  
  pmeato = pmeato1[1:174,]
  pmeio = pmeio1[1:174,]
  
  pmeato = apply(pmeato,2,trend_fun_index_era5)
  pmeio = apply(pmeio,2,trend_fun_index_era5)
  pmeato = apply(pmeato,2,standard_fun_index_era5)
  pmeio = apply(pmeio,2,standard_fun_index_era5)
  
  
  pmeato = pmeato[,2:3]
  pmeio = pmeio[,4]
  
  
  # input the cmip6 pmes in ato 2,3 and the io 2-3
  #######
  pmeato_ori3 = pmeato[,2]
  pmeato_ori3 <<- pmeato_ori3
  
  pmeato_cmip6 = import_index_insource_tibet(var = 'pme_cmip6_mean',
                                             region = 'ato')
  # import cmip6 index
  pmeato256 = pmeato_cmip6[[1]]
  pmeato3_256 = pmeato256[[2]]
  
  pmeato585 = pmeato_cmip6[[2]]
  pmeato3_585 = pmeato585[[2]]
  
  
  models = colnames(pmeato3_256)
  models = c(models,'Ensemble')
  models <<- models
  
  #pmeato3_256 = apply(pmeato3_256,1,mean)
  #pmeato3_585 = apply(pmeato3_585,1,mean)
  
  pmeato3_256_ense = apply(pmeato3_256,1,mean)
  pmeato3_585_ense = apply(pmeato3_585,1,mean)
  
  pmeato3_256_ense = trend_fun_index_cmip6_2003(pmeato3_256_ense)
  pmeato3_585_ense = trend_fun_index_cmip6_2003(pmeato3_585_ense)
  pmeato3_256_ense = stand_fun_index_cmip6_2003(pmeato3_256_ense)
  pmeato3_585_ense = stand_fun_index_cmip6_2003(pmeato3_585_ense)
  
  pmeato3_256 = apply(pmeato3_256,2,trend_fun_index_cmip6_2003)
  pmeato3_585 = apply(pmeato3_585,2,trend_fun_index_cmip6_2003)
  pmeato3_256 = apply(pmeato3_256,2,stand_fun_index_cmip6_2003)
  pmeato3_585 = apply(pmeato3_585,2,stand_fun_index_cmip6_2003)
  
  pmeato3_256 = as.data.frame(pmeato3_256)
  pmeato3_585 = as.data.frame(pmeato3_585)
  
  pmeato3_256$Ensemble = pmeato3_256_ense
  pmeato3_585$Ensemble = pmeato3_585_ense
  #pmeato3_256 = trend_fun_index_cmip6_2003(pmeato3_256)
  #pmeato3_585 = trend_fun_index_cmip6_2003(pmeato3_585)
  #pmeato3_256 = stand_fun_index_cmip6_2003(pmeato3_256)
  #pmeato3_585 = stand_fun_index_cmip6_2003(pmeato3_585)
  
  
  #pmeato3_256 = matrix(pmeato3_256,ncol = 1)
  #pmeato3_585 = matrix(pmeato3_585,ncol = 1)
  #######
  
  # set up the random forest models
  i = 1:9
  sub_trains_rfmodel_subs1_256 <-function(i){
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/cnn_model_predict_tws.R")
    df = data.frame(
      tws = twsdf[,1],
      pmeato3 = pmeato_ori3
    )
    df_project = data.frame(
      #pmeato2 = pmeato2_256[,i],
      #pmeato3 = as.numeric(pmeato3_256[175:1152,i])
      pmeato3 = as.numeric(pmeato3_256[,i])
    )
    
    ret = cnn_model_predict_tws(df,df_project,
                                models[i],
                                mode = 'ssp245',
                                region = 'region1')
    return(ret)
  }
  sub_trains_rfmodel_subs2_256 <-function(i){
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/cnn_model_predict_tws.R")
    df = data.frame(
      tws = twsdf[,2],
      pmeato3 = pmeato_ori3
    )
    df_project = data.frame(
      #pmeato2 = pmeato2_256[,i],
      #pmeato3 = pmeato3_256[175:1128,i]
      #pmeato3 = pmeato3_256[175:1152,i]
      pmeato3 = pmeato3_256[,i]
    )
    
    ret = cnn_model_predict_tws(df,df_project,
                                models[i],
                                mode = 'ssp245',
                                region = 'region2')
    return(ret)
  }
  sub_trains_rfmodel_subs1_585 <-function(i){
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/cnn_model_predict_tws.R")
    df = data.frame(
      tws = twsdf[,1],
      pmeato3 = pmeato_ori3
    )
    df_project = data.frame(
      #pmeato2 = pmeato2_585[,i],
      #pmeato3 = pmeato3_585[175:1152,i]
      pmeato3 = pmeato3_585[,i]
    )
    
    ret = cnn_model_predict_tws(df,df_project,
                                models[i],
                                mode = 'ssp585',
                                region = 'region1')
    return(ret)
  }
  sub_trains_rfmodel_subs2_585 <-function(i){
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/cnn_model_predict_tws.R")
    df = data.frame(
      tws = twsdf[,2],
      pmeato3 = pmeato_ori3
    )
    df_project = data.frame(
      #pmeato2 = pmeato2_585[,i],
      #pmeato3 = pmeato3_585[175:1152,i]
      pmeato3 = pmeato3_585[,i]
    )
    
    ret = cnn_model_predict_tws(df,df_project,
                                models[i],
                                mode = 'ssp585',
                                region = 'region2')
    return(ret)
  }
  
  
  library(doParallel)
  i <<- i 
  #df1 <<- df1
  #df2 <<- df2
  twsdf <<- twsdf
  pmeato3_256 <<- pmeato3_256
  pmeato3_585 <<- pmeato3_585
  
  #proj_tws_tp1_256 = sub_trains_rfmodel_subs1_256()
  #proj_tws_tp1_585 = sub_trains_rfmodel_subs1_585()
  #proj_tws_tp2_256 = sub_trains_rfmodel_subs2_256()
  #proj_tws_tp2_585 = sub_trains_rfmodel_subs2_585()
  
  
  cl = makeCluster(9)
  clusterExport(cl,c('i','pmeato3_256','pmeato_ori3',
                     'twsdf','pmeato3_585','models'))
  proj_tws_tp1_256 = parLapply(cl,i,sub_trains_rfmodel_subs1_256)
  stopCluster(cl) 
  
  cl = makeCluster(9)
  clusterExport(cl,c('i','pmeato3_256','twsdf','pmeato_ori3',
                     'pmeato3_585','models'))
  proj_tws_tp1_585 = parLapply(cl,i,sub_trains_rfmodel_subs1_585)
  stopCluster(cl) 
  
  
  cl = makeCluster(9)
  clusterExport(cl,c('i','pmeato3_256','twsdf','pmeato_ori3',
                     'pmeato3_585','models'))
  proj_tws_tp2_256 = parLapply(cl,i,sub_trains_rfmodel_subs2_256)
  stopCluster(cl) 
  
  cl = makeCluster(9)
  clusterExport(cl,c('i','pmeato3_256','twsdf','pmeato_ori3',
                     'pmeato3_585','models'))
  proj_tws_tp2_585 = parLapply(cl,i,sub_trains_rfmodel_subs2_585)
  stopCluster(cl) 
  
  proj_tws_tp1_256 = do.call(cbind,proj_tws_tp1_256)
  proj_tws_tp1_585 = do.call(cbind,proj_tws_tp1_585)
  proj_tws_tp2_256 = do.call(cbind,proj_tws_tp2_256)
  proj_tws_tp2_585 = do.call(cbind,proj_tws_tp2_585)
  
  ensemble_tws_tp1_256 = apply(proj_tws_tp1_256[,1:8],1,mean)
  ensemble_tws_tp1_585 = apply(proj_tws_tp1_585[,1:8],1,mean)
  ensemble_tws_tp2_256 = apply(proj_tws_tp2_256[,1:8],1,mean)
  ensemble_tws_tp2_585 = apply(proj_tws_tp2_585[,1:8],1,mean)
  
  
  ense1256 = c(ensemble_tws_tp1_256)
  ense1585 = c(ensemble_tws_tp1_585)
  
  ense2256 = c(ensemble_tws_tp2_256)
  ense2585 = c(ensemble_tws_tp2_585)  
  
  df = data.frame(ense1256,ense1585,
                  ense2256,ense2585)
  
  proj_tws_tp1_256[,9] = ense1256
  proj_tws_tp1_585[,9] = ense1585
  proj_tws_tp2_256[,9] = ense2256
  proj_tws_tp2_585[,9] = ense2585
  
  output = 'output_proj_tws/ensemble_tws_2020_2099_bc_cnn_final'
  dir.create(output)
  output1 = 'output_proj_tws/ensemble_tws_2020_2099_bc_cnn_final/twsdf_in_tibet_consider_hist.csv'
  fwrite(df,output1)
  
  output2 = 'output_proj_tws/ensemble_tws_2020_2099_bc_cnn_final/proj_tws_tp1_245.csv'
  output3 = 'output_proj_tws/ensemble_tws_2020_2099_bc_cnn_final/proj_tws_tp1_585.csv'
  output4 = 'output_proj_tws/ensemble_tws_2020_2099_bc_cnn_final/proj_tws_tp2_245.csv'
  output5 = 'output_proj_tws/ensemble_tws_2020_2099_bc_cnn_final/proj_tws_tp2_585.csv'
  
  fwrite(proj_tws_tp1_256,output2)
  fwrite(proj_tws_tp1_585,output3)
  fwrite(proj_tws_tp2_256,output4)
  fwrite(proj_tws_tp2_585,output5)
  
  ret_train = list(pmeato3_256,pmeato3_585)
  ret_proj = list(proj_tws_tp1_256,
                  proj_tws_tp1_585,
                  proj_tws_tp2_256,
                  proj_tws_tp2_585)
  return(list(ret_train,ret_proj))
  
  
}
projection_tws_in_tp12_pmeato3_withhist_cnn<-function(
  
){
  dir.create('output_proj_tws')
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/import_index_insource_tibet.R")
  trend_fun_index_cmip6<-function(x){
    x = as.numeric(x)
    loc2020 = length(2003:2020)*12-11
    loc2050 = length(2003:2099)*12
    x = x[loc2020:loc2050]
    xt = ts(x,start = c(2020,1),frequency = 12)
    xt = decompose(xt)$trend
    naid = which(is.na(xt))
    xt = xt[-naid]
    
    xt = (xt - mean(xt))/sd(xt)
    return(xt)
  }
  trend_fun_index_cmip6_2003<-function(x){
    x = as.numeric(x)
    #x = x[loc2020:loc2050]
    xt = ts(x,start = c(2003,1),frequency = 12)
    xt = decompose(xt)$trend
    
    naid = which(is.na(xt))
    xt = xt[-naid]
    
    return(xt)
  }
  stand_fun_index_cmip6_2003<-function(x){
    xt = (x - mean(x))/sd(x)
    
    #loc2020 = 175
    #loc2099 = length(xt)
    #xt = xt[loc2020:loc2099]
    return(xt)
  }
  trend_fun_index_era5<-function(x){
    x = as.numeric(x)
    xt = ts(x,start = c(2003,1),frequency = 12)
    xt = decompose(xt)$trend
    
    naid = which(is.na(xt))
    xt = xt[-naid]
    return(xt)
  }
  standard_fun_index_era5 <-function(x){
    xs = (x - mean(x))/sd(x)
    return(xs)
  }
  
  standard_fun_index_tws <-function(x){
    xs = x/sd(x)
    return(xs)
  }
  
  # input index tws trend items in tibet based on era5 
  twsdf = import_index_insource_tibet(var = 'tws_tibet')  
  twsdf = apply(twsdf,2,standard_fun_index_tws)
  twsdf = twsdf[,1:2]
  
  # input and choose pmes based on the relationships
  pmeato1 = import_index_insource_tibet(var = 'pme_mean',region = 'ato')
  pmeio1 = import_index_insource_tibet(var = 'pme_mean',region = 'io')
  
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/bias_correction_cmip6_index.R")
  
  
  pmeato = pmeato1[1:174,]
  pmeio = pmeio1[1:174,]
  
  pmeato = apply(pmeato,2,trend_fun_index_era5)
  pmeio = apply(pmeio,2,trend_fun_index_era5)
  pmeato = apply(pmeato,2,standard_fun_index_era5)
  pmeio = apply(pmeio,2,standard_fun_index_era5)
  
  
  pmeato = pmeato[,2:3]
  pmeio = pmeio[,4]
  
  
  # input the cmip6 pmes in ato 2,3 and the io 2-3
  #######
  #pmeato_ori3 = matrix(rep(pmeato1[,3],8),ncol = 8)
  pmeato_ori3 = pmeato[,2]
  
  pmeato_cmip6 = import_index_insource_tibet(var = 'pme_cmip6_mean',
                                             region = 'ato')
  # import cmip6 index
  pmeato256 = pmeato_cmip6[[1]]
  pmeato3_256 = pmeato256[[2]]
  
  pmeato585 = pmeato_cmip6[[2]]
  pmeato3_585 = pmeato585[[2]]
  
  models = colnames(pmeato3_256)
  
  #colnames(pmeato_ori3) = models
  models = c(models,'Ensemble')
  models <<- models
  
  
  #pmeato3_256 = rbind(pmeato_ori3,pmeato3_256[181:1164,])
  #pmeato3_585 = rbind(pmeato_ori3,pmeato3_585[181:1164,])
  
  #pmeato3_256 = apply(pmeato3_256,1,mean)
  #pmeato3_585 = app$ly(pmeato3_585,1,mean)
  
  
  pmeato3_256_ense = apply(pmeato3_256,1,mean)
  pmeato3_585_ense = apply(pmeato3_585,1,mean)
  
  pmeato3_256 = as.data.frame(pmeato3_256)
  pmeato3_585 = as.data.frame(pmeato3_585)
  
  pmeato3_256$Ensemble = pmeato3_256_ense
  pmeato3_585$Ensemble = pmeato3_585_ense
  
  #pmeato3_256_ense = stand_fun_index_cmip6_2003(pmeato3_256_ense)
  #pmeato3_585_ense = stand_fun_index_cmip6_2003(pmeato3_585_ense)
  
  #pmeato3_256_ense = trend_fun_index_cmip6_2003(pmeato3_256_ense)
  #pmeato3_585_ense = trend_fun_index_cmip6_2003(pmeato3_585_ense)
  
  pmeato3_256 = apply(pmeato3_256,2,trend_fun_index_cmip6_2003)
  pmeato3_585 = apply(pmeato3_585,2,trend_fun_index_cmip6_2003)
  
  pmeato3_256_c1 = project_pmes_fun(pmeato_ori3,
                                    pmeato3_256,
                                    models)
  pmeato3_585_c1 = project_pmes_fun(pmeato_ori3,
                                    pmeato3_585,
                                    models)
  
  
  
  pmeato3_256 = apply(pmeato3_256_c1,2,stand_fun_index_cmip6_2003)
  pmeato3_585 = apply(pmeato3_585_c1,2,stand_fun_index_cmip6_2003)
  
  #pmeato3_256 = pmeato3_256[175:1152,]
  #pmeato3_585 = pmeato3_585[175:1152,]
  
  #pmeato3_256 = trend_fun_index_cmip6_2003(pmeato3_256)
  #pmeato3_585 = trend_fun_index_cmip6_2003(pmeato3_585)
  #pmeato3_256 = stand_fun_index_cmip6_2003(pmeato3_256)
  #pmeato3_585 = stand_fun_index_cmip6_2003(pmeato3_585)
  
  
  #pmeato3_256 = matrix(pmeato3_256,ncol = 1)
  #pmeato3_585 = matrix(pmeato3_585,ncol = 1)
  #######
  
  # set up the random forest models
  i = 1:9
  #pmeato_ori3 = pmeato[,2]
  
  pmeato_ori3 <<- pmeato_ori3
  
  
  sub_trains_rfmodel_subs1_256 <-function(i){
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/cnn_model_predict_tws.R")
    df = data.frame(
      tws = twsdf[,1],
      pmeato3 = pmeato_ori3
    )
    df_project = data.frame(
      #pmeato2 = pmeato2_256[,i],
      #pmeato3 = as.numeric(pmeato3_256[175:1152,i])
      pmeato3 = as.numeric(pmeato3_256[,i])
    )
    
    ret = cnn_model_predict_tws(df,df_project,
                                models[i],
                                mode = 'ssp245',
                                region = 'region1')
    return(ret)
  }
  sub_trains_rfmodel_subs2_256 <-function(i){
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/cnn_model_predict_tws.R")
    df = data.frame(
      tws = twsdf[,2],
      pmeato3 = pmeato_ori3
    )
    df_project = data.frame(
      #pmeato2 = pmeato2_256[,i],
      #pmeato3 = pmeato3_256[175:1128,i]
      #pmeato3 = pmeato3_256[175:1152,i]
      pmeato3 = pmeato3_256[,i]
    )
    
    ret = cnn_model_predict_tws(df,df_project,
                                models[i],
                                mode = 'ssp245',
                                region = 'region2')
    return(ret)
  }
  sub_trains_rfmodel_subs1_585 <-function(i){
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/cnn_model_predict_tws.R")
    df = data.frame(
      tws = twsdf[,1],
      pmeato3 = pmeato_ori3
    )
    df_project = data.frame(
      #pmeato2 = pmeato2_585[,i],
      #pmeato3 = pmeato3_585[175:1152,i]
      pmeato3 = pmeato3_585[,i]
    )
    
    ret = cnn_model_predict_tws(df,df_project,
                                models[i],
                                mode = 'ssp585',
                                region = 'region1')
    return(ret)
  }
  sub_trains_rfmodel_subs2_585 <-function(i){
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/cnn_model_predict_tws.R")
    df = data.frame(
      tws = twsdf[,2],
      pmeato3 = pmeato_ori3
    )
    df_project = data.frame(
      #pmeato2 = pmeato2_585[,i],
      #pmeato3 = pmeato3_585[175:1152,i]
      pmeato3 = pmeato3_585[,i]
    )
    
    ret = cnn_model_predict_tws(df,df_project,
                                models[i],
                                mode = 'ssp585',
                                region = 'region2')
    return(ret)
  }
  
  
  library(doParallel)
  i <<- i 
  #df1 <<- df1
  #df2 <<- df2
  twsdf <<- twsdf
  pmeato3_256 <<- pmeato3_256
  pmeato3_585 <<- pmeato3_585
  
  #proj_tws_tp1_256 = sub_trains_rfmodel_subs1_256()
  #proj_tws_tp1_585 = sub_trains_rfmodel_subs1_585()
  #proj_tws_tp2_256 = sub_trains_rfmodel_subs2_256()
  #proj_tws_tp2_585 = sub_trains_rfmodel_subs2_585()
  
  
  cl = makeCluster(9)
  clusterExport(cl,c('i','pmeato3_256','pmeato_ori3',
                     'twsdf','pmeato3_585','models'))
  proj_tws_tp1_256 = parLapply(cl,i,sub_trains_rfmodel_subs1_256)
  stopCluster(cl) 
  
  cl = makeCluster(9)
  clusterExport(cl,c('i','pmeato3_256','twsdf','pmeato_ori3',
                     'pmeato3_585','models'))
  proj_tws_tp1_585 = parLapply(cl,i,sub_trains_rfmodel_subs1_585)
  stopCluster(cl) 
  
  
  cl = makeCluster(9)
  clusterExport(cl,c('i','pmeato3_256','twsdf','pmeato_ori3',
                     'pmeato3_585','models'))
  proj_tws_tp2_256 = parLapply(cl,i,sub_trains_rfmodel_subs2_256)
  stopCluster(cl) 
  
  cl = makeCluster(9)
  clusterExport(cl,c('i','pmeato3_256','twsdf','pmeato_ori3',
                     'pmeato3_585','models'))
  proj_tws_tp2_585 = parLapply(cl,i,sub_trains_rfmodel_subs2_585)
  stopCluster(cl) 
  
  proj_tws_tp1_256 = do.call(cbind,proj_tws_tp1_256)
  proj_tws_tp1_585 = do.call(cbind,proj_tws_tp1_585)
  proj_tws_tp2_256 = do.call(cbind,proj_tws_tp2_256)
  proj_tws_tp2_585 = do.call(cbind,proj_tws_tp2_585)
  
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/bias_correct_tws_projtws.R")
  proj_tws_tp1_256 = bias_correct_tws_projtws(twsdf[,1],
                                              proj_tws_tp1_256)
  proj_tws_tp1_585 = bias_correct_tws_projtws(twsdf[,1],
                                              proj_tws_tp1_585)
  proj_tws_tp2_256 = bias_correct_tws_projtws(twsdf[,2],
                                              proj_tws_tp2_256)
  proj_tws_tp2_585 = bias_correct_tws_projtws(twsdf[,2],
                                              proj_tws_tp2_585)
  
  ensemble_tws_tp1_256 = apply(proj_tws_tp1_256[,1:8],1,mean)
  ensemble_tws_tp1_585 = apply(proj_tws_tp1_585[,1:8],1,mean)
  ensemble_tws_tp2_256 = apply(proj_tws_tp2_256[,1:8],1,mean)
  ensemble_tws_tp2_585 = apply(proj_tws_tp2_585[,1:8],1,mean)
  
  
  ense1256 = c(ensemble_tws_tp1_256)
  ense1585 = c(ensemble_tws_tp1_585)
  
  ense2256 = c(ensemble_tws_tp2_256)
  ense2585 = c(ensemble_tws_tp2_585)  
  
  df = data.frame(ense1256,ense1585,
                  ense2256,ense2585)
  
  proj_tws_tp1_256[,9] = ense1256
  proj_tws_tp1_585[,9] = ense1585
  proj_tws_tp2_256[,9] = ense2256
  proj_tws_tp2_585[,9] = ense2585
  
  output = 'output_proj_tws/ensemble_tws_2020_2099_bc_cnn_final'
  dir.create(output)
  output1 = 'output_proj_tws/ensemble_tws_2020_2099_bc_cnn_final/twsdf_in_tibet_consider_hist.csv'
  fwrite(df,output1)
  
  output2 = 'output_proj_tws/ensemble_tws_2020_2099_bc_cnn_final/proj_tws_tp1_245.csv'
  output3 = 'output_proj_tws/ensemble_tws_2020_2099_bc_cnn_final/proj_tws_tp1_585.csv'
  output4 = 'output_proj_tws/ensemble_tws_2020_2099_bc_cnn_final/proj_tws_tp2_245.csv'
  output5 = 'output_proj_tws/ensemble_tws_2020_2099_bc_cnn_final/proj_tws_tp2_585.csv'
  
  fwrite(proj_tws_tp1_256,output2)
  fwrite(proj_tws_tp1_585,output3)
  fwrite(proj_tws_tp2_256,output4)
  fwrite(proj_tws_tp2_585,output5)
  
  ret_train = list(pmeato3_256,pmeato3_585)
  ret_proj = list(proj_tws_tp1_256,
                  proj_tws_tp1_585,
                  proj_tws_tp2_256,
                  proj_tws_tp2_585)
  return(list(ret_train,ret_proj))
  
  
}
projection_tws_in_tp12_pmeato3_withhist_linear<-function(
  
){
  trend_fun_index_cmip6<-function(x){
    x = as.numeric(x)
    loc2020 = length(2003:2020)*12-11
    loc2050 = length(2003:2099)*12
    x = x[loc2020:loc2050]
    xt = ts(x,start = c(2020,1),frequency = 12)
    xt = decompose(xt)$trend
    naid = which(is.na(xt))
    xt = xt[-naid]
    
    xt = (xt - mean(xt))/sd(xt)
    return(xt)
  }
  trend_fun_index_cmip6_2003<-function(x){
    x = as.numeric(x)
    #x = x[loc2020:loc2050]
    xt = ts(x,start = c(2020,1),frequency = 12)
    xt = decompose(xt)$trend
    
    naid = which(is.na(xt))
    xt = xt[-naid]
    
    return(xt)
  }
  stand_fun_index_cmip6_2003<-function(x){
    xt = (x - mean(x))/sd(x)
    
    loc2020 = 175
    loc2099 = length(xt)
    xt = xt[loc2020:loc2099]
    return(xt)
  }
  trend_fun_index_era5<-function(x){
    x = as.numeric(x)
    xt = ts(x,start = c(2003,1),frequency = 12)
    xt = decompose(xt)$trend
    
    naid = which(is.na(xt))
    xt = xt[-naid]
    return(xt)
  }
  standard_fun_index_era5 <-function(x){
    xs = (x - mean(x))/sd(x)
    return(xs)
  }
  
  standard_fun_index_tws <-function(x){
    xs = x/sd(x)
    return(xs)
  }
  
  # input index tws trend items in tibet based on era5 
  twsdf = import_index_insource_tibet(var = 'tws_tibet_full')  
  #twsdf = apply(twsdf,2,standard_fun_index_era5)
  twsdf = twsdf[,1:2]
  # input and choose pmes based on the relationships
  pmeato1 = import_index_insource_tibet(var = 'pme_mean',region = 'ato')
  pmeio1 = import_index_insource_tibet(var = 'pme_mean',region = 'io')
  
  pmeato3full = matrix(rep(pmeato1[,3],8),ncol = 8)
  
  pmeato = pmeato1[1:174,]
  pmeio = pmeio1[1:174,]
  
  pmeato = apply(pmeato,2,trend_fun_index_era5)
  pmeio = apply(pmeio,2,trend_fun_index_era5)
  #pmeato = apply(pmeato,2,standard_fun_index_era5)
  #pmeio = apply(pmeio,2,standard_fun_index_era5)
  
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/cross_correlation_pme_tws_tibet.R")
  cor_tws1_pmeato = cross_correlation_pme_tws_tibet(twsdf[,1],pmeato)
  cor_tws2_pmeato = cross_correlation_pme_tws_tibet(twsdf[,2],pmeato)
  cor_tws1_pmeio = cross_correlation_pme_tws_tibet(twsdf[,1],pmeio)
  cor_tws2_pmeio = cross_correlation_pme_tws_tibet(twsdf[,2],pmeio)
  
  cor_mat = rbind(cor_tws1_pmeato,
                  cor_tws2_pmeato,
                  cor_tws1_pmeio,
                  cor_tws2_pmeio)
  #determine
  #region1 --> ato2,ato3 and io4
  #region2 --> ato2,ato3 and io4
  
  pmeato = pmeato[,2:3]
  pmeio = pmeio[,4]
  
  df1 = data.frame(tws = twsdf[,1],
                   #pmeato2 = pmeato[,1],
                   pmeato3 = pmeato[,2])
  df2 = data.frame(tws = twsdf[,2],
                   #pmeato2 = pmeato[,1],
                   pmeato3 = pmeato[,2])
  
  # input the cmip6 pmes in ato 2,3 and the io 2-3
  #######
  pmeato_ori2 = matrix(rep(pmeato1[,2],8),ncol = 8)
  pmeato_ori3 = matrix(rep(pmeato1[,3],8),ncol = 8)
  
  
  pmeato_cmip6 = import_index_insource_tibet(var = 'pme_cmip6_mean',
                                             region = 'ato')
  pmeato256 = pmeato_cmip6[[1]]
  pmeato2_256 = pmeato256[[1]]
  pmeato3_256 = pmeato256[[2]]
  
  pmeato585 = pmeato_cmip6[[2]]
  pmeato2_585 = pmeato585[[1]]
  pmeato3_585 = pmeato585[[2]]
  
  loc2020 = length(2003:2020)*12-11
  loc2099 = length(2003:2099)*12
  
  pmeato3_256 = pmeato3_256[loc2020:loc2099,]
  pmeato3_585 = pmeato3_585[loc2020:loc2099,]
  #pmeato3_256 = apply(pmeato3_256,1,mean)
  #pmeato3_585 = apply(pmeato3_585,1,mean)
  
  #pmeato3_256 = trend_fun_index_cmip6(pmeato3_256)
  #pmeato3_585 = trend_fun_index_cmip6(pmeato3_585)
  colnames(pmeato_ori3) = colnames(pmeato3_256)
  
  #pmeato3_256 = rbind(pmeato_ori3,pmeato3_256)
  #pmeato3_585 = rbind(pmeato_ori3,pmeato3_585)
  
  pmeato3_256 = apply(pmeato3_256,2,trend_fun_index_cmip6_2003)
  pmeato3_585 = apply(pmeato3_585,2,trend_fun_index_cmip6_2003)
  #pmeato3_256 = apply(pmeato3_256,2,stand_fun_index_cmip6_2003)
  #pmeato3_585 = apply(pmeato3_585,2,stand_fun_index_cmip6_2003)
  
  #######
  
  # set up the random forest models
  i = 1:8
  sub_trains_rfmodel_subs1_256 <-function(i){
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/linear_project_tws.R")
    df = df1
    df_project = data.frame(
      #pmeato2 = pmeato2_256[,i],
      pmeato3 = pmeato3_256[,i]
    )
    
    ret = linear_project_tws(df,
                                                     df_project)
    return(ret)
  }
  sub_trains_rfmodel_subs2_256 <-function(i){
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/linear_project_tws.R")
    df = df2
    df_project = data.frame(
      #pmeato2 = pmeato2_256[,i],
      pmeato3 = pmeato3_256[,i]
    )
    
    ret = linear_project_tws(df,
                                                     df_project)
    return(ret)
  }
  sub_trains_rfmodel_subs1_585 <-function(i){
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/linear_project_tws.R")
    df = df1
    df_project = data.frame(
      #pmeato2 = pmeato2_585[,i],
      pmeato3 = pmeato3_585[,i]
    )
    
    ret = linear_project_tws(df,
                                                     df_project)
    return(ret)
  }
  sub_trains_rfmodel_subs2_585 <-function(i){
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/linear_project_tws.R")
    df = df2
    df_project = data.frame(
      #pmeato2 = pmeato2_585[,i],
      pmeato3 = pmeato3_585[,i]
    )
    
    ret = linear_project_tws(df,
                                                     df_project)
    return(ret)
  }
  
  
  library(doParallel)
  i <<- i 
  df1 <<- df1
  df2 <<- df2
  pmeio4_256 <<- pmeio4_256
  pmeato2_256 <<- pmeato2_256
  pmeato3_256 <<- pmeato3_256
  pmeio4_585 <<- pmeio4_585
  pmeato2_585 <<- pmeato2_585
  pmeato3_585 <<- pmeato3_585
  
  #proj_tws_tp1_256 = sub_trains_rfmodel_subs1_256()
  #proj_tws_tp1_585 = sub_trains_rfmodel_subs1_585()
  #proj_tws_tp2_256 = sub_trains_rfmodel_subs2_256()
  #proj_tws_tp2_585 = sub_trains_rfmodel_subs2_585()
  
  
  cl = makeCluster(9)
  clusterExport(cl,c('i','pmeato3_256','pmeato3_585',
                     'df1','df2'))
  proj_tws_tp1_256 = parLapply(cl,i,sub_trains_rfmodel_subs1_256)
  stopCluster(cl) 
  
  cl = makeCluster(9)
  clusterExport(cl,c('i','pmeato3_256','pmeato3_585',
                     'df1','df2'))
  proj_tws_tp1_585 = parLapply(cl,i,sub_trains_rfmodel_subs1_585)
  stopCluster(cl) 
  
  
  cl = makeCluster(9)
  clusterExport(cl,c('i','pmeato3_256','pmeato3_585',
                     'df1','df2'))
  proj_tws_tp2_256 = parLapply(cl,i,sub_trains_rfmodel_subs2_256)
  stopCluster(cl) 
  
  cl = makeCluster(9)
  clusterExport(cl,c('i','pmeato3_256','pmeato3_585',
                     'df1','df2'))
  proj_tws_tp2_585 = parLapply(cl,i,sub_trains_rfmodel_subs2_585)
  stopCluster(cl) 
  
  proj_tws_tp1_256 = do.call(cbind,proj_tws_tp1_256)
  proj_tws_tp1_585 = do.call(cbind,proj_tws_tp1_585)
  proj_tws_tp2_256 = do.call(cbind,proj_tws_tp2_256)
  proj_tws_tp2_585 = do.call(cbind,proj_tws_tp2_585)
  
  ensemble_tws_tp1_256 = apply(proj_tws_tp1_256,1,mean)
  ensemble_tws_tp1_585 = apply(proj_tws_tp1_585,1,mean)
  ensemble_tws_tp2_256 = apply(proj_tws_tp2_256,1,mean)
  ensemble_tws_tp2_585 = apply(proj_tws_tp2_585,1,mean)
  
  
  ense1256 = c(ensemble_tws_tp1_256)
  ense1585 = c(ensemble_tws_tp1_585)
  
  ense2256 = c(ensemble_tws_tp2_256)
  ense2585 = c(ensemble_tws_tp2_585)  
  
  df = data.frame(ense1256,ense1585,
                  ense2256,ense2585)
  output = 'output/ensemble_tws_2020_2099'
  output = 'output/ensemble_tws_2020_2099/twsdf_in_tibet_linear.csv'
  
  fwrite(df,output)
  return(df)
  
  
}
projection_tws_in_tp12_pmeato3_withhist<-function(
  
){
  
  trend_fun_index_cmip6<-function(x){
    x = as.numeric(x)
    loc2020 = length(2003:2020)*12-11
    loc2050 = length(2003:2099)*12
    x = x[loc2020:loc2050]
    xt = ts(x,start = c(2020,1),frequency = 12)
    xt = decompose(xt)$trend
    naid = which(is.na(xt))
    xt = xt[-naid]
    
    xt = (xt - mean(xt))/sd(xt)
    return(xt)
  }
  trend_fun_index_cmip6_2003<-function(x){
    x = as.numeric(x)
    #x = x[loc2020:loc2050]
    xt = ts(x,start = c(2003,1),frequency = 12)
    xt = decompose(xt)$trend
  
    naid = which(is.na(xt))
    xt = xt[-naid]
    
    return(xt)
  }
  stand_fun_index_cmip6_2003<-function(x){
    xt = (x - mean(x))/sd(x)
    
    #loc2020 = 175
    #loc2099 = length(xt)
    #xt = xt[loc2020:loc2099]
    return(xt)
  }
  trend_fun_index_era5<-function(x){
    x = as.numeric(x)
    xt = ts(x,start = c(2003,1),frequency = 12)
    xt = decompose(xt)$trend
    
    naid = which(is.na(xt))
    xt = xt[-naid]
    return(xt)
  }
  standard_fun_index_era5 <-function(x){
    xs = (x - mean(x))/sd(x)
    return(xs)
  }
  
  standard_fun_index_tws <-function(x){
    xs = x/sd(x)
    return(xs)
  }
  
  # input index tws trend items in tibet based on era5 
  twsdf = import_index_insource_tibet(var = 'tws_tibet')  
  #twsdf = apply(twsdf,2,standard_fun_index_tws)
  twsdf = twsdf[,1:2]
  # input and choose pmes based on the relationships
  pmeato1 = import_index_insource_tibet(var = 'pme_mean',region = 'ato')
  pmeio1 = import_index_insource_tibet(var = 'pme_mean',region = 'io')
  
  pmeato3full = matrix(rep(pmeato1[,3],8),ncol = 8)
  
  pmeato = pmeato1[1:174,]
  pmeio = pmeio1[1:174,]
  
  pmeato = apply(pmeato,2,trend_fun_index_era5)
  pmeio = apply(pmeio,2,trend_fun_index_era5)
  pmeato = apply(pmeato,2,standard_fun_index_era5)
  pmeio = apply(pmeio,2,standard_fun_index_era5)
  
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/cross_correlation_pme_tws_tibet.R")
  cor_tws1_pmeato = cross_correlation_pme_tws_tibet(twsdf[,1],pmeato)
  cor_tws2_pmeato = cross_correlation_pme_tws_tibet(twsdf[,2],pmeato)
  cor_tws1_pmeio = cross_correlation_pme_tws_tibet(twsdf[,1],pmeio)
  cor_tws2_pmeio = cross_correlation_pme_tws_tibet(twsdf[,2],pmeio)
  
  cor_mat = rbind(cor_tws1_pmeato,
                  cor_tws2_pmeato,
                  cor_tws1_pmeio,
                  cor_tws2_pmeio)
  #determine
  #region1 --> ato2,ato3 and io4
  #region2 --> ato2,ato3 and io4
  
  pmeato = pmeato[,2:3]
  pmeio = pmeio[,4]
  
  df1 = data.frame(tws = twsdf[,1],
                   #pmeato2 = pmeato[,1],
                   pmeato3 = pmeato[,2])
  df2 = data.frame(tws = twsdf[,2],
                   #pmeato2 = pmeato[,1],
                   pmeato3 = pmeato[,2])
  
  # input the cmip6 pmes in ato 2,3 and the io 2-3
  #######
  pmeato_ori2 = matrix(rep(pmeato1[,2],8),ncol = 8)
  pmeato_ori3 = matrix(rep(pmeato1[,3],8),ncol = 8)
  
  
  pmeato_cmip6 = import_index_insource_tibet(var = 'pme_cmip6_mean',
                                             region = 'ato')
  pmeato256 = pmeato_cmip6[[1]]
  pmeato2_256 = pmeato256[[1]]
  pmeato3_256 = pmeato256[[2]]
  
  pmeato585 = pmeato_cmip6[[2]]
  pmeato2_585 = pmeato585[[1]]
  pmeato3_585 = pmeato585[[2]]
  
  loc2020 = length(2003:2020)*12-11
  loc2099 = length(2003:2099)*12
  
  pmeato3_256 = pmeato3_256[loc2020:loc2099,]
  pmeato3_585 = pmeato3_585[loc2020:loc2099,]
  #pmeato3_256 = apply(pmeato3_256,1,mean)
  #pmeato3_585 = apply(pmeato3_585,1,mean)
  
  #pmeato3_256 = trend_fun_index_cmip6(pmeato3_256)
  #pmeato3_585 = trend_fun_index_cmip6(pmeato3_585)
  colnames(pmeato_ori3) = colnames(pmeato3_256)
  
  pmeato3_256 = rbind(pmeato_ori3,pmeato3_256)
  pmeato3_585 = rbind(pmeato_ori3,pmeato3_585)
  
  #pmeato3_256 = apply(pmeato3_256,1,mean)
  #pmeato3_585 = apply(pmeato3_585,1,mean)
  
  pmeato3_256 = apply(pmeato3_256,2,trend_fun_index_cmip6_2003)
  pmeato3_585 = apply(pmeato3_585,2,trend_fun_index_cmip6_2003)
  #pmeato3_256 = apply(pmeato3_256,2,stand_fun_index_cmip6_2003)
  #pmeato3_585 = apply(pmeato3_585,2,stand_fun_index_cmip6_2003)
  #pmeato3_256 = trend_fun_index_cmip6_2003(pmeato3_256)
  #pmeato3_585 = trend_fun_index_cmip6_2003(pmeato3_585)
  #pmeato3_256 = stand_fun_index_cmip6_2003(pmeato3_256)
  #pmeato3_585 = stand_fun_index_cmip6_2003(pmeato3_585)
  
  #pmeato3_256 = matrix(pmeato3_256,ncol = 1)
  #pmeato3_585 = matrix(pmeato3_585,ncol = 1)
  #######
  
  # set up the random forest models
  i = 1:8
  sub_trains_rfmodel_subs1_256 <-function(i){
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/linear_project_tws.R")
    df = data.frame(
      tws = twsdf[,1],
      pmeato3 = pmeato3_256[1:162,i]
    )
    df_project = data.frame(
      #pmeato2 = pmeato2_256[,i],
      pmeato3 = as.numeric(pmeato3_256[175:1128,i])
    )
    
    ret = linear_project_tws(df,
                                                     df_project)
    return(ret)
  }
  sub_trains_rfmodel_subs2_256 <-function(i){
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/linear_project_tws.R")
    df = data.frame(
      tws = twsdf[,2],
      pmeato3 = pmeato3_256[1:162,i]
    )
    df_project = data.frame(
      #pmeato2 = pmeato2_256[,i],
      pmeato3 = pmeato3_256[175:1128,i]
    )
    
    ret = linear_project_tws(df,
                                                     df_project)
    return(ret)
  }
  sub_trains_rfmodel_subs1_585 <-function(i){
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/linear_project_tws.R")
    df = data.frame(
      tws = twsdf[,1],
      pmeato3 = pmeato3_585[1:162,i]
    )
    df_project = data.frame(
      #pmeato2 = pmeato2_585[,i],
      pmeato3 = pmeato3_585[175:1128,i]
    )
    
    ret = linear_project_tws(df,
                                                     df_project)
    return(ret)
  }
  sub_trains_rfmodel_subs2_585 <-function(i){
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/linear_project_tws.R")
    df = data.frame(
      tws = twsdf[,2],
      pmeato3 = pmeato3_585[1:162,i]
    )
    df_project = data.frame(
      #pmeato2 = pmeato2_585[,i],
      pmeato3 = pmeato3_585[175:1128,i]
    )
    
    ret = linear_project_tws(df,
                                                     df_project)
    return(ret)
  }
  
  
  library(doParallel)
  i <<- i 
  df1 <<- df1
  df2 <<- df2
  twsdf <<- twsdf
  pmeio4_256 <<- pmeio4_256
  pmeato2_256 <<- pmeato2_256
  pmeato3_256 <<- pmeato3_256
  pmeio4_585 <<- pmeio4_585
  pmeato2_585 <<- pmeato2_585
  pmeato3_585 <<- pmeato3_585
  
  #proj_tws_tp1_256 = sub_trains_rfmodel_subs1_256()
  #proj_tws_tp1_585 = sub_trains_rfmodel_subs1_585()
  #proj_tws_tp2_256 = sub_trains_rfmodel_subs2_256()
  #proj_tws_tp2_585 = sub_trains_rfmodel_subs2_585()
  
  
  cl = makeCluster(9)
  clusterExport(cl,c('i','pmeato3_256','twsdf','pmeato3_585',
                     'df1','df2'))
  proj_tws_tp1_256 = parLapply(cl,i,sub_trains_rfmodel_subs1_256)
  stopCluster(cl) 
  
  cl = makeCluster(9)
  clusterExport(cl,c('i','pmeato3_256','twsdf','pmeato3_585',
                     'df1','df2'))
  proj_tws_tp1_585 = parLapply(cl,i,sub_trains_rfmodel_subs1_585)
  stopCluster(cl) 
  
  
  cl = makeCluster(9)
  clusterExport(cl,c('i','pmeato3_256','twsdf','pmeato3_585',
                     'df1','df2'))
  proj_tws_tp2_256 = parLapply(cl,i,sub_trains_rfmodel_subs2_256)
  stopCluster(cl) 
  
  cl = makeCluster(9)
  clusterExport(cl,c('i','pmeato3_256','twsdf','pmeato3_585',
                     'df1','df2'))
  proj_tws_tp2_585 = parLapply(cl,i,sub_trains_rfmodel_subs2_585)
  stopCluster(cl) 
  
  proj_tws_tp1_256 = do.call(cbind,proj_tws_tp1_256)
  proj_tws_tp1_585 = do.call(cbind,proj_tws_tp1_585)
  proj_tws_tp2_256 = do.call(cbind,proj_tws_tp2_256)
  proj_tws_tp2_585 = do.call(cbind,proj_tws_tp2_585)
  
  ensemble_tws_tp1_256 = apply(proj_tws_tp1_256,1,mean)
  ensemble_tws_tp1_585 = apply(proj_tws_tp1_585,1,mean)
  ensemble_tws_tp2_256 = apply(proj_tws_tp2_256,1,mean)
  ensemble_tws_tp2_585 = apply(proj_tws_tp2_585,1,mean)
  
  
  ense1256 = c(ensemble_tws_tp1_256)
  ense1585 = c(ensemble_tws_tp1_585)
  
  ense2256 = c(ensemble_tws_tp2_256)
  ense2585 = c(ensemble_tws_tp2_585)  
  
  df = data.frame(ense1256,ense1585,
                  ense2256,ense2585)
  output = 'output/ensemble_tws_2020_2099_final'
  dir.create(output)
  output1 = 'output/ensemble_tws_2020_2099_final/twsdf_in_tibet_consider_hist.csv'
  fwrite(df,output1)
  
  output2 = 'output/ensemble_tws_2020_2099_final/proj_tws_tp1_245.csv'
  output3 = 'output/ensemble_tws_2020_2099_final/proj_tws_tp1_585.csv'
  output4 = 'output/ensemble_tws_2020_2099_final/proj_tws_tp2_245.csv'
  output5 = 'output/ensemble_tws_2020_2099_final/proj_tws_tp2_585.csv'
  
  fwrite(proj_tws_tp1_256,output2)
  fwrite(proj_tws_tp1_585,output3)
  fwrite(proj_tws_tp2_256,output4)
  fwrite(proj_tws_tp2_585,output5)
  
  ret_train = list(pmeato3_256,pmeato3_585)
  ret_proj = list(proj_tws_tp1_256,
                  proj_tws_tp1_585,
                  proj_tws_tp2_256,
                  proj_tws_tp2_585)
  return(list(ret_train,ret_proj))
  
  
}
projection_tws_in_tp12_withoutio_absfirst <-function(
  
){
  trend_fun_index_cmip6<-function(x){
    x = as.numeric(x)
    loc2020 = length(2003:2020)*12-11
    loc2050 = length(2003:2099)*12
    x = x[loc2020:loc2050]
    xt = ts(x,start = c(2020,1),frequency = 12)
    xt = decompose(xt)$trend
    naid = which(is.na(xt))
    xt = xt[-naid]
    
    #xt = (xt - mean(xt))/sd(xt)
    return(xt)
  }
  trend_fun_index_era5<-function(x){
    x = as.numeric(x)
    xt = ts(x,start = c(2003,1),frequency = 12)
    xt = decompose(xt)$trend
    
    naid = which(is.na(xt))
    xt = xt[-naid]
    return(xt)
  }
  standard_fun_index_era5 <-function(x){
    xs = (x - mean(x))/sd(x)
    return(xs)
  }
  
  standard_fun_index_tws <-function(x){
    xs = x/sd(x)
    return(xs)
  }
  
  # input index tws trend items in tibet based on era5 
  twsdf = import_index_insource_tibet(var = 'tws_tibet')  
  #twsdf = apply(twsdf,2,standard_fun_index_era5)
  twsdf = twsdf[,1:2]
  # input and choose pmes based on the relationships
  pmeato1 = import_index_insource_tibet(var = 'pme',region = 'ato')
  pmeio1 = import_index_insource_tibet(var = 'pme',region = 'io')
  
  pmeato = pmeato1[1:174,]
  pmeio = pmeio1[1:174,]
  
  pmeato = apply(pmeato,2,trend_fun_index_era5)
  pmeio = apply(pmeio,2,trend_fun_index_era5)
  #pmeato = apply(pmeato,2,standard_fun_index_era5)
  #pmeio = apply(pmeio,2,standard_fun_index_era5)
  
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/cross_correlation_pme_tws_tibet.R")
  cor_tws1_pmeato = cross_correlation_pme_tws_tibet(twsdf[,1],pmeato)
  cor_tws2_pmeato = cross_correlation_pme_tws_tibet(twsdf[,2],pmeato)
  cor_tws1_pmeio = cross_correlation_pme_tws_tibet(twsdf[,1],pmeio)
  cor_tws2_pmeio = cross_correlation_pme_tws_tibet(twsdf[,2],pmeio)
  
  cor_mat = rbind(cor_tws1_pmeato,
                  cor_tws2_pmeato,
                  cor_tws1_pmeio,
                  cor_tws2_pmeio)
  #determine
  #region1 --> ato2,ato3 and io4
  #region2 --> ato2,ato3 and io4
  
  pmeato = pmeato[,2:3]
  pmeio = pmeio[,4]
  
  df1 = data.frame(tws = twsdf[,1],
                   #pmeato2 = pmeato[,1],
                   pmeato3 = pmeato[,2])
  df2 = data.frame(tws = twsdf[,2],
                   #pmeato2 = pmeato[,1],
                   pmeato3 = pmeato[,2])
  
  # input the cmip6 pmes in ato 2,3 and the io 2-3
  #######
  pmeato_cmip6 = import_index_insource_tibet(var = 'pme_cmip6',
                                             region = 'ato')
  pmeato256 = pmeato_cmip6[[1]]
  pmeato2_256 = pmeato256[[1]]
  pmeato3_256 = pmeato256[[2]]
  
  pmeato585 = pmeato_cmip6[[2]]
  pmeato2_585 = pmeato585[[1]]
  pmeato3_585 = pmeato585[[2]]
  
  
  pmeato3_256 = apply(pmeato3_256,2,trend_fun_index_cmip6)
  pmeato3_585 = apply(pmeato3_585,2,trend_fun_index_cmip6)
  
  pmeato3_256 = apply(pmeato3_256,1,mean)
  pmeato3_585 = apply(pmeato3_585,1,mean)
  
  
  #pmeato3_256 = apply(pmeato3_256,2,trend_fun_index_cmip6)
  #pmeato3_585 = apply(pmeato3_585,2,trend_fun_index_cmip6)
  
  #######
  
  # set up the random forest models
  #i = 1:8
  sub_trains_rfmodel_subs1_256 <-function(){
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/random_forest_model_tws_cmip6_raster_tibet.R")
    df = df1
    df_project = data.frame(
      #pmeato2 = pmeato2_256[,i],
      pmeato3 = pmeato3_256
    )
    
    ret = random_forest_model_tws_cmip6_raster_tibet(df,
                                                     df_project)
    return(ret)
  }
  sub_trains_rfmodel_subs2_256 <-function(){
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/random_forest_model_tws_cmip6_raster_tibet.R")
    df = df2
    df_project = data.frame(
      #pmeato2 = pmeato2_256[,i],
      pmeato3 = pmeato3_256
    )
    
    ret = random_forest_model_tws_cmip6_raster_tibet(df,
                                                     df_project)
    return(ret)
  }
  sub_trains_rfmodel_subs1_585 <-function(){
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/random_forest_model_tws_cmip6_raster_tibet.R")
    df = df1
    df_project = data.frame(
      #pmeato2 = pmeato2_585[,i],
      pmeato3 = pmeato3_585
    )
    
    ret = random_forest_model_tws_cmip6_raster_tibet(df,
                                                     df_project)
    return(ret)
  }
  sub_trains_rfmodel_subs2_585 <-function(){
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/random_forest_model_tws_cmip6_raster_tibet.R")
    df = df2
    df_project = data.frame(
      #pmeato2 = pmeato2_585[,i],
      pmeato3 = pmeato3_585
    )
    
    ret = random_forest_model_tws_cmip6_raster_tibet(df,
                                                     df_project)
    return(ret)
  }
  
  
  library(doParallel)
  i <<- i 
  df1 <<- df1
  df2 <<- df2
  pmeio4_256 <<- pmeio4_256
  pmeato2_256 <<- pmeato2_256
  pmeato3_256 <<- pmeato3_256
  pmeio4_585 <<- pmeio4_585
  pmeato2_585 <<- pmeato2_585
  pmeato3_585 <<- pmeato3_585
  
  #proj_tws_tp1_256 = sub_trains_rfmodel_subs1_256()
  #proj_tws_tp1_585 = sub_trains_rfmodel_subs1_585()
  #proj_tws_tp2_256 = sub_trains_rfmodel_subs2_256()
  #proj_tws_tp2_585 = sub_trains_rfmodel_subs2_585()
  
  ense1256 = sub_trains_rfmodel_subs1_256()
  ense1585 = sub_trains_rfmodel_subs1_585()
  ense2256 = sub_trains_rfmodel_subs2_256()
  ense2585 = sub_trains_rfmodel_subs2_585()
  # output 
  standard_fun1 <- function(x){
    x = (x - mean(x))/sd(x)
    return(x)
  }
  ense1256 = standard_fun1(ense1256)
  ense1585 = standard_fun1(ense1585)
  
  ense2256 = standard_fun1(ense2256)
  ense2585 = standard_fun1(ense2585)  
  
  df = data.frame(ense1256,ense1585,
                  ense2256,ense2585)
  return(df)
  
  
}
projection_tws_in_tp12_withoutio <-function(
  
){
  trend_fun_index_cmip6<-function(x){
    x = as.numeric(x)
    loc2020 = length(2003:2020)*12-11
    loc2050 = length(2003:2099)*12
    x = x[loc2020:loc2050]
    xt = ts(x,start = c(2020,1),frequency = 12)
    xt = decompose(xt)$trend
    naid = which(is.na(xt))
    xt = xt[-naid]
    
    xt = (xt - mean(xt))/sd(xt)
    return(xt)
  }
  trend_fun_index_era5<-function(x){
    x = as.numeric(x)
    xt = ts(x,start = c(2003,1),frequency = 12)
    xt = decompose(xt)$trend
    
    naid = which(is.na(xt))
    xt = xt[-naid]
    return(xt)
  }
  standard_fun_index_era5 <-function(x){
    xs = (x - mean(x))/sd(x)
    return(xs)
  }
  
  standard_fun_index_tws <-function(x){
    xs = x/sd(x)
    return(xs)
  }
  
  # input index tws trend items in tibet based on era5 
  twsdf = import_index_insource_tibet(var = 'tws_tibet')  
  #twsdf = apply(twsdf,2,standard_fun_index_era5)
  twsdf = twsdf[,1:2]
  # input and choose pmes based on the relationships
  pmeato1 = import_index_insource_tibet(var = 'pme',region = 'ato')
  pmeio1 = import_index_insource_tibet(var = 'pme',region = 'io')
  
  pmeato = pmeato1[1:174,]
  pmeio = pmeio1[1:174,]
  
  pmeato = apply(pmeato,2,trend_fun_index_era5)
  pmeio = apply(pmeio,2,trend_fun_index_era5)
  pmeato = apply(pmeato,2,standard_fun_index_era5)
  pmeio = apply(pmeio,2,standard_fun_index_era5)
  
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/cross_correlation_pme_tws_tibet.R")
  cor_tws1_pmeato = cross_correlation_pme_tws_tibet(twsdf[,1],pmeato)
  cor_tws2_pmeato = cross_correlation_pme_tws_tibet(twsdf[,2],pmeato)
  cor_tws1_pmeio = cross_correlation_pme_tws_tibet(twsdf[,1],pmeio)
  cor_tws2_pmeio = cross_correlation_pme_tws_tibet(twsdf[,2],pmeio)
  
  cor_mat = rbind(cor_tws1_pmeato,
                  cor_tws2_pmeato,
                  cor_tws1_pmeio,
                  cor_tws2_pmeio)
  #determine
  #region1 --> ato2,ato3 and io4
  #region2 --> ato2,ato3 and io4
  
  pmeato = pmeato[,2:3]
  pmeio = pmeio[,4]
  
  df1 = data.frame(tws = twsdf[,1],
                   #pmeato2 = pmeato[,1],
                   pmeato3 = pmeato[,2])
  df2 = data.frame(tws = twsdf[,2],
                   #pmeato2 = pmeato[,1],
                   pmeato3 = pmeato[,2])
  
  # input the cmip6 pmes in ato 2,3 and the io 2-3
  #######
  pmeato_ori2 = matrix(rep(pmeato1[,2],8),ncol = 8)
  pmeato_ori3 = matrix(rep(pmeato1[,3],8),ncol = 8)

                      
  pmeato_cmip6 = import_index_insource_tibet(var = 'pme_cmip6',
                                             region = 'ato')
  pmeato256 = pmeato_cmip6[[1]]
  pmeato2_256 = pmeato256[[1]]
  pmeato3_256 = pmeato256[[2]]
  
  pmeato585 = pmeato_cmip6[[2]]
  pmeato2_585 = pmeato585[[1]]
  pmeato3_585 = pmeato585[[2]]
  
  #pmeato3_256 = apply(pmeato3_256,1,mean)
  #pmeato3_585 = apply(pmeato3_585,1,mean)
  
  #pmeato3_256 = trend_fun_index_cmip6(pmeato3_256)
  #pmeato3_585 = trend_fun_index_cmip6(pmeato3_585)
  
  pmeato3_256 = apply(pmeato3_256,2,trend_fun_index_cmip6)
  pmeato3_585 = apply(pmeato3_585,2,trend_fun_index_cmip6)
  
  #######
  
  # set up the random forest models
  i = 1:8
  sub_trains_rfmodel_subs1_256 <-function(i){
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/random_forest_model_tws_cmip6_raster_tibet.R")
    df = df1
    df_project = data.frame(
      #pmeato2 = pmeato2_256[,i],
      pmeato3 = pmeato3_256[,i]
    )
    
    ret = random_forest_model_tws_cmip6_raster_tibet(df,
                                                     df_project)
    return(ret)
  }
  sub_trains_rfmodel_subs2_256 <-function(i){
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/random_forest_model_tws_cmip6_raster_tibet.R")
    df = df2
    df_project = data.frame(
      #pmeato2 = pmeato2_256[,i],
      pmeato3 = pmeato3_256[,i]
    )
    
    ret = random_forest_model_tws_cmip6_raster_tibet(df,
                                                     df_project)
    return(ret)
  }
  sub_trains_rfmodel_subs1_585 <-function(i){
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/random_forest_model_tws_cmip6_raster_tibet.R")
    df = df1
    df_project = data.frame(
      #pmeato2 = pmeato2_585[,i],
      pmeato3 = pmeato3_585[,i]
    )
    
    ret = random_forest_model_tws_cmip6_raster_tibet(df,
                                                     df_project)
    return(ret)
  }
  sub_trains_rfmodel_subs2_585 <-function(i){
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/random_forest_model_tws_cmip6_raster_tibet.R")
    df = df2
    df_project = data.frame(
      #pmeato2 = pmeato2_585[,i],
      pmeato3 = pmeato3_585[,i]
    )
    
    ret = random_forest_model_tws_cmip6_raster_tibet(df,
                                                     df_project)
    return(ret)
  }
  
  
  library(doParallel)
  i <<- i 
  df1 <<- df1
  df2 <<- df2
  pmeio4_256 <<- pmeio4_256
  pmeato2_256 <<- pmeato2_256
  pmeato3_256 <<- pmeato3_256
  pmeio4_585 <<- pmeio4_585
  pmeato2_585 <<- pmeato2_585
  pmeato3_585 <<- pmeato3_585
  
  #proj_tws_tp1_256 = sub_trains_rfmodel_subs1_256()
  #proj_tws_tp1_585 = sub_trains_rfmodel_subs1_585()
  #proj_tws_tp2_256 = sub_trains_rfmodel_subs2_256()
  #proj_tws_tp2_585 = sub_trains_rfmodel_subs2_585()
  
  
  cl = makeCluster(9)
  clusterExport(cl,c('i','pmeato3_256','pmeato3_585',
                     'df1','df2'))
  proj_tws_tp1_256 = parLapply(cl,i,sub_trains_rfmodel_subs1_256)
  stopCluster(cl) 
  
  cl = makeCluster(9)
  clusterExport(cl,c('i','pmeato3_256','pmeato3_585',
                     'df1','df2'))
  proj_tws_tp1_585 = parLapply(cl,i,sub_trains_rfmodel_subs1_585)
  stopCluster(cl) 
  
  
  cl = makeCluster(9)
  clusterExport(cl,c('i','pmeato3_256','pmeato3_585',
                     'df1','df2'))
  proj_tws_tp2_256 = parLapply(cl,i,sub_trains_rfmodel_subs2_256)
  stopCluster(cl) 
  
  cl = makeCluster(9)
  clusterExport(cl,c('i','pmeato3_256','pmeato3_585',
                     'df1','df2'))
  proj_tws_tp2_585 = parLapply(cl,i,sub_trains_rfmodel_subs2_585)
  stopCluster(cl) 
  
  proj_tws_tp1_256 = do.call(cbind,proj_tws_tp1_256)
  proj_tws_tp1_585 = do.call(cbind,proj_tws_tp1_585)
  proj_tws_tp2_256 = do.call(cbind,proj_tws_tp2_256)
  proj_tws_tp2_585 = do.call(cbind,proj_tws_tp2_585)
  
  ensemble_tws_tp1_256 = apply(proj_tws_tp1_256,1,mean)
  ensemble_tws_tp1_585 = apply(proj_tws_tp1_585,1,mean)
  ensemble_tws_tp2_256 = apply(proj_tws_tp2_256,1,mean)
  ensemble_tws_tp2_585 = apply(proj_tws_tp2_585,1,mean)
  
  # output 
  standard_fun1 <- function(x){
    x = (x - mean(x))/sd(x)
    return(x)
  }
  ense1256 = standard_fun1(ensemble_tws_tp1_256)
  ense1585 = standard_fun1(ensemble_tws_tp1_585)

  ense2256 = standard_fun1(ensemble_tws_tp2_256)
  ense2585 = standard_fun1(ensemble_tws_tp2_585)  
  
  df = data.frame(ense1256,ense1585,
                  ense2256,ense2585)
  return(df)
  
  
}
projection_tws_in_tp12_withoutio_determine <-function(
  
){
  trend_fun_index_cmip6<-function(x){
    x = as.numeric(x)
    loc2020 = length(2003:2020)*12-11
    loc2050 = length(2003:2099)*12
    x = x[loc2020:loc2050]
    xt = ts(x,start = c(2020,1),frequency = 12)
    xt = decompose(xt)$trend
    naid = which(is.na(xt))
    xt = xt[-naid]
    
    xt = (xt - mean(xt))/sd(xt)
    return(xt)
  }
  trend_fun_index_era5<-function(x){
    x = as.numeric(x)
    xt = ts(x,start = c(2003,1),frequency = 12)
    xt = decompose(xt)$trend
    
    naid = which(is.na(xt))
    xt = xt[-naid]
    return(xt)
  }
  standard_fun_index_era5 <-function(x){
    xs = (x - mean(x))/sd(x)
    return(xs)
  }
  
  standard_fun_index_tws <-function(x){
    xs = x/sd(x)
    return(xs)
  }
  
  # input index tws trend items in tibet based on era5 
  twsdf = import_index_insource_tibet(var = 'tws_tibet')  
  #twsdf = apply(twsdf,2,standard_fun_index_tws)
  twsdf = twsdf[,1:2]
  # input and choose pmes based on the relationships
  pmeato1 = import_index_insource_tibet(var = 'pme',region = 'ato')
  pmeio1 = import_index_insource_tibet(var = 'pme',region = 'io')
  
  pmeato = pmeato1[1:174,]
  pmeio = pmeio1[1:174,]
  
  pmeato = apply(pmeato,2,trend_fun_index_era5)
  pmeio = apply(pmeio,2,trend_fun_index_era5)
  pmeato = apply(pmeato,2,standard_fun_index_era5)
  pmeio = apply(pmeio,2,standard_fun_index_era5)
  
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/cross_correlation_pme_tws_tibet.R")
  cor_tws1_pmeato = cross_correlation_pme_tws_tibet(twsdf[,1],pmeato)
  cor_tws2_pmeato = cross_correlation_pme_tws_tibet(twsdf[,2],pmeato)
  cor_tws1_pmeio = cross_correlation_pme_tws_tibet(twsdf[,1],pmeio)
  cor_tws2_pmeio = cross_correlation_pme_tws_tibet(twsdf[,2],pmeio)
  
  cor_mat = rbind(cor_tws1_pmeato,
                  cor_tws2_pmeato,
                  cor_tws1_pmeio,
                  cor_tws2_pmeio)
  #determine
  #region1 --> ato2,ato3 and io4
  #region2 --> ato2,ato3 and io4
  
  pmeato = pmeato[,2:3]
  pmeio = pmeio[,4]
  
  df1 = data.frame(tws = twsdf[,1],
                   #pmeato2 = pmeato[,1],
                   pmeato3 = pmeato[,2])
  df2 = data.frame(tws = twsdf[,2],
                   #pmeato2 = pmeato[,1],
                   pmeato3 = pmeato[,2])
  
  # input the cmip6 pmes in ato 2,3 and the io 2-3
  #######
  pmeato_cmip6 = import_index_insource_tibet(var = 'pme_cmip6',
                                             region = 'ato')
  pmeato256 = pmeato_cmip6[[1]]
  pmeato2_256 = pmeato256[[1]]
  pmeato3_256 = pmeato256[[2]]
  
  pmeato585 = pmeato_cmip6[[2]]
  pmeato2_585 = pmeato585[[1]]
  pmeato3_585 = pmeato585[[2]]
  
  pmeato3_256 = apply(pmeato3_256,1,mean)
  pmeato3_585 = apply(pmeato3_585,1,mean)
  
  pmeato3_256 = trend_fun_index_cmip6(pmeato3_256)
  pmeato3_585 = trend_fun_index_cmip6(pmeato3_585)
  
  
  
  #pmeato3_256 = apply(pmeato3_256,2,trend_fun_index_cmip6)
  #pmeato3_585 = apply(pmeato3_585,2,trend_fun_index_cmip6)
  
  #######
  
  # set up the random forest models
  #i = 1:8
  sub_trains_rfmodel_subs1_256 <-function(){
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/random_forest_model_tws_cmip6_raster_tibet.R")
    df = df1
    df_project = data.frame(
      #pmeato2 = pmeato2_256[,i],
      pmeato3 = pmeato3_256
    )
    
    ret = random_forest_model_tws_cmip6_raster_tibet(df,
                                                     df_project)
    return(ret)
  }
  sub_trains_rfmodel_subs2_256 <-function(){
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/random_forest_model_tws_cmip6_raster_tibet.R")
    df = df2
    df_project = data.frame(
      #pmeato2 = pmeato2_256[,i],
      pmeato3 = pmeato3_256
    )
    
    ret = random_forest_model_tws_cmip6_raster_tibet(df,
                                                     df_project)
    return(ret)
  }
  sub_trains_rfmodel_subs1_585 <-function(){
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/random_forest_model_tws_cmip6_raster_tibet.R")
    df = df1
    df_project = data.frame(
      #pmeato2 = pmeato2_585[,i],
      pmeato3 = pmeato3_585
    )
    
    ret = random_forest_model_tws_cmip6_raster_tibet(df,
                                                     df_project)
    return(ret)
  }
  sub_trains_rfmodel_subs2_585 <-function(){
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/random_forest_model_tws_cmip6_raster_tibet.R")
    df = df2
    df_project = data.frame(
      #pmeato2 = pmeato2_585[,i],
      pmeato3 = pmeato3_585
    )
    
    ret = random_forest_model_tws_cmip6_raster_tibet(df,
                                                     df_project)
    return(ret)
  }
  
  
  library(doParallel)
  i <<- i 
  df1 <<- df1
  df2 <<- df2
  pmeio4_256 <<- pmeio4_256
  pmeato2_256 <<- pmeato2_256
  pmeato3_256 <<- pmeato3_256
  pmeio4_585 <<- pmeio4_585
  pmeato2_585 <<- pmeato2_585
  pmeato3_585 <<- pmeato3_585
  
  #proj_tws_tp1_256 = sub_trains_rfmodel_subs1_256()
  #proj_tws_tp1_585 = sub_trains_rfmodel_subs1_585()
  #proj_tws_tp2_256 = sub_trains_rfmodel_subs2_256()
  #proj_tws_tp2_585 = sub_trains_rfmodel_subs2_585()
  
  ense1256 = sub_trains_rfmodel_subs1_256()
  ense1585 = sub_trains_rfmodel_subs1_585()
  ense2256 = sub_trains_rfmodel_subs2_256()
  ense2585 = sub_trains_rfmodel_subs2_585()
  # output 
  standard_fun1 <- function(x){
    x = (x - mean(x))/sd(x)
    return(x)
  }
  ense1256 = standard_fun1(ense1256)
  ense1585 = standard_fun1(ense1585)
  
  ense2256 = standard_fun1(ense2256)
  ense2585 = standard_fun1(ense2585)  
  
  df = data.frame(ense1256,ense1585,
                  ense2256,ense2585)
  return(df)
  
  
}
projection_tws_in_tp12 <-function(
  
){
  
  trend_fun_index_cmip6<-function(x){
    x = as.numeric(x)
    loc2020 = length(2003:2020)*12-11
    loc2050 = length(2003:2050)*12
    x = x[loc2020:loc2050]
    xt = ts(x,start = c(2020,1),frequency = 12)
    xt = decompose(xt)$trend
    naid = which(is.na(xt))
    xt = xt[-naid]
    
    xt = (xt - mean(xt))/sd(xt)
    return(xt)
  }
  trend_fun_index_era5<-function(x){
    x = as.numeric(x)
    xt = ts(x,start = c(2003,1),frequency = 12)
    xt = decompose(xt)$trend
    
    naid = which(is.na(xt))
    xt = xt[-naid]
    return(xt)
  }
  standard_fun_index_era5 <-function(x){
    xs = (x - mean(x))/sd(x)
    return(xs)
  }
  
  standard_fun_index_tws <-function(x){
    xs = x/sd(x)
    return(xs)
  }
  
  # input index tws trend items in tibet based on era5 
  twsdf = import_index_insource_tibet(var = 'tws_tibet')  
  twsdf = apply(twsdf,2,standard_fun_index_era5)
  twsdf = twsdf[,1:2]
  # input and choose pmes based on the relationships
  pmeato = import_index_insource_tibet(var = 'pme',region = 'ato')
  pmeio = import_index_insource_tibet(var = 'pme',region = 'io')
  
  pmeato = pmeato[1:174,]
  pmeio = pmeio[1:174,]
  
  pmeato = apply(pmeato,2,trend_fun_index_era5)
  pmeio = apply(pmeio,2,trend_fun_index_era5)
  pmeato = apply(pmeato,2,standard_fun_index_era5)
  pmeio = apply(pmeio,2,standard_fun_index_era5)
  
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/cross_correlation_pme_tws_tibet.R")
  cor_tws1_pmeato = cross_correlation_pme_tws_tibet(twsdf[,1],pmeato)
  cor_tws2_pmeato = cross_correlation_pme_tws_tibet(twsdf[,2],pmeato)
  cor_tws1_pmeio = cross_correlation_pme_tws_tibet(twsdf[,1],pmeio)
  cor_tws2_pmeio = cross_correlation_pme_tws_tibet(twsdf[,2],pmeio)
  
  cor_mat = rbind(cor_tws1_pmeato,
                  cor_tws2_pmeato,
                  cor_tws1_pmeio,
                  cor_tws2_pmeio)
  #determine
  #region1 --> ato2,ato3 and io4
  #region2 --> ato2,ato3 and io4
  
  pmeato = pmeato[,2:3]
  pmeio = pmeio[,4]
  
  df1 = data.frame(tws = twsdf[,1],
                   pmeato2 = pmeato[,1],
                   pmeato3 = pmeato[,2],
                   pmeio4 = pmeio)
  df2 = data.frame(tws = twsdf[,2],
                   pmeato2 = pmeato[,1],
                   pmeato3 = pmeato[,2],
                   pmeio4 = pmeio)
  
  # input the cmip6 pmes in ato 2,3 and the io 2-3
  #######
  pmeato_cmip6 = import_index_insource_tibet(var = 'pme_cmip6',
                                       region = 'ato')
  pmeato256 = pmeato_cmip6[[1]]
  pmeato2_256 = pmeato256[[1]]
  pmeato3_256 = pmeato256[[2]]
  
  pmeato585 = pmeato_cmip6[[2]]
  pmeato2_585 = pmeato585[[1]]
  pmeato3_585 = pmeato585[[2]]
  
  pmeato2_256 = apply(pmeato2_256,2,trend_fun_index_cmip6)
  pmeato2_585 = apply(pmeato2_585,2,trend_fun_index_cmip6)
  pmeato3_256 = apply(pmeato3_256,2,trend_fun_index_cmip6)
  pmeato3_585 = apply(pmeato3_585,2,trend_fun_index_cmip6)
  
  pmeio_cmip6 = import_index_insource_tibet(var = 'pme_cmip6',
                                      region = 'io')
  pmeio256 = pmeio_cmip6[[1]]
  pmeio4_256 = pmeio256[[1]]
  pmeio585 = pmeio_cmip6[[2]]
  pmeio4_585 = pmeio585[[1]]
  
  pmeio4_256 = apply(pmeio4_256,2,trend_fun_index_cmip6)
  pmeio4_585 = apply(pmeio4_585,2,trend_fun_index_cmip6)
  #######
  
  # set up the random forest models
  i = 1:8
  sub_trains_rfmodel_subs1_256 <-function(i){
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/random_forest_model_tws_cmip6_raster_tibet.R")
    df = df1
    df_project = data.frame(
      pmeato2 = pmeato2_256[,i],
      pmeato3 = pmeato3_256[,i],
      pmeio4 = pmeio4_256[,i]
    )
    
    ret = random_forest_model_tws_cmip6_raster_tibet(df,
                                                     df_project)
    return(ret)
  }
  sub_trains_rfmodel_subs2_256 <-function(i){
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/random_forest_model_tws_cmip6_raster_tibet.R")
    df = df2
    df_project = data.frame(
      pmeato2 = pmeato2_256[,i],
      pmeato3 = pmeato3_256[,i],
      pmeio4 = pmeio4_256[,i]
    )
    
    ret = random_forest_model_tws_cmip6_raster_tibet(df,
                                                     df_project)
    return(ret)
  }
  sub_trains_rfmodel_subs1_585 <-function(i){
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/random_forest_model_tws_cmip6_raster_tibet.R")
    df = df1
    df_project = data.frame(
      pmeato2 = pmeato2_585[,i],
      pmeato3 = pmeato3_585[,i],
      pmeio4 = pmeio4_585[,i]
    )
    
    ret = random_forest_model_tws_cmip6_raster_tibet(df,
                                                     df_project)
    return(ret)
  }
  sub_trains_rfmodel_subs2_585 <-function(i){
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/random_forest_model_tws_cmip6_raster_tibet.R")
    df = df2
    df_project = data.frame(
      pmeato2 = pmeato2_585[,i],
      pmeato3 = pmeato3_585[,i],
      pmeio4 = pmeio4_585[,i]
    )
    
    ret = random_forest_model_tws_cmip6_raster_tibet(df,
                                                     df_project)
    return(ret)
  }
  
  
  library(doParallel)
  i <<- i 
  df1 <<- df1
  df2 <<- df2
  pmeio4_256 <<- pmeio4_256
  pmeato2_256 <<- pmeato2_256
  pmeato3_256 <<- pmeato3_256
  pmeio4_585 <<- pmeio4_585
  pmeato2_585 <<- pmeato2_585
  pmeato3_585 <<- pmeato3_585
  
  cl = makeCluster(9)
  clusterExport(cl,c('i','df1','df2',
                     'pmeato2_256','pmeato3_256',
                     'pmeio4_256','pmeato2_585',
                     'pmeato3_585',
                     'pmeio4_585'))
  proj_tws_tp1_256 = parLapply(cl,i,sub_trains_rfmodel_subs1_256)
  stopCluster(cl)
  proj_tws_tp1_256 = do.call('cbind',proj_tws_tp1_256)
  
  models = colnames(pmeato2_256)
  colnames(proj_tws_tp1_256) = models
  
  cl = makeCluster(9)
  clusterExport(cl,c('i','df1','df2',
                     'pmeato2_256','pmeato3_256',
                     'pmeio4_256','pmeato2_585',
                     'pmeato3_585',
                     'pmeio4_585'))
  proj_tws_tp1_585 = parLapply(cl,i,sub_trains_rfmodel_subs1_585)
  stopCluster(cl)
  proj_tws_tp1_585 = do.call('cbind',proj_tws_tp1_585)
  colnames(proj_tws_tp1_585) = models
  
  cl = makeCluster(9)
  clusterExport(cl,c('i','df1','df2',
                     'pmeato2_256','pmeato3_256',
                     'pmeio4_256','pmeato2_585',
                     'pmeato3_585',
                     'pmeio4_585'))
  proj_tws_tp2_256 = parLapply(cl,i,sub_trains_rfmodel_subs2_256)
  stopCluster(cl)
  proj_tws_tp2_256 = do.call('cbind',proj_tws_tp2_256)
  
  models = colnames(pmeato2_256)
  colnames(proj_tws_tp2_256) = models
  
  cl = makeCluster(9)
  clusterExport(cl,c('i','df1','df2',
                     'pmeato2_256','pmeato3_256',
                     'pmeio4_256','pmeato2_585',
                     'pmeato3_585',
                     'pmeio4_585'))
  proj_tws_tp2_585 = parLapply(cl,i,sub_trains_rfmodel_subs2_585)
  stopCluster(cl)
  proj_tws_tp2_585 = do.call('cbind',proj_tws_tp2_585)
  colnames(proj_tws_tp2_585) = models
  
  # ensemble projected tws
  ensemble_tws_tp1_256 = apply(proj_tws_tp1_256,
                               1,mean,na.rm = T)
  ensemble_tws_tp1_585 = apply(proj_tws_tp1_585,
                               1,mean,na.rm = T)
  ensemble_tws_tp2_256 = apply(proj_tws_tp2_256,
                               1,mean,na.rm = T)
  ensemble_tws_tp2_585 = apply(proj_tws_tp2_585,
                               1,mean,na.rm = T)
  
  # output 
  
  
  
  
}
random_forest_model_pos_area_cmip6_raster_tibet<-function(
  df
){
  # libr
  library(randomForest)
  
  set.seed(100)
  id_train = sample(nrow(df),0.7*nrow(df),replace = FALSE)
  #id_train = 1:round(0.7*nrow(df))
  train = df[id_train,]
  test = df[-id_train,]
  
  set.seed(432)
  model_ini = randomForest(pos_area ~ ., data = train,
                           importance = T,
                           ntree = 500,
                           mtry = 3
                           
  )
  
  # PREDICTING WITH INITIAL MODEL
  pred_train = as.numeric(predict(model_ini,train))
  pred_test =  as.numeric(predict(model_ini,test))
  
  library(caret)
  # tune mtry
  mtry_len = ncol(df)-1
  trControl = trainControl(method = 'cv',number = 10,
                           search = 'grid')
  
  tuneGrid = expand.grid(mtry = 1:mtry_len)
  
  set.seed(432)
  rf_mtry = train(pos_area ~ .,
                  data = train,
                  method = 'rf',
                  tuneGrid = tuneGrid,
                  trControl = trControl,
                  importance = T
  )
  
  rf_mtry_res = rf_mtry$results[,1:2]
  
  id_mtry = which.min(rf_mtry_res$RMSE)
  
  rf_mtry_best = rf_mtry_res[id_mtry,1]
  
  
  # find number of trees
  
  trControl = trainControl(method = 'cv',number = 10,
                           search = 'grid')
  
  tuneGrid = expand.grid(mtry = rf_mtry_best)
  
  mod_par_cart = 1
  for(ntree in seq(100,1000,500)){
    set.seed(432)
    rf_mtry = train(pos_area ~ .,
                    data = train,
                    method = 'rf',
                    ntree = ntree,
                    tuneGrid = tuneGrid,
                    trControl = trControl,
                    importance = T
    )
    
    rf_mod = rf_mtry$results[,c(1,2)]
    rf_mod = cbind(rf_mod,ntree)
    mod_par_cart = rbind(mod_par_cart,rf_mod)
  }
  mod_par_cart = mod_par_cart[-1,]
  
  id_best = which.min(mod_par_cart$RMSE)
  
  ntree_best = mod_par_cart[id_best,3]
  
  set.seed(432)
  
  model_best = randomForest(pos_area ~ ., data = train,
                            importance = T,
                            ntree = ntree_best,
                            mtry = rf_mtry_best
  )
  
  p_train_best = as.numeric(predict(model_best,train))
  #test = data.frame(pmeato3 = test$pmeato3)
  p_test_best = as.numeric(predict(model_best,test))
  
  #$df_project = data.frame(pmeato3 = df_project$pmeato3[1:10])
  #tws_project = as.numeric(predict(model_best,
  #                                 df_project))
  
  
  return(list(model_best,cbind(p_test_best,test$pos_area)))
  
}










random_forest_model_snowcover_cmip6_raster_tibet<-function(
  df
){
  # libr
  library(data.table)
  library(randomForest)
  
  set.seed(100)
  id_train = sample(nrow(df),0.7*nrow(df),replace = FALSE)
  #id_train = 1:round(0.7*nrow(df))
  train = df[id_train,]
  test = df[-id_train,]
  
  set.seed(432)
  model_ini = randomForest(snowcover ~ ., data = train,
                           importance = T,
                           ntree = 500
                           
  )
  
  # PREDICTING WITH INITIAL MODEL
  pred_train = as.numeric(predict(model_ini,train))
  pred_test =  as.numeric(predict(model_ini,test))
  
  library(caret)
  # tune mtry
  mtry_len = ncol(df)-1
  trControl = trainControl(method = 'cv',number = 10,
                           search = 'grid')
  
  tuneGrid = expand.grid(mtry = 1:mtry_len)
  
  set.seed(432)
  rf_mtry = caret::train(snowcover ~ .,
                         data = train,
                         method = 'rf',
                         tuneGrid = tuneGrid,
                         trControl = trControl,
                         importance = T
  )
  
  rf_mtry_res = rf_mtry$results[,1:2]
  
  id_mtry = which.min(rf_mtry_res$RMSE)
  
  rf_mtry_best = rf_mtry_res[id_mtry,1]
  
  
  # find number of trees
  
  trControl = trainControl(method = 'cv',number = 10,
                           search = 'grid')
  
  tuneGrid = expand.grid(mtry = rf_mtry_best)
  
  mod_par_cart = 1
  for(ntree in seq(100,1000,500)){
    set.seed(432)
    rf_mtry = caret::train(snowcover ~ .,
                           data = train,
                           method = 'rf',
                           ntree = ntree,
                           tuneGrid = tuneGrid,
                           trControl = trControl,
                           importance = T
    )
    
    rf_mod = rf_mtry$results[,c(1,2)]
    rf_mod = cbind(rf_mod,ntree)
    mod_par_cart = rbind(mod_par_cart,rf_mod)
  }
  mod_par_cart = mod_par_cart[-1,]
  
  id_best = which.min(mod_par_cart$RMSE)
  
  ntree_best = mod_par_cart[id_best,3]
  
  set.seed(432)
  
  model_best = randomForest(snowcover ~ ., data = train,
                            importance = T,
                            ntree = ntree_best,
                            mtry = rf_mtry_best
  )
  
  p_train_best = as.numeric(predict(model_best,train))
  #test = data.frame(pmeato3 = test$pmeato3)
  p_test_best = as.numeric(predict(model_best,test))
  
  
  p_train_inorder = as.numeric(predict(model_best,df))
  
  
  pred_test = data.frame(ori_test = test$snowcover,
                         pred_test = p_test_best)
  
  pred_train = data.frame(ori_train = train$snowcover,
                          pred_train = p_train_best)
  
  pred_inorder = data.frame(ori_train = df$snowcover,
                            pred_train = p_train_inorder)
  
  output = 'output/validation_rf_model_history_snowcover'
  dir.create(output)
  output1 = paste0(output,'/valid_test_snowcover_train.csv')
  output2 = paste0(output,'/valid_train_snowcover_test.csv')
  output3 = paste0(output,'/valid_train_snowcover_inorder.csv')
  
  fwrite(pred_test,output1)
  fwrite(pred_train,output2)
  fwrite(pred_inorder,output3)
  
  
  return(model_best)
  
}










random_forest_model_tws_cmip6_raster_tibet<-function(
  df
){
  # libr
  library(data.table)
  library(randomForest)
  
  set.seed(100)
  id_train = sample(nrow(df),0.7*nrow(df),replace = FALSE)
  #id_train = 1:round(0.7*nrow(df))
  train = df[id_train,]
  test = df[-id_train,]
  
  set.seed(432)
  model_ini = randomForest(tws ~ ., data = train,
                           importance = T,
                           ntree = 500
                           
  )
  
  # PREDICTING WITH INITIAL MODEL
  pred_train = as.numeric(predict(model_ini,train))
  pred_test =  as.numeric(predict(model_ini,test))
  
  library(caret)
  # tune mtry
  mtry_len = ncol(df)-1
  trControl = trainControl(method = 'cv',number = 10,
                           search = 'grid')
  
  tuneGrid = expand.grid(mtry = 1:mtry_len)
  
  set.seed(432)
  rf_mtry = caret::train(tws ~ .,
                  data = train,
                  method = 'rf',
                  tuneGrid = tuneGrid,
                  trControl = trControl,
                  importance = T
  )
  
  rf_mtry_res = rf_mtry$results[,1:2]
  
  id_mtry = which.min(rf_mtry_res$RMSE)
  
  rf_mtry_best = rf_mtry_res[id_mtry,1]
  
  
  # find number of trees
  
  trControl = trainControl(method = 'cv',number = 10,
                           search = 'grid')
  
  tuneGrid = expand.grid(mtry = rf_mtry_best)
  
  mod_par_cart = 1
  for(ntree in seq(100,1000,500)){
    set.seed(432)
    rf_mtry = caret::train(tws ~ .,
                    data = train,
                    method = 'rf',
                    ntree = ntree,
                    tuneGrid = tuneGrid,
                    trControl = trControl,
                    importance = T
    )
    
    rf_mod = rf_mtry$results[,c(1,2)]
    rf_mod = cbind(rf_mod,ntree)
    mod_par_cart = rbind(mod_par_cart,rf_mod)
  }
  mod_par_cart = mod_par_cart[-1,]
  
  id_best = which.min(mod_par_cart$RMSE)
  
  ntree_best = mod_par_cart[id_best,3]
  
  set.seed(432)
  
  model_best = randomForest(tws ~ ., data = train,
                            importance = T,
                            ntree = ntree_best,
                            mtry = rf_mtry_best
  )
  
  p_train_best = as.numeric(predict(model_best,train))
  #test = data.frame(pmeato3 = test$pmeato3)
  p_test_best = as.numeric(predict(model_best,test))
  
  
  p_train_inorder = as.numeric(predict(model_best,df))
  
  
  pred_test = data.frame(ori_test = test$tws,
                         pred_test = p_test_best)
  
  pred_train = data.frame(ori_train = train$tws,
                          pred_train = p_train_best)
  
  pred_inorder = data.frame(ori_train = df$tws,
                            pred_train = p_train_inorder)
  
  output = 'output/validation_rf_model_history'
  dir.create(output)
  output1 = paste0(output,'/valid_test_tws_train.csv')
  output2 = paste0(output,'/valid_train_tws_test.csv')
  output3 = paste0(output,'/valid_train_tws_inorder.csv')
  
  fwrite(pred_test,output1)
  fwrite(pred_train,output2)
  fwrite(pred_inorder,output3)
  
  
  return(model_best)
  
}










random_forest_model_tws_cmip6_raster<-function(
  df,df_project
){
  # libr
  library(randomForest)
  
  set.seed(100)
  id_train = sample(nrow(df),0.7*nrow(df),replace = FALSE)
  #id_train = 1:round(0.7*nrow(df))
  train = df[id_train,]
  test = df[-id_train,]
  
  set.seed(432)
  model_ini = randomForest(tws ~ ., data = train,
                           importance = T,
                           ntree = 500,
                           mtry = 3
                           
  )
  
  # PREDICTING WITH INITIAL MODEL
  pred_train = as.numeric(predict(model_ini,train))
  pred_test =  as.numeric(predict(model_ini,test))
  
  library(caret)
  # tune mtry
  mtry_len = ncol(df)-1
  trControl = trainControl(method = 'cv',number = 10,
                           search = 'grid')
  
  tuneGrid = expand.grid(mtry = 1:mtry_len)
  
  set.seed(432)
  rf_mtry = train(tws ~ .,
                  data = train,
                  method = 'rf',
                  tuneGrid = tuneGrid,
                  trControl = trControl,
                  importance = T
  )
  
  rf_mtry_res = rf_mtry$results[,1:2]
  
  id_mtry = which.min(rf_mtry_res$RMSE)
  
  rf_mtry_best = rf_mtry_res[id_mtry,1]
  
  
  # find number of trees
  
  trControl = trainControl(method = 'cv',number = 10,
                           search = 'grid')
  
  tuneGrid = expand.grid(mtry = rf_mtry_best)
  
  mod_par_cart = 1
  for(ntree in seq(100,1000,100)){
    set.seed(432)
    rf_mtry = train(tws ~ .,
                    data = train,
                    method = 'rf',
                    ntree = ntree,
                    tuneGrid = tuneGrid,
                    trControl = trControl,
                    importance = T
    )
    
    rf_mod = rf_mtry$results[,c(1,2)]
    rf_mod = cbind(rf_mod,ntree)
    mod_par_cart = rbind(mod_par_cart,rf_mod)
  }
  mod_par_cart = mod_par_cart[-1,]
  
  id_best = which.min(mod_par_cart$RMSE)
  
  ntree_best = mod_par_cart[id_best,3]
  
  set.seed(432)
  
  model_best = randomForest(tws ~ ., data = train,
                            importance = T,
                            ntree = ntree_best,
                            mtry = rf_mtry_best
  )
  
  p_train_best = as.numeric(predict(model_best,train))
  p_test_best = as.numeric(predict(model_best,test))
  
  
  tws_project = as.numeric(predict(model_best,
                                   df_project))
  
  
  return(tws_project)
  
}










raster2union_polygon<-function(
  rast
){
  poly = rasterToPolygons(rast,dissolve = T)
  
  dir.create('shp/project_negs_border/')
  shapefile(poly,'shp/project_negs_border/border.shp')
  
  library(sf)
  library(dplyr)
  bors = st_read('shp/project_negs_border/border.shp')
  bors = bors %>% group_by() %>% st_union()
  
  st_write(bors,'shp/project_negs_border/border.shp',
           append = F)
  
}
ret_value_for_rfmodel_withtemper<-function(
  df,tpm = 'tpm1'
){
  # libr
  library(data.table)
  library(randomForest)
  
  set.seed(100)
  id_train = sample(nrow(df),0.7*nrow(df),replace = FALSE)
  #id_train = 1:round(0.7*nrow(df))
  train = df[id_train,]
  test = df[-id_train,]
  
  set.seed(432)
  model_ini = randomForest(tws ~ ., data = train,
                           importance = T,
                           ntree = 500
                           
  )
  
  # PREDICTING WITH INITIAL MODEL
  pred_train = as.numeric(predict(model_ini,train))
  pred_test =  as.numeric(predict(model_ini,test))
  
  library(caret)
  # tune mtry
  mtry_len = ncol(df)-1
  trControl = trainControl(method = 'cv',number = 10,
                           search = 'grid')
  
  tuneGrid = expand.grid(mtry = 1:mtry_len)
  
  set.seed(432)
  rf_mtry = caret::train(tws ~ .,
                         data = train,
                         method = 'rf',
                         tuneGrid = tuneGrid,
                         trControl = trControl,
                         importance = T
  )
  
  rf_mtry_res = rf_mtry$results[,1:2]
  
  id_mtry = which.min(rf_mtry_res$RMSE)
  
  rf_mtry_best = rf_mtry_res[id_mtry,1]
  
  
  # find number of trees
  
  trControl = trainControl(method = 'cv',number = 10,
                           search = 'grid')
  
  tuneGrid = expand.grid(mtry = rf_mtry_best)
  
  mod_par_cart = 1
  for(ntree in seq(100,1000,500)){
    set.seed(432)
    rf_mtry = caret::train(tws ~ .,
                           data = train,
                           method = 'rf',
                           ntree = ntree,
                           tuneGrid = tuneGrid,
                           trControl = trControl,
                           importance = T
    )
    
    rf_mod = rf_mtry$results[,c(1,2)]
    rf_mod = cbind(rf_mod,ntree)
    mod_par_cart = rbind(mod_par_cart,rf_mod)
  }
  mod_par_cart = mod_par_cart[-1,]
  
  id_best = which.min(mod_par_cart$RMSE)
  
  ntree_best = mod_par_cart[id_best,3]
  
  set.seed(432)
  
  model_best = randomForest(tws ~ ., data = train,
                            importance = T,
                            ntree = ntree_best,
                            mtry = rf_mtry_best
  )
  
  p_train_best = as.numeric(predict(model_best,train))
  #test = data.frame(pmeato3 = test$pmeato3)
  p_test_best = as.numeric(predict(model_best,test))
  
  
  p_train_inorder = as.numeric(predict(model_best,df))
  
  
  pred_test = data.frame(ori_test = test$tws,
                         pred_test = p_test_best)
  
  pred_train = data.frame(ori_train = train$tws,
                          pred_train = p_train_best)
  
  pred_inorder = data.frame(ori_train = df$tws,
                            pred_train = p_train_inorder)
  
  output = 'output/validation_rf_model_withtemper_history'
  dir.create(output)
  if(tpm == 'tpm1'){
    output1 = paste0(output,'/tpm1_valid_test_tws_train.csv')
    output2 = paste0(output,'/tpm1_valid_train_tws_test.csv')
    output3 = paste0(output,'/tpm1_valid_train_tws_inorder.csv')
  }else{
    output1 = paste0(output,'/tpm2_valid_test_tws_train.csv')
    output2 = paste0(output,'/tpm2_valid_train_tws_test.csv')
    output3 = paste0(output,'/tpm2_valid_train_tws_inorder.csv')
  }
  
  
  fwrite(pred_test,output1)
  fwrite(pred_train,output2)
  fwrite(pred_inorder,output3)
  
  
  
}










ret_value_for_rfmodel<-function(
  df,tpm = 'tpm1'
){
  # libr
  library(data.table)
  library(randomForest)
  
  set.seed(100)
  id_train = sample(nrow(df),0.7*nrow(df),replace = FALSE)
  #id_train = 1:round(0.7*nrow(df))
  train = df[id_train,]
  test = df[-id_train,]
  
  set.seed(432)
  model_ini = randomForest(tws ~ ., data = train,
                           importance = T,
                           ntree = 500
                           
  )
  
  # PREDICTING WITH INITIAL MODEL
  pred_train = as.numeric(predict(model_ini,train))
  pred_test =  as.numeric(predict(model_ini,test))
  
  library(caret)
  # tune mtry
  mtry_len = ncol(df)-1
  trControl = trainControl(method = 'cv',number = 10,
                           search = 'grid')
  
  tuneGrid = expand.grid(mtry = 1:mtry_len)
  
  set.seed(432)
  rf_mtry = caret::train(tws ~ .,
                         data = train,
                         method = 'rf',
                         tuneGrid = tuneGrid,
                         trControl = trControl,
                         importance = T
  )
  
  rf_mtry_res = rf_mtry$results[,1:2]
  
  id_mtry = which.min(rf_mtry_res$RMSE)
  
  rf_mtry_best = rf_mtry_res[id_mtry,1]
  
  
  # find number of trees
  
  trControl = trainControl(method = 'cv',number = 10,
                           search = 'grid')
  
  tuneGrid = expand.grid(mtry = rf_mtry_best)
  
  mod_par_cart = 1
  for(ntree in seq(100,1000,500)){
    set.seed(432)
    rf_mtry = caret::train(tws ~ .,
                           data = train,
                           method = 'rf',
                           ntree = ntree,
                           tuneGrid = tuneGrid,
                           trControl = trControl,
                           importance = T
    )
    
    rf_mod = rf_mtry$results[,c(1,2)]
    rf_mod = cbind(rf_mod,ntree)
    mod_par_cart = rbind(mod_par_cart,rf_mod)
  }
  mod_par_cart = mod_par_cart[-1,]
  
  id_best = which.min(mod_par_cart$RMSE)
  
  ntree_best = mod_par_cart[id_best,3]
  
  set.seed(432)
  
  model_best = randomForest(tws ~ ., data = train,
                            importance = T,
                            ntree = ntree_best,
                            mtry = rf_mtry_best
  )
  
  p_train_best = as.numeric(predict(model_best,train))
  #test = data.frame(pmeato3 = test$pmeato3)
  p_test_best = as.numeric(predict(model_best,test))
  
  
  p_train_inorder = as.numeric(predict(model_best,df))
  
  
  pred_test = data.frame(ori_test = test$tws,
                         pred_test = p_test_best)
  
  pred_train = data.frame(ori_train = train$tws,
                          pred_train = p_train_best)
  
  pred_inorder = data.frame(ori_train = df$tws,
                            pred_train = p_train_inorder)
  
  output = 'output/validation_rf_model_history'
  dir.create(output)
  if(tpm == 'tpm1'){
    output1 = paste0(output,'/tpm1_valid_test_tws_train.csv')
    output2 = paste0(output,'/tpm1_valid_train_tws_test.csv')
    output3 = paste0(output,'/tpm1_valid_train_tws_inorder.csv')
  }else{
    output1 = paste0(output,'/tpm2_valid_test_tws_train.csv')
    output2 = paste0(output,'/tpm2_valid_train_tws_test.csv')
    output3 = paste0(output,'/tpm2_valid_train_tws_inorder.csv')
  }
  
  
  fwrite(pred_test,output1)
  fwrite(pred_train,output2)
  fwrite(pred_inorder,output3)
  
  
  
}










sanjiangyuan_decreaing_rate <- function(
  year = 2095,mode = 'ssp585'
){
  print(year)
  to_rast <-function(x){
    coordinates(x) = ~long + lat
    gridded(x) = T
    x = raster(x)
    return(x)
  }
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/spatial_pattern_of_tws_neg_infuture_by_year.R")
  df = spatial_pattern_of_tws_neg_infuture_by_year(year,mode)
  
  rastdf = df[,1:3]
  rast = to_rast(rastdf)
  rast <<- rast
  rastshps = rasterToPolygons(rast)
  neg_rast = sum(area(rastshps))/10^10
  area_unit = area(rastshps)[1]/10^10
  
  neg_points = shp_management('neg_points')
  
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/get_the_border_value_basedpoints.R")
  #borderdf =get_the_border_value_basedpoints(rast,neg_points)
  borderdf = as.data.frame(fread('output/proj_negborder_df/proj_negborder_df.csv'))
  borderinarea = read.table('main_plot_data/fig4/borderinarea.txt')[1]
  
  #borderdf = fortify(neg_points)
  #borderdf$tws = NA
  #borderdf = get_the_border_value(rast,neg_points)
  colnames(borderdf) = c('long','lat','tws')
  
  # import projected area diff
  tibet = shp_management('tibet')
  #input_pos_area = 'output/future_pos_tws_area/pos_tws_area_ensemble.csv'
  #input_pos_area = 'output/future_pos_tws_area/pos_area_allcalc_mean.csv'
  input_pos_area = 'output/future_pos_tws_area_based_snow_tws/pos_area_allcalc_mean.csv'
  pos_area = as.data.frame(fread(input_pos_area))
  pos_area = pos_area[3:81,]
  full_area = area(tibet)/10^6 /10000
  neg_area = full_area - pos_area
  
  loc_year = length(2020:year)
  if(mode == 'ssp245'){
    modeid = 1
  }else{
    modeid = 2
  }
  proj_negarea = neg_area[loc_year,modeid]
  
  neg_shps = list.files('shp/cluster_tws_neg_shp_deter',
                        pattern = '*.shp$',full.names =T)
  neg_shps = lapply(neg_shps[1:2],shapefile)
  neg_shps = do.call(bind,neg_shps)
  
  area_negshps = sum(area(neg_shps))/10^10
  
  fillarea = borderinarea - neg_rast
  if(fillarea <=0){
    fillarea =0
  }
  
  if(proj_negarea > borderinarea){
    proj_expand = proj_negarea - neg_rast -fillarea
  }else{
    proj_expand = borderinarea - proj_negarea
  }
  
  expand_num = round(proj_expand / area_unit)
  
  # detect the centroids 
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/detect_min_twspoints_based_multis.R")
  #ret_centroid = detect_min_twspoints_based_multis()
  #ret_cen1 = ret_centroid[[1]]
  #ret_cen2 = ret_centroid[[2]]
 
  #dir.create('output/ret_centroid/')
  #fwrite(ret_cen1,'output/ret_centroid/ret_cen1.csv')
  #fwrite(ret_cen2,'output/ret_centroid/ret_cen2.csv')
  ret_cen1 = as.data.frame(fread('output/ret_centroid/ret_cen1.csv'))
  ret_cen2 = as.data.frame(
    fread('output/ret_centroid/ret_cen2.csv')
  )
  ret_cen1 <<- ret_cen1
  ret_cen2 <<- ret_cen2
  # update border and centroid df 
  i = 1:nrow(borderdf)
  update_tws_byyear_border<-function(i){
    tmp = borderdf[i,]
    long = tmp[1,1]
    lat = tmp[1,2]
    
    id = which((rastdf[,1] == long) & 
                 (rastdf[,2] == lat))
    
    updatetws = rastdf[id,3]
    return(updatetws)
  }
  
  bordertws = as.numeric(sapply(i,update_tws_byyear_border))
  borderdf$tws = bordertws
  
  id = which(rastdf[,1] %in% ret_cen1[,1]  &
               rastdf[,2] %in% ret_cen1[,2])[c(1,3)]
  
  ret_cen1$value = rastdf[id,3]
  
  id = which(rastdf[,1] %in% ret_cen2[,1]  &
               rastdf[,2] %in% ret_cen2[,2])[c(1,3)]
  
  ret_cen2$value = rastdf[id,3]
  
  # calc vector
  # co influence E 84 - 86.5
  borderdf1 = borderdf[which(borderdf$long <88.125 
                             #& borderdf$long >=77.5
                             ),]
  borderdf1 = borderdf1[seq(1,nrow(borderdf1),1),]
  
  calc_increasing_vector_reg1 <- function(i,northdis = 12){
    print(i)
    tmpborder = borderdf1[i,]
    
    if(mode == 'ssp245'){
      cen1 = ret_cen1[1,]
    }else{
      cen1 = ret_cen2[1,]
    }
    
    dis = pointDistance(cen1[,1:2],tmpborder[,1:2],
                        lonlat = T)
    dis = dis / 1000
    
    longdif = tmpborder[,1] - cen1[,1]
    latdif = tmpborder[,2] - cen1[,2]
    
    disdif = sqrt(longdif^2 + latdif^2)
    
    # generate equal distance by 5
    unitdis = disdif / 50
    dis = unitdis * seq(1,50,1)
    
    fetch_by_dis <- function(dis){
      longadd = (longdif/disdif)*dis
      latadd = (latdif/disdif)*dis
      
      aimpoints = data.frame(
        long = longadd + cen1[,1],
        lat = latadd + cen1[,2]
      )
      return(aimpoints)
    }
    
    
    points_on_theline = fetch_by_dis(dis)
    
    twsonroute = extract(rast,points_on_theline)
    
    naid = which(is.na(twsonroute))
    if(length(naid)>0){
      dis = dis[-naid]
      twsonroute = twsonroute[-naid]
    }
    
    model1 = lm(twsonroute ~ dis + I(dis^2))
    model2 = lm(twsonroute ~ exp(dis))
    model3 = lm(twsonroute ~ dis)
    model4 = lm(twsonroute ~ dis + I(dis^2)+I(dis^0.5))
    
    c1 = model1$coefficients
    f1 <- function(dis,a,b,c){return(c+ dis * b+ dis^2 * a)}
    c2 = model2$coefficients
    f2 <- function(dis,a,b){return(b+a*exp(dis))}
    c3 = model3$coefficients
    f3 <- function(dis,a,b){return(b+a*dis)}
    
    c4 = model4$coefficients
    f4 <- function(dis,a,b,c,d){return(d+c*dis+b* dis^2 + a*dis^0.5)}
    
    r1 = caret::RMSE(model1$fitted.values,twsonroute)
    r2 = caret::RMSE(model2$fitted.values,twsonroute)
    r3 = caret::RMSE(model3$fitted.values,twsonroute)
    r4 = caret::RMSE(model4$fitted.values,twsonroute)
    
    rs = c(r1,r2,r3,r4)
    
    print(paste0('Model1: ',r1))
    print(paste0('Model4: ',r4))
    print(paste0('Model3: ',r3))
    
    sid = order(rs,decreasing = F)
    
    mods = list(model1,model2,model3,model4)
    fs = list(f1,f2,f3,f4)
    
    minrs = which(rs == min(rs))
    
    
    for(s in sid){
      minrs = s
      mod = mods[[minrs]]
      f = fs[[minrs]]
      
      if(minrs == 1){
        ret_er = try(zerodis <- uniroot(f,c(1,100),a=c1[3],b = c1[2],c=c1[1])$root,
                     silent = T)
      }else if(minrs == 2){
        ret_er = try(zerodis <- uniroot(f,c(1,100),a=c2[2],b = c2[1])$root,
                     silent = T)
      }else if(minrs == 3){
        ret_er = try(zerodis <- uniroot(f,c(1,100),a=c3[2],b = c3[1])$root,
                     silent = T)
      }else if(minrs == 4){
        ret_er = try(zerodis <- uniroot(f,c(1,100),a=c4[4],b = c4[3],c = c4[2],d = c4[1])$root,
                     silent = T)
      }
      
      
      if(class(ret_er) %in% 'try-error'){
        print('try next')
      }else{
        break
      }
    }
    
    fetch_by_dis_withtws <- function(dis){
      longadd = (longdif/disdif)*dis
      latadd = (latdif/disdif)*dis
      
      disdf = data.frame(dis = dis)
      twsproj = predict(mod,disdf)
      
      #if(twsproj >= 0){
      #  disdf = data.frame(dis = zerodis)
      #  twsproj = predict(mod,disdf)
      
      #  longadd = (longdif/disdif)*zerodis
      #  latadd = (latdif/disdif)*zerodis
      #}
      
      aimpoints = data.frame(
        long = longadd + cen1[,1],
        lat = latadd + cen1[,2]
        #tws = twsproj
      )
      return(aimpoints)
    }
    
    len_dis = length(dis)
    northmove = dis[len_dis]+northdis
    extdis = northmove
    #extdis = c(seq(dis[len_dis],northmove,unitdis),northmove)
    #extdis = extdis[which(extdis>dis[len_dis])]
    
    aimloc = lapply(extdis,
                    fetch_by_dis_withtws)
    aimloc = do.call('rbind',
                     aimloc)
    
    return(aimloc)
  }
  
  borderdf2 = borderdf[which(borderdf$long >= 88.125),]
  borderdf2 = borderdf2[seq(1,nrow(borderdf2),1),]
  
  calc_increasing_vector_reg2 <- function(i,northdis = 12){
    print(i)
    tmpborder = borderdf2[i,]
    
    if(mode == 'ssp245'){
      cen1 = ret_cen1[2,]
    }else{
      cen1 = ret_cen2[2,]
    }
    
    dis = pointDistance(cen1[,1:2],tmpborder[,1:2],
                        lonlat = T)
    dis = dis / 1000
    
    longdif = tmpborder[,1] - cen1[,1]
    latdif = tmpborder[,2] - cen1[,2]
    
    disdif = sqrt(longdif^2 + latdif^2)
    
    # generate equal distance by 5
    unitdis = disdif / 50
    dis = unitdis * seq(1,50,1)
    
    fetch_by_dis <- function(dis){
      longadd = (longdif/disdif)*dis
      latadd = (latdif/disdif)*dis
      
      aimpoints = data.frame(
        long = longadd + cen1[,1],
        lat = latadd + cen1[,2]
      )
      return(aimpoints)
    }
    
    
    points_on_theline = fetch_by_dis(dis)
    
    twsonroute = extract(rast,points_on_theline)
    
    naid = which(is.na(twsonroute))
    if(length(naid)>0){
      dis = dis[-naid]
      twsonroute = twsonroute[-naid]
    }
    
    model1 = lm(twsonroute ~ dis + I(dis^2))
    model2 = lm(twsonroute ~ exp(dis))
    model3 = lm(twsonroute ~ dis)
    model4 = lm(twsonroute ~ dis + I(dis^2)+I(dis^0.5))
    
    c1 = model1$coefficients
    f1 <- function(dis,a,b,c){return(c+ dis * b+ dis^2 * a)}
    c2 = model2$coefficients
    f2 <- function(dis,a,b){return(b+a*exp(dis))}
    c3 = model3$coefficients
    f3 <- function(dis,a,b){return(b+a*dis)}
    
    c4 = model4$coefficients
    f4 <- function(dis,a,b,c,d){return(d+c*dis+b* dis^2 + a*dis^0.5)}
    
    r1 = caret::RMSE(model1$fitted.values,twsonroute)
    r2 = caret::RMSE(model2$fitted.values,twsonroute)
    r3 = caret::RMSE(model3$fitted.values,twsonroute)
    r4 = caret::RMSE(model4$fitted.values,twsonroute)
    
    rs = c(r1,r2,r3,r4)
    
    print(paste0('Model1: ',r1))
    print(paste0('Model4: ',r4))
    print(paste0('Model3: ',r3))
    
    sid = order(rs,decreasing = F)
    
    mods = list(model1,model2,model3,model4)
    fs = list(f1,f2,f3,f4)
    
    minrs = which(rs == min(rs))
    
    
    for(s in sid){
      minrs = s
      mod = mods[[minrs]]
      f = fs[[minrs]]
      
      if(minrs == 1){
        ret_er = try(zerodis <- uniroot(f,c(1,100),a=c1[3],b = c1[2],c=c1[1])$root,
                     silent = T)
      }else if(minrs == 2){
        ret_er = try(zerodis <- uniroot(f,c(1,100),a=c2[2],b = c2[1])$root,
                     silent = T)
      }else if(minrs == 3){
        ret_er = try(zerodis <- uniroot(f,c(1,100),a=c3[2],b = c3[1])$root,
                     silent = T)
      }else if(minrs == 4){
        ret_er = try(zerodis <- uniroot(f,c(1,100),a=c4[4],b = c4[3],c = c4[2],d = c4[1])$root,
                     silent = T)
      }
      
      
      if(class(ret_er) %in% 'try-error'){
        print('try next')
      }else{
        break
      }
    }
    
    fetch_by_dis_withtws <- function(dis){
      longadd = (longdif/disdif)*dis
      latadd = (latdif/disdif)*dis
      
      disdf = data.frame(dis = dis)
      twsproj = predict(mod,disdf)
      
      #if(twsproj >= 0){
      #  disdf = data.frame(dis = zerodis)
      #  twsproj = predict(mod,disdf)
      #  
      #  longadd = (longdif/disdif)*zerodis
      #  latadd = (latdif/disdif)*zerodis
      #}
      
      aimpoints = data.frame(
        long = longadd + cen1[,1],
        lat = latadd + cen1[,2]
        #tws = twsproj
      )
      return(aimpoints)
    }
    
    len_dis = length(dis)
    northmove = dis[len_dis]+northdis
    extdis = northmove
    #extdis = c(seq(dis[len_dis],northmove,unitdis),northmove)
    #extdis = extdis[which(extdis>dis[len_dis])]
    
    aimloc = lapply(extdis,fetch_by_dis_withtws)
    aimloc = do.call('rbind',aimloc)
    
    
    return(aimloc)
  }
  print('pass 1')
  northdiss = c(0,0.25,0.5,0.75,seq(1,7,1))
  area_increase = 1
  for(northdis in northdiss){
    
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/inititial_move_borders.R")
    retd = inititial_move_borders(borderdf1,
                                  borderdf2,
                                  tibet,northdis,mode = mode)
    d1 = retd[[1]]
    d2 = retd[[2]]
    
    print(northdis)
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/cal_increasing_area.R")
    increaing_area = cal_increasing_area(d1,d2,borderdf,
                                         tibet,
                                         northdis)
    area_increase  = c(area_increase,increaing_area)
  }
  area_increase = area_increase[-1]
  
  area_increase[1] = 0
  print('pass 2')
  proj_expand = as.numeric(proj_expand)
  solve_fun <- function(proj_expand,area_increase,northdiss){
    areac = c(proj_expand,area_increase)
    ids = order(areac,decreasing = F)
    areac = areac[ids]
    loc1 = which(ids ==1)
    loc1f = loc1-1
    loc1a = loc1+1
    
    north1 = northdiss[which(area_increase == areac[loc1f])]
    north2 = northdiss[which(area_increase == areac[loc1a])]
    
    ret = (north1 -north2)/(areac[loc1f]-areac[loc1a]) * (areac[loc1f]-proj_expand)
    ret = north1 - ret
    return(ret)
  }
  
  if(proj_negarea<borderinarea){
    proj_northdis = solve_fun(proj_expand,area_increase,northdiss)
    proj_northdis = proj_northdis *-1
    proj_northdis = as.numeric(proj_northdis)
  }else {
    proj_northdis = solve_fun(proj_expand,area_increase,northdiss)
  }
  
  
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/proj_north_move_border.R")
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/inititial_move_borders.R")
  retd = inititial_move_borders(borderdf1,
                                borderdf2,
                                tibet,proj_northdis,mode = mode)
  projd1 = retd[[1]]
  projd2 = retd[[2]]
  
  
  sanjiangyuan = shp_management('sanjiangyuan')
  sanjiangyuan = spTransform(sanjiangyuan,
                             crs(tibet))
  
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/cal_decraing_area_sanjiangyuan.R")
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/proj_north_move_border2.R")
  d12= proj_north_move_border2(projd1,
                          projd2,
                          borderdf)
  
  d1 = d12[[1]]
  d2 = d12[[2]]
  decreasing_area = cal_decraing_area_sanjiangyuan(d1,
                                 d2,
                                 borderdf,
                                 tibet,
                                 proj_northdis,
                                 sanjiangyuan)
  print(year)
                                                 
  return(decreasing_area)
  
  
  
}
screen_all_codes_tibet <- function(
  
){
  path = '/media/sdb5/Vapor_projcts/Vapor_tibet/R'
  
  files = list.files(path,full.names = T)
  
  allcode = 1
  for(i in 1:length(files)){
    tmp = readLines(files[i])
    allcode = c(allcode,tmp)
  }
  allcode = allcode[-1]
  
  output = '/media/sdb5/Vapor_projcts/Vapor_tibet/all_codes_20220303.txt'
  
  writeLines(allcode,output)  
  
  
}
single_year_expand_border_hist <- function(
  year = 2009
){
  mode = 'hist'
  print(year)
  to_rast <-function(x){
    coordinates(x) = ~long + lat
    gridded(x) = T
    x = raster(x)
    return(x)
  }
  #source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/spatial_pattern_of_tws_neg_infuture_by_year.R")
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/import_hist_twsdf.R")
  df = import_hist_twsdf(year)
  
  rastdf = df[,1:3]
  rast = to_rast(rastdf)
  rast <<- rast
  rastshps = rasterToPolygons(rast)
  neg_rast = sum(area(rastshps))/10^10
  area_unit = area(rastshps)[1]/10^10
  
  neg_points = shp_management('neg_points')
  
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/get_the_border_value_basedpoints.R")
  #borderdf = get_the_border_value_basedpoints(rast,neg_points)
  borderdf = as.data.frame(fread('output/proj_negborder_df/proj_negborder_df.csv'))
  borderinarea = read.table('main_plot_data/fig4/borderinarea.txt')[1]
  #borderdf = fortify(neg_points)
  #borderdf$tws = NA
  #borderdf = get_the_border_value(rast,neg_points)
  colnames(borderdf) = c('long','lat','tws')
  
  # import projected area diff
  full_area = area(tibet)/10^6 /10000
  neg_area = neg_rast
  
  proj_negarea = neg_area
  
  neg_shps = list.files('shp/cluster_tws_neg_shp_deter',
                        pattern = '*.shp$',full.names =T)
  neg_shps = lapply(neg_shps[1:2],shapefile)
  neg_shps = do.call(bind,neg_shps)
  
  area_negshps = sum(area(neg_shps))/10^10
  
  fillarea = borderinarea - neg_rast
  if(fillarea <=0){
    fillarea =0
  }
  
  if(proj_negarea > borderinarea){
    proj_expand = proj_negarea - borderinarea
  }else{
    proj_expand = borderinarea - proj_negarea
  }
  
  expand_num = round(proj_expand / area_unit)
  
  # detect the centroids 
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/detect_min_twspoints_based_multis.R")
  #ret_centroid = detect_min_twspoints_based_multis()
  #ret_cen1 = ret_centroid[[1]]
  #ret_cen2 = ret_centroid[[2]]
  ret_cen1 = as.data.frame(fread('output/ret_centroid/ret_cen1.csv'))
  ret_cen2 = as.data.frame(
    fread('output/ret_centroid/ret_cen2.csv'))
  ret_cen1 <<- ret_cen1
  ret_cen2 <<- ret_cen2
  # update border and centroid df 
  i = 1:nrow(borderdf)
  update_tws_byyear_border<-function(i){
    tmp = borderdf[i,]
    long = tmp[1,1]
    lat = tmp[1,2]
    
    id = which((rastdf[,1] == long) & 
                 (rastdf[,2] == lat))
    
    updatetws = rastdf[id,3]
    return(updatetws)
  }
  
  bordertws = sapply(i,update_tws_byyear_border)
  borderdf$tws = bordertws
  
  id = which(rastdf[,1] %in% ret_cen1[,1]  &
               rastdf[,2] %in% ret_cen1[,2])[c(1,3)]
  
  ret_cen1$value = rastdf[id,3]
  
  id = which(rastdf[,1] %in% ret_cen2[,1]  &
               rastdf[,2] %in% ret_cen2[,2])[c(1,3)]
  
  ret_cen2$value = rastdf[id,3]
  
  # calc vector
  # co influence E 84 - 86.5
  borderdf1 = borderdf[which(borderdf$long <88.125 
                             #& borderdf$long >=77.5
  ),]
  borderdf1 = borderdf1[seq(1,nrow(borderdf1),1),]
  
  calc_increasing_vector_reg1 <- function(i,northdis = 12){
    print(i)
    tmpborder = borderdf1[i,]
    
    if(mode == 'ssp245'){
      cen1 = ret_cen1[1,]
    }else{
      cen1 = ret_cen2[1,]
    }
    
    dis = pointDistance(cen1[,1:2],tmpborder[,1:2],
                        lonlat = T)
    dis = dis / 1000
    
    longdif = tmpborder[,1] - cen1[,1]
    latdif = tmpborder[,2] - cen1[,2]
    
    disdif = sqrt(longdif^2 + latdif^2)
    
    # generate equal distance by 5
    unitdis = disdif / 50
    dis = unitdis * seq(1,50,1)
    
    fetch_by_dis <- function(dis){
      longadd = (longdif/disdif)*dis
      latadd = (latdif/disdif)*dis
      
      aimpoints = data.frame(
        long = longadd + cen1[,1],
        lat = latadd + cen1[,2]
      )
      return(aimpoints)
    }
    
    
    points_on_theline = fetch_by_dis(dis)
    
    twsonroute = extract(rast,points_on_theline)
    
    naid = which(is.na(twsonroute))
    if(length(naid)>0){
      dis = dis[-naid]
      twsonroute = twsonroute[-naid]
    }
    
    model1 = lm(twsonroute ~ dis + I(dis^2))
    model2 = lm(twsonroute ~ exp(dis))
    model3 = lm(twsonroute ~ dis)
    model4 = lm(twsonroute ~ dis + I(dis^2)+I(dis^0.5))
    
    c1 = model1$coefficients
    f1 <- function(dis,a,b,c){return(c+ dis * b+ dis^2 * a)}
    c2 = model2$coefficients
    f2 <- function(dis,a,b){return(b+a*exp(dis))}
    c3 = model3$coefficients
    f3 <- function(dis,a,b){return(b+a*dis)}
    
    c4 = model4$coefficients
    f4 <- function(dis,a,b,c,d){return(d+c*dis+b* dis^2 + a*dis^0.5)}
    
    r1 = caret::RMSE(model1$fitted.values,twsonroute)
    r2 = caret::RMSE(model2$fitted.values,twsonroute)
    r3 = caret::RMSE(model3$fitted.values,twsonroute)
    r4 = caret::RMSE(model4$fitted.values,twsonroute)
    
    rs = c(r1,r2,r3,r4)
    
    print(paste0('Model1: ',r1))
    print(paste0('Model4: ',r4))
    print(paste0('Model3: ',r3))
    
    sid = order(rs,decreasing = F)
    
    mods = list(model1,model2,model3,model4)
    fs = list(f1,f2,f3,f4)
    
    minrs = which(rs == min(rs))
    
    
    for(s in sid){
      minrs = s
      mod = mods[[minrs]]
      f = fs[[minrs]]
      
      if(minrs == 1){
        ret_er = try(zerodis <- uniroot(f,c(1,100),a=c1[3],b = c1[2],c=c1[1])$root,
                     silent = T)
      }else if(minrs == 2){
        ret_er = try(zerodis <- uniroot(f,c(1,100),a=c2[2],b = c2[1])$root,
                     silent = T)
      }else if(minrs == 3){
        ret_er = try(zerodis <- uniroot(f,c(1,100),a=c3[2],b = c3[1])$root,
                     silent = T)
      }else if(minrs == 4){
        ret_er = try(zerodis <- uniroot(f,c(1,100),a=c4[4],b = c4[3],c = c4[2],d = c4[1])$root,
                     silent = T)
      }
      
      if(class(ret_er) %in% 'try-error'){
        print('try next')
      }else{
        break
      }
    }
    
    fetch_by_dis_withtws <- function(dis){
      longadd = (longdif/disdif)*dis
      latadd = (latdif/disdif)*dis
      
      disdf = data.frame(dis = dis)
      twsproj = predict(mod,disdf)
      
      #if(twsproj >= 0){
      #  disdf = data.frame(dis = zerodis)
      #  twsproj = predict(mod,disdf)
      
      #  longadd = (longdif/disdif)*zerodis
      #  latadd = (latdif/disdif)*zerodis
      #}
      
      aimpoints = data.frame(
        long = longadd + cen1[,1],
        lat = latadd + cen1[,2]
        #tws = twsproj
      )
      return(aimpoints)
    }
    
    len_dis = length(dis)
    northmove = dis[len_dis]+northdis
    extdis = northmove
    #extdis = c(seq(dis[len_dis],northmove,unitdis),northmove)
    #extdis = extdis[which(extdis>dis[len_dis])]
    
    aimloc = lapply(extdis,
                    fetch_by_dis_withtws)
    aimloc = do.call('rbind',
                     aimloc)
    
    return(aimloc)
  }
  
  borderdf2 = borderdf[which(borderdf$long >= 88.125),]
  borderdf2 = borderdf2[seq(1,nrow(borderdf2),1),]
  
  calc_increasing_vector_reg2 <- function(i,northdis = 12){
    print(i)
    tmpborder = borderdf2[i,]
    
    if(mode == 'ssp245'){
      cen1 = ret_cen1[2,]
    }else{
      cen1 = ret_cen2[2,]
    }
    
    dis = pointDistance(cen1[,1:2],tmpborder[,1:2],
                        lonlat = T)
    dis = dis / 1000
    
    longdif = tmpborder[,1] - cen1[,1]
    latdif = tmpborder[,2] - cen1[,2]
    
    disdif = sqrt(longdif^2 + latdif^2)
    
    # generate equal distance by 5
    unitdis = disdif / 50
    dis = unitdis * seq(1,50,1)
    
    fetch_by_dis <- function(dis){
      longadd = (longdif/disdif)*dis
      latadd = (latdif/disdif)*dis
      
      aimpoints = data.frame(
        long = longadd + cen1[,1],
        lat = latadd + cen1[,2]
      )
      return(aimpoints)
    }
    
    
    points_on_theline = fetch_by_dis(dis)
    
    twsonroute = extract(rast,points_on_theline)
    
    naid = which(is.na(twsonroute))
    if(length(naid)>0){
      dis = dis[-naid]
      twsonroute = twsonroute[-naid]
    }
    
    model1 = lm(twsonroute ~ dis + I(dis^2))
    model2 = lm(twsonroute ~ exp(dis))
    model3 = lm(twsonroute ~ dis)
    model4 = lm(twsonroute ~ dis + I(dis^2)+I(dis^0.5))
    
    c1 = model1$coefficients
    f1 <- function(dis,a,b,c){return(c+ dis * b+ dis^2 * a)}
    c2 = model2$coefficients
    f2 <- function(dis,a,b){return(b+a*exp(dis))}
    c3 = model3$coefficients
    f3 <- function(dis,a,b){return(b+a*dis)}
    
    c4 = model4$coefficients
    f4 <- function(dis,a,b,c,d){return(d+c*dis+b* dis^2 + a*dis^0.5)}
    
    r1 = caret::RMSE(model1$fitted.values,twsonroute)
    r2 = caret::RMSE(model2$fitted.values,twsonroute)
    r3 = caret::RMSE(model3$fitted.values,twsonroute)
    r4 = caret::RMSE(model4$fitted.values,twsonroute)
    
    rs = c(r1,r2,r3,r4)
    
    print(paste0('Model1: ',r1))
    print(paste0('Model4: ',r4))
    print(paste0('Model3: ',r3))
    
    sid = order(rs,decreasing = F)
    
    mods = list(model1,model2,model3,model4)
    fs = list(f1,f2,f3,f4)
    
    minrs = which(rs == min(rs))
    
    
    for(s in sid){
      minrs = s
      mod = mods[[minrs]]
      f = fs[[minrs]]
      
      if(minrs == 1){
        ret_er = try(zerodis <- uniroot(f,c(1,100),a=c1[3],b = c1[2],c=c1[1])$root,
                     silent = T)
      }else if(minrs == 2){
        ret_er = try(zerodis <- uniroot(f,c(1,100),a=c2[2],b = c2[1])$root,
                     silent = T)
      }else if(minrs == 3){
        ret_er = try(zerodis <- uniroot(f,c(1,100),a=c3[2],b = c3[1])$root,
                     silent = T)
      }else if(minrs == 4){
        ret_er = try(zerodis <- uniroot(f,c(1,100),a=c4[4],b = c4[3],c = c4[2],d = c4[1])$root,
                     silent = T)
      }
      
      
      if(class(ret_er) %in% 'try-error'){
        print('try next')
      }else{
        break
      }
    }
    
    fetch_by_dis_withtws <- function(dis){
      longadd = (longdif/disdif)*dis
      latadd = (latdif/disdif)*dis
      
      disdf = data.frame(dis = dis)
      twsproj = predict(mod,disdf)
      
      #if(twsproj >= 0){
      #  disdf = data.frame(dis = zerodis)
      #  twsproj = predict(mod,disdf)
      #  
      #  longadd = (longdif/disdif)*zerodis
      #  latadd = (latdif/disdif)*zerodis
      #}
      
      aimpoints = data.frame(
        long = longadd + cen1[,1],
        lat = latadd + cen1[,2]
        #tws = twsproj
      )
      return(aimpoints)
    }
    
    len_dis = length(dis)
    northmove = dis[len_dis]+northdis
    extdis = northmove
    #extdis = c(seq(dis[len_dis],northmove,unitdis),northmove)
    #extdis = extdis[which(extdis>dis[len_dis])]
    
    aimloc = lapply(extdis,fetch_by_dis_withtws)
    aimloc = do.call('rbind',aimloc)
    
    
    return(aimloc)
  }
  
  northdiss = c(0,0.25,0.5,0.75,seq(1,7,1))
  area_increase = 1
  for(northdis in northdiss){
    
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/inititial_move_borders.R")
    retd = inititial_move_borders(borderdf1,
                                  borderdf2,
                                  tibet,northdis,mode)
    d1 = retd[[1]]
    d2 = retd[[2]]
    
    print(northdis)
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/cal_increasing_area.R")
    increaing_area = cal_increasing_area(d1,d2,borderdf,
                                         tibet,
                                         northdis)
    print(increaing_area)
    area_increase  = c(area_increase,increaing_area)
  }
  area_increase = area_increase[-1]
  area_increase[1] = 0
  
  proj_expand = as.numeric(proj_expand)
  solve_fun <- function(proj_expand,area_increase,northdiss){
    areac = c(proj_expand,area_increase)
    ids = order(areac,decreasing = F)
    areac = areac[ids]
    loc1 = which(ids ==1)
    loc1f = loc1-1
    loc1a = loc1+1
    
    north1 = northdiss[which(area_increase == areac[loc1f])]
    north2 = northdiss[which(area_increase == areac[loc1a])]
    
    ret = (north1 -north2)/(areac[loc1f]-areac[loc1a]) * (areac[loc1f]-proj_expand)
    ret = north1 - ret
    return(ret)
  }
  
  if(proj_negarea<borderinarea){
    proj_northdis = solve_fun(proj_expand,area_increase,northdiss)
    proj_northdis = proj_northdis *-1
    proj_northdis = as.numeric(proj_northdis)
  }else {
    proj_northdis = solve_fun(proj_expand,area_increase,northdiss)
  }
  
  
  
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/proj_north_move_border.R")
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/inititial_move_borders.R")
  retd = inititial_move_borders(borderdf1,
                                borderdf2,
                                tibet,proj_northdis,mode)
  projd1 = retd[[1]]
  projd2 = retd[[2]]
  
  proj_north_border = proj_north_move_border(projd1,
                                             projd2,
                                             borderdf)
  
  print(year)
  print(proj_expand)
  print(proj_northdis)
  plot(rast)
  lines(proj_north_border)
  return(proj_north_border)
  
  
  
  
  
  colnames(zerodf_reg1) = c('long','lat','tws245')
  df2 = rbind(rastdf,zerodf_reg1)
  
  rastdf$levels = cut(rastdf$tws245,
                      breaks = seq(-17,-2,1))
  nclass = length(unique(rastdf$levels))
  #nclass = 19
  fils= colorRampPalette(brewer.pal(9,'Spectral'))(nclass)
  fils = fils[seq(1,nclass,1)]
  
  p = ggplot()+
    geom_polygon(data = tibet,
                 aes(x = long,y = lat,group =group),
                 fill = 'transparent',
                 color = 'black')+
    geom_polygon(data = neg_shps,
                 aes(x = long,y = lat,group =group),
                 fill = 'transparent',
                 color = 'black')+
    geom_tile(data = rastdf,
              aes(x = long,y = lat,fill = levels))+
    geom_path(data = proj_north_border,
              aes(x = long,y = lat,group =group),
              color = 'blue',
              size =1)+
    scale_fill_manual(values = fils)+
    theme_bw()
  
  geom_polygon(data = neg_his[[14]],
               aes(x = long,y = lat,group =group),
               fill = 'transparent',
               color = 'black')+
    theme_bw()
  
  geom_point(data = ret_cen1,
             aes(x = x,y = y),col = 'red')+
    geom_point(data = ret_cen2,
               aes(x = x,y = y),col = 'blue')
  #geom_tile(data = borderdf,
  #          aes(x = long,y = lat),fill = 'white')+
  #geom_point(data = borderdf,
  #           aes(x = long,y = lat))
  
}
single_year_expand_border_multi_max <- function(
  year = 2020:2051,mode = 'ssp585'
){
  print(year)
  to_rast <-function(x){
    coordinates(x) = ~long + lat
    gridded(x) = T
    x = raster(x)
    return(x)
  }
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/spatial_pattern_of_tws_neg_infuture_by_year.R")
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/spatial_pattern_of_tws_neg_infuture_by_multi_year.R")
  
  df = spatial_pattern_of_tws_neg_infuture_by_multi_year(year,mode)
  
  posid = which(df[,3]>0)
  if(length(posid)>0){
    df = df[-posid,]
  }
  
  rastdf = df[,1:3]
  rast = to_rast(rastdf)
  rast <<- rast
  
  rastshps = rasterToPolygons(rast)
  neg_rast = sum(area(rastshps))/10^10
  area_unit = area(rastshps)[1]/10^10
  
  neg_points = shp_management('neg_points')
  
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/get_the_border_value_basedpoints.R")
  #borderdf = get_the_border_value_basedpoints(rast,neg_points)
  borderdf = as.data.frame(fread('output/proj_negborder_df/proj_negborder_df.csv'))
  borderinarea = read.table('main_plot_data/fig4/borderinarea.txt')[1]
  #borderdf = fortify(neg_points)
  #borderdf$tws = NA
  #borderdf = get_the_border_value(rast,neg_points)
  colnames(borderdf) = c('long','lat','tws')
  
  # import projected area diff
  #input_pos_area = 'output/future_pos_tws_area/pos_tws_area_ensemble.csv'
  #input_pos_area = 'output/future_pos_tws_area/pos_area_allcalc_mean.csv'
  input_pos_area = 'output/future_pos_tws_area_based_snow_tws/pos_area_allcalc_mean.csv'
  tibet = shp_management('tibet')
  pos_area = as.data.frame(fread(input_pos_area))
  pos_area = pos_area[3:81,]
  full_area = area(tibet)/10^6 /10000
  neg_area = full_area - pos_area
  
  
  loc_year1 = length(2020:year[1])
  loc_year2 = length(2020:year[length(year)])
  loc_year = loc_year1:loc_year2
  if(mode == 'ssp245'){
    modeid = 1
  }else{
    modeid = 2
  }
  proj_negarea = neg_area[loc_year,modeid]
  proj_negarea = max(proj_negarea)
  
  neg_shps = list.files('shp/cluster_tws_neg_shp_deter',
                        pattern = '*.shp$',full.names =T)
  neg_shps = lapply(neg_shps[1:2],shapefile)
  neg_shps = do.call(bind,neg_shps)
  
  area_negshps = sum(area(neg_shps))/10^10
  
  fillarea = borderinarea - neg_rast
  #if(fillarea <=0){
  #  fillarea =0
  #}
  
  if(proj_negarea > borderinarea){
    proj_expand = proj_negarea - neg_rast -fillarea
  }else{
    proj_expand = borderinarea - proj_negarea
  }
  
  expand_num = round(proj_expand / area_unit)
  
  # detect the centroids 
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/detect_min_twspoints_based_multis.R")
  #ret_centroid = detect_min_twspoints_based_multis()
  #ret_cen1 = ret_centroid[[1]]
  #ret_cen2 = ret_centroid[[2]]
  ret_cen1 = as.data.frame(fread('output/ret_centroid/ret_cen1.csv'))
  ret_cen2 = as.data.frame(
    fread('output/ret_centroid/ret_cen2.csv'))
  ret_cen1 <<- ret_cen1
  ret_cen2 <<- ret_cen2
  # update border and centroid df 
  i = 1:nrow(borderdf)
  update_tws_byyear_border<-function(i){
    tmp = borderdf[i,]
    long = tmp[1,1]
    lat = tmp[1,2]
    
    id = which((rastdf[,1] == long) & 
                 (rastdf[,2] == lat))
    
    updatetws = rastdf[id,3]
    return(updatetws)
  }
  
  bordertws = sapply(i,update_tws_byyear_border)
  borderdf$tws = bordertws
  
  id = which(rastdf[,1] %in% ret_cen1[,1]  &
               rastdf[,2] %in% ret_cen1[,2])[c(1,3)]
  
  ret_cen1$value = rastdf[id,3]
  
  id = which(rastdf[,1] %in% ret_cen2[,1]  &
               rastdf[,2] %in% ret_cen2[,2])[c(1,3)]
  
  ret_cen2$value = rastdf[id,3]
  
  # calc vector
  # co influence E 84 - 86.5
  borderdf1 = borderdf[which(borderdf$long <88.125 
                             #& borderdf$long >=77.5
  ),]
  borderdf1 = borderdf1[seq(1,nrow(borderdf1),1),]
  
  calc_increasing_vector_reg1 <- function(i,northdis = 12){
    print(i)
    tmpborder = borderdf1[i,]
    
    if(mode == 'ssp245'){
      cen1 = ret_cen1[1,]
    }else{
      cen1 = ret_cen2[1,]
    }
    
    dis = pointDistance(cen1[,1:2],tmpborder[,1:2],
                        lonlat = T)
    dis = dis / 1000
    
    longdif = tmpborder[,1] - cen1[,1]
    latdif = tmpborder[,2] - cen1[,2]
    
    disdif = sqrt(longdif^2 + latdif^2)
    
    # generate equal distance by 5
    unitdis = disdif / 50
    dis = unitdis * seq(1,50,1)
    
    fetch_by_dis <- function(dis){
      longadd = (longdif/disdif)*dis
      latadd = (latdif/disdif)*dis
      
      aimpoints = data.frame(
        long = longadd + cen1[,1],
        lat = latadd + cen1[,2]
      )
      return(aimpoints)
    }
    
    
    points_on_theline = fetch_by_dis(dis)
    
    twsonroute = extract(rast,points_on_theline)
    
    naid = which(is.na(twsonroute))
    if(length(naid)>0){
      dis = dis[-naid]
      twsonroute = twsonroute[-naid]
    }
    
    model1 = lm(twsonroute ~ dis + I(dis^2))
    model2 = lm(twsonroute ~ exp(dis))
    model3 = lm(twsonroute ~ dis)
    model4 = lm(twsonroute ~ dis + I(dis^2)+I(dis^0.5))
    
    c1 = model1$coefficients
    f1 <- function(dis,a,b,c){return(c+ dis * b+ dis^2 * a)}
    c2 = model2$coefficients
    f2 <- function(dis,a,b){return(b+a*exp(dis))}
    c3 = model3$coefficients
    f3 <- function(dis,a,b){return(b+a*dis)}
    
    c4 = model4$coefficients
    f4 <- function(dis,a,b,c,d){return(d+c*dis+b* dis^2 + a*dis^0.5)}
    
    r1 = caret::RMSE(model1$fitted.values,twsonroute)
    r2 = caret::RMSE(model2$fitted.values,twsonroute)
    r3 = caret::RMSE(model3$fitted.values,twsonroute)
    r4 = caret::RMSE(model4$fitted.values,twsonroute)
    
    rs = c(r1,r2,r3,r4)
    
    print(paste0('Model1: ',r1))
    print(paste0('Model4: ',r4))
    print(paste0('Model3: ',r3))
    
    sid = order(rs,decreasing = F)
    
    mods = list(model1,model2,model3,model4)
    fs = list(f1,f2,f3,f4)
    
    minrs = which(rs == min(rs))
    
    
    for(s in sid){
      minrs = s
      mod = mods[[minrs]]
      f = fs[[minrs]]
      
      if(minrs == 1){
        ret_er = try(zerodis <- uniroot(f,c(1,100),a=c1[3],b = c1[2],c=c1[1])$root,
                     silent = T)
      }else if(minrs == 2){
        ret_er = try(zerodis <- uniroot(f,c(1,100),a=c2[2],b = c2[1])$root,
                     silent = T)
      }else if(minrs == 3){
        ret_er = try(zerodis <- uniroot(f,c(1,100),a=c3[2],b = c3[1])$root,
                     silent = T)
      }else if(minrs == 4){
        ret_er = try(zerodis <- uniroot(f,c(1,100),a=c4[4],b = c4[3],c = c4[2],d = c4[1])$root,
                     silent = T)
      }
      
      if(class(ret_er) %in% 'try-error'){
        print('try next')
      }else{
        break
      }
    }
    
    fetch_by_dis_withtws <- function(dis){
      longadd = (longdif/disdif)*dis
      latadd = (latdif/disdif)*dis
      
      disdf = data.frame(dis = dis)
      twsproj = predict(mod,disdf)
      
      #if(twsproj >= 0){
      #  disdf = data.frame(dis = zerodis)
      #  twsproj = predict(mod,disdf)
      
      #  longadd = (longdif/disdif)*zerodis
      #  latadd = (latdif/disdif)*zerodis
      #}
      
      aimpoints = data.frame(
        long = longadd + cen1[,1],
        lat = latadd + cen1[,2]
        #tws = twsproj
      )
      return(aimpoints)
    }
    
    len_dis = length(dis)
    northmove = dis[len_dis]+northdis
    extdis = northmove
    #extdis = c(seq(dis[len_dis],northmove,unitdis),northmove)
    #extdis = extdis[which(extdis>dis[len_dis])]
    
    aimloc = lapply(extdis,
                    fetch_by_dis_withtws)
    aimloc = do.call('rbind',
                     aimloc)
    
    return(aimloc)
  }
  
  borderdf2 = borderdf[which(borderdf$long >= 88.125),]
  borderdf2 = borderdf2[seq(1,nrow(borderdf2),1),]
  
  calc_increasing_vector_reg2 <- function(i,northdis = 12){
    print(i)
    tmpborder = borderdf2[i,]
    
    if(mode == 'ssp245'){
      cen1 = ret_cen1[2,]
    }else{
      cen1 = ret_cen2[2,]
    }
    
    dis = pointDistance(cen1[,1:2],tmpborder[,1:2],
                        lonlat = T)
    dis = dis / 1000
    
    longdif = tmpborder[,1] - cen1[,1]
    latdif = tmpborder[,2] - cen1[,2]
    
    disdif = sqrt(longdif^2 + latdif^2)
    
    # generate equal distance by 5
    unitdis = disdif / 50
    dis = unitdis * seq(1,50,1)
    
    fetch_by_dis <- function(dis){
      longadd = (longdif/disdif)*dis
      latadd = (latdif/disdif)*dis
      
      aimpoints = data.frame(
        long = longadd + cen1[,1],
        lat = latadd + cen1[,2]
      )
      return(aimpoints)
    }
    
    
    points_on_theline = fetch_by_dis(dis)
    
    twsonroute = extract(rast,points_on_theline)
    
    naid = which(is.na(twsonroute))
    if(length(naid)>0){
      dis = dis[-naid]
      twsonroute = twsonroute[-naid]
    }
    
    model1 = lm(twsonroute ~ dis + I(dis^2))
    model2 = lm(twsonroute ~ exp(dis))
    model3 = lm(twsonroute ~ dis)
    model4 = lm(twsonroute ~ dis + I(dis^2)+I(dis^0.5))
    
    c1 = model1$coefficients
    f1 <- function(dis,a,b,c){return(c+ dis * b+ dis^2 * a)}
    c2 = model2$coefficients
    f2 <- function(dis,a,b){return(b+a*exp(dis))}
    c3 = model3$coefficients
    f3 <- function(dis,a,b){return(b+a*dis)}
    
    c4 = model4$coefficients
    f4 <- function(dis,a,b,c,d){return(d+c*dis+b* dis^2 + a*dis^0.5)}
    
    r1 = caret::RMSE(model1$fitted.values,twsonroute)
    r2 = caret::RMSE(model2$fitted.values,twsonroute)
    r3 = caret::RMSE(model3$fitted.values,twsonroute)
    r4 = caret::RMSE(model4$fitted.values,twsonroute)
    
    rs = c(r1,r2,r3,r4)
    
    print(paste0('Model1: ',r1))
    print(paste0('Model4: ',r4))
    print(paste0('Model3: ',r3))
    
    sid = order(rs,decreasing = F)
    
    mods = list(model1,model2,model3,model4)
    fs = list(f1,f2,f3,f4)
    
    minrs = which(rs == min(rs))
    
    
    for(s in sid){
      minrs = s
      mod = mods[[minrs]]
      f = fs[[minrs]]
      
      if(minrs == 1){
        ret_er = try(zerodis <- uniroot(f,c(1,100),a=c1[3],b = c1[2],c=c1[1])$root,
                     silent = T)
      }else if(minrs == 2){
        ret_er = try(zerodis <- uniroot(f,c(1,100),a=c2[2],b = c2[1])$root,
                     silent = T)
      }else if(minrs == 3){
        ret_er = try(zerodis <- uniroot(f,c(1,100),a=c3[2],b = c3[1])$root,
                     silent = T)
      }else if(minrs == 4){
        ret_er = try(zerodis <- uniroot(f,c(1,100),a=c4[4],b = c4[3],c = c4[2],d = c4[1])$root,
                     silent = T)
      }
      
      
      if(class(ret_er) %in% 'try-error'){
        print('try next')
      }else{
        break
      }
    }
    
    fetch_by_dis_withtws <- function(dis){
      longadd = (longdif/disdif)*dis
      latadd = (latdif/disdif)*dis
      
      disdf = data.frame(dis = dis)
      twsproj = predict(mod,disdf)
      
      #if(twsproj >= 0){
      #  disdf = data.frame(dis = zerodis)
      #  twsproj = predict(mod,disdf)
      #  
      #  longadd = (longdif/disdif)*zerodis
      #  latadd = (latdif/disdif)*zerodis
      #}
      
      aimpoints = data.frame(
        long = longadd + cen1[,1],
        lat = latadd + cen1[,2]
        #tws = twsproj
      )
      return(aimpoints)
    }
    
    len_dis = length(dis)
    northmove = dis[len_dis]+northdis
    extdis = northmove
    #extdis = c(seq(dis[len_dis],northmove,unitdis),northmove)
    #extdis = extdis[which(extdis>dis[len_dis])]
    
    aimloc = lapply(extdis,fetch_by_dis_withtws)
    aimloc = do.call('rbind',aimloc)
    
    
    return(aimloc)
  }
  
  northdiss = c(0,0.25,0.5,0.75,seq(1,7,1))
  area_increase = 1
  for(northdis in northdiss){
    
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/inititial_move_borders.R")
    retd = inititial_move_borders(borderdf1,
                                  borderdf2,
                                  tibet,northdis,mode)
    d1 = retd[[1]]
    d2 = retd[[2]]
    
    print(northdis)
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/cal_increasing_area.R")
    increaing_area = cal_increasing_area(d1,d2,borderdf,
                                         tibet,
                                         northdis)
    print(increaing_area)
    area_increase  = c(area_increase,increaing_area)
  }
  area_increase = area_increase[-1]
  area_increase[1] = 0
  
  proj_expand = as.numeric(proj_expand)
  solve_fun <- function(proj_expand,area_increase,northdiss){
    areac = c(proj_expand,area_increase)
    ids = order(areac,decreasing = F)
    areac = areac[ids]
    loc1 = which(ids ==1)
    loc1f = loc1-1
    loc1a = loc1+1
    
    north1 = northdiss[which(area_increase == areac[loc1f])]
    north2 = northdiss[which(area_increase == areac[loc1a])]
    
    ret = (north1 -north2)/(areac[loc1f]-areac[loc1a]) * (areac[loc1f]-proj_expand)
    ret = north1 - ret
    return(ret)
  }
  
  if(proj_negarea<borderinarea){
    proj_northdis = solve_fun(proj_expand,area_increase,northdiss)
    proj_northdis = proj_northdis *-1
    proj_northdis = as.numeric(proj_northdis)
  }else {
    proj_northdis = solve_fun(proj_expand,area_increase,northdiss)
  }
  
  
  
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/proj_north_move_border.R")
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/inititial_move_borders.R")
  retd = inititial_move_borders(borderdf1,
                                borderdf2,
                                tibet,proj_northdis,mode)
  projd1 = retd[[1]]
  projd2 = retd[[2]]
  
  proj_north_border = proj_north_move_border(projd1,
                                             projd2,
                                             borderdf)
  
  print(year)
  print(proj_expand)
  print(proj_northdis)
  return(proj_north_border)
  
  
  
  
  
  colnames(zerodf_reg1) = c('long','lat','tws245')
  df2 = rbind(rastdf,zerodf_reg1)
  
  rastdf$levels = cut(rastdf$tws245,
                      breaks = seq(-17,-2,1))
  nclass = length(unique(rastdf$levels))
  #nclass = 19
  fils= colorRampPalette(brewer.pal(9,'Spectral'))(nclass)
  fils = fils[seq(1,nclass,1)]
  
  p = ggplot()+
    geom_polygon(data = tibet,
                 aes(x = long,y = lat,group =group),
                 fill = 'transparent',
                 color = 'black')+
    geom_polygon(data = neg_shps,
                 aes(x = long,y = lat,group =group),
                 fill = 'transparent',
                 color = 'black')+
    geom_tile(data = rastdf,
              aes(x = long,y = lat,fill = levels))+
    geom_path(data = proj_north_border,
              aes(x = long,y = lat,group =group),
              color = 'blue',
              size =1)+
    scale_fill_manual(values = fils)+
    theme_bw()
  
  geom_polygon(data = neg_his[[14]],
               aes(x = long,y = lat,group =group),
               fill = 'transparent',
               color = 'black')+
    theme_bw()
  
  geom_point(data = ret_cen1,
             aes(x = x,y = y),col = 'red')+
    geom_point(data = ret_cen2,
               aes(x = x,y = y),col = 'blue')
  #geom_tile(data = borderdf,
  #          aes(x = long,y = lat),fill = 'white')+
  #geom_point(data = borderdf,
  #           aes(x = long,y = lat))
  
}
single_year_expand_border_multi_mean <- function(
  year = 2020:2051,mode = 'ssp585'
){
  print(year)
  to_rast <-function(x){
    coordinates(x) = ~long + lat
    gridded(x) = T
    x = raster(x)
    return(x)
  }
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/spatial_pattern_of_tws_neg_infuture_by_year.R")
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/spatial_pattern_of_tws_neg_infuture_by_multi_year.R")
  
  df = spatial_pattern_of_tws_neg_infuture_by_multi_year(year,mode)

  posid = which(df[,3]>0)
  if(length(posid)>0){
    df = df[-posid,]
  }
  
  rastdf = df[,1:3]
  rast = to_rast(rastdf)
  rast <<- rast
  
  rastshps = rasterToPolygons(rast)
  neg_rast = sum(area(rastshps))/10^10
  area_unit = area(rastshps)[1]/10^10
  
  neg_points = shp_management('neg_points')
  
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/get_the_border_value_basedpoints.R")
  #borderdf = get_the_border_value_basedpoints(rast,neg_points)
  borderdf = as.data.frame(fread('output/proj_negborder_df/proj_negborder_df.csv'))
  borderinarea = read.table('main_plot_data/fig4/borderinarea.txt')[1]
  #borderdf = fortify(neg_points)
  #borderdf$tws = NA
  #borderdf = get_the_border_value(rast,neg_points)
  colnames(borderdf) = c('long','lat','tws')
  
  # import projected area diff
  #input_pos_area = 'output/future_pos_tws_area/pos_tws_area_ensemble.csv'
  #input_pos_area = 'output/future_pos_tws_area/pos_area_allcalc_mean.csv'
  input_pos_area = 'output/future_pos_tws_area_based_snow_tws/pos_area_allcalc_mean.csv'
  tibet = shp_management('tibet')
  pos_area = as.data.frame(fread(input_pos_area))
  pos_area = pos_area[3:81,]
  full_area = area(tibet)/10^6 /10000
  neg_area = full_area - pos_area
  
  
  loc_year1 = length(2020:year[1])
  loc_year2 = length(2020:year[length(year)])
  loc_year = loc_year1:loc_year2
  if(mode == 'ssp245'){
    modeid = 1
  }else{
    modeid = 2
  }
  proj_negarea = neg_area[loc_year,modeid]
  proj_negarea = mean(proj_negarea)
  
  neg_shps = list.files('shp/cluster_tws_neg_shp_deter',
                        pattern = '*.shp$',full.names =T)
  neg_shps = lapply(neg_shps[1:2],shapefile)
  neg_shps = do.call(bind,neg_shps)
  
  area_negshps = sum(area(neg_shps))/10^10
  
  fillarea = borderinarea - neg_rast
  #if(fillarea <=0){
  #  fillarea =0
  #}
  
  if(proj_negarea > borderinarea){
    proj_expand = proj_negarea - neg_rast -fillarea
  }else{
    proj_expand = borderinarea - proj_negarea
  }
  
  expand_num = round(proj_expand / area_unit)
  
  # detect the centroids 
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/detect_min_twspoints_based_multis.R")
  #ret_centroid = detect_min_twspoints_based_multis()
  #ret_cen1 = ret_centroid[[1]]
  #ret_cen2 = ret_centroid[[2]]
  ret_cen1 = as.data.frame(fread('output/ret_centroid/ret_cen1.csv'))
  ret_cen2 = as.data.frame(
    fread('output/ret_centroid/ret_cen2.csv'))
  ret_cen1 <<- ret_cen1
  ret_cen2 <<- ret_cen2
  # update border and centroid df 
  i = 1:nrow(borderdf)
  update_tws_byyear_border<-function(i){
    tmp = borderdf[i,]
    long = tmp[1,1]
    lat = tmp[1,2]
    
    id = which((rastdf[,1] == long) & 
                 (rastdf[,2] == lat))
    
    updatetws = rastdf[id,3]
    return(updatetws)
  }
  
  bordertws = sapply(i,update_tws_byyear_border)
  borderdf$tws = bordertws
  
  id = which(rastdf[,1] %in% ret_cen1[,1]  &
               rastdf[,2] %in% ret_cen1[,2])[c(1,3)]
  
  ret_cen1$value = rastdf[id,3]
  
  id = which(rastdf[,1] %in% ret_cen2[,1]  &
               rastdf[,2] %in% ret_cen2[,2])[c(1,3)]
  
  ret_cen2$value = rastdf[id,3]
  
  # calc vector
  # co influence E 84 - 86.5
  borderdf1 = borderdf[which(borderdf$long <88.125 
                             #& borderdf$long >=77.5
  ),]
  borderdf1 = borderdf1[seq(1,nrow(borderdf1),1),]
  
  calc_increasing_vector_reg1 <- function(i,northdis = 12){
    print(i)
    tmpborder = borderdf1[i,]
    
    if(mode == 'ssp245'){
      cen1 = ret_cen1[1,]
    }else{
      cen1 = ret_cen2[1,]
    }
    
    dis = pointDistance(cen1[,1:2],tmpborder[,1:2],
                        lonlat = T)
    dis = dis / 1000
    
    longdif = tmpborder[,1] - cen1[,1]
    latdif = tmpborder[,2] - cen1[,2]
    
    disdif = sqrt(longdif^2 + latdif^2)
    
    # generate equal distance by 5
    unitdis = disdif / 50
    dis = unitdis * seq(1,50,1)
    
    fetch_by_dis <- function(dis){
      longadd = (longdif/disdif)*dis
      latadd = (latdif/disdif)*dis
      
      aimpoints = data.frame(
        long = longadd + cen1[,1],
        lat = latadd + cen1[,2]
      )
      return(aimpoints)
    }
    
    
    points_on_theline = fetch_by_dis(dis)
    
    twsonroute = extract(rast,points_on_theline)
    
    naid = which(is.na(twsonroute))
    if(length(naid)>0){
      dis = dis[-naid]
      twsonroute = twsonroute[-naid]
    }
    
    model1 = lm(twsonroute ~ dis + I(dis^2))
    model2 = lm(twsonroute ~ exp(dis))
    model3 = lm(twsonroute ~ dis)
    model4 = lm(twsonroute ~ dis + I(dis^2)+I(dis^0.5))
    
    c1 = model1$coefficients
    f1 <- function(dis,a,b,c){return(c+ dis * b+ dis^2 * a)}
    c2 = model2$coefficients
    f2 <- function(dis,a,b){return(b+a*exp(dis))}
    c3 = model3$coefficients
    f3 <- function(dis,a,b){return(b+a*dis)}
    
    c4 = model4$coefficients
    f4 <- function(dis,a,b,c,d){return(d+c*dis+b* dis^2 + a*dis^0.5)}
    
    r1 = caret::RMSE(model1$fitted.values,twsonroute)
    r2 = caret::RMSE(model2$fitted.values,twsonroute)
    r3 = caret::RMSE(model3$fitted.values,twsonroute)
    r4 = caret::RMSE(model4$fitted.values,twsonroute)
    
    rs = c(r1,r2,r3,r4)
    
    print(paste0('Model1: ',r1))
    print(paste0('Model4: ',r4))
    print(paste0('Model3: ',r3))
    
    sid = order(rs,decreasing = F)
    
    mods = list(model1,model2,model3,model4)
    fs = list(f1,f2,f3,f4)
    
    minrs = which(rs == min(rs))
    
    
    for(s in sid){
      minrs = s
      mod = mods[[minrs]]
      f = fs[[minrs]]
      
      if(minrs == 1){
        ret_er = try(zerodis <- uniroot(f,c(1,100),a=c1[3],b = c1[2],c=c1[1])$root,
                     silent = T)
      }else if(minrs == 2){
        ret_er = try(zerodis <- uniroot(f,c(1,100),a=c2[2],b = c2[1])$root,
                     silent = T)
      }else if(minrs == 3){
        ret_er = try(zerodis <- uniroot(f,c(1,100),a=c3[2],b = c3[1])$root,
                     silent = T)
      }else if(minrs == 4){
        ret_er = try(zerodis <- uniroot(f,c(1,100),a=c4[4],b = c4[3],c = c4[2],d = c4[1])$root,
                     silent = T)
      }
      
      if(class(ret_er) %in% 'try-error'){
        print('try next')
      }else{
        break
      }
    }
    
    fetch_by_dis_withtws <- function(dis){
      longadd = (longdif/disdif)*dis
      latadd = (latdif/disdif)*dis
      
      disdf = data.frame(dis = dis)
      twsproj = predict(mod,disdf)
      
      #if(twsproj >= 0){
      #  disdf = data.frame(dis = zerodis)
      #  twsproj = predict(mod,disdf)
      
      #  longadd = (longdif/disdif)*zerodis
      #  latadd = (latdif/disdif)*zerodis
      #}
      
      aimpoints = data.frame(
        long = longadd + cen1[,1],
        lat = latadd + cen1[,2]
        #tws = twsproj
      )
      return(aimpoints)
    }
    
    len_dis = length(dis)
    northmove = dis[len_dis]+northdis
    extdis = northmove
    #extdis = c(seq(dis[len_dis],northmove,unitdis),northmove)
    #extdis = extdis[which(extdis>dis[len_dis])]
    
    aimloc = lapply(extdis,
                    fetch_by_dis_withtws)
    aimloc = do.call('rbind',
                     aimloc)
    
    return(aimloc)
  }
  
  borderdf2 = borderdf[which(borderdf$long >= 88.125),]
  borderdf2 = borderdf2[seq(1,nrow(borderdf2),1),]
  
  calc_increasing_vector_reg2 <- function(i,northdis = 12){
    print(i)
    tmpborder = borderdf2[i,]
    
    if(mode == 'ssp245'){
      cen1 = ret_cen1[2,]
    }else{
      cen1 = ret_cen2[2,]
    }
    
    dis = pointDistance(cen1[,1:2],tmpborder[,1:2],
                        lonlat = T)
    dis = dis / 1000
    
    longdif = tmpborder[,1] - cen1[,1]
    latdif = tmpborder[,2] - cen1[,2]
    
    disdif = sqrt(longdif^2 + latdif^2)
    
    # generate equal distance by 5
    unitdis = disdif / 50
    dis = unitdis * seq(1,50,1)
    
    fetch_by_dis <- function(dis){
      longadd = (longdif/disdif)*dis
      latadd = (latdif/disdif)*dis
      
      aimpoints = data.frame(
        long = longadd + cen1[,1],
        lat = latadd + cen1[,2]
      )
      return(aimpoints)
    }
    
    
    points_on_theline = fetch_by_dis(dis)
    
    twsonroute = extract(rast,points_on_theline)
    
    naid = which(is.na(twsonroute))
    if(length(naid)>0){
      dis = dis[-naid]
      twsonroute = twsonroute[-naid]
    }
    
    model1 = lm(twsonroute ~ dis + I(dis^2))
    model2 = lm(twsonroute ~ exp(dis))
    model3 = lm(twsonroute ~ dis)
    model4 = lm(twsonroute ~ dis + I(dis^2)+I(dis^0.5))
    
    c1 = model1$coefficients
    f1 <- function(dis,a,b,c){return(c+ dis * b+ dis^2 * a)}
    c2 = model2$coefficients
    f2 <- function(dis,a,b){return(b+a*exp(dis))}
    c3 = model3$coefficients
    f3 <- function(dis,a,b){return(b+a*dis)}
    
    c4 = model4$coefficients
    f4 <- function(dis,a,b,c,d){return(d+c*dis+b* dis^2 + a*dis^0.5)}
    
    r1 = caret::RMSE(model1$fitted.values,twsonroute)
    r2 = caret::RMSE(model2$fitted.values,twsonroute)
    r3 = caret::RMSE(model3$fitted.values,twsonroute)
    r4 = caret::RMSE(model4$fitted.values,twsonroute)
    
    rs = c(r1,r2,r3,r4)
    
    print(paste0('Model1: ',r1))
    print(paste0('Model4: ',r4))
    print(paste0('Model3: ',r3))
    
    sid = order(rs,decreasing = F)
    
    mods = list(model1,model2,model3,model4)
    fs = list(f1,f2,f3,f4)
    
    minrs = which(rs == min(rs))
    
    
    for(s in sid){
      minrs = s
      mod = mods[[minrs]]
      f = fs[[minrs]]
      
      if(minrs == 1){
        ret_er = try(zerodis <- uniroot(f,c(1,100),a=c1[3],b = c1[2],c=c1[1])$root,
                     silent = T)
      }else if(minrs == 2){
        ret_er = try(zerodis <- uniroot(f,c(1,100),a=c2[2],b = c2[1])$root,
                     silent = T)
      }else if(minrs == 3){
        ret_er = try(zerodis <- uniroot(f,c(1,100),a=c3[2],b = c3[1])$root,
                     silent = T)
      }else if(minrs == 4){
        ret_er = try(zerodis <- uniroot(f,c(1,100),a=c4[4],b = c4[3],c = c4[2],d = c4[1])$root,
                     silent = T)
      }
      
      
      if(class(ret_er) %in% 'try-error'){
        print('try next')
      }else{
        break
      }
    }
    
    fetch_by_dis_withtws <- function(dis){
      longadd = (longdif/disdif)*dis
      latadd = (latdif/disdif)*dis
      
      disdf = data.frame(dis = dis)
      twsproj = predict(mod,disdf)
      
      #if(twsproj >= 0){
      #  disdf = data.frame(dis = zerodis)
      #  twsproj = predict(mod,disdf)
      #  
      #  longadd = (longdif/disdif)*zerodis
      #  latadd = (latdif/disdif)*zerodis
      #}
      
      aimpoints = data.frame(
        long = longadd + cen1[,1],
        lat = latadd + cen1[,2]
        #tws = twsproj
      )
      return(aimpoints)
    }
    
    len_dis = length(dis)
    northmove = dis[len_dis]+northdis
    extdis = northmove
    #extdis = c(seq(dis[len_dis],northmove,unitdis),northmove)
    #extdis = extdis[which(extdis>dis[len_dis])]
    
    aimloc = lapply(extdis,fetch_by_dis_withtws)
    aimloc = do.call('rbind',aimloc)
    
    
    return(aimloc)
  }
  
  northdiss = c(0,0.25,0.5,0.75,seq(1,7,1))
  area_increase = 1
  for(northdis in northdiss){
    
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/inititial_move_borders.R")
    retd = inititial_move_borders(borderdf1,
                                  borderdf2,
                                  tibet,northdis,mode)
    d1 = retd[[1]]
    d2 = retd[[2]]
    
    print(northdis)
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/cal_increasing_area.R")
    increaing_area = cal_increasing_area(d1,d2,borderdf,
                                         tibet,
                                         northdis)
    print(increaing_area)
    area_increase  = c(area_increase,increaing_area)
  }
  area_increase = area_increase[-1]
  area_increase[1] = 0
  
  proj_expand = as.numeric(proj_expand)
  solve_fun <- function(proj_expand,area_increase,northdiss){
    areac = c(proj_expand,area_increase)
    ids = order(areac,decreasing = F)
    areac = areac[ids]
    loc1 = which(ids ==1)
    loc1f = loc1-1
    loc1a = loc1+1
    
    north1 = northdiss[which(area_increase == areac[loc1f])]
    north2 = northdiss[which(area_increase == areac[loc1a])]
    
    ret = (north1 -north2)/(areac[loc1f]-areac[loc1a]) * (areac[loc1f]-proj_expand)
    ret = north1 - ret
    return(ret)
  }
  
  if(proj_negarea<borderinarea){
    proj_northdis = solve_fun(proj_expand,area_increase,northdiss)
    proj_northdis = proj_northdis *-1
    proj_northdis = as.numeric(proj_northdis)
  }else {
    proj_northdis = solve_fun(proj_expand,area_increase,northdiss)
  }
  
  
  
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/proj_north_move_border.R")
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/inititial_move_borders.R")
  retd = inititial_move_borders(borderdf1,
                                borderdf2,
                                tibet,proj_northdis,mode)
  projd1 = retd[[1]]
  projd2 = retd[[2]]
  
  proj_north_border = proj_north_move_border(projd1,
                                             projd2,
                                             borderdf)
  
  print(year)
  print(proj_expand)
  print(proj_northdis)
  return(proj_north_border)
  
  
  
  
  
  colnames(zerodf_reg1) = c('long','lat','tws245')
  df2 = rbind(rastdf,zerodf_reg1)
  
  rastdf$levels = cut(rastdf$tws245,
                      breaks = seq(-17,-2,1))
  nclass = length(unique(rastdf$levels))
  #nclass = 19
  fils= colorRampPalette(brewer.pal(9,'Spectral'))(nclass)
  fils = fils[seq(1,nclass,1)]
  
  p = ggplot()+
    geom_polygon(data = tibet,
                 aes(x = long,y = lat,group =group),
                 fill = 'transparent',
                 color = 'black')+
    geom_polygon(data = neg_shps,
                 aes(x = long,y = lat,group =group),
                 fill = 'transparent',
                 color = 'black')+
    geom_tile(data = rastdf,
              aes(x = long,y = lat,fill = levels))+
    geom_path(data = proj_north_border,
              aes(x = long,y = lat,group =group),
              color = 'blue',
              size =1)+
    scale_fill_manual(values = fils)+
    theme_bw()
  
  geom_polygon(data = neg_his[[14]],
               aes(x = long,y = lat,group =group),
               fill = 'transparent',
               color = 'black')+
    theme_bw()
  
  geom_point(data = ret_cen1,
             aes(x = x,y = y),col = 'red')+
    geom_point(data = ret_cen2,
               aes(x = x,y = y),col = 'blue')
  #geom_tile(data = borderdf,
  #          aes(x = long,y = lat),fill = 'white')+
  #geom_point(data = borderdf,
  #           aes(x = long,y = lat))
  
}
single_year_expand_border_multi_min <- function(
  year = 2020:2051,mode = 'ssp585'
){
  print(year)
  to_rast <-function(x){
    coordinates(x) = ~long + lat
    gridded(x) = T
    x = raster(x)
    return(x)
  }
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/spatial_pattern_of_tws_neg_infuture_by_year.R")
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/spatial_pattern_of_tws_neg_infuture_by_multi_year.R")
  
  df = spatial_pattern_of_tws_neg_infuture_by_multi_year(year,mode)
  
  posid = which(df[,3]>0)
  if(length(posid)>0){
    df = df[-posid,]
  }
  
  rastdf = df[,1:3]
  rast = to_rast(rastdf)
  rast <<- rast
  
  rastshps = rasterToPolygons(rast)
  neg_rast = sum(area(rastshps))/10^10
  area_unit = area(rastshps)[1]/10^10
  
  neg_points = shp_management('neg_points')
  
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/get_the_border_value_basedpoints.R")
  #borderdf = get_the_border_value_basedpoints(rast,neg_points)
  borderdf = as.data.frame(fread('output/proj_negborder_df/proj_negborder_df.csv'))
  borderinarea = read.table('main_plot_data/fig4/borderinarea.txt')[1]
  #borderdf = fortify(neg_points)
  #borderdf$tws = NA
  #borderdf = get_the_border_value(rast,neg_points)
  colnames(borderdf) = c('long','lat','tws')
  
  # import projected area diff
  #input_pos_area = 'output/future_pos_tws_area/pos_tws_area_ensemble.csv'
  #input_pos_area = 'output/future_pos_tws_area/pos_area_allcalc_mean.csv'
  input_pos_area = 'output/future_pos_tws_area_based_snow_tws/pos_area_allcalc_mean.csv'
  tibet = shp_management('tibet')
  pos_area = as.data.frame(fread(input_pos_area))
  pos_area = pos_area[3:81,]
  full_area = area(tibet)/10^6 /10000
  neg_area = full_area - pos_area
  
  
  loc_year1 = length(2020:year[1])
  loc_year2 = length(2020:year[length(year)])
  loc_year = loc_year1:loc_year2
  if(mode == 'ssp245'){
    modeid = 1
  }else{
    modeid = 2
  }
  proj_negarea = neg_area[loc_year,modeid]
  proj_negarea = min(proj_negarea)
  
  neg_shps = list.files('shp/cluster_tws_neg_shp_deter',
                        pattern = '*.shp$',full.names =T)
  neg_shps = lapply(neg_shps[1:2],shapefile)
  neg_shps = do.call(bind,neg_shps)
  
  area_negshps = sum(area(neg_shps))/10^10
  
  fillarea = borderinarea - neg_rast
  #if(fillarea <=0){
  #  fillarea =0
  #}
  
  if(proj_negarea > borderinarea){
    proj_expand = proj_negarea - neg_rast -fillarea
  }else{
    proj_expand = borderinarea - proj_negarea
  }
  
  expand_num = round(proj_expand / area_unit)
  
  # detect the centroids 
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/detect_min_twspoints_based_multis.R")
  #ret_centroid = detect_min_twspoints_based_multis()
  #ret_cen1 = ret_centroid[[1]]
  #ret_cen2 = ret_centroid[[2]]
  ret_cen1 = as.data.frame(fread('output/ret_centroid/ret_cen1.csv'))
  ret_cen2 = as.data.frame(
    fread('output/ret_centroid/ret_cen2.csv'))
  ret_cen1 <<- ret_cen1
  ret_cen2 <<- ret_cen2
  # update border and centroid df 
  i = 1:nrow(borderdf)
  update_tws_byyear_border<-function(i){
    tmp = borderdf[i,]
    long = tmp[1,1]
    lat = tmp[1,2]
    
    id = which((rastdf[,1] == long) & 
                 (rastdf[,2] == lat))
    
    updatetws = rastdf[id,3]
    return(updatetws)
  }
  
  bordertws = sapply(i,update_tws_byyear_border)
  borderdf$tws = bordertws
  
  id = which(rastdf[,1] %in% ret_cen1[,1]  &
               rastdf[,2] %in% ret_cen1[,2])[c(1,3)]
  
  ret_cen1$value = rastdf[id,3]
  
  id = which(rastdf[,1] %in% ret_cen2[,1]  &
               rastdf[,2] %in% ret_cen2[,2])[c(1,3)]
  
  ret_cen2$value = rastdf[id,3]
  
  # calc vector
  # co influence E 84 - 86.5
  borderdf1 = borderdf[which(borderdf$long <88.125 
                             #& borderdf$long >=77.5
  ),]
  borderdf1 = borderdf1[seq(1,nrow(borderdf1),1),]
  
  calc_increasing_vector_reg1 <- function(i,northdis = 12){
    print(i)
    tmpborder = borderdf1[i,]
    
    if(mode == 'ssp245'){
      cen1 = ret_cen1[1,]
    }else{
      cen1 = ret_cen2[1,]
    }
    
    dis = pointDistance(cen1[,1:2],tmpborder[,1:2],
                        lonlat = T)
    dis = dis / 1000
    
    longdif = tmpborder[,1] - cen1[,1]
    latdif = tmpborder[,2] - cen1[,2]
    
    disdif = sqrt(longdif^2 + latdif^2)
    
    # generate equal distance by 5
    unitdis = disdif / 50
    dis = unitdis * seq(1,50,1)
    
    fetch_by_dis <- function(dis){
      longadd = (longdif/disdif)*dis
      latadd = (latdif/disdif)*dis
      
      aimpoints = data.frame(
        long = longadd + cen1[,1],
        lat = latadd + cen1[,2]
      )
      return(aimpoints)
    }
    
    
    points_on_theline = fetch_by_dis(dis)
    
    twsonroute = extract(rast,points_on_theline)
    
    naid = which(is.na(twsonroute))
    if(length(naid)>0){
      dis = dis[-naid]
      twsonroute = twsonroute[-naid]
    }
    
    model1 = lm(twsonroute ~ dis + I(dis^2))
    model2 = lm(twsonroute ~ exp(dis))
    model3 = lm(twsonroute ~ dis)
    model4 = lm(twsonroute ~ dis + I(dis^2)+I(dis^0.5))
    
    c1 = model1$coefficients
    f1 <- function(dis,a,b,c){return(c+ dis * b+ dis^2 * a)}
    c2 = model2$coefficients
    f2 <- function(dis,a,b){return(b+a*exp(dis))}
    c3 = model3$coefficients
    f3 <- function(dis,a,b){return(b+a*dis)}
    
    c4 = model4$coefficients
    f4 <- function(dis,a,b,c,d){return(d+c*dis+b* dis^2 + a*dis^0.5)}
    
    r1 = caret::RMSE(model1$fitted.values,twsonroute)
    r2 = caret::RMSE(model2$fitted.values,twsonroute)
    r3 = caret::RMSE(model3$fitted.values,twsonroute)
    r4 = caret::RMSE(model4$fitted.values,twsonroute)
    
    rs = c(r1,r2,r3,r4)
    
    print(paste0('Model1: ',r1))
    print(paste0('Model4: ',r4))
    print(paste0('Model3: ',r3))
    
    sid = order(rs,decreasing = F)
    
    mods = list(model1,model2,model3,model4)
    fs = list(f1,f2,f3,f4)
    
    minrs = which(rs == min(rs))
    
    
    for(s in sid){
      minrs = s
      mod = mods[[minrs]]
      f = fs[[minrs]]
      
      if(minrs == 1){
        ret_er = try(zerodis <- uniroot(f,c(1,100),a=c1[3],b = c1[2],c=c1[1])$root,
                     silent = T)
      }else if(minrs == 2){
        ret_er = try(zerodis <- uniroot(f,c(1,100),a=c2[2],b = c2[1])$root,
                     silent = T)
      }else if(minrs == 3){
        ret_er = try(zerodis <- uniroot(f,c(1,100),a=c3[2],b = c3[1])$root,
                     silent = T)
      }else if(minrs == 4){
        ret_er = try(zerodis <- uniroot(f,c(1,100),a=c4[4],b = c4[3],c = c4[2],d = c4[1])$root,
                     silent = T)
      }
      
      if(class(ret_er) %in% 'try-error'){
        print('try next')
      }else{
        break
      }
    }
    
    fetch_by_dis_withtws <- function(dis){
      longadd = (longdif/disdif)*dis
      latadd = (latdif/disdif)*dis
      
      disdf = data.frame(dis = dis)
      twsproj = predict(mod,disdf)
      
      #if(twsproj >= 0){
      #  disdf = data.frame(dis = zerodis)
      #  twsproj = predict(mod,disdf)
      
      #  longadd = (longdif/disdif)*zerodis
      #  latadd = (latdif/disdif)*zerodis
      #}
      
      aimpoints = data.frame(
        long = longadd + cen1[,1],
        lat = latadd + cen1[,2]
        #tws = twsproj
      )
      return(aimpoints)
    }
    
    len_dis = length(dis)
    northmove = dis[len_dis]+northdis
    extdis = northmove
    #extdis = c(seq(dis[len_dis],northmove,unitdis),northmove)
    #extdis = extdis[which(extdis>dis[len_dis])]
    
    aimloc = lapply(extdis,
                    fetch_by_dis_withtws)
    aimloc = do.call('rbind',
                     aimloc)
    
    return(aimloc)
  }
  
  borderdf2 = borderdf[which(borderdf$long >= 88.125),]
  borderdf2 = borderdf2[seq(1,nrow(borderdf2),1),]
  
  calc_increasing_vector_reg2 <- function(i,northdis = 12){
    print(i)
    tmpborder = borderdf2[i,]
    
    if(mode == 'ssp245'){
      cen1 = ret_cen1[2,]
    }else{
      cen1 = ret_cen2[2,]
    }
    
    dis = pointDistance(cen1[,1:2],tmpborder[,1:2],
                        lonlat = T)
    dis = dis / 1000
    
    longdif = tmpborder[,1] - cen1[,1]
    latdif = tmpborder[,2] - cen1[,2]
    
    disdif = sqrt(longdif^2 + latdif^2)
    
    # generate equal distance by 5
    unitdis = disdif / 50
    dis = unitdis * seq(1,50,1)
    
    fetch_by_dis <- function(dis){
      longadd = (longdif/disdif)*dis
      latadd = (latdif/disdif)*dis
      
      aimpoints = data.frame(
        long = longadd + cen1[,1],
        lat = latadd + cen1[,2]
      )
      return(aimpoints)
    }
    
    
    points_on_theline = fetch_by_dis(dis)
    
    twsonroute = extract(rast,points_on_theline)
    
    naid = which(is.na(twsonroute))
    if(length(naid)>0){
      dis = dis[-naid]
      twsonroute = twsonroute[-naid]
    }
    
    model1 = lm(twsonroute ~ dis + I(dis^2))
    model2 = lm(twsonroute ~ exp(dis))
    model3 = lm(twsonroute ~ dis)
    model4 = lm(twsonroute ~ dis + I(dis^2)+I(dis^0.5))
    
    c1 = model1$coefficients
    f1 <- function(dis,a,b,c){return(c+ dis * b+ dis^2 * a)}
    c2 = model2$coefficients
    f2 <- function(dis,a,b){return(b+a*exp(dis))}
    c3 = model3$coefficients
    f3 <- function(dis,a,b){return(b+a*dis)}
    
    c4 = model4$coefficients
    f4 <- function(dis,a,b,c,d){return(d+c*dis+b* dis^2 + a*dis^0.5)}
    
    r1 = caret::RMSE(model1$fitted.values,twsonroute)
    r2 = caret::RMSE(model2$fitted.values,twsonroute)
    r3 = caret::RMSE(model3$fitted.values,twsonroute)
    r4 = caret::RMSE(model4$fitted.values,twsonroute)
    
    rs = c(r1,r2,r3,r4)
    
    print(paste0('Model1: ',r1))
    print(paste0('Model4: ',r4))
    print(paste0('Model3: ',r3))
    
    sid = order(rs,decreasing = F)
    
    mods = list(model1,model2,model3,model4)
    fs = list(f1,f2,f3,f4)
    
    minrs = which(rs == min(rs))
    
    
    for(s in sid){
      minrs = s
      mod = mods[[minrs]]
      f = fs[[minrs]]
      
      if(minrs == 1){
        ret_er = try(zerodis <- uniroot(f,c(1,100),a=c1[3],b = c1[2],c=c1[1])$root,
                     silent = T)
      }else if(minrs == 2){
        ret_er = try(zerodis <- uniroot(f,c(1,100),a=c2[2],b = c2[1])$root,
                     silent = T)
      }else if(minrs == 3){
        ret_er = try(zerodis <- uniroot(f,c(1,100),a=c3[2],b = c3[1])$root,
                     silent = T)
      }else if(minrs == 4){
        ret_er = try(zerodis <- uniroot(f,c(1,100),a=c4[4],b = c4[3],c = c4[2],d = c4[1])$root,
                     silent = T)
      }
      
      
      if(class(ret_er) %in% 'try-error'){
        print('try next')
      }else{
        break
      }
    }
    
    fetch_by_dis_withtws <- function(dis){
      longadd = (longdif/disdif)*dis
      latadd = (latdif/disdif)*dis
      
      disdf = data.frame(dis = dis)
      twsproj = predict(mod,disdf)
      
      #if(twsproj >= 0){
      #  disdf = data.frame(dis = zerodis)
      #  twsproj = predict(mod,disdf)
      #  
      #  longadd = (longdif/disdif)*zerodis
      #  latadd = (latdif/disdif)*zerodis
      #}
      
      aimpoints = data.frame(
        long = longadd + cen1[,1],
        lat = latadd + cen1[,2]
        #tws = twsproj
      )
      return(aimpoints)
    }
    
    len_dis = length(dis)
    northmove = dis[len_dis]+northdis
    extdis = northmove
    #extdis = c(seq(dis[len_dis],northmove,unitdis),northmove)
    #extdis = extdis[which(extdis>dis[len_dis])]
    
    aimloc = lapply(extdis,fetch_by_dis_withtws)
    aimloc = do.call('rbind',aimloc)
    
    
    return(aimloc)
  }
  
  northdiss = c(0,0.25,0.5,0.75,seq(1,7,1))
  area_increase = 1
  for(northdis in northdiss){
    
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/inititial_move_borders.R")
    retd = inititial_move_borders(borderdf1,
                                  borderdf2,
                                  tibet,northdis,mode)
    d1 = retd[[1]]
    d2 = retd[[2]]
    
    print(northdis)
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/cal_increasing_area.R")
    increaing_area = cal_increasing_area(d1,d2,borderdf,
                                         tibet,
                                         northdis)
    print(increaing_area)
    area_increase  = c(area_increase,increaing_area)
  }
  area_increase = area_increase[-1]
  area_increase[1] = 0
  
  proj_expand = as.numeric(proj_expand)
  solve_fun <- function(proj_expand,area_increase,northdiss){
    areac = c(proj_expand,area_increase)
    ids = order(areac,decreasing = F)
    areac = areac[ids]
    loc1 = which(ids ==1)
    loc1f = loc1-1
    loc1a = loc1+1
    
    north1 = northdiss[which(area_increase == areac[loc1f])]
    north2 = northdiss[which(area_increase == areac[loc1a])]
    
    ret = (north1 -north2)/(areac[loc1f]-areac[loc1a]) * (areac[loc1f]-proj_expand)
    ret = north1 - ret
    return(ret)
  }
  
  if(proj_negarea<borderinarea){
    proj_northdis = solve_fun(proj_expand,area_increase,northdiss)
    proj_northdis = proj_northdis *-1
    proj_northdis = as.numeric(proj_northdis)
  }else {
    proj_northdis = solve_fun(proj_expand,area_increase,northdiss)
  }
  
  
  
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/proj_north_move_border.R")
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/inititial_move_borders.R")
  retd = inititial_move_borders(borderdf1,
                                borderdf2,
                                tibet,proj_northdis,mode)
  projd1 = retd[[1]]
  projd2 = retd[[2]]
  
  proj_north_border = proj_north_move_border(projd1,
                                             projd2,
                                             borderdf)
  
  print(year)
  print(proj_expand)
  print(proj_northdis)
  return(proj_north_border)
  
  
  
  
  
  colnames(zerodf_reg1) = c('long','lat','tws245')
  df2 = rbind(rastdf,zerodf_reg1)
  
  rastdf$levels = cut(rastdf$tws245,
                      breaks = seq(-17,-2,1))
  nclass = length(unique(rastdf$levels))
  #nclass = 19
  fils= colorRampPalette(brewer.pal(9,'Spectral'))(nclass)
  fils = fils[seq(1,nclass,1)]
  
  p = ggplot()+
    geom_polygon(data = tibet,
                 aes(x = long,y = lat,group =group),
                 fill = 'transparent',
                 color = 'black')+
    geom_polygon(data = neg_shps,
                 aes(x = long,y = lat,group =group),
                 fill = 'transparent',
                 color = 'black')+
    geom_tile(data = rastdf,
              aes(x = long,y = lat,fill = levels))+
    geom_path(data = proj_north_border,
              aes(x = long,y = lat,group =group),
              color = 'blue',
              size =1)+
    scale_fill_manual(values = fils)+
    theme_bw()
  
  geom_polygon(data = neg_his[[14]],
               aes(x = long,y = lat,group =group),
               fill = 'transparent',
               color = 'black')+
    theme_bw()
  
  geom_point(data = ret_cen1,
             aes(x = x,y = y),col = 'red')+
    geom_point(data = ret_cen2,
               aes(x = x,y = y),col = 'blue')
  #geom_tile(data = borderdf,
  #          aes(x = long,y = lat),fill = 'white')+
  #geom_point(data = borderdf,
  #           aes(x = long,y = lat))
  
}
single_year_expand_border <- function(
  year = 2095,mode = 'ssp585'
){
    print(year)
    to_rast <-function(x){
      coordinates(x) = ~long + lat
      gridded(x) = T
      x = raster(x)
      return(x)
    }
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/spatial_pattern_of_tws_neg_infuture_by_year.R")
    df = spatial_pattern_of_tws_neg_infuture_by_year(year,mode)
    
    rastdf = df[,1:3]
    rast = to_rast(rastdf)
    rast <<- rast
    rastshps = rasterToPolygons(rast)
    neg_rast = sum(area(rastshps))/10^10
    area_unit = area(rastshps)[1]/10^10
    
    neg_points = shp_management('neg_points')
    
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/get_the_border_value_basedpoints.R")
    #borderdf = get_the_border_value_basedpoints(rast,neg_points)
    borderdf = as.data.frame(fread('output/proj_negborder_df/proj_negborder_df.csv'))
    borderinarea = read.table('main_plot_data/fig4/borderinarea.txt')[1]
    #borderdf = fortify(neg_points)
    #borderdf$tws = NA
    #borderdf = get_the_border_value(rast,neg_points)
    colnames(borderdf) = c('long','lat','tws')
    
    # import projected area diff
    #input_pos_area = 'output/future_pos_tws_area/pos_tws_area_ensemble.csv'
    #input_pos_area = 'output/future_pos_tws_area/pos_area_allcalc_mean.csv'
    input_pos_area = 'output/future_pos_tws_area_based_snow_tws/pos_area_allcalc_mean.csv'
    tibet = shp_management('tibet')
    pos_area = as.data.frame(fread(input_pos_area))
    pos_area = pos_area[3:81,]
    full_area = area(tibet)/10^6 /10000
    neg_area = full_area - pos_area
    
    loc_year = length(2020:year)
    if(mode == 'ssp245'){
      modeid = 1
    }else{
      modeid = 2
    }
    proj_negarea = neg_area[loc_year,modeid]
    
    neg_shps = list.files('shp/cluster_tws_neg_shp_deter',
                          pattern = '*.shp$',full.names =T)
    neg_shps = lapply(neg_shps[1:2],shapefile)
    neg_shps = do.call(bind,neg_shps)
    
    area_negshps = sum(area(neg_shps))/10^10
    
    fillarea = borderinarea - neg_rast
    #if(fillarea <=0){
    #  fillarea =0
    #}
    
    if(proj_negarea > borderinarea){
      proj_expand = proj_negarea - neg_rast -fillarea
    }else{
      proj_expand = borderinarea - proj_negarea
    }
   
  expand_num = round(proj_expand / area_unit)
  
  # detect the centroids 
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/detect_min_twspoints_based_multis.R")
  #ret_centroid = detect_min_twspoints_based_multis()
  #ret_cen1 = ret_centroid[[1]]
  #ret_cen2 = ret_centroid[[2]]
  ret_cen1 = as.data.frame(fread('output/ret_centroid/ret_cen1.csv'))
  ret_cen2 = as.data.frame(
    fread('output/ret_centroid/ret_cen2.csv'))
  ret_cen1 <<- ret_cen1
  ret_cen2 <<- ret_cen2
  # update border and centroid df 
  i = 1:nrow(borderdf)
  update_tws_byyear_border<-function(i){
    tmp = borderdf[i,]
    long = tmp[1,1]
    lat = tmp[1,2]
    
    id = which((rastdf[,1] == long) & 
                 (rastdf[,2] == lat))
    
    updatetws = rastdf[id,3]
    return(updatetws)
  }
  
  bordertws = sapply(i,update_tws_byyear_border)
  borderdf$tws = bordertws
  
  id = which(rastdf[,1] %in% ret_cen1[,1]  &
               rastdf[,2] %in% ret_cen1[,2])[c(1,3)]
  
  ret_cen1$value = rastdf[id,3]
  
  id = which(rastdf[,1] %in% ret_cen2[,1]  &
               rastdf[,2] %in% ret_cen2[,2])[c(1,3)]
  
  ret_cen2$value = rastdf[id,3]
  
  # calc vector
  # co influence E 84 - 86.5
  borderdf1 = borderdf[which(borderdf$long <88.125 
                             #& borderdf$long >=77.5
                             ),]
  borderdf1 = borderdf1[seq(1,nrow(borderdf1),1),]
  
  calc_increasing_vector_reg1 <- function(i,northdis = 12){
    print(i)
    tmpborder = borderdf1[i,]
    
    if(mode == 'ssp245'){
      cen1 = ret_cen1[1,]
    }else{
      cen1 = ret_cen2[1,]
    }
    
    dis = pointDistance(cen1[,1:2],tmpborder[,1:2],
                        lonlat = T)
    dis = dis / 1000
    
    longdif = tmpborder[,1] - cen1[,1]
    latdif = tmpborder[,2] - cen1[,2]
    
    disdif = sqrt(longdif^2 + latdif^2)
    
    # generate equal distance by 5
    unitdis = disdif / 50
    dis = unitdis * seq(1,50,1)
    
    fetch_by_dis <- function(dis){
      longadd = (longdif/disdif)*dis
      latadd = (latdif/disdif)*dis
      
      aimpoints = data.frame(
        long = longadd + cen1[,1],
        lat = latadd + cen1[,2]
      )
      return(aimpoints)
    }
    
    
    points_on_theline = fetch_by_dis(dis)
    
    twsonroute = extract(rast,points_on_theline)
    
    naid = which(is.na(twsonroute))
    if(length(naid)>0){
      dis = dis[-naid]
      twsonroute = twsonroute[-naid]
    }
    
    model1 = lm(twsonroute ~ dis + I(dis^2))
    model2 = lm(twsonroute ~ exp(dis))
    model3 = lm(twsonroute ~ dis)
    model4 = lm(twsonroute ~ dis + I(dis^2)+I(dis^0.5))
    
    c1 = model1$coefficients
    f1 <- function(dis,a,b,c){return(c+ dis * b+ dis^2 * a)}
    c2 = model2$coefficients
    f2 <- function(dis,a,b){return(b+a*exp(dis))}
    c3 = model3$coefficients
    f3 <- function(dis,a,b){return(b+a*dis)}
    
    c4 = model4$coefficients
    f4 <- function(dis,a,b,c,d){return(d+c*dis+b* dis^2 + a*dis^0.5)}
    
    r1 = caret::RMSE(model1$fitted.values,twsonroute)
    r2 = caret::RMSE(model2$fitted.values,twsonroute)
    r3 = caret::RMSE(model3$fitted.values,twsonroute)
    r4 = caret::RMSE(model4$fitted.values,twsonroute)
    
    rs = c(r1,r2,r3,r4)
    
    print(paste0('Model1: ',r1))
    print(paste0('Model4: ',r4))
    print(paste0('Model3: ',r3))
    
    sid = order(rs,decreasing = F)
    
    mods = list(model1,model2,model3,model4)
    fs = list(f1,f2,f3,f4)
    
    minrs = which(rs == min(rs))
    
    
    for(s in sid){
      minrs = s
      mod = mods[[minrs]]
      f = fs[[minrs]]
      
      if(minrs == 1){
        ret_er = try(zerodis <- uniroot(f,c(1,100),a=c1[3],b = c1[2],c=c1[1])$root,
            silent = T)
      }else if(minrs == 2){
        ret_er = try(zerodis <- uniroot(f,c(1,100),a=c2[2],b = c2[1])$root,
            silent = T)
      }else if(minrs == 3){
        ret_er = try(zerodis <- uniroot(f,c(1,100),a=c3[2],b = c3[1])$root,
            silent = T)
      }else if(minrs == 4){
        ret_er = try(zerodis <- uniroot(f,c(1,100),a=c4[4],b = c4[3],c = c4[2],d = c4[1])$root,
                     silent = T)
      }
      
      if(class(ret_er) %in% 'try-error'){
        print('try next')
      }else{
        break
      }
    }
    
    fetch_by_dis_withtws <- function(dis){
      longadd = (longdif/disdif)*dis
      latadd = (latdif/disdif)*dis
      
      disdf = data.frame(dis = dis)
      twsproj = predict(mod,disdf)
      
      #if(twsproj >= 0){
      #  disdf = data.frame(dis = zerodis)
      #  twsproj = predict(mod,disdf)
        
      #  longadd = (longdif/disdif)*zerodis
      #  latadd = (latdif/disdif)*zerodis
      #}
      
      aimpoints = data.frame(
        long = longadd + cen1[,1],
        lat = latadd + cen1[,2]
        #tws = twsproj
      )
      return(aimpoints)
    }
    
    len_dis = length(dis)
    northmove = dis[len_dis]+northdis
    extdis = northmove
    #extdis = c(seq(dis[len_dis],northmove,unitdis),northmove)
    #extdis = extdis[which(extdis>dis[len_dis])]
    
    aimloc = lapply(extdis,
                    fetch_by_dis_withtws)
    aimloc = do.call('rbind',
                     aimloc)
    
    return(aimloc)
  }
  
  borderdf2 = borderdf[which(borderdf$long >= 88.125),]
  borderdf2 = borderdf2[seq(1,nrow(borderdf2),1),]
  
  calc_increasing_vector_reg2 <- function(i,northdis = 12){
    print(i)
    tmpborder = borderdf2[i,]
    
    if(mode == 'ssp245'){
      cen1 = ret_cen1[2,]
    }else{
      cen1 = ret_cen2[2,]
    }
    
    dis = pointDistance(cen1[,1:2],tmpborder[,1:2],
                        lonlat = T)
    dis = dis / 1000
    
    longdif = tmpborder[,1] - cen1[,1]
    latdif = tmpborder[,2] - cen1[,2]
    
    disdif = sqrt(longdif^2 + latdif^2)
    
    # generate equal distance by 5
    unitdis = disdif / 50
    dis = unitdis * seq(1,50,1)
    
    fetch_by_dis <- function(dis){
      longadd = (longdif/disdif)*dis
      latadd = (latdif/disdif)*dis
      
      aimpoints = data.frame(
        long = longadd + cen1[,1],
        lat = latadd + cen1[,2]
      )
      return(aimpoints)
    }
    
    
    points_on_theline = fetch_by_dis(dis)
    
    twsonroute = extract(rast,points_on_theline)
    
    naid = which(is.na(twsonroute))
    if(length(naid)>0){
      dis = dis[-naid]
      twsonroute = twsonroute[-naid]
    }
    
    model1 = lm(twsonroute ~ dis + I(dis^2))
    model2 = lm(twsonroute ~ exp(dis))
    model3 = lm(twsonroute ~ dis)
    model4 = lm(twsonroute ~ dis + I(dis^2)+I(dis^0.5))
    
    c1 = model1$coefficients
    f1 <- function(dis,a,b,c){return(c+ dis * b+ dis^2 * a)}
    c2 = model2$coefficients
    f2 <- function(dis,a,b){return(b+a*exp(dis))}
    c3 = model3$coefficients
    f3 <- function(dis,a,b){return(b+a*dis)}
    
    c4 = model4$coefficients
    f4 <- function(dis,a,b,c,d){return(d+c*dis+b* dis^2 + a*dis^0.5)}
    
    r1 = caret::RMSE(model1$fitted.values,twsonroute)
    r2 = caret::RMSE(model2$fitted.values,twsonroute)
    r3 = caret::RMSE(model3$fitted.values,twsonroute)
    r4 = caret::RMSE(model4$fitted.values,twsonroute)
    
    rs = c(r1,r2,r3,r4)
    
    print(paste0('Model1: ',r1))
    print(paste0('Model4: ',r4))
    print(paste0('Model3: ',r3))
    
    sid = order(rs,decreasing = F)
    
    mods = list(model1,model2,model3,model4)
    fs = list(f1,f2,f3,f4)
    
    minrs = which(rs == min(rs))
    
    
    for(s in sid){
      minrs = s
      mod = mods[[minrs]]
      f = fs[[minrs]]
      
      if(minrs == 1){
        ret_er = try(zerodis <- uniroot(f,c(1,100),a=c1[3],b = c1[2],c=c1[1])$root,
                     silent = T)
      }else if(minrs == 2){
        ret_er = try(zerodis <- uniroot(f,c(1,100),a=c2[2],b = c2[1])$root,
                     silent = T)
      }else if(minrs == 3){
        ret_er = try(zerodis <- uniroot(f,c(1,100),a=c3[2],b = c3[1])$root,
                     silent = T)
      }else if(minrs == 4){
        ret_er = try(zerodis <- uniroot(f,c(1,100),a=c4[4],b = c4[3],c = c4[2],d = c4[1])$root,
                     silent = T)
      }
      
      
      if(class(ret_er) %in% 'try-error'){
        print('try next')
      }else{
        break
      }
    }
    
    fetch_by_dis_withtws <- function(dis){
      longadd = (longdif/disdif)*dis
      latadd = (latdif/disdif)*dis
      
      disdf = data.frame(dis = dis)
      twsproj = predict(mod,disdf)
      
      #if(twsproj >= 0){
      #  disdf = data.frame(dis = zerodis)
      #  twsproj = predict(mod,disdf)
      #  
      #  longadd = (longdif/disdif)*zerodis
      #  latadd = (latdif/disdif)*zerodis
      #}
      
      aimpoints = data.frame(
        long = longadd + cen1[,1],
        lat = latadd + cen1[,2]
        #tws = twsproj
      )
      return(aimpoints)
    }
    
    len_dis = length(dis)
    northmove = dis[len_dis]+northdis
    extdis = northmove
    #extdis = c(seq(dis[len_dis],northmove,unitdis),northmove)
    #extdis = extdis[which(extdis>dis[len_dis])]
    
    aimloc = lapply(extdis,fetch_by_dis_withtws)
    aimloc = do.call('rbind',aimloc)
    
    
    return(aimloc)
  }

  northdiss = c(0,0.25,0.5,0.75,seq(1,7,1))
  area_increase = 1
  for(northdis in northdiss){
    
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/inititial_move_borders.R")
    retd = inititial_move_borders(borderdf1,
                                  borderdf2,
                                  tibet,northdis,mode)
    d1 = retd[[1]]
    d2 = retd[[2]]
    
    print(northdis)
    source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/cal_increasing_area.R")
    increaing_area = cal_increasing_area(d1,d2,borderdf,
                                         tibet,
                                         northdis)
    print(increaing_area)
    area_increase  = c(area_increase,increaing_area)
  }
  area_increase = area_increase[-1]
  area_increase[1] = 0
  
  proj_expand = as.numeric(proj_expand)
  solve_fun <- function(proj_expand,area_increase,northdiss){
    areac = c(proj_expand,area_increase)
    ids = order(areac,decreasing = F)
    areac = areac[ids]
    loc1 = which(ids ==1)
    loc1f = loc1-1
    loc1a = loc1+1
    
    north1 = northdiss[which(area_increase == areac[loc1f])]
    north2 = northdiss[which(area_increase == areac[loc1a])]
    
    ret = (north1 -north2)/(areac[loc1f]-areac[loc1a]) * (areac[loc1f]-proj_expand)
    ret = north1 - ret
    return(ret)
  }
   
  if(proj_negarea<borderinarea){
    proj_northdis = solve_fun(proj_expand,area_increase,northdiss)
    proj_northdis = proj_northdis *-1
    proj_northdis = as.numeric(proj_northdis)
  }else {
    proj_northdis = solve_fun(proj_expand,area_increase,northdiss)
  }
  
 
  
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/proj_north_move_border.R")
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/inititial_move_borders.R")
  retd = inititial_move_borders(borderdf1,
                                borderdf2,
                                tibet,proj_northdis,mode)
  projd1 = retd[[1]]
  projd2 = retd[[2]]
  
  proj_north_border = proj_north_move_border(projd1,
                                             projd2,
                                             borderdf)

  print(year)
  print(proj_expand)
  print(proj_northdis)
  return(proj_north_border)
  
  
  
  
  
  colnames(zerodf_reg1) = c('long','lat','tws245')
  df2 = rbind(rastdf,zerodf_reg1)
  
  rastdf$levels = cut(rastdf$tws245,
                      breaks = seq(-17,-2,1))
  nclass = length(unique(rastdf$levels))
  #nclass = 19
  fils= colorRampPalette(brewer.pal(9,'Spectral'))(nclass)
  fils = fils[seq(1,nclass,1)]
  
  p = ggplot()+
    geom_polygon(data = tibet,
                 aes(x = long,y = lat,group =group),
                 fill = 'transparent',
                 color = 'black')+
    geom_polygon(data = neg_shps,
                 aes(x = long,y = lat,group =group),
                 fill = 'transparent',
                 color = 'black')+
    geom_tile(data = rastdf,
              aes(x = long,y = lat,fill = levels))+
    geom_path(data = proj_north_border,
              aes(x = long,y = lat,group =group),
              color = 'blue',
              size =1)+
    scale_fill_manual(values = fils)+
    theme_bw()
    
    geom_polygon(data = neg_his[[14]],
                 aes(x = long,y = lat,group =group),
                 fill = 'transparent',
                 color = 'black')+
    theme_bw()
    
    geom_point(data = ret_cen1,
               aes(x = x,y = y),col = 'red')+
    geom_point(data = ret_cen2,
               aes(x = x,y = y),col = 'blue')
    #geom_tile(data = borderdf,
    #          aes(x = long,y = lat),fill = 'white')+
    #geom_point(data = borderdf,
    #           aes(x = long,y = lat))
  
}
years1 = c(2022,2084,2098)
years2 = c(2022,2097,2098)

input_border245 = paste0('main_plot_data/fig4/fig4bc/border_ssp245_',
                         years1,'.csv')
input_border585 = paste0('main_plot_data/fig4/fig4bc/border_ssp585_',
                         years2,'.csv')


d1 = as.data.frame(fread(input_border245[1]))

b1 = as.data.frame(fread(input_border245[1]))
b11 = b1[1:140,]
b12 = b1[141:nrow(b1),]
latb12 = b12$lat
id = order(latb12,decreasing = T)
b12 = b12[id,]
b1 = rbind(b11,b12)
fwrite(b1,input_border245[1])

b1 = as.data.frame(fread(input_border245[3]))
b11 = b1[1:103,]
b12 = b1[104:nrow(b1),]
latb12 = b12$lat
id = order(latb12,decreasing = T)
b12 = b12[id,]
b1 = rbind(b11,b12)
fwrite(b1,input_border245[3])


b1 = as.data.frame(fread(input_border585[1]))
b11 = b1[1:140,]
b12 = b1[141:nrow(b1),]
latb12 = b12$lat
id = order(latb12,decreasing = T)
b12 = b12[id,]
b1 = rbind(b11,b12)
fwrite(b1,input_border585[1])





b1 = as.data.frame(fread(input_border585[1]))
p = ggplot(data = b1,aes(x = long,y = lat),size = 1)+
  geom_path()
b11 = b1[1:137,]
b12 = b1[138:nrow(b1),]
latb12 = b12$lat
id = order(latb12,decreasing = T)
b12 = b12[id,]
b1 = rbind(b11,b12)
fwrite(b1,output_border585[1])

p = ggplot()+
  geom_point(data = bordf245[which(bordf245$group == 'ssp245_1'),],
            aes(x = long,y = lat,group =group,
                color = factor(year)),
            #color = cols_border,
            size =0.8)+
  geom_path(data = bordf245[which(bordf245$group == 'ssp245_1'),],
             aes(x = long,y = lat,group =group,
                 color = factor(year)),
             #color = cols_border,
             size =0.8)+
  facet_wrap(~type,ncol = 1)
spatial_pattern_of_tws_neg_infuture_by_multi_year<-function(
  year = 2020:2051,mode = 'ssp245'
){
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/import_tws_raster.R")
  library(data.table)
  #twsdf = import_tws_raster()
  #twsdf1 = twsdf[[1]]
  #twsdf2 = twsdf[[2]]
  
  #loc1 = twsdf1[,1:2]
  #loc2 = twsdf2[,1:2]
  
  #fwrite(loc1,'main_plot_data/fig4/loc1.csv')
  #fwrite(loc2,'main_plot_data/fig4/loc2.csv')
  
  loc1 = as.data.frame(fread('main_plot_data/fig4/loc1.csv'))
  loc2 = as.data.frame(fread('main_plot_data/fig4/loc2.csv'))
  
  input = 'output_random_hisbase/proj_rasttws_tibet_withhist_final/'
  input1 = list.files(input,full.names = T)[1]
  input2 = list.files(input,full.names = T)[2]
  
  # ssp 245
  if(mode == 'ssp245'){
    input1_245 = paste0(input1,'/ssp245/proj_tws_subs1_tibet_ensemble.csv')
    input2_245 = paste0(input2,'/ssp245/proj_tws_subs2_tibet_ensemble.csv')
    
  }else{
    input1_245 = paste0(input1,'/ssp585/proj_tws_subs1_tibet_ensemble.csv')
    input2_245 = paste0(input2,'/ssp585/proj_tws_subs2_tibet_ensemble.csv')
  }
  
  tws1_245 = as.data.frame(fread(input1_245))
  tws2_245 = as.data.frame(fread(input2_245))
  
  loc2020_2099= 199:1152
  tws1_245 = tws1_245[loc2020_2099,]
  tws2_245 = tws2_245[loc2020_2099,]
  
  
  tws1_245 = t(tws1_245)
  tws2_245 = t(tws2_245)
  
  
  cal_fun_monmean_annsum_by_year <-function(x,year){
    x = as.numeric(x)
    x = x[-c(949:954)]
    
    sid = length(2020:year)*12-11
    eid = length(2020:year)*12
    x = x[sid:eid]
    
    xm = matrix(x,nrow = 12)
    xm = apply(xm,1,mean,na.rm = T)
    xa = sum(xm,na.rm = T)
    return(xa)
  }
  
  
  multi245 = 1
  multi585 = 1
  for(ys in year){
    tws1_245_by_year = apply(tws1_245,1,cal_fun_monmean_annsum_by_year,
                             year = ys)
    tws2_245_by_year = apply(tws2_245,1,cal_fun_monmean_annsum_by_year,
                             year = ys)
    
    multi245 = cbind(multi245,tws1_245_by_year)
    multi585 = cbind(multi585,tws2_245_by_year)
  }
  multi245 = multi245[,-1]
  multi585 = multi585[,-1]
  
  multi245 = apply(multi245,1,mean,na.rm = T)
  multi585 = apply(multi585,1,mean,na.rm = T)
  
  tws245 = c(multi245,
             multi585)
  
  df = data.frame(
    long = c(loc1[,1],loc2[,1]),
    lat = c(loc1[,2],loc2[,2]),
    tws245 = tws245
  )
  
  
  return(df)
 
}
spatial_pattern_of_tws_neg_infuture_by_year_model1<-function(
  year = 2020,mode = 'ssp245'
){
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/import_tws_raster.R")
  library(data.table)
  twsdf = import_tws_raster()
  twsdf1 = twsdf[[1]]
  twsdf2 = twsdf[[2]]
  
  loc1 = twsdf1[,1:2]
  loc2 = twsdf2[,1:2]
  
  input = 'output_random_hisbase/proj_rasttws_tibet_withhist_final/'
  input1 = list.files(input,full.names = T)[1]
  input2 = list.files(input,full.names = T)[2]
  
  # ssp 245
  if(mode == 'ssp245'){
    input1_245 = paste0(input1,'/ssp245/proj_tws_subs1_tibet_ACCESS-ESM1-5.csv')
    input2_245 = paste0(input2,'/ssp245/proj_tws_subs2_tibet_ACCESS-ESM1-5.csv')
    
  }else{
    input1_245 = paste0(input1,'/ssp585/proj_tws_subs1_tibet_ACCESS-ESM1-5.csv')
    input2_245 = paste0(input2,'/ssp585/proj_tws_subs2_tibet_ACCESS-ESM1-5.csv')
  }
  
  tws1_245 = as.data.frame(fread(input1_245))
  tws2_245 = as.data.frame(fread(input2_245))
  
  loc2020_2099= 199:1152
  tws1_245 = tws1_245[loc2020_2099,]
  tws2_245 = tws2_245[loc2020_2099,]
  
  
  tws1_245 = t(tws1_245)
  tws2_245 = t(tws2_245)
  
  cal_fun_monmean_annsum_by_year <-function(x,year){
    x = as.numeric(x)
    x = x[-c(949:954)]
    
    sid = length(2020:year)*12-11
    eid = length(2020:year)*12
    x = x[sid:eid]
    
    xm = matrix(x,nrow = 12)
    xm = apply(xm,1,mean,na.rm = T)
    xa = sum(xm,na.rm = T)
    return(xa)
  }
  
  tws1_245_by_year = apply(tws1_245,1,cal_fun_monmean_annsum_by_year,
                           year = year)
  tws2_245_by_year = apply(tws2_245,1,cal_fun_monmean_annsum_by_year,
                           year = year)
  
  
  tws245 = c(tws1_245_by_year,
             tws2_245_by_year)
  
  df = data.frame(
    long = c(loc1[,1],loc2[,1]),
    lat = c(loc1[,2],loc2[,2]),
    tws245 = tws245
  )
  
  naid = which(is.na(df$tws245))
  if(length(naid)>0){
    df = df[-naid,]
  }
  #df = df[which(df$tws245<=0),]
  df$level = cut(df$tws245,
                 breaks = c(seq(round(min(df$tws245))-1,
                                round(max(df$tws245))+1,0.5)))
  library(RColorBrewer)
  nclass = length(unique(df$level))
  cols = colorRampPalette(brewer.pal(9,'Spectral'))(nclass)
  
  source("/home/share/R_project/xinjiang_vapor/shp_management.R")
  input_negcluster = 'shp/cluster_tws_neg_shp_deter'
  input_negcluster = list.files(input_negcluster,
                                full.names = T,
                                pattern = '*.shp$')[1:2]
  neg_shps = do.call(bind,lapply(input_negcluster,shapefile))
  
  tibet = shp_management('tibet')
  dem = raster('Data/global_dem/elevation_10KMmd_SRTM.tif')
  dem = raster::crop(dem,extent(tibet))
  dem = raster::mask(dem,neg_shps)
  
  demdf = as.data.frame(dem,xy = T)
  colnames(demdf) = c('long','lat','h')
  naid = which(is.na(demdf$h))
  demdf = demdf[-naid,]
  moundf = fread('output/mountdf/moundf.csv')
  moundf = as.data.frame(moundf)
  colnames(moundf) = c('h','long','lat','xy')
  p = ggplot()+
    
    geom_tile(data = df,aes(x = long,y = lat,
                            fill = level),
              alpha = 0.8)+
    #scale_fill_brewer(palette = 'Spectral')+
    scale_fill_manual(values = cols)+
    geom_raster(data = moundf,aes(
      x = long,y = lat,alpha = h
    ))+
    scale_alpha('',range = c(0.6,0),guide = F)+
    theme_bw()
  p
  
  df$type =paste0('Year',year)
  return(df)
  tws1_245 = as.data.frame(fread(input1_245))
  tws2_245 = as.data.frame(fread(input2_245))
  
  tws1_245 = t(tws1_245)
  tws2_245 = t(tws2_245)
  
  naid = which(is.na(tws1_245[,1]))
  tws1_245 = tws1_245[-naid,]
  loc1 = loc1[-naid,]
  naid = which(is.na(tws2_245[,1]))
  tws2_245 = tws2_245[-naid,]
  loc2 = loc2[-naid,]
  
  
  calc_mmk_tp1_245<-function(i){
    source("/home/share/R_project/xinjiang_vapor/mmkTrend.R")
    x = tws1_245[i,]
    x = as.numeric(x)
    xm <- mmkTrend(x)$Zc
    print(i)
    return(xm)
  }
  calc_mmk_tp2_245<-function(i){
    source("/home/share/R_project/xinjiang_vapor/mmkTrend.R")
    x = tws2_245[i,]
    x = as.numeric(x)
    xm <- mmkTrend(x)$Zc
    return(xm)
  }
  i = 1:nrow(tws1_245)
  library(doParallel)
  i <<- i
  tws1_245 <<- tws1_245
  cl = makeCluster(10)
  clusterExport(cl,c('i','tws1_245'))
  tws1_mmk = parLapply(cl,i,calc_mmk_tp1_245)
  stopCluster(cl)
  tws1_mmk = do.call('c',tws1_mmk)
  
  i = 1:nrow(tws2_245)
  library(doParallel)
  i <<- i
  tws2_245 <<- tws2_245
  cl = makeCluster(10)
  clusterExport(cl,c('i','tws2_245'))
  tws2_mmk = parLapply(cl,i,calc_mmk_tp2_245)
  stopCluster(cl)
  tws2_mmk = do.call('c',tws2_mmk)
  
  
  
  #tws1_mmk = apply(tws1_245,1,calc_mmk)
  #tws2_mmk = apply(tws2_245,1,calc_mmk)
  
  tws245 = c(tws1_mmk,tws2_mmk)
  df = data.frame(
    long = c(loc1[,1],loc2[,1]),
    lat = c(loc1[,2],loc2[,2]),
    tws245 = tws245
  )
  
  df$level = cut(df$tws245,
                 breaks = c(-35,seq(-15,-6,1)))
  library(RColorBrewer)
  nclass = length(unique(df$level))
  cols = colorRampPalette(brewer.pal(9,'Spectral'))(30)
  cols = c(cols[1:11])
  p1 = ggplot()+
    geom_tile(data = df,aes(x = long,y = lat,
                            fill = level))+
    #scale_fill_brewer(palette = 'Spectral')+
    scale_fill_manual(values = cols)+
    theme_bw()
}
spatial_pattern_of_tws_neg_infuture_by_year<-function(
  year = 2020,mode = 'ssp245'
){
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/import_tws_raster.R")
  library(data.table)
  #twsdf = import_tws_raster()
  #twsdf1 = twsdf[[1]]
  #twsdf2 = twsdf[[2]]
  
  #loc1 = twsdf1[,1:2]
  #loc2 = twsdf2[,1:2]
  
  #fwrite(loc1,'main_plot_data/fig4/loc1.csv')
  #fwrite(loc2,'main_plot_data/fig4/loc2.csv')

  loc1 = as.data.frame(fread('main_plot_data/fig4/loc1.csv'))
  loc2 = as.data.frame(fread('main_plot_data/fig4/loc2.csv'))
  
  input = 'output_random_hisbase/proj_rasttws_tibet_withhist_final/'
  input1 = list.files(input,full.names = T)[1]
  input2 = list.files(input,full.names = T)[2]
  
  # ssp 245
  if(mode == 'ssp245'){
    input1_245 = paste0(input1,'/ssp245/proj_tws_subs1_tibet_ensemble.csv')
    input2_245 = paste0(input2,'/ssp245/proj_tws_subs2_tibet_ensemble.csv')
    
  }else{
    input1_245 = paste0(input1,'/ssp585/proj_tws_subs1_tibet_ensemble.csv')
    input2_245 = paste0(input2,'/ssp585/proj_tws_subs2_tibet_ensemble.csv')
  }
  
  tws1_245 = as.data.frame(fread(input1_245))
  tws2_245 = as.data.frame(fread(input2_245))
  
  loc2020_2099= 199:1152
  tws1_245 = tws1_245[loc2020_2099,]
  tws2_245 = tws2_245[loc2020_2099,]
  
  
  tws1_245 = t(tws1_245)
  tws2_245 = t(tws2_245)
  
  tws1sum = apply(tws1_245,1,sum)
  tws2sum = apply(tws2_245,1,sum)
  
  na1 = which(is.na(tws1sum))
  na2 = which(is.na(tws2sum))
  if(length(na1)>0){
    loc1 = loc1[-na1,]
    tws1_245 = tws1_245[-na1,]
  }
  if(length(na2)>0){
    loc2 = loc2[-na2,]
    tws2_245 = tws2_245[-na2,]  
  }
  
  
  cal_fun_monmean_annsum_by_year <-function(x,year){
    x = as.numeric(x)
    x = x[-c(949:954)]
    
    sid = length(2020:year)*12-11
    eid = length(2020:year)*12
    x = x[sid:eid]
    
    xm = matrix(x,nrow = 12)
    xm = apply(xm,1,mean,na.rm = T)
    xa = sum(xm,na.rm = T)
    return(xa)
  }
  
  tws1_245_by_year = apply(tws1_245,1,cal_fun_monmean_annsum_by_year,
                           year = year)
  tws2_245_by_year = apply(tws2_245,1,cal_fun_monmean_annsum_by_year,
                           year = year)
  
  
  tws245 = c(tws1_245_by_year,
             tws2_245_by_year)
  
  df = data.frame(
    long = c(loc1[,1],loc2[,1]),
    lat = c(loc1[,2],loc2[,2]),
    tws245 = tws245
  )
  
  naid = which(is.na(df$tws245))
  if(length(naid)>0){
    df = df[-naid,]
  }
  df = df[which(df$tws245<=0),]
  df$level = cut(df$tws245,
                 breaks = c(seq(round(min(df$tws245))-1,
                                round(max(df$tws245))+1,0.5)))
  library(RColorBrewer)
  nclass = length(unique(df$level))
  cols = colorRampPalette(brewer.pal(9,'Spectral'))(nclass)
  
  source("/home/share/R_project/xinjiang_vapor/shp_management.R")
  input_negcluster = 'shp/cluster_tws_neg_shp_deter'
  input_negcluster = list.files(input_negcluster,
                                full.names = T,
                                pattern = '*.shp$')[1:2]
  neg_shps = do.call(bind,lapply(input_negcluster,shapefile))
  
  tibet = shp_management('tibet')
  dem = raster('Data/global_dem/elevation_10KMmd_SRTM.tif')
  dem = raster::crop(dem,extent(tibet))
  dem = raster::mask(dem,neg_shps)
  
  demdf = as.data.frame(dem,xy = T)
  colnames(demdf) = c('long','lat','h')
  naid = which(is.na(demdf$h))
  demdf = demdf[-naid,]
  moundf = fread('output/mountdf/moundf.csv')
  moundf = as.data.frame(moundf)
  colnames(moundf) = c('h','long','lat','xy')
  p = ggplot()+
    
    geom_tile(data = df,aes(x = long,y = lat,
                            fill = level),
              alpha = 0.8)+
    #scale_fill_brewer(palette = 'Spectral')+
    scale_fill_manual(values = cols)+
    geom_raster(data = moundf,aes(
      x = long,y = lat,alpha = h
    ))+
    scale_alpha('',range = c(0.6,0),guide = F)+
    theme_bw()
  p
  
  df$type =paste0('Year',year)
  return(df)
  tws1_245 = as.data.frame(fread(input1_245))
  tws2_245 = as.data.frame(fread(input2_245))
  
  tws1_245 = t(tws1_245)
  tws2_245 = t(tws2_245)
  
  naid = which(is.na(tws1_245[,1]))
  tws1_245 = tws1_245[-naid,]
  loc1 = loc1[-naid,]
  naid = which(is.na(tws2_245[,1]))
  tws2_245 = tws2_245[-naid,]
  loc2 = loc2[-naid,]
  
  
  calc_mmk_tp1_245<-function(i){
    source("/home/share/R_project/xinjiang_vapor/mmkTrend.R")
    x = tws1_245[i,]
    x = as.numeric(x)
    xm <- mmkTrend(x)$Zc
    print(i)
    return(xm)
  }
  calc_mmk_tp2_245<-function(i){
    source("/home/share/R_project/xinjiang_vapor/mmkTrend.R")
    x = tws2_245[i,]
    x = as.numeric(x)
    xm <- mmkTrend(x)$Zc
    return(xm)
  }
  i = 1:nrow(tws1_245)
  library(doParallel)
  i <<- i
  tws1_245 <<- tws1_245
  cl = makeCluster(10)
  clusterExport(cl,c('i','tws1_245'))
  tws1_mmk = parLapply(cl,i,calc_mmk_tp1_245)
  stopCluster(cl)
  tws1_mmk = do.call('c',tws1_mmk)
  
  i = 1:nrow(tws2_245)
  library(doParallel)
  i <<- i
  tws2_245 <<- tws2_245
  cl = makeCluster(10)
  clusterExport(cl,c('i','tws2_245'))
  tws2_mmk = parLapply(cl,i,calc_mmk_tp2_245)
  stopCluster(cl)
  tws2_mmk = do.call('c',tws2_mmk)
  
  
  
  #tws1_mmk = apply(tws1_245,1,calc_mmk)
  #tws2_mmk = apply(tws2_245,1,calc_mmk)
  
  tws245 = c(tws1_mmk,tws2_mmk)
  df = data.frame(
    long = c(loc1[,1],loc2[,1]),
    lat = c(loc1[,2],loc2[,2]),
    tws245 = tws245
  )
  
  df$level = cut(df$tws245,
                 breaks = c(-35,seq(-15,-6,1)))
  library(RColorBrewer)
  nclass = length(unique(df$level))
  cols = colorRampPalette(brewer.pal(9,'Spectral'))(30)
  cols = c(cols[1:11])
  p1 = ggplot()+
    geom_tile(data = df,aes(x = long,y = lat,
                            fill = level))+
    #scale_fill_brewer(palette = 'Spectral')+
    scale_fill_manual(values = cols)+
    theme_bw()
}
spatial_pattern_of_tws_neg_infuture<-function(
  mode = 'ssp245'
){
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/import_tws_raster.R")
  
  twsdf = import_tws_raster()
  twsdf1 = twsdf[[1]]
  twsdf2 = twsdf[[2]]
  
  loc1 = twsdf1[,1:2]
  loc2 = twsdf2[,1:2]
  
  input = 'output_random_hisbase/proj_rasttws_tibet_withhist_final/'
  input1 = list.files(input,full.names = T)[1]
  input2 = list.files(input,full.names = T)[2]
  
  # ssp 245
  if(mode == 'ssp245'){
    input1_245 = paste0(input1,'/ssp245/proj_tws_subs1_tibet_ensemble.csv')
    input2_245 = paste0(input2,'/ssp245/proj_tws_subs2_tibet_ensemble.csv')
    
  }else{
    input1_245 = paste0(input1,'/ssp585/proj_tws_subs1_tibet_ensemble.csv')
    input2_245 = paste0(input2,'/ssp585/proj_tws_subs2_tibet_ensemble.csv')
  }
  tws1_245 = as.data.frame(fread(input1_245))
  tws2_245 = as.data.frame(fread(input2_245))

  tws1_245 = t(tws1_245)
  tws2_245 = t(tws2_245)
  
  naid1 = which(is.na(apply(tws1_245,1,mean)))
  naid2 = which(is.na(apply(tws2_245,1,mean)))
  
  tws1_245 = tws1_245[-naid1,]
  tws2_245 = tws2_245[-naid2,]
  
  loc1 = loc1[-naid1,]
  loc2 = loc2[-naid2,]
  
  cal_fun_monmean_annsum <-function(x){
    x = as.numeric(x)
    loc2020 = length(2003:2020)*12-11-6
    loc2098 = 1152 - 6
    x = x[loc2020:loc2098]
    
    xm = matrix(x,nrow = 12)
    xm = apply(xm,1,mean)
    xa = sum(xm)
    return(xa)
  }
  
  tws1_245 = apply(tws1_245,1,cal_fun_monmean_annsum)
  tws2_245 = apply(tws2_245,1,cal_fun_monmean_annsum)
  
  tws245 = c(tws1_245,tws2_245)
  df = data.frame(
    long = c(loc1[,1],loc2[,1]),
    lat = c(loc1[,2],loc2[,2]),
    tws245 = tws245
  )
  
  naid = which(is.na(df$tws245))
  if(length(naid)>0){
    df = df[-naid,]
  }
  
  
  df = reshape2::melt(df,c('long','lat'))
  
  df = df[which(df$value<0),]
  df$level = cut(df$value,
                 breaks = c(seq(round(min(df$value))-1,0,1)))
  
  nclass = length(unique(df$level))
  library(RColorBrewer)
  cols = colorRampPalette(brewer.pal(9,'Spectral'))(nclass*4)
  cols = cols[seq(1,length(cols),2)]
  
  neg_shps = list.files('shp/cluster_tws_neg_shp_deter',
                        pattern = '*.shp$',full.names =T)
  neg_shps = lapply(neg_shps[1:2],shapefile)
  neg_shps = do.call(bind,neg_shps)
  
  p = ggplot()+
    geom_polygon(data = tibet,
                 aes(x = long,y = lat,group = group),
                 color = 'black',
                 size = 1,fill = 'transparent')+
    geom_tile(data = df,aes(x = long,y = lat,
                            fill = level))+
    geom_polygon(data = neg_shps,
                 aes(x = long,y = lat,group = group),
                 color = 'black',
                 size = 1,fill = 'transparent')+
    #scale_fill_distiller(palette = 'Spectral',direction = 1)+
    scale_fill_manual(values = cols)+
    facet_wrap(~variable,nrow = 1)+
    theme_bw()
  
  
  #colnames(df) = c('long','lat',toupper(mode))
  
  return(df)
  
  tws1_245 = as.data.frame(fread(input1_245))
  tws2_245 = as.data.frame(fread(input2_245))
  
  tws1_245 = t(tws1_245)
  tws2_245 = t(tws2_245)
  
  calc_mmk<-function(x){
    x = as.numeric(x)
    ret = try(xm <- mmkTrend(x)$Zc,silent = T)
    if(class(ret) == 'try-error'){
      xm = NA
    }
    return(xm)
  }
  tws1_mmk = apply(tws1_245,1,calc_mmk)
  tws2_mmk = apply(tws2_245,1,calc_mmk)
  
  tws245 = c(tws1_mmk,tws2_mmk)
  df = data.frame(
    long = c(loc1[,1],loc2[,1]),
    lat = c(loc1[,2],loc2[,2]),
    tws245 = tws245
  )
  
  df$level = cut(df$tws245,
                 breaks = c(-9,seq(-5,5,1)))
  library(RColorBrewer)
  cols = colorRampPalette(brewer.pal(9,'Spectral'))(20)
  cols = c(cols[1:6],cols[16:20])
  p1 = ggplot()+
    geom_tile(data = df,aes(x = long,y = lat,
                            fill = level))+
    #scale_fill_brewer(palette = 'Spectral')+
    scale_fill_manual(values = cols)+
    theme_bw()
}
library(caret)
library(keras)


set.seed(123)
boston = MASS::Boston
indexes = createDataPartition(boston$medv,
                              p = .85,
                              list = F)

train = boston[indexes,]
test = boston[-indexes,]

ytrain = data.frame(medv = train$medv)
xtrain = train[,1:13]

xtest = as.matrix(test[,-14])
ytest = as.matrix(test[,14])

xtrain = array(xtrain,dim = c(nrow(xtrain),13,1))
xtest = array(xtest,dim=c(nrow(xtest),13,1))

in_dim = c(dim(xtrain)[2:3])

model = keras_model_sequential() %>%
  layer_conv_1d(filters = 64,
                kernel_size = 2,
                input_shape = in_dim,
                activation = 'relu') %>%
  layer_flatten() %>%
  layer_dense(units = 32,activation = 'relu') %>%
  layer_dense(units = 1,activation = 'linear')

model %>%
  compile(loss ='mse',optimizer = 'adam')

model %>% summary()

tibet_vapor_contr_visual_p1 <- function(
  
){
  library(ggplot2)
  library(data.table)
  setwd('/media/sdb5/Vapor_projcts/Vapor_tibet')
  full_contr = fread('main_plot_data/fig1/contr_in_source_variance_new.csv')
  full_contr = as.data.frame(full_contr)
  
  contr_noloss = as.data.frame(fread('main_plot_data/fig1/contr_rate_noloss.csv'))
  
  contr_noloss = rbind(contr_noloss[1:9,],
                       contr_noloss[13,],
                       contr_noloss[10:12,])
  
  sou_names = full_contr[,1]
  sou_names = toupper(sou_names)
  
  full_contr = full_contr[,-1]
  full_contr = abs(full_contr)
  full_contr_mon = apply(full_contr,1,mean,na.rm = T)
  
  contr_noloss = contr_noloss[,-1]
  contr_noloss_mon = apply(contr_noloss,1,
                           mean,na.rm = T)
  
  id = order(full_contr_mon,decreasing = T)
  idnoloss = order(contr_noloss_mon,decreasing = T)
  
  sou1 = sou_names[id]
  sou2 = sou_names[idnoloss]
  
  full_contr_mon = full_contr_mon[id]
  contr_noloss_mon = contr_noloss_mon[idnoloss]
  
  sou1[which(sou1 =='ATO')] = 'NATO'
  sou2[which(sou2 == 'ATO')] = 'NATO'
  
  df = data.frame(
    VaporSource = sou1[1:4],
    ContributionRates = full_contr_mon[1:4],
    fill = 'Only from source'
  )
  
  df2 = data.frame(
    VaporSource = sou2[1:4],
    ContributionRates = contr_noloss_mon[1:4],
    fill = 'Considering variation in transition'
  )
  
  df = rbind(df,df2)
  library(ggrepel)
  fontsize = 14 -2
  text_theme = theme(
    legend.text = element_text(size = fontsize,color = 'black'),
    axis.text = element_text(size = fontsize,color = 'black'),
    axis.title = element_text(size = fontsize,color = 'black'),
    legend.title = element_text(size = fontsize,color = 'black'),
    strip.text = element_text(size = fontsize,color = 'black')
  )
  library(ggsci)
  fil = pal_lancet(alpha = 0.75)(9)[c(1,7)]
  
  
  p1 = ggplot()+
    geom_bar(data = df,aes(x = VaporSource,
                           y = ContributionRates,
                           fill = fill),
             alpha = 0.5,
             width = 1, 
             position = position_dodge2(1),
             stat = 'identity')+
    geom_text(data = df,
              aes(x = VaporSource,
                  y = ContributionRates+3,
                  label = paste0(round(ContributionRates,1),'%')),
              size = 4,
              position = position_dodge2(1))+
    scale_fill_manual(values = fil)+
    theme_bw()+
    text_theme+
    #facet_wrap(~order,scales = 'free',nrow = 1)+
    guides(fill = guide_legend(title = 'Vapor Source',
                               title.position = 'top',
                               nrow = 1))+
    theme(legend.position = 'none')+
    xlab('Water vapor source region')+
    ylab('Contribution rates (%)')+
    theme(panel.grid = element_line(color = 'transparent'))
  
  
  return(p1)
  
  
  
}
tibet_vapor_contr_visual_p2 <- function(
  
){
  library(ggplot2)
  library(data.table)
  setwd('/media/sdb5/Vapor_projcts/Vapor_tibet')
  full_contr = fread('main_plot_data/fig1/contr_in_source_variance_new.csv')
  full_contr = as.data.frame(full_contr)
  
  contr_noloss = as.data.frame(fread('main_plot_data/fig1/contr_rate_noloss.csv'))
  
  contr_noloss = rbind(contr_noloss[1:9,],
                       contr_noloss[13,],
                       contr_noloss[10:12,])
  
  sou_names = full_contr[,1]
  sou_names = toupper(sou_names)
  
  full_contr = full_contr[,-1]
  full_contr = abs(full_contr)
  full_contr_mon = apply(full_contr,1,mean,na.rm = T)
  
  contr_noloss = contr_noloss[,-1]
  contr_noloss_mon = apply(contr_noloss,1,
                           mean,na.rm = T)
  
  id = order(full_contr_mon,decreasing = T)
  idnoloss = order(contr_noloss_mon,decreasing = T)
  
  sou1 = sou_names[id]
  sou2 = sou_names[idnoloss]
  
  full_contr_mon = full_contr_mon[id]
  contr_noloss_mon = contr_noloss_mon[idnoloss]
  
  sou1[which(sou1 =='ATO')] = 'NATO'
  sou2[which(sou2 == 'ATO')] = 'NATO'
  
  full_contr_sum = apply(full_contr,2,sum,na.rm = T)
  sel = full_contr[id[1:4],]
  
  contr_noloss_sum = apply(contr_noloss,2,sum,na.rm = T)
  selno = contr_noloss[idnoloss[1:4],]
  
  full_select = apply(sel,2,sum,na.rm = T)
  contr_select_no = apply(selno,2,sum,na.rm = T)
  
  full_sel_rate = (full_select/full_contr_sum * 100)
  contr_sel_rate = (contr_select_no/contr_noloss_sum *100)
  
  dfrate_bar1 = data.frame(
    date = seq(as.Date('2003-01-01'),as.Date('2017-12-01'),'1 month'),
    dateid = 1:180,
    Ratio = full_sel_rate,
    fill = 'Only from source')
  
  dfrate_bar2 = data.frame(
    date = seq(as.Date('2003-01-01'),as.Date('2017-12-01'),'1 month'),
    dateid = 1:180,
    Ratio = contr_sel_rate,
    fill = 'Considering variation in transition')
  
  dfratebar = rbind(
    dfrate_bar1,dfrate_bar2
  )
  
  
  fontsize = 14 -2
  text_theme = theme(
    legend.text = element_text(size = fontsize,color = 'black'),
    axis.text = element_text(size = fontsize,color = 'black'),
    axis.title = element_text(size = fontsize,color = 'black'),
    legend.title = element_text(size = fontsize,color = 'black'),
    strip.text = element_text(size = fontsize,color = 'black')
  )
  library(ggsci)
  
  fil = pal_lancet(alpha = 0.75)(9)[c(1,7)]
  
  seg1 = data.frame(
    x = c(70,75),
    xend = c(75,100),
    y = 80,
    fill = 'Only from source'
  )
  
  seg2 = data.frame(
    x = c(60,75),
    xend = c(75,100),
    y = 80,
    fill = 'Considering variation in transition'
  )
  
  seg3 = data.frame(
    x = c(70,100),
    y = 78,
    yend = 82,
    fill = 'Only from source'
  )
  
  
  seg4 = data.frame(
    x = c(60,100),
    y = 78,
    yend = 82,
    fill = 'Considering variation in transition'
  )
  
  textdf = data.frame(
    x = c(c(72.5,67.5,87.5,87.5),c(72.5,67.5,87.5,87.5)),
    y = c(rep(81,4)+2,rep(79,4)-3),
    label = c(c(3,41,177,139),c('2%',"23%",'98%','77%')),
    fill = rep(c('Only from source','Considering variation in transition'),
               4)
  )
  p2 = ggplot()+
    geom_histogram(data = dfratebar,
                   aes(x = Ratio,fill = fill),
                   binwidth = 5,center = 2.5,
                   alpha = 0.5)+
    
    geom_vline(xintercept = 75,
               linetype = 'dashed')+
    geom_segment(data = seg1,
                 aes(x = x,xend = xend,
                     y = y,yend = y),
                 size = 0.5,
                 
                 color = 'black',
                 arrow = arrow(20,
                               length = unit(0.25,'cm'),
                               type = 'closed'))+
    geom_segment(data = seg1,
                 aes(x = xend,xend = x,
                     y = y,yend = y),
                 size = 0.5,
                 
                 color = 'black',
                 arrow = arrow(20,
                               length = unit(0.25,'cm'),
                               type = 'closed'))+
    geom_segment(data = seg2,
                 aes(x = x,xend = xend,
                     y = y,yend = y),
                 size = 0.5,
                 
                 color = 'black',
                 arrow = arrow(20,
                               length = unit(0.25,'cm'),
                               type = 'closed'))+
    geom_segment(data = seg2,
                 aes(x = xend,xend = x,
                     y = y,yend = y),
                 size = 0.5,
                 
                 color = 'black',
                 arrow = arrow(20,
                               length = unit(0.25,'cm'),
                               type = 'closed'))+
    geom_segment(data = seg3,
                 aes(x = x,xend = x,
                     y = y,yend = yend),
                 size = 0.5,
                 color = 'black')+
    geom_segment(data = seg4,
                 aes(x = x,xend = x,
                     y = y,yend = yend),
                 size = 0.5,
                 color = 'black')+
    geom_text(data = textdf,
              aes(x = x,y = y,label = label),
              size = 4,
              color = 'black')+
    scale_fill_manual(values = fil)+
    theme_bw()+
    text_theme+
    theme(legend.position = 'none',
          strip.text = element_blank())+
    facet_wrap(fill~., nrow = 1,
               scales = 'free_x')+
    ylab('Month count')+
    xlab('CR_main / CR_full (%)')+
    theme(panel.grid = element_line(color = 'transparent'))
  
  return(p2)
}
tibet_vapor_contri_visual<-function(
  
){
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/tibet_vapor_contr_visual_p1.R")
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/tibet_vapor_contr_visual_p2.R")
  source("/media/sdb5/Vapor_projcts/Vapor_tibet/R/tiebt_vapor_contr_visual3.R")
  
  p1 = tibet_vapor_contr_visual_p1()
  p2 = tibet_vapor_contr_visual_p2()
  p3 = tibet_vapor_contr_visual_p3()
  
  p1 = p1+ xlab('Source region')
  library(cowplot)
  
  p12 = plot_grid(
    p1,p2,
    rel_widths = c(1.5,2),
    rel_heights = c(1,1),nrow = 1
  )
  
  
  output = 'main_plot/fig1/contribution_rates'
  dir.create(output)
  output = paste0(output,'/cr_plot4.png')
  
  png(output,
      height= 7.5,
      width = 23.05,
      units ='cm',
      res = 800)
  
  print(p12)
  dev.off()
  
  p1leg = p1 + theme(legend.position = 'bottom')+
    guides(fill = guide_legend(nrow = 2,
                               title = 'CR type',
                               title.position = "top"))
  p2leg = p2 + theme(legend.position = 'bottom')
  p3leg = p3 + theme(legend.position = 'bottom')
  
  p1leg = as_ggplot(get_legend(p1leg))
  p2leg = as_ggplot(get_legend(p2leg))
  p3leg = as_ggplot(get_legend(p3leg))
  
  
  png('main_plot/fig1/contribution_rates/cr_leg2.png',
      height= 7.5,
      width = 23.05,
      units ='cm',
      res = 800)
  
  print(p2leg)
  dev.off()
  
  
  
  png('main_plot/fig1/contribution_rates/cr_leg1.png',
      height= 7.5,
      width = 23.05,
      units ='cm',
      res = 800)
  
  print(p1leg)
  dev.off()
  
  
  
  png('main_plot/fig1/contribution_rates/cr_leg3.png',
      height= 7.5,
      width = 23.05,
      units ='cm',
      res = 800)
  
  print(p3leg)
  dev.off()
  
  
}
tibet_vapor_contr_visual_p3<-function(
  
){
  
  fontsize = 14 -2
  text_theme = theme(
    legend.text = element_text(size = fontsize,color = 'black'),
    axis.text = element_text(size = fontsize,color = 'black'),
    axis.title = element_text(size = fontsize,color = 'black'),
    legend.title = element_text(size = fontsize,color = 'black'),
    strip.text = element_text(size = fontsize,color = 'black')
  )
  # import pme gpcc
  gpcc = data_management('gpcc_full')
  tibet = shp_management('tibet')
  #negshps = list.files('shp/cluster_tws_neg_shp_deter',
  #                     full.names = T,
  #                    pattern = '*.shp$')
  #negshps = lapply(negshps[1:2],shapefile)
  #negshps = do.call(bind,negshps)
  gpcc = crop(gpcc,extent(tibet))
  gpcc = mask(gpcc,tibet)
  gpcc = as.list(gpcc)
  
  era5 = data_management('era5_pr_include_ocean')
  era5 = mask(crop(era5,extent(tibet)),tibet)
  era5 = as.list(era5)
  
  
  prsum = lapply(gpcc,cellStats,stat = sum,na.rm = T)
  prsum = do.call('c',prsum)
  
  prera5 = lapply(era5,cellStats,stat = sum,na.rm = T)
  prera5 = do.call('c',prera5)
  stand_fun<-function(x){
    x = (x-mean(x))/sd(x)
    return(x)
  }
  
  tt_stand = as.data.frame(fread('main_plot_data/fig1/tt_release/tt_stand.csv'))
  tt_rele = as.data.frame(fread('main_plot_data/fig1/tt_release/tt_release.csv'))
  
  stand_prsum = stand_fun(prsum)
  stand_contr = stand_fun(tt_rele$tt_release)
  stand_prera5 = stand_fun(prera5)
  
  library(ggsci)
  
  fil = colorRampPalette(pal_lancet(alpha = 0.8)(9))(13)
  col = pal_lancet(alpha = 0.8)(9)[c(1,7)]
  
  # validation 
  dfpoint = data.frame(
    FLEXPART_released_vapor = stand_contr,
    GPCC_Pr = stand_prsum,
    ERA5_Pr = stand_prera5
  )
  dfpointm = reshape2::melt(dfpoint,'FLEXPART_released_vapor')
  col_pal = pal_lancet()(9)[c(1,7)]
  
  cor1 = cor.test(dfpoint$FLEXPART_released_vapor,
                  dfpoint$GPCC_Pr)
  cor2 = cor.test(dfpoint$FLEXPART_released_vapor,
                  dfpoint$ERA5_Pr)
  
  cor11 = round(as.numeric(cor1$estimate),2)
  cor21 = round(as.numeric(cor2$estimate),2)
  p11 = '1.9e-52'
  p21 = '3.1e-53'
  
  dflabel_cor = data.frame(
    x = 1,
    y = c(-0.25,-1),
    cor = c(cor11,cor21),
    p = c(p11,p21),
    variable = c('GPCC_Pr','ERA5_Pr')
  )
  
  dflabel_cor$label = paste0(
    'Cor: ',dflabel_cor$cor,'\n (p=',dflabel_cor$p,')'
  )
  
  p3 = ggplot()+
    geom_point(data = dfpointm,
               aes(x = FLEXPART_released_vapor,
                   y = value,color = variable),
               size = 3,shape = 1,
               alpha = 0.5)+
    geom_text(data = dflabel_cor,
              aes(x = x,y = y,label = label,
                  color = variable),
              size = 4,hjust = 0,
              show.legend = F)+
    scale_color_manual(values = col_pal)+
    geom_abline(slope = 1,intercept = 0)+
    theme_bw()+
    text_theme+
    theme(legend.position = 'none')+
    xlab('Simu_released_vapor')+
    ylab('Precipitation')

  return(p3)
  
}
trail_plot_3d_dem_intibet<-function(
  
){
  library(raster)
  library(data.table)
  library(RColorBrewer)
  base = '/media/sdb5/Vapor_projcts/Vapor_tibet'
  setwd(base)
  source('/home/share/R_project/xinjiang_vapor/shp_management.R')
  source('/home/share/R_project/xinjiang_vapor/data_management.R')
  
  tibet = shp_management('tibet')
  world = shp_management('world')
  
  ex_tibet = extent(tibet)
  minlat = ex_tibet[3]
  maxlat = ex_tibet[4]
  minlong = ex_tibet[1]
  maxlong = ex_tibet[2]
  
  ex_box = extent(minlong-5,maxlong+5,minlat-5,maxlat+5)
  #ex_box = as(ex_box,'SpatialPolygons')
  #crs(ex_box) = crs(tibet)
  
  shapefile(ex_box,'shp/tibet_bigger_border2/border2.shp',
            overwrite = T)
  
  #ex_box = extent(ex_box[1]+10,ex_box[2]-10,ex_box[3]+10,ex_box[4]-10)
  dem = raster('Data/global_dem/elev.0.5-deg.nc')
  
  dem1 = crop(dem,extent(0,180,-90,90))
  dem2 = crop(dem,extent(180,360,-90,90))
  extent(dem2) = extent(-180,0,-90,90)
  dem = merge(dem1,dem2)
  
  #z = raster(nrow = 60,ncol = 360)
  #extent(z) = extent(dem)
  #dem = resample(dem,z)
  
  #dem = raster('Data/global_dem/elevation_10KMmd_SRTM.tif')
  world= shp_management('world')
  dem = crop(dem,extent(-180,180,0,90))
  dem = raster::mask(dem,world)
  
  raster2matrix <-function(dem){
    xyz = as.data.frame(dem,xy = T)
    x = unique(as.numeric(xyz[,1]))
    y = unique(as.numeric(xyz[,2]))
    
    or = order(y,decreasing = F)
    
    mat = matrix(xyz[,3],nrow = length(x))
    #mat = mat[,or]
    
    rownames(mat) = x
    colnames(mat) = y
    return(mat)
  }
  
  library(rayshader)
  demdf2 = raster2matrix(dem)
  
  
  library(plotly)
  f1 <- list(
    family = "sans-serif",
    size = 18,
    color = "black")
  
  f2 <- list(
    family = "sans-serif",
    size = 14,
    color = "black")
  
  fleg = list(
    titlefont = f1,
    tickfont = f2,
    color = "black"
  )
  
  yaxis <- list(
    title = 'Latitude (degree)',
    titlefont = f1,
    tickfont = f2,
    showgrid = T,
    range = c(0,90),
    ntick = 4,
    ticktext = paste0(seq(0,90,30),'°N'),
    tickvals = seq(0,90,30)
  )
  xaxis = list(
    title = 'Longitude (degree)',
    titlefont = f1,
    tickfont = f2,
    showgrid = T,
    range = c(-180,180),
    ntick = 14,
    ticktext = c(paste0(seq(160,30,-30),'°W'),
                 paste0(0,'°'),
                 paste0(seq(30,180,30),'°E')),
    tickvals = seq(-160,180,30)
  )
  zaxis <- list(
    title = 'Altitude (m)',
    titlefont = f1,
    tickfont = f2,
    showgrid = T,
    dtick = 2000
  )
  
  
  legend_set <- list(
    font = fleg,
    borderwidth = 3)
  
  
  
  longlat  = as.data.frame(dem,xy = T)
  long = unique(as.numeric(longlat$x))
  lat = unique(as.numeric(longlat$y))
  
  traj = as.data.frame(fread('whole_time_traj/whole_time_traj_with_height_varep.csv'))
  traj1 = traj[which(traj$routeid == 1),]
  traj_group = group_by(traj,routeid)
  
  set_neg_value_zero <-function(x){
     x = as.numeric(x)
     subs<-function(x1){
       x1 = as.numeric(x1)
       if(is.na(x1)){
         x1 = x1
       }else{
         if(x1 <=0){
           x1 = 0
         }else{
           x1 = x1
         }
       }
       return(x1)
     }
     x = sapply(x,subs)
     return(x)
     
  }
  demdf2 = apply(demdf2, 2, set_neg_value_zero)
  
  scene1 = list(
    xaxis = xaxis,
    yaxis = yaxis,
    zaxis = zaxis,
    yaxis = list(title = 'Sepal Width (cm)'),
    legend = legend_set,
    aspectmode = 'manual',
    aspectratio = list(x = 1.5,y = 1,z = 0.3),
    camera = list(eye = list(x = 0, y = -1.5, z = 1)))
  
  scene2 = list(
    xaxis = xaxis,
    yaxis = yaxis,
    zaxis = zaxis,
    yaxis = list(title = 'Sepal Width (cm)'),
    legend = legend_set,
    aspectmode = 'manual',
    aspectratio = list(x = 1.5,y = 1,z = 0.3),
    camera = list(eye = list(x = 1.5, y = 0.5, z = 1)))
  
  scene3 = list(
    xaxis = xaxis,
    yaxis = yaxis,
    zaxis = zaxis,
    yaxis = list(title = 'Sepal Width (cm)'),
    legend = legend_set,
    aspectmode = 'manual',
    aspectratio = list(x = 1.5,y = 1,z = 0.3),
    camera = list(eye = list(x = 0, y = -1.5, z = 1)))
  
  world1 =crop(world,extent(-180,180,0,90))
  worlddf = fortify(world1)
  worlddf$height = -100
  worlddf = group_by(worlddf,group)
  
  fig = plot_ly() %>%
      add_trace(z= ~t(demdf2),
                x = ~long,
                y = ~lat,
                type = 'surface',
                #fill= filllevels,
                colorbar=list(title='Altitude (m)'),
                #n= 10,
                colors = 'Spectral',
                reversescale =T,
                legendgroup = 'Altitude',
                inherit = F,
                name = 'tile') %>%
      add_trace(data = traj_group,
                y = ~lat, 
                x = ~long, 
                z = ~height, 
                mode = "lines", 
                type = "scatter3d", 
                color = ~factor(region),
                
                legendgroup = 'Trajectory',
                line = list(width = 5),
                inherit = T) %>%
    add_trace(data = worlddf,
              x = worlddf$long,
              y = worlddf$lat,
              z = worlddf$height,
              type = 'scatter3d',
              line = list(color = 'black'),
              mode =  'lines')
  
  fig1 = fig %>% layout(scene = scene)
  fig2 = fig %>% layout(scene = scene2)
  
  
  
  dir.create('main_plot/elevation3d/')
  output = 'main_plot/elevation3d/elevation3d2.svg'
  orca(fig,output,width = 1500,height = 800,scale = 1)
  
  export(fig,'main_plot/test6.png',
         width = 5000,height = 2500,scale = 1.5)
  
   
}
tws_2019<-function(
  
){
  tibet = shp_management('tibet')
  tws_new = data_management('grace_new')
  
  loc_2019s = length(2003:2019)*12-11
  loc_2019e = length(2003:2019)*12
  
  tws_new = tws_new[[loc_2019s:loc_2019e]]
  
  tws_new = raster::mask(crop(tws_new,
                              tibet),
                         tibet)
  
  twsdf = as.data.frame(tws_new,xy = T)
  naid = which(is.na(twsdf[,3]))
  twsdf = twsdf[-naid,]
  
  loc = twsdf[,1:2]
  colnames(loc) = c('long','lat')
  twsdf = twsdf[,-c(1,2)]
  
  sub_calc_twsdf_ann_sum<-function(x){
    x = as.numeric(x)
    xm = matrix(x,nrow = 12)
    xsum = apply(xm,2,sum,na.rm = T)
    return(xsum)
  }
  
  tws_ann = apply(twsdf,1,sub_calc_twsdf_ann_sum)
  
  tws2019 = data.frame(
    long  = loc[,1],
    lat = loc[,2],
    tws2019 = tws_ann
  )
  
  negid = which(tws2019$tws2019 <=0)
  tws2019 =   tws2019[negid,]
  
  p = ggplot()+
    geom_polygon(data = tibet,
                 aes(x = long,y = lat,
                     group = group),
                 fill = 'transparent',color = 'black')+
    geom_tile(data = tws2019,
              aes(x = long,y = lat,fill = tws2019))+
    scale_fill_distiller(palette = 'Spectral')+
    theme_bw()
}
tws_in_tibet_analysis <-function(
  
){
  tws = data_management('grace')
  tibet = shp_management('tibet')
  
  tws = raster::mask(crop(tws,extent(tibet)),tibet)
  
  twsdf = as.data.frame(tws,xy = T)
  #colnames(twsdf) = c('long','lat','tws')
  
  naid = which(is.na(twsdf[,3]))
  twsdf = twsdf[-naid,]
  long = twsdf[,1]
  lat = twsdf[,2]
  twsdf = twsdf[,-c(1,2)]
  
  sub_calc_mmk_trend <-function(i){
    source('/home/share/R_project/xinjiang_vapor/mmkTrend.R')
    x = as.numeric(twsdf[i,])
    tmptrend = mmkTrend(x)$Zc
    return(tmptrend)
  }
  i = 1:nrow(twsdf)
  i <<- i
  twsdf<<-twsdf
  cl = makeCluster(10)
  clusterExport(cl,c('i','twsdf'))
  twsmmk = parLapply(cl,i,sub_calc_mmk_trend)
  stopCluster(cl)
  
  twsmmk = do.call('c',twsmmk)
  
  mmkdf = data.frame(long = long,lat = lat,twsmmk = twsmmk)
  mmkdf_neg = mmkdf[which(mmkdf$twsmmk<=0),]
  coordinates(mmkdf_neg) = ~long+lat
  gridded(mmkdf_neg) = T
  mmkdf_rast = raster(mmkdf_neg)
  writeRaster(mmkdf_rast,'output/mmkdf_neg_rast/mmkdf_neg_rast.tif',
        overwrite = T)
  
  mmkdf$levels = cut(mmkdf$twsmmk,
                     breaks = c(-61,seq(-20,15,5)))
  
  path = fread('whole_time_traj/whole_time_traj.csv')
  path = as.data.frame(path)
  
  world = shp_management('world')
  ex = extent(tibet)
  cluster_shps =lapply(list.files('shp/cluster_tws_neg_shp_deter/',pattern = '*.shp$',
                                  full.names = T),
                       shapefile)
  cluster_shps = do.call('bind',cluster_shps)
  
  sanjiangyuan = shp_management('sanjiangyuan')
  sanjiangyuan = spTransform(sanjiangyuan,crs(world))
  inputsubs = paste0('shp/big_scale_subs/','region',1:15,'.shp')
  bigsubs = lapply(inputsubs,shapefile)
  bigsubs = do.call('bind',bigsubs)
  world = crop(world,extent(-180,180,0,90))
  boxato_adding = extent(-82,0,20,50)
  boxato_adding = as(boxato_adding,'SpatialPolygons')
  shapefile(boxato_adding,'shp/adding_ato/adding_ato.shp')
  p = ggplot()+
    geom_tile(data = mmkdf,aes(
      x = long,y = lat,fill = levels
    ))+
    geom_polygon(data = world,
                 aes(x = long,y = lat,group = group),
                 color = 'black',size =1,
                 fill = 'transparent')+
    geom_polygon(data = boxato_adding,
                 aes(x = long,y = lat,group = group),
                 color = 'black',size =1,
                 fill = 'transparent')+
    geom_polygon(data = tibet,
                 aes(x = long,y = lat,group = group),
                 color = 'black',size =1,
                 fill = 'transparent')+
    geom_polygon(data = bigsubs,
                 aes(x = long,y = lat,group = group),
                 color = 'black',size =1,
                 fill = 'transparent')+
    geom_polygon(data = sanjiangyuan,
                 aes(x = long,y = lat,group = group),
                 color = 'black',size =1,
                 fill = 'white',alpha = 0.5)+
    geom_polygon(data = cluster_shps,
                 aes(x = long,y = lat,group = group),
                 color = 'black',size =1,
                 fill = 'transparent')+
    geom_path(data= path,
              aes(x = long,y = lat,group = factor(routeid),
                  color = region),
              size = 1,
              arrow = arrow(angle=30,length=unit(0.11,"inches"),
                    type="closed"))+
    geom_vline(xintercept = -82)+
    geom_vline(xintercept = 0)+
    
    scale_fill_brewer(palette = 'Spectral')+
    #xlim(ex[1],ex[2])+
    #ylim(ex[3],ex[4])+
    theme_bw()
  p
  
  box1 = extent(68,77.8,34.6,40)
  box1 = as(box1,'SpatialPolygons')
  box2 = extent(74.4,84,28.2,34.6)
  box2 = as(box2,'SpatialPolygons')
  
  
  
}
tws_pos_area_vs_annual_tws<-function(
  
){
  library(raster)
  source("/home/share/R_project/xinjiang_vapor/shp_management.R")
  input_shp = dir.create('shp/twsneg_border')
  input_shp = paste0('shp/twsneg_border/')
  
  type = paste0('year',2003:2016)
  
  input_shp = paste0(input_shp,type, '.shp')
  
  neg_shps_per_year = lapply(input_shp,shapefile)
  
  tibet = shp_management('tibet')
  
  pos_area = 1
  for(i in 1:14){
    tmp = tibet  - neg_shps_per_year[[i]]
    pos_area =c(pos_area, area(tmp) / 10^6)
    
  }
  
  pos_area = pos_area[-1]
  dir.create('output/pos_area')
  fwrite(data.frame(pos_area),'output/pos_area/pos_area.csv')
  return(pos_area)
}
tws_traj_height_profile_analysis <-function(
  
){
  base = '/media/sdb5/Vapor_projcts/Vapor_tibet'
  setwd(base)
  traj_df = fread('whole_time_traj/whole_time_traj.csv')
  
  
}
